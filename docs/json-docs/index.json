{
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Vintage Story JSON Reference | VintageStory Json Docs",
    "keywords": "Welcome to the Vintage Story JSON Reference If you want to learn how to mod the game, check out the tutorials on the Official Vintage Story Wiki. Using this site This site can be used in two ways: To see the functionality of a specific JSON property found within an asset. To do this, enter the exact property name in the search bar at the top-right of this page. To see what properties or options are available for specific assets. To do this, use the below Pages of Interest to find the asset type, and navigate through the properties available. JSON Properties Each JSON type has a set of properties, known as fields, that will control how it works. The following is the standard look of every field in the following pages. Each field will list its name, its recommended status, and its default value if there is one. Field statuses include: Required - Required for this JSON type, and therefore does not have a default. Recommended - Recommended for this JSON type. Optional - Optional for this JSON type. Obsolete - Obsolete and should not be used. Usually contains a link to an alternative property that should be used. Below this will be the description or usage of the property, and a link to the property type. Many JSON types have properties which contain other JSON types, so following the link will allow you to see child properties that can be included. Note that many JSON types have examples on their page. JSON Attributes Some JSON types, especially behaviors, may use attributes. Attributes are identical to properties, but will need to be placed inside of a \"attributes\" property of a relevant JSON type. All attributes will appear under the 'Attributes' title on a type. Inheritance Many JSON types use properties (extend) from other JSON types. This is referred to as inheritance. Pages that use inheritance will have the following heading near the top of their page. In this example, BlockType extends from CollectibleType, which extends from RegistryObjectType. Therefore, BlockType can use all the properties from BlockType, all the properties from CollectibleType, and all the properties from RegistryObjectType. You can click on any inherited pages to go there. Currently documented assets: Documenting JSON assets takes time! Currently, this site contains exhaustive documentation for the following asset types: Blocktypes Itemtypes Entities Recipes (All Types) Patches Behaviors Block Behaviors Pages of Interest RegistryObjectType - All blocks, items, and entities extend from this. Controls IDs and variant types. CollectibleType - Blocks and items extend from this. Anything that can be held in the inventory is counted as a collectible type. ItemType - Page for item types. Note that all JSON properties for item types come from the above CollectibleType and RegistryObjectType pages. BlockType - This lists all properties for BlockTypes. EntityType - This lists all properties for EntityTypes. Recipes: AlloyRecipe - Properties for mixing metals in a crucible. BarrelRecipe - Properties for making things in barrels. This is the main way of using liquids in recipes. ClayFormingRecipe - Properties for making clay objects using the clay forming system. CookingRecipe - Properties for making meals and other things in cooking pots. GridRecipe - Properties for making things in the crafting grid. KnappingRecipe - Properties for making stone objects using the stone/flint knapping system. SmithingRecipe - Properties for making metal objects using an anvil. JsonPatch - All properties for JSON patches. Consider using the modmaker to create these. BlockBehaviors - The base class of all Block Behaviors. Use the 'derived' section or search feature to find specific behaviors."
  },
  "jsondocs/Vintagestory.API.Client.BlendedOverlayTexture.html": {
    "href": "jsondocs/Vintagestory.API.Client.BlendedOverlayTexture.html",
    "title": "Class BlendedOverlayTexture | VintageStory Json Docs",
    "keywords": "Class BlendedOverlayTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Defines a texture to be overlayed on another texture. Open in GitHub [DocumentAsJson] public class BlendedOverlayTexture Inheritance object BlendedOverlayTexture Fields Base (Required) The path to the texture to use as an overlay. [DocumentAsJson] public AssetLocation Base Field Value AssetLocation BlendMode (Optional) (Default: Normal) The type of blend for each pixel. [DocumentAsJson] public EnumColorBlendMode BlendMode Field Value EnumColorBlendMode"
  },
  "jsondocs/Vintagestory.API.Client.CompositeTexture.html": {
    "href": "jsondocs/Vintagestory.API.Client.CompositeTexture.html",
    "title": "Class CompositeTexture | VintageStory Json Docs",
    "keywords": "Class CompositeTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds data about a texture. Also allows textures to be overlayed on top of one another. Open in GitHub [DocumentAsJson] public class CompositeTexture Inheritance object CompositeTexture Examples \"textures\": { \"charcoal\": { \"base\": \"block/coal/charcoal\" }, \"coke\": { \"base\": \"block/coal/coke\" }, \"ore-anthracite\": { \"base\": \"block/coal/anthracite\" }, \"ore-lignite\": { \"base\": \"block/coal/lignite\" }, \"ore-bituminouscoal\": { \"base\": \"block/coal/bituminous\" }, \"ember\": { \"base\": \"block/coal/ember\" } }, \"textures\": { \"ore\": { \"base\": \"block/stone/rock/{rock}1\", \"overlays\": [ \"block/stone/ore/{ore}1\" ] } }, Connected textures example (See https://discord.com/channels/302152934249070593/479736466453561345/1134187385501007962) \"textures\": { \"all\": { \"base\": \"block/stone/cobblestone/tiling/1\", \"tiles\": [ { \"base\": \"block/stone/cobblestone/tiling/*\" } ], \"tilesWidth\": 4 } } Fields Base (Required) The basic texture for this composite texture [DocumentAsJson] public AssetLocation Base Field Value AssetLocation Alpha (Optional) (Default: 255) Can be used to modify the opacity of the texture. 255 is fully opaque, 0 is fully transparent. [DocumentAsJson] public int Alpha Field Value int Alternates (Optional) (Default: None) The texture may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world. [DocumentAsJson] public CompositeTexture[] Alternates Field Value CompositeTexture[] BlendedOverlays (Optional) (Default: None) A set of textures to overlay above this texture. The base texture may be overlayed with any quantity of textures. These are baked together during texture atlas creation. [DocumentAsJson] public BlendedOverlayTexture[] BlendedOverlays Field Value BlendedOverlayTexture[] Rotation (Optional) (Default: 0) Rotation of the texture may only be a multiple of 90 [DocumentAsJson] public int Rotation Field Value int Tiles (Optional) (Default: None) A way of basic support for connected textures. Textures should be named numerically from 1 to TilesWidth squared. E.g., if TilesWidth is 3, the order follows the pattern of: 1 2 3 4 5 6 7 8 9 [DocumentAsJson] public CompositeTexture[] Tiles Field Value CompositeTexture[] TilesWidth (Optional) (Default: 0) The number of tiles in one direction that make up the full connected textures defined in Tiles. [DocumentAsJson] public int TilesWidth Field Value int Overlays (Obsolete) Obsolete. Use BlendedOverlays instead. [DocumentAsJson] public AssetLocation[] Overlays { set; } Field Value AssetLocation[]"
  },
  "jsondocs/Vintagestory.API.Client.EnumChunkRenderPass.html": {
    "href": "jsondocs/Vintagestory.API.Client.EnumChunkRenderPass.html",
    "title": "Enum EnumChunkRenderPass | VintageStory Json Docs",
    "keywords": "Enum EnumChunkRenderPass Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The various render passes available for rendering blocks Open in GitHub [DocumentAsJson] public enum EnumChunkRenderPass Methods Opaque = 0 Backfaced culled, no alpha testing, alpha discard OpaqueNoCull = 1 Backfaced not culled, no alpha blended but alpha discard BlendNoCull = 2 Backfaced not culled, alpha blended and alpha discard Transparent = 3 Uses a special rendering system called Weighted Blended Order Independent Transparency for half transparent blocks Liquid = 4 Used for animated liquids TopSoil = 5 Special render pass for top soil only in order to have climated tinted grass half transparently overlaid over an opaque block Meta = 6 Special render pass for meta blocks OpaqueWaterPlant = 7 Uses the depth buffer from the OIT pass to prevent water plants showing in sailboats"
  },
  "jsondocs/Vintagestory.API.Client.EnumDrawType.html": {
    "href": "jsondocs/Vintagestory.API.Client.EnumDrawType.html",
    "title": "Enum EnumDrawType | VintageStory Json Docs",
    "keywords": "Enum EnumDrawType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draw types for blocks. Open in GitHub [DocumentAsJson] public enum EnumDrawType Methods BlockLayer_1 = 1 BlockLayer_2 = 2 BlockLayer_3 = 3 BlockLayer_4 = 4 BlockLayer_5 = 5 BlockLayer_6 = 6 BlockLayer_7 = 7 JSON = 8 You will most likely use JSON for all assets with custom shapes. Empty = 9 Cube = 10 Cross = 11 Transparent = 12 Liquid = 13 TopSoil = 14 CrossAndSnowlayer = 15 JSONAndWater = 16 JSONAndSnowLayer = 17 CrossAndSnowlayer_2 = 18 CrossAndSnowlayer_3 = 19 CrossAndSnowlayer_4 = 20 SurfaceLayer = 21"
  },
  "jsondocs/Vintagestory.API.Client.EnumFaceCullMode.html": {
    "href": "jsondocs/Vintagestory.API.Client.EnumFaceCullMode.html",
    "title": "Enum EnumFaceCullMode | VintageStory Json Docs",
    "keywords": "Enum EnumFaceCullMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Types that determine how block faces should be culled. Open in GitHub [DocumentAsJson] public enum EnumFaceCullMode Methods Default = 0 Culls faces if they are opaque faces adjacent to opaque faces NeverCull = 1 Never culls any faces Merge = 2 Culls all faces that are adjacent to opaque faces and faces adjacent to blocks of the same id Callback = 7 Calls method Block.ShouldMergeFace() to determine whether to cull the face or not Collapse = 3 Culls all faces that are adjacent to opaque faces and the bottom, east or south faces adjacent to blocks of the same id This causes to still leave one single face inbetween instead of 2, eliminating any z-fighting. MergeMaterial = 4 Same as Merge but checks for equal material CollapseMaterial = 5 Same as Collapse but checks for equal material Liquid = 6 Same as CollapseMaterial but also culls faces towards opaque blocks MergeSnowLayer = 8 FlushExceptTop = 9 Used for blocks similar to Farmland or StonePath, which are not themselves opaque except on the base, but can cull horizontal sides if adjacent block is opaque (or the same id) Stairs = 10 Culls non-opaque faces if the same block is adjacent e.g. a wide staircase made from several Stairs blocks side-by-side (caution: in future this cull mode will not work with corner stairs shapes)"
  },
  "jsondocs/Vintagestory.API.Client.WorldInteraction.html": {
    "href": "jsondocs/Vintagestory.API.Client.WorldInteraction.html",
    "title": "Class WorldInteraction | VintageStory Json Docs",
    "keywords": "Class WorldInteraction Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A world interaction for the object. This is used to prompt the player about what a certain object can do. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class WorldInteraction Inheritance object WorldInteraction Fields ActionLangCode (Required) The text to show, will be used in the form of Lang.Get(ActionLangCode); [JsonProperty] public string ActionLangCode Field Value string MouseButton (Recommended) (Default: Left) What mouse button should be used for this interaction? [JsonProperty] public EnumMouseButton MouseButton Field Value EnumMouseButton HotKeyCode (Optional) Does it require a mouse modifier key to perform this action (e.g. \"shift\" or \"ctrl\") [JsonProperty] public string HotKeyCode Field Value string HotKeyCodes (Optional) (Default: None) Does it require pressing multiple keys to perform this action (if set then HotkeyCode is ignored) [JsonProperty] public string[] HotKeyCodes { get; set; } Field Value string[] ItemStacks (Optional) (Default: None) Does the player need to hold a certain items/blocks in hands? (e.g. a knife). You can define an array of item stacks here and the game will loop through them in a 1 second interval. This property is loaded from the entitytypes and blocktype json files and then resolved. [JsonProperty(\"ItemStacks\")] public JsonItemStack[] JsonItemStacks Field Value JsonItemStack[]"
  },
  "jsondocs/Vintagestory.API.Client.html": {
    "href": "jsondocs/Vintagestory.API.Client.html",
    "title": "Namespace Vintagestory.API.Client | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Client Classes BlendedOverlayTexture Defines a texture to be overlayed on another texture. Open in GitHub CompositeTexture Holds data about a texture. Also allows textures to be overlayed on top of one another. Open in GitHub WorldInteraction A world interaction for the object. This is used to prompt the player about what a certain object can do. Open in GitHub Enums EnumChunkRenderPass The various render passes available for rendering blocks Open in GitHub EnumDrawType Draw types for blocks. Open in GitHub EnumFaceCullMode Types that determine how block faces should be culled. Open in GitHub"
  },
  "jsondocs/Vintagestory.API.Common.AdvancedParticleProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.AdvancedParticleProperties.html",
    "title": "Class AdvancedParticleProperties | VintageStory Json Docs",
    "keywords": "Class AdvancedParticleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used to add a set of particle properties to a collectible. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class AdvancedParticleProperties Inheritance object AdvancedParticleProperties Fields BlueEvolve (Optional) (Default: None) A transforming Blue value. [JsonProperty] public EvolvingNatFloat BlueEvolve { get; set; } Field Value EvolvingNatFloat Bounciness (Optional) (Default: 0) The amount of velocity to be kept when this particle collides with something. Directional velocity is multipled by (-Bounciness * 0.65) on any collision. [JsonProperty] public float Bounciness { get; set; } Field Value float ColorByBlock (Optional) (Default: false) Whether or not to color the particle by the block it's on. [JsonProperty] public bool ColorByBlock { get; set; } Field Value bool DeathParticles (Optional) (Default: None) More particles that spawn when this particle dies. [JsonProperty] public AdvancedParticleProperties[] DeathParticles { get; set; } Field Value AdvancedParticleProperties[] DieInAir (Optional) (Default: false) Whether or not the particle dies in air. [JsonProperty] public bool DieInAir { get; set; } Field Value bool DieInLiquid (Optional) (Default: false) Whether or not the particle dies in water. [JsonProperty] public bool DieInLiquid { get; set; } Field Value bool DieOnRainHeightmap (Optional) (Default: false) If true, particle dies if it falls below the rain height at its given location [JsonProperty] public bool DieOnRainHeightmap { get; set; } Field Value bool GravityEffect (Optional) (Default: 1) The gravity effect on the particle. [JsonProperty] public NatFloat GravityEffect { get; set; } Field Value NatFloat GreenEvolve (Optional) (Default: None) A transforming Green value. [JsonProperty] public EvolvingNatFloat GreenEvolve { get; set; } Field Value EvolvingNatFloat HsvaColor (Optional) (Default: Random) The Hue/Saturation/Value/Alpha for the color of the particle. [JsonProperty] public NatFloat[] HsvaColor Field Value NatFloat[] LifeLength (Optional) (Default: 1) The life length, in seconds, of the particle. [JsonProperty] public NatFloat LifeLength { get; set; } Field Value NatFloat OpacityEvolve (Optional) (Default: None) A transforming opacity value. [JsonProperty] public EvolvingNatFloat OpacityEvolve { get; set; } Field Value EvolvingNatFloat ParticleModel (Optional) (Default: Cube) Sets the base model for the particle. [JsonProperty] public EnumParticleModel ParticleModel { get; set; } Field Value EnumParticleModel PosOffset (Optional) (Default: 0, 0, 0) Offset from the blocks hitboxes top middle position [JsonProperty] public NatFloat[] PosOffset Field Value NatFloat[] Quantity (Optional) (Default: 1) The quantity of the particles given. [JsonProperty] public NatFloat Quantity { get; set; } Field Value NatFloat RandomVelocityChange (Optional) (Default: false) Allows each particle to randomly change its velocity over time. [JsonProperty] public bool RandomVelocityChange { get; set; } Field Value bool RedEvolve (Optional) (Default: None) A transforming Red value. [JsonProperty] public EvolvingNatFloat RedEvolve { get; set; } Field Value EvolvingNatFloat SecondaryParticles (Optional) (Default: None) More particles that spawn from this particle over time. See SecondarySpawnInterval to control rate. [JsonProperty] public AdvancedParticleProperties[] SecondaryParticles { get; set; } Field Value AdvancedParticleProperties[] SecondarySpawnInterval (Optional) (Default: 0) The inverval that the SecondaryParticles spawn. [JsonProperty] public NatFloat SecondarySpawnInterval { get; set; } Field Value NatFloat SelfPropelled (Optional) (Default: false) Whether or not the particle is self propelled. [JsonProperty] public bool SelfPropelled { get; set; } Field Value bool Size (Optional) (Default: 1) The size of the particles given. [JsonProperty] public NatFloat Size { get; set; } Field Value NatFloat SizeEvolve (Optional) (Default: 0) A transforming Size value. [JsonProperty] public EvolvingNatFloat SizeEvolve { get; set; } Field Value EvolvingNatFloat SwimOnLiquid (Optional) (Default: false) Whether or not the particle floats on liquids. [JsonProperty] public bool SwimOnLiquid { get; set; } Field Value bool TerrainCollision (Optional) (Default: true) Whether or not the particle collides with the terrain. [JsonProperty] public bool TerrainCollision { get; set; } Field Value bool Velocity (Optional) (Default: Random) The velocity of the particles. [JsonProperty] public NatFloat[] Velocity { get; set; } Field Value NatFloat[] VelocityEvolve (Optional) (Default: None) A dynamic velocity value. [JsonProperty] public EvolvingNatFloat[] VelocityEvolve { get; set; } Field Value EvolvingNatFloat[] VertexFlags (Optional) (Default: 0) The level of glow in the particle. [JsonProperty] public int VertexFlags { get; set; } Field Value int WindAffectednes (Optional) (Default: 0) How much the particles are affected by wind. [JsonProperty] public float WindAffectednes { get; set; } Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.AnimationMetaData.html": {
    "href": "jsondocs/Vintagestory.API.Common.AnimationMetaData.html",
    "title": "Class AnimationMetaData | VintageStory Json Docs",
    "keywords": "Class AnimationMetaData Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Animation Meta Data is a json type that controls how an animation should be played. Open in GitHub [DocumentAsJson] public class AnimationMetaData Inheritance object AnimationMetaData Examples \"animations\": [ { \"code\": \"hurt\", \"animation\": \"hurt\", \"animationSpeed\": 2.2, \"weight\": 10, \"blendMode\": \"AddAverage\" }, { \"code\": \"die\", \"animation\": \"death\", \"animationSpeed\": 1.25, \"weight\": 10, \"blendMode\": \"Average\", \"triggeredBy\": { \"onControls\": [ \"dead\" ] } }, { \"code\": \"idle\", \"animation\": \"idle\", \"blendMode\": \"AddAverage\", \"easeOutSpeed\": 4, \"triggeredBy\": { \"defaultAnim\": true } }, { \"code\": \"walk\", \"animation\": \"walk\", \"weight\": 5 } ] Fields AdjustCollisionBox [JsonProperty] public bool AdjustCollisionBox { get; set; } Field Value bool Animation (Required) The animations code identifier that we want to play [JsonProperty] public string Animation Field Value string AnimationSound [JsonProperty] public AnimationSound AnimationSound Field Value AnimationSound Code (Required) Unique identifier to be able to reference this AnimationMetaData instance [JsonProperty] public string Code Field Value string AnimationSpeed (Optional) (Default: 1) The speed this animation should play at. [JsonProperty] public float AnimationSpeed Field Value float Attributes (Optional) (Default: None) Custom attributes that can be used for the animation. Valid vanilla attributes are: damageAtFrame (float) soundAtFrame (float) authorative (bool) [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject BlendMode (Optional) (Default: Add) The animation blend mode. Controls how this animation will react with other concurrent animations. Also see ElementBlendMode to control blend mode per element. [JsonProperty] public EnumAnimationBlendMode BlendMode Field Value EnumAnimationBlendMode ClientSide (Optional) (Default: false) If true, the server does not sync this animation. [JsonProperty] public bool ClientSide Field Value bool EaseInSpeed (Optional) (Default: 10) A multiplier applied to the weight value to \"ease in\" the animation. Choose a high value for looping animations or it will be glitchy [JsonProperty] public float EaseInSpeed Field Value float EaseOutSpeed (Optional) (Default: 10) A multiplier applied to the weight value to \"ease out\" the animation. Choose a high value for looping animations or it will be glitchy [JsonProperty] public float EaseOutSpeed Field Value float ElementBlendMode (Optional) (Default: None) A way of specifying BlendMode per element. [JsonProperty] public Dictionary<string, EnumAnimationBlendMode> ElementBlendMode Field Value Dictionary<string, EnumAnimationBlendMode> ElementWeight (Optional) (Default: None) A way of specifying Weight for each element. Also see ElementBlendMode to control blend modes per element.. [JsonProperty] public Dictionary<string, float> ElementWeight Field Value Dictionary<string, float> HoldEyePosAfterEasein (Optional) (Default: 99) A value that determines whether to change the first-person eye position for the camera. Higher values will keep eye position static. [JsonProperty] public float HoldEyePosAfterEasein Field Value float MulWithWalkSpeed (Optional) (Default: false) Should this animation speed be multiplied by the movement speed of the entity? [JsonProperty] public bool MulWithWalkSpeed Field Value bool SupressDefaultAnimation (Optional) (Default: false) Should this animation stop default animations from playing? [JsonProperty] public bool SupressDefaultAnimation Field Value bool TriggeredBy (Optional) (Default: None) Controls when this animation should be played. [JsonProperty] public AnimationTrigger TriggeredBy Field Value AnimationTrigger Weight (Optional) (Default: 1) The weight of this animation. When using multiple animations at a time, this controls the significance of each animation. The method for determining final animation values depends on this and BlendMode. [JsonProperty] public float Weight Field Value float WeightCapFactor (Optional) (Default: 0) This property can be used in cases where a animation with high weight is played alongside another animation with low element weight. In these cases, the easeIn become unaturally fast. Setting a value of 0.8f or similar here addresses this issue. 0f = uncapped weight 0.5f = weight cannot exceed 2 1f = weight cannot exceed 1 [JsonProperty] public float WeightCapFactor Field Value float WithFpVariant [JsonProperty] public bool WithFpVariant Field Value bool"
  },
  "jsondocs/Vintagestory.API.Common.AnimationSound.html": {
    "href": "jsondocs/Vintagestory.API.Common.AnimationSound.html",
    "title": "Class AnimationSound | VintageStory Json Docs",
    "keywords": "Class AnimationSound Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [DocumentAsJson] public class AnimationSound Inheritance object AnimationSound"
  },
  "jsondocs/Vintagestory.API.Common.AnimationTrigger.html": {
    "href": "jsondocs/Vintagestory.API.Common.AnimationTrigger.html",
    "title": "Class AnimationTrigger | VintageStory Json Docs",
    "keywords": "Class AnimationTrigger Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Data about when an animation should be triggered. Open in GitHub [DocumentAsJson] public class AnimationTrigger Inheritance object AnimationTrigger Fields OnControls (Recommended) An array of controls that should begin the animation. [JsonProperty] public EnumEntityActivity[] OnControls Field Value EnumEntityActivity[] DefaultAnim (Optional) (Default: false) Is this animation the default animation for the entity? [JsonProperty] public bool DefaultAnim Field Value bool MatchExact (Optional) (Default: false) If set to true, all OnControls elements need to be happening simultaneously to trigger the animation. If set to false, at least one OnControls element needs to be happening to trigger the animation. Defaults to false. [JsonProperty] public bool MatchExact Field Value bool"
  },
  "jsondocs/Vintagestory.API.Common.AssetLocation.html": {
    "href": "jsondocs/Vintagestory.API.Common.AssetLocation.html",
    "title": "Class AssetLocation | VintageStory Json Docs",
    "keywords": "Class AssetLocation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a complete path to an assets, including it's domain. Open in GitHub [DocumentAsJson] [TypeConverter(typeof(StringAssetLocationConverter))] [ProtoContract] public class AssetLocation Inheritance object AssetLocation Examples In JSON assets, asset locations are represented as single strings in the form \"domain:path\". To access an asset in the vanilla game, use the domain 'game'. \"code\": \"game:vegetable-cookedcattailroot\","
  },
  "jsondocs/Vintagestory.API.Common.BakingProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.BakingProperties.html",
    "title": "Class BakingProperties | VintageStory Json Docs",
    "keywords": "Class BakingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Baking Properties are collectible attribute used for baking items in a clay oven. You will need to add these attributes if using Bake inside SmeltingType. Open in GitHub [DocumentAsJson] public class BakingProperties Inheritance object BakingProperties Examples Example taken from bread. Note that the levelTo value in the baking stage is the same as the levelFrom in the next baking stage. \"attributesByType\": { \"*-partbaked\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.25, \"levelTo\": 0.5, \"startScaleY\": 0.95, \"endScaleY\": 1.10, \"resultCode\": \"bread-{type}-perfect\", \"initialCode\": \"dough-{type}\" } }, \"*-perfect\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.5, \"levelTo\": 0.75, \"startScaleY\": 1.10, \"endScaleY\": 1.13, \"resultCode\": \"bread-{type}-charred\", \"initialCode\": \"bread-{type}-partbaked\" } }, \"*-charred\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.75, \"levelTo\": 1, \"startScaleY\": 1.13, \"endScaleY\": 1.10, \"initialCode\": \"bread-{type}-perfect\" } } }, Fields InitialCode (Required) The code of the initial collectible that is being baked. [DocumentAsJson] public string InitialCode Field Value string ResultCode (Required) The code of the resulting collectible when this item finishes its cooking stage. [DocumentAsJson] public string ResultCode Field Value string LargeItem (Recommended) (Default: false) If true, only one instance of this collectible can be baked at a time. If false, 4 of this collectible can be baked at a time. [DocumentAsJson] public bool LargeItem Field Value bool LevelFrom (Recommended) (Default: 0) The initial value, from 0 to 1, that determines how cooked the item is. When cooking an object with numerous cooking stages, these stages can be stacked using these values. Simply set the second stage's LevelFrom to the first stages LevelTo. [DocumentAsJson] public float LevelFrom Field Value float LevelTo (Recommended) (Default: 1) The final value, from 0 to 1, that determines how cooked the item is. When the cooking value reaches this value, the collectible will change into the next item. When cooking an object with numerous cooking stages, these stages can be stacked using these values. Simply set the second stage's LevelFrom to the first stages LevelTo. [DocumentAsJson] public float LevelTo Field Value float Temp (Recommended) (Default: 160) The temperature required to bake the item. [DocumentAsJson] public float? Temp Field Value float? EndScaleY (Optional) (Default: 1) The Y scale of this collectible when it has finished cooking. Value will be linearly interpolated between StartScaleY and this. [DocumentAsJson] public float EndScaleY Field Value float StartScaleY (Optional) (Default: 1) The Y scale of this collectible when it begins cooking. Value will be linearly interpolated between this and EndScaleY. [DocumentAsJson] public float StartScaleY Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.BlockBehavior.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockBehavior.html",
    "title": "Class BlockBehavior | VintageStory Json Docs",
    "keywords": "Class BlockBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows for definitions of behaviors of a block that can be applied to any block See the derived types for a list of all documented block behaviors. Open in GitHub [DocumentAsJson] public abstract class BlockBehavior : CollectibleBehavior Inheritance object CollectibleBehavior BlockBehavior Derived BlockBehaviorBreakIfFloating BlockBehaviorBreakSnowFirst BlockBehaviorCanAttach BlockBehaviorCanIgnite BlockBehaviorChimney BlockBehaviorContainer BlockBehaviorCreatureContainer BlockBehaviorDecor BlockBehaviorDropNotSnowCovered BlockBehaviorElevatorControl BlockBehaviorExchangeOnInteract BlockBehaviorFiniteSpreadingLiquid BlockBehaviorGiveItemPerPlayer BlockBehaviorHarvestable BlockBehaviorHeatSource BlockBehaviorHorizontalAttachable BlockBehaviorHorizontalOrientable BlockBehaviorJonasBoilerDoor BlockBehaviorJonasGasifier BlockBehaviorJonasHydraulicPump BlockBehaviorLadder BlockBehaviorLockable BlockBehaviorMilkingContainer BlockBehaviorMultiblock BlockBehaviorMyceliumHost BlockBehaviorNWOrientable BlockBehaviorOmniAttachable BlockBehaviorPillar BlockBehaviorPushEventOnBlockBroken BlockBehaviorRainDrip BlockBehaviorReinforcable BlockBehaviorReparable BlockBehaviorRightClickPickup BlockBehaviorRopeTieable BlockBehaviorSlab BlockBehaviorSneakPlacing BlockBehaviorSnowballable BlockBehaviorSteaming BlockBehaviorTransformBreak BlockBehaviorUnplaceable BlockBehaviorUnstable BlockBehaviorUnstableFalling BlockBehaviorUnstableRock BlockBehaviorWrenchOrientable BlockBehaviorOmniRotatable"
  },
  "jsondocs/Vintagestory.API.Common.BlockDropItemStack.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockDropItemStack.html",
    "title": "Class BlockDropItemStack | VintageStory Json Docs",
    "keywords": "Class BlockDropItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents an itemstack that is dropped when breaking a block, with a potentially random quantity. Open in GitHub [DocumentAsJson] public class BlockDropItemStack Inheritance object BlockDropItemStack Examples \"drops\": [ { \"type\": \"item\", \"code\": \"bone\", \"quantity\": { \"avg\": 4, \"var\": 2 } } ] Fields Code (Required) Code of the block or item [DocumentAsJson] public AssetLocation Code Field Value AssetLocation Type (Recommended) (Default: Block) Block or Item? [DocumentAsJson] public EnumItemClass Type Field Value EnumItemClass Attributes (Optional) (Default: None) Tree Attributes that should be attached to the resulting itemstack [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject DropModbyStat (Optional) (Default: None) If set, the drop quantity will be modified by the collecting entity stat code - entity.Stats.GetBlended(code). [DocumentAsJson] public string DropModbyStat Field Value string LastDrop (Optional) (Default: false) If true, and this drop occurs, no further drops will happen. [DocumentAsJson] public bool LastDrop Field Value bool Quantity (Optional) (Default: 1) Quantity to be dropped [DocumentAsJson] public NatFloat Quantity Field Value NatFloat Tool (Optional) (Default: None) If set, then the given tool is required to make this block drop anything. [DocumentAsJson] public EnumTool? Tool Field Value EnumTool?"
  },
  "jsondocs/Vintagestory.API.Common.BlockEntityBehaviorType.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockEntityBehaviorType.html",
    "title": "Class BlockEntityBehaviorType | VintageStory Json Docs",
    "keywords": "Class BlockEntityBehaviorType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows adding behaviors for block entities. Remember, block entities are specific instances of blocks placed within the world. Open in GitHub [DocumentAsJson] public class BlockEntityBehaviorType Inheritance object BlockEntityBehaviorType Examples \"entityClass\": \"Brake\", \"entityBehaviors\": [ { \"name\": \"MPBrake\" }, { \"name\": \"Animatable\" } ], Fields Name (Required) The ID for this block entity behavior. [JsonProperty] public string Name Field Value string properties (Optional) (Default: None) A set of properties specific to the block entity behavior class. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "jsondocs/Vintagestory.API.Common.BlockSounds.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockSounds.html",
    "title": "Class BlockSounds | VintageStory Json Docs",
    "keywords": "Class BlockSounds Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A set of sounds that are defined for a block. All fields use default or empty sounds if not set. Open in GitHub [DocumentAsJson] public class BlockSounds Inheritance object BlockSounds Examples \"sounds\": { \"place\": \"block/dirt\", \"break\": \"block/dirt\", \"hit\": \"block/dirt\", \"walk\": \"walk/grass\" }, Fields Ambient (Optional) Played in ambience for this block. [DocumentAsJson] public AssetLocation Ambient Field Value AssetLocation AmbientBlockCount (Optional) (Default: 10) Amount of nearby ambient sound blocks in order to reach full ambient sound volume [DocumentAsJson] public float AmbientBlockCount Field Value float AmbientMaxDistanceMerge (Optional) (Default: 3) Adjacent ambient sound sources are merged to avoid playing too many sounds too loudly. This is the maximum distance a sound source can be from another to allow a merge. [DocumentAsJson] public float AmbientMaxDistanceMerge Field Value float AmbientSoundType (Optional) (Default: Ambient) The type of sound for this block's ambient sound. [DocumentAsJson] public EnumSoundType AmbientSoundType Field Value EnumSoundType Break (Optional) Played when this block is broken. [DocumentAsJson] public virtual AssetLocation Break { get; set; } Field Value AssetLocation ByTool (Optional) (Default: None) Gets the sound that occurs when a specific tool hits a block. (Note for coders: if none specified in the JSON, this will be null from version 1.20.4 onwards) [DocumentAsJson] public virtual Dictionary<EnumTool, BlockSounds> ByTool { get; set; } Field Value Dictionary<EnumTool, BlockSounds> Hit (Optional) Played when this block is hit. Will be overridden by ByTool if an appropriate tool is set. [DocumentAsJson] public virtual AssetLocation Hit { get; set; } Field Value AssetLocation Inside (Optional) Played when an entity moves inside this block. Primarily used for liquids. [DocumentAsJson] public virtual AssetLocation Inside { get; set; } Field Value AssetLocation Place (Optional) Played when this block is placed. [DocumentAsJson] public virtual AssetLocation Place { get; set; } Field Value AssetLocation Walk (Optional) Played when an entity walks on this block. [DocumentAsJson] public virtual AssetLocation Walk { get; set; } Field Value AssetLocation"
  },
  "jsondocs/Vintagestory.API.Common.CollectibleBehavior.html": {
    "href": "jsondocs/Vintagestory.API.Common.CollectibleBehavior.html",
    "title": "Class CollectibleBehavior | VintageStory Json Docs",
    "keywords": "Class CollectibleBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A behavior object which can be added to any collectible. See the derived types for a list of documented collectible behaviors. Open in GitHub [DocumentAsJson] public abstract class CollectibleBehavior Inheritance object CollectibleBehavior Derived BlockBehavior"
  },
  "jsondocs/Vintagestory.API.Common.CombustibleProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.CombustibleProperties.html",
    "title": "Class CombustibleProperties | VintageStory Json Docs",
    "keywords": "Class CombustibleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Marks an item as combustible, either by cooking, smelting or firing. This can either imply it is used as a fuel, or can be cooked into another object. Open in GitHub [DocumentAsJson] public class CombustibleProperties Inheritance object CombustibleProperties Examples Cooking: \"combustiblePropsByType\": { \"bushmeat-raw\": { \"meltingPoint\": 150, \"meltingDuration\": 30, \"smeltedRatio\": 1, \"smeltingType\": \"cook\", \"smeltedStack\": { \"type\": \"item\", \"code\": \"bushmeat-cooked\" }, \"requiresContainer\": false } }, Clay Firing: \"combustiblePropsByType\": { \"bowl-raw\": { \"meltingPoint\": 650, \"meltingDuration\": 45, \"smeltedRatio\": 1, \"smeltingType\": \"fire\", \"smeltedStack\": { \"type\": \"block\", \"code\": \"bowl-fired\" }, \"requiresContainer\": false } }, Fuel Source: \"combustibleProps\": { \"burnTemperature\": 1300, \"burnDuration\": 40 }, Fields MeltingDuration (Recommended) (Default: 0) For how many seconds the temperature has to be above the melting point until the item is smelted. Recommended if SmeltedStack is set. [DocumentAsJson] public float MeltingDuration Field Value float MeltingPoint (Recommended) (Default: 0) How many degrees celsius it takes to smelt/transform this collectible into another. Required if SmeltedStack is set. [DocumentAsJson] public int MeltingPoint Field Value int SmeltedStack (Recommended) (Default: 0) If set, this is the resulting itemstack once the MeltingPoint has been reached for the supplied duration. [DocumentAsJson] public JsonItemStack SmeltedStack Field Value JsonItemStack SmeltingType (Recommended) (Default: Smelt) Some smelt types have specific functionality, and are also used for correct naming in the tool tip. If using Bake, you will need to include BakingProperties in your item attributes. [DocumentAsJson] public EnumSmeltType SmeltingType Field Value EnumSmeltType BurnDuration (Optional) (Default: 0) The duration, in real life seconds, that this collectible burns for when used as a fuel. [DocumentAsJson] public float BurnDuration Field Value float BurnTemperature (Optional) (Default: 0) The temperature at which this collectible burns when used as a fuel. [DocumentAsJson] public int BurnTemperature Field Value int HeatResistance (Optional) (Default: 500) How many degrees celsius it can resists before it ignites [DocumentAsJson] public int HeatResistance Field Value int MaxTemperature (Optional) (Default: 0) If there is a melting point, the max temperature it can reach. A value of 0 implies no limit. [DocumentAsJson] public int MaxTemperature Field Value int RequiresContainer (Optional) (Default: true) If true, a container is required to smelt this item. [DocumentAsJson] public bool RequiresContainer Field Value bool SmeltedRatio (Optional) (Default: 0) How many of this collectible are needed to smelt into SmeltedStack. [DocumentAsJson] public int SmeltedRatio Field Value int SmokeLevel (Optional) (Default: 0) How much smoke this item produces when being used as fuel [DocumentAsJson] public float SmokeLevel Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.CompositeShape.html": {
    "href": "jsondocs/Vintagestory.API.Common.CompositeShape.html",
    "title": "Class CompositeShape | VintageStory Json Docs",
    "keywords": "Class CompositeShape Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Holds shape data to create 3D representations of objects. Also allows shapes to be overlayed on top of one another recursively. Open in GitHub [DocumentAsJson] public class CompositeShape Inheritance object CompositeShape Examples \"shape\": { \"base\": \"block/basic/cube\" }, \"shapeInventory\": { \"base\": \"block/plant/bamboo/{color}/{part}-1\", \"overlays\": [ { \"base\": \"block/plant/bamboo/{color}/{part}lod0-1\" } ] }, Fields Base (Recommended) (Default: None) The path to this shape file. [DocumentAsJson] public AssetLocation Base Field Value AssetLocation Alternates (Optional) (Default: None) The block shape may consists of any amount of alternatives, one of which will be randomly chosen when the shape is chosen. [DocumentAsJson] public CompositeShape[] Alternates Field Value CompositeShape[] Format (Optional) (Default: VintageStory) The format/filetype of this shape. [DocumentAsJson] public EnumShapeFormat Format Field Value EnumShapeFormat InsertBakedTextures (Optional) (Default: false) Whether or not to insert baked in textures for mesh formats such as gltf into the texture atlas. [DocumentAsJson] public bool InsertBakedTextures Field Value bool offsetX (Optional) (Default: 0) How much should this shape be offset on X axis? [DocumentAsJson] public float offsetX Field Value float offsetY (Optional) (Default: 0) How much should this shape be offset on Y axis? [DocumentAsJson] public float offsetY Field Value float offsetZ (Optional) (Default: 0) How much should this shape be offset on Z axis? [DocumentAsJson] public float offsetZ Field Value float Overlays (Optional) (Default: None) The shape will render all overlays on top of this shape. Can be used to group multiple shapes into one composite shape. [DocumentAsJson] public CompositeShape[] Overlays Field Value CompositeShape[] QuantityElements (Optional) (Default: None) If non zero will only tesselate the first n elements of the shape [DocumentAsJson] public int? QuantityElements Field Value int? rotateX (Optional) (Default: 0) How much, in degrees, should this shape be rotated around the X axis? [DocumentAsJson] public float rotateX Field Value float rotateY (Optional) (Default: 0) How much, in degrees, should this shape be rotated around the Y axis? [DocumentAsJson] public float rotateY Field Value float rotateZ (Optional) (Default: 0) How much, in degrees, should this shape be rotated around the Z axis? [DocumentAsJson] public float rotateZ Field Value float Scale (Optional) (Default: 1) The scale of this shape on all axes. [DocumentAsJson] public float Scale Field Value float SelectiveElements (Optional) (Default: None) If set will only tesselate elements with given name [DocumentAsJson] public string[] SelectiveElements Field Value string[] VoxelizeTexture (Optional) (Default: false) If true, the shape is created from a voxelized version of the first defined texture [DocumentAsJson] public bool VoxelizeTexture Field Value bool"
  },
  "jsondocs/Vintagestory.API.Common.CraftingRecipeIngredient.html": {
    "href": "jsondocs/Vintagestory.API.Common.CraftingRecipeIngredient.html",
    "title": "Class CraftingRecipeIngredient | VintageStory Json Docs",
    "keywords": "Class CraftingRecipeIngredient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A crafting recipe ingredient Open in GitHub [DocumentAsJson] public class CraftingRecipeIngredient Inheritance object CraftingRecipeIngredient Derived BarrelRecipeIngredient Fields Code (Required) The code of the item or block [DocumentAsJson] public AssetLocation Code { get; set; } Field Value AssetLocation Name (Required) Attaches a name to a wildcard in an ingredient. This is used to substitute the value into the output. Only required if using a wildcard. [DocumentAsJson] public string Name { get; set; } Field Value string Quantity (Recommended) (Default: 1) The quantity of the itemstack required for the recipe. [DocumentAsJson] public int Quantity Field Value int Type (Recommended) (Default: Block) Is the itemstack an item or a block? [DocumentAsJson] public EnumItemClass Type Field Value EnumItemClass AllowedVariants (Optional) (Default: Allow All) When using a wildcard in the item/block code, setting this field will limit the allowed variants [DocumentAsJson] public string[] AllowedVariants Field Value string[] Attributes (Optional) (Default: None) What attributes this itemstack must have to be a valid ingredient [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject IsTool (Optional) (Default: False) Whether this crafting recipe ingredient should be regarded as a tool required to build this item. If true, the recipe will not consume the item but reduce its durability. [DocumentAsJson] public bool IsTool Field Value bool RecipeAttributes (Optional) (Default: None) Optional attribute data that you can attach any data to. Used for some specific instances in code mods. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject RecipeAttributes Field Value JsonObject ReturnedStack (Optional) (Default: None) If set, the crafting recipe will give back the consumed stack to be player upon crafting. Can also be used to produce multiple outputs for a recipe. [DocumentAsJson] public JsonItemStack ReturnedStack Field Value JsonItemStack SkipVariants (Optional) (Default: Skip None) When using a wildcard in the item/block code, setting this field will skip these variants [DocumentAsJson] public string[] SkipVariants Field Value string[] ToolDurabilityCost (Optional) (Default: 1) If IsTool is set, this is the durability cost when the recipe is created. [DocumentAsJson] public int ToolDurabilityCost Field Value int"
  },
  "jsondocs/Vintagestory.API.Common.CreativeTabAndStackList.html": {
    "href": "jsondocs/Vintagestory.API.Common.CreativeTabAndStackList.html",
    "title": "Class CreativeTabAndStackList | VintageStory Json Docs",
    "keywords": "Class CreativeTabAndStackList Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows you to add a list of item stacks to put various into creative menu tabs. Open in GitHub [DocumentAsJson] public class CreativeTabAndStackList Inheritance object CreativeTabAndStackList Examples \"creativeinventoryStacksByType\": { \"*-fired\": [ { \"tabs\": [ \"general\", \"decorative\" ], \"stacks\": [ { \"type\": \"block\", \"code\": \"bowl-fired\", \"attributes\": { \"ucontents\": [ { \"type\": \"item\", \"code\": \"waterportion\", \"makefull\": true } ] } }, { \"type\": \"block\", \"code\": \"bowl-fired\", \"attributes\": { \"ucontents\": [ { \"type\": \"item\", \"code\": \"honeyportion\", \"makefull\": true } ] } }, { \"type\": \"block\", \"code\": \"bowl-fired\" }, { \"type\": \"block\", \"code\": \"bowl-raw\" } ] } ] }, Fields Stacks (Required) A list of item stacks to put in tabs. Note that every itemstack here will be placed in every Tabs entry. [DocumentAsJson] public JsonItemStack[] Stacks Field Value JsonItemStack[] Tabs (Required) A list of creative tabs to put items into. Note that all itemstacks in Stacks will be placed in all tabs. [DocumentAsJson] public string[] Tabs Field Value string[]"
  },
  "jsondocs/Vintagestory.API.Common.CrushingProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.CrushingProperties.html",
    "title": "Class CrushingProperties | VintageStory Json Docs",
    "keywords": "Class CrushingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of properties that allow an object to be ground in a quern. Open in GitHub [DocumentAsJson] public class CrushingProperties Inheritance object CrushingProperties Examples \"crushingPropsByType\": { \"ore-poor-ilmenite-*\": { \"crushedStack\": { \"type\": \"item\", \"code\": \"crushed-ilmenite\" }, \"quantity\": { \"avg\": 1 }, \"hardnessTier\": 4 }, \"ore-poor-cassiterite-*\": { \"crushedStack\": { \"type\": \"item\", \"code\": \"crushed-cassiterite\" }, \"quantity\": { \"avg\": \".33\" }, \"hardnessTier\": 1 }, }, Fields CrushedStack (Required) If set, the block/item is crusable in a pulverizer and this is the resulting itemstack once the crushing time is over. [DocumentAsJson] public JsonItemStack CrushedStack Field Value JsonItemStack HardnessTier (Recommended) (Default: 1) The hardness tier for this collectible. Affects what pounder cap must be used for pulverization. 0 = stone 1 = copper 2 = bronze 3 = iron 4 = steel [DocumentAsJson] public int HardnessTier Field Value int Quantity (Optional) (Default: 1) The random quantity of item to return. Note that this value is multiplied by CrushedStack's quantity. [DocumentAsJson] public NatFloat Quantity Field Value NatFloat"
  },
  "jsondocs/Vintagestory.API.Common.Entities.BaseSpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.BaseSpawnConditions.html",
    "title": "Class BaseSpawnConditions | VintageStory Json Docs",
    "keywords": "Class BaseSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A base class for entities spawning conditions. Open in GitHub [DocumentAsJson] public class BaseSpawnConditions : ClimateSpawnCondition Inheritance object ClimateSpawnCondition BaseSpawnConditions Derived RuntimeSpawnConditions WorldGenSpawnConditions Inherited Members ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs Fields Group (Recommended) (Default: None) The group of the spawn conditions. Vanilla groups are: hostile neutral passive Hostile creatures should be defined as such here. This will automatically stop them spawning with a grace timer, and in locations where hostiles should not spawn. [DocumentAsJson] public string Group Field Value string HerdSize (Recommended) (Default: 1) the group size for the spawn. [DocumentAsJson] public NatFloat HerdSize Field Value NatFloat ClimateValueMode (Optional) (Default: WorldGenValues) Whether the rain and temperature values are referring to the worldgen values (i.e. yearly averages) or the current values at the moment of spawning. [DocumentAsJson] public EnumGetClimateMode ClimateValueMode Field Value EnumGetClimateMode Companions (Optional) (Default: None) Additional companions for the spawn. [DocumentAsJson] public AssetLocation[] Companions Field Value AssetLocation[] InsideBlockCodes (Optional) (Default: \"air\") The blocks that the object will spawn in. [DocumentAsJson] public AssetLocation[] InsideBlockCodes Field Value AssetLocation[] LightLevelType (Optional) (Default: MaxLight) The type of light counted for spawning purposes. [DocumentAsJson] public EnumLightLevelType LightLevelType Field Value EnumLightLevelType MaxLightLevel (Optional) (Default: 32) The maximum light level for an object to spawn. [DocumentAsJson] public int MaxLightLevel Field Value int MinLightLevel (Optional) (Default: 0) The minimum light level for an object to spawn. [DocumentAsJson] public int MinLightLevel Field Value int RequireSolidGround (Optional) (Default: true) Checks to see if the object requires solid ground. [DocumentAsJson] public bool RequireSolidGround Field Value bool TryOnlySurface (Optional) (Default: false) checks to see if the object can only spawn in the surface. [DocumentAsJson] public bool TryOnlySurface Field Value bool GroupSize (Obsolete) Obsolete. Use HerdSize instead. [DocumentAsJson] [Obsolete(\"Use HerdSize instead\")] public NatFloat GroupSize { get; set; } Field Value NatFloat"
  },
  "jsondocs/Vintagestory.API.Common.Entities.ClimateSpawnCondition.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.ClimateSpawnCondition.html",
    "title": "Class ClimateSpawnCondition | VintageStory Json Docs",
    "keywords": "Class ClimateSpawnCondition Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A list of conditions based on climate. Open in GitHub [DocumentAsJson] public class ClimateSpawnCondition Inheritance object ClimateSpawnCondition Derived BaseSpawnConditions Fields MaxForest (Optional) (Default: 1) The maximum amount of forest cover needed for the object to spawn. [DocumentAsJson] public float MaxForest Field Value float MaxRain (Optional) (Default: 1) The maximum amount of rain for the object to spawn. [DocumentAsJson] public float MaxRain Field Value float MaxShrubs (Optional) (Default: 1) The maximum amount of shrubbery needed for the object to spawn. [DocumentAsJson] public float MaxShrubs Field Value float MaxTemp (Optional) (Default: 40) The maximum tempurature for the object to spawn. [DocumentAsJson] public float MaxTemp Field Value float MaxY (Optional) (Default: 2) Won't span above maxY. 0...1 is world bottom to sea level, 1...2 is sea level to world top [DocumentAsJson] public float MaxY Field Value float MinForest (Optional) (Default: 0) The minimum amount of forest cover needed for the object to spawn. [DocumentAsJson] public float MinForest Field Value float MinForestOrShrubs (Optional) (Default: 0) The minimum amount of forest or shrubs for the object to spawn. [DocumentAsJson] public float MinForestOrShrubs Field Value float MinRain (Optional) (Default: 0) The minimum amount of rain for the object to spawn. [DocumentAsJson] public float MinRain Field Value float MinShrubs (Optional) (Default: 0) The minimum amount of shrubbery needed for the object to spawn. [DocumentAsJson] public float MinShrubs Field Value float MinTemp (Optional) (Default: -40) The minimum tempurature for the object to spawn. [DocumentAsJson] public float MinTemp Field Value float MinY (Optional) (Default: 0) Won't span below minY. 0...1 is world bottom to sea level, 1...2 is sea level to world top [DocumentAsJson] public float MinY Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.Entities.EnumEntityActivity.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.EnumEntityActivity.html",
    "title": "Enum EnumEntityActivity | VintageStory Json Docs",
    "keywords": "Enum EnumEntityActivity Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A list of activities that an entity can perform. Open in GitHub [DocumentAsJson] [Flags] public enum EnumEntityActivity Methods None = 0 Idle = 1 Move = 2 SprintMode = 4 SneakMode = 8 Fly = 16 Swim = 32 Jump = 64 Fall = 128 Climb = 256 FloorSitting = 512 Dead = 1024 Break = 2048 Place = 4096 Glide = 8192 Mounted = 16384"
  },
  "jsondocs/Vintagestory.API.Common.Entities.QuantityByGroup.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.QuantityByGroup.html",
    "title": "Class QuantityByGroup | VintageStory Json Docs",
    "keywords": "Class QuantityByGroup Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Allows you to control spawn limits based on a set of entity codes using a wildcard. Open in GitHub [DocumentAsJson] public class QuantityByGroup Inheritance object QuantityByGroup Fields Code (Required) A wildcard asset location which can group many entities together. [DocumentAsJson] public AssetLocation Code Field Value AssetLocation MaxQuantity (Required) The maximum quantity for all entities that match the Code wildcard. [DocumentAsJson] public int MaxQuantity Field Value int"
  },
  "jsondocs/Vintagestory.API.Common.Entities.RuntimeSpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.RuntimeSpawnConditions.html",
    "title": "Class RuntimeSpawnConditions | VintageStory Json Docs",
    "keywords": "Class RuntimeSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A set of spawn conditions for chunks that have already been generated. Most properties are got from BaseSpawnConditions. Open in GitHub [DocumentAsJson] public class RuntimeSpawnConditions : BaseSpawnConditions Inheritance object ClimateSpawnCondition BaseSpawnConditions RuntimeSpawnConditions Inherited Members BaseSpawnConditions.Group BaseSpawnConditions.MinLightLevel BaseSpawnConditions.MaxLightLevel BaseSpawnConditions.LightLevelType BaseSpawnConditions.HerdSize BaseSpawnConditions.GroupSize BaseSpawnConditions.Companions BaseSpawnConditions.InsideBlockCodes BaseSpawnConditions.RequireSolidGround BaseSpawnConditions.TryOnlySurface BaseSpawnConditions.ClimateValueMode ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs Fields Chance (Recommended) (Default: 1) The chance, usually between 0 (0% chance) and 1 (100% chance), for the entity to spawn during the spawning round. [DocumentAsJson] public double Chance Field Value double MaxQuantity (Recommended) (Default: 20) The max number of this entity that can ever exist in the world for a single player. With more than one player, the max number is actually (this)x(current player count)x(SpawnCapPlayerScaling). Consider using MaxQuantityByGroup to allow a max quantity based from many entities. [DocumentAsJson] public int MaxQuantity Field Value int MaxQuantityByGroup (Optional) (Default: None) The max quantity of objects to spawn based on a wildcard group of entities. For example, using MaxQuantity will allow a max of 20 pig-wild-male instances. Using this with a group of \"pig-*\" will allow a max of 20 pig entities, regardless if male, female, or piglet. [DocumentAsJson] public QuantityByGroup MaxQuantityByGroup Field Value QuantityByGroup MinDistanceToPlayer (Optional) (Default: 18) The minimum distance from the player that an object will spawn. [DocumentAsJson] public int MinDistanceToPlayer Field Value int SpawnCapPlayerScaling (Optional) (Default: 1) The maximum number of this entity that can exist in the world is MaxQuantity x (current player count) x (this). [DocumentAsJson] public float SpawnCapPlayerScaling Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.Entities.SpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.SpawnConditions.html",
    "title": "Class SpawnConditions | VintageStory Json Docs",
    "keywords": "Class SpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll The spawn conditions assigned to various things. Open in GitHub [DocumentAsJson] public class SpawnConditions Inheritance object SpawnConditions Examples \"spawnconditions\": { \"worldgen\": { \"TriesPerChunk\": { \"avg\": 0.1, \"var\": 0 }, \"tryOnlySurface\": true, \"minLightLevel\": 10, \"groupSize\": { \"dist\": \"verynarrowgaussian\", \"avg\": 3, \"var\": 4 }, \"insideBlockCodes\": [ \"air\", \"tallgrass-*\" ], \"minTemp\": 5, \"maxTemp\": 28, \"minRain\": 0.45, \"minForest\": 0.35, \"companions\": [ \"pig-wild-female\", \"pig-wild-piglet\" ] }, \"runtime\": { \"group\": \"neutral\", \"tryOnlySurface\": true, \"chance\": 0.0006, \"maxQuantity\": 4, \"minLightLevel\": 10, \"groupSize\": { \"dist\": \"verynarrowgaussian\", \"avg\": 3, \"var\": 4 }, \"insideBlockCodes\": [ \"air\", \"tallgrass-*\" ], \"minTemp\": 5, \"maxTemp\": 28, \"minRain\": 0.45, \"minForestOrShrubs\": 0.35, \"companions\": [ \"pig-wild-female\", \"pig-wild-piglet\" ] } } Fields Climate (Recommended) (Default: None) Control specific spawn conditions based on climate. Note that this will override any climate values set in Runtime and Worldgen. It is recommended to specify climate values here rather than setting them in the other spawn conditions. [DocumentAsJson] public ClimateSpawnCondition Climate Field Value ClimateSpawnCondition Runtime (Recommended) (Default: None) Runtime requirements for the object to spawn. [DocumentAsJson] public RuntimeSpawnConditions Runtime Field Value RuntimeSpawnConditions Worldgen (Recommended) (Default: None) Worldgen/region requirements for the object to spawn. [DocumentAsJson] public WorldGenSpawnConditions Worldgen Field Value WorldGenSpawnConditions"
  },
  "jsondocs/Vintagestory.API.Common.Entities.WorldGenSpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.WorldGenSpawnConditions.html",
    "title": "Class WorldGenSpawnConditions | VintageStory Json Docs",
    "keywords": "Class WorldGenSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A set of spawn conditions for when chunks are generated. Most properties are got from BaseSpawnConditions. Open in GitHub [DocumentAsJson] public class WorldGenSpawnConditions : BaseSpawnConditions Inheritance object ClimateSpawnCondition BaseSpawnConditions WorldGenSpawnConditions Inherited Members BaseSpawnConditions.Group BaseSpawnConditions.MinLightLevel BaseSpawnConditions.MaxLightLevel BaseSpawnConditions.LightLevelType BaseSpawnConditions.HerdSize BaseSpawnConditions.GroupSize BaseSpawnConditions.Companions BaseSpawnConditions.InsideBlockCodes BaseSpawnConditions.RequireSolidGround BaseSpawnConditions.TryOnlySurface BaseSpawnConditions.ClimateValueMode ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs Fields TriesPerChunk (Recommended) (Default: 0) The amount of times the object will attempt to spawn per chunk. [DocumentAsJson] public NatFloat TriesPerChunk Field Value NatFloat"
  },
  "jsondocs/Vintagestory.API.Common.Entities.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.html",
    "title": "Namespace Vintagestory.API.Common.Entities | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Common.Entities Classes BaseSpawnConditions A base class for entities spawning conditions. Open in GitHub ClimateSpawnCondition A list of conditions based on climate. Open in GitHub QuantityByGroup Allows you to control spawn limits based on a set of entity codes using a wildcard. Open in GitHub RuntimeSpawnConditions A set of spawn conditions for chunks that have already been generated. Most properties are got from BaseSpawnConditions. Open in GitHub SpawnConditions The spawn conditions assigned to various things. Open in GitHub WorldGenSpawnConditions A set of spawn conditions for when chunks are generated. Most properties are got from BaseSpawnConditions. Open in GitHub Enums EnumEntityActivity A list of activities that an entity can perform. Open in GitHub"
  },
  "jsondocs/Vintagestory.API.Common.EnumAICreatureType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumAICreatureType.html",
    "title": "Enum EnumAICreatureType | VintageStory Json Docs",
    "keywords": "Enum EnumAICreatureType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of creatures used for pathfinding. Humanoids prefer taking paths. Open in GitHub [DocumentAsJson] public enum EnumAICreatureType Methods Default = 0 Dumbest version. Never enters boiling water and lava. Prefers not to be in water. Slightly prefers to walk on blocks that give a walk speed bonus. LandCreature = 1 Same as Default, Additionally never enters some types of blocks that are on fire (fire pits, coal piles and pit kilns) Humanoid = 2 Same as LandCreature, additionally strongly prefers to walk on blocks that give a walk speed bonues, such as stone paths HeatProofCreature = 3 Does not avoid fire or boiling water. Still Avoids Lava SeaCreature = 4 Does not avoid water in any way"
  },
  "jsondocs/Vintagestory.API.Common.EnumAnimationBlendMode.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumAnimationBlendMode.html",
    "title": "Enum EnumAnimationBlendMode | VintageStory Json Docs",
    "keywords": "Enum EnumAnimationBlendMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines how multiple animations should be blended together. Open in GitHub [DocumentAsJson] public enum EnumAnimationBlendMode Methods Add = 0 Add the animation without taking other animations into considerations Average = 1 Add the pose and average it together with all other running animations with blendmode Average or AddAverage AddAverage = 2 Add the animation without taking other animations into consideration, but add it's weight for averaging"
  },
  "jsondocs/Vintagestory.API.Common.EnumAppSide.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumAppSide.html",
    "title": "Enum EnumAppSide | VintageStory Json Docs",
    "keywords": "Enum EnumAppSide Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A server/client side used by for the Vintage Story app. Open in GitHub [Flags] [DocumentAsJson] public enum EnumAppSide Methods Server = 1 For server side things only. Client = 2 For client side things only. Universal = Server | Client For server and client side things."
  },
  "jsondocs/Vintagestory.API.Common.EnumBlockMaterial.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumBlockMaterial.html",
    "title": "Enum EnumBlockMaterial | VintageStory Json Docs",
    "keywords": "Enum EnumBlockMaterial Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Materials of which a block may be made of. Currently only used for mining speed for tools and blast resistance. Open in GitHub [DocumentAsJson] public enum EnumBlockMaterial Methods Air = 0 Soil = 1 Gravel = 2 Sand = 3 Wood = 4 Leaves = 5 Stone = 6 Ore = 7 Liquid = 8 Snow = 9 Ice = 10 Metal = 11 Mantle = 12 Plant = 13 Glass = 14 Ceramic = 15 Cloth = 16 Lava = 17 Brick = 18 Fire = 19 Meta = 20 Other = 21"
  },
  "jsondocs/Vintagestory.API.Common.EnumFoodCategory.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumFoodCategory.html",
    "title": "Enum EnumFoodCategory | VintageStory Json Docs",
    "keywords": "Enum EnumFoodCategory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of nutrition for foods. Open in GitHub [DocumentAsJson] public enum EnumFoodCategory Methods NoNutrition = -1 Fruit = 0 Vegetable = 1 Protein = 2 Grain = 3 Dairy = 4 Unknown = 5"
  },
  "jsondocs/Vintagestory.API.Common.EnumGetClimateMode.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumGetClimateMode.html",
    "title": "Enum EnumGetClimateMode | VintageStory Json Docs",
    "keywords": "Enum EnumGetClimateMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of climate values you wish to receive Open in GitHub [DocumentAsJson] public enum EnumGetClimateMode Methods WorldGenValues = 0 The values generate during world generation, these are loosely considered as yearly averages NowValues = 1 The values at the current calendar time ForSuppliedDateValues = 2 The values at the supplied calendar time, supplied as additional arg ForSuppliedDate_TemperatureOnly = 3 The values at the supplied calendar time, ignoring rainfall etc. Calling IBlockAccessor.GetClimateAt with this mode will never return a null ClimateCondition value, if it would be null it returns a ClimateCondition with a default 4 degrees temperature value ForSuppliedDate_TemperatureRainfallOnly = 4 The values at the supplied calendar time, ignoring forest cover etc. Calling IBlockAccessor.GetClimateAt with this mode will never return a null ClimateCondition value, if it would be null it returns a ClimateCondition with a default 4 degrees temperature value and no rain"
  },
  "jsondocs/Vintagestory.API.Common.EnumHabitat.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumHabitat.html",
    "title": "Enum EnumHabitat | VintageStory Json Docs",
    "keywords": "Enum EnumHabitat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Habitats for entities. Controls some minor logic for entities. Open in GitHub [DocumentAsJson] public enum EnumHabitat Methods Sea = 0 No gravity, AiTaskWander will look for water or ice. Land = 1 Apply gravity. Standard land creature. Air = 2 No gravity. Underwater = 3 No gravity, AiTaskWander will look for water or ice."
  },
  "jsondocs/Vintagestory.API.Common.EnumItemClass.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumItemClass.html",
    "title": "Enum EnumItemClass | VintageStory Json Docs",
    "keywords": "Enum EnumItemClass Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of collectible in an itemstack. Open in GitHub [DocumentAsJson] public enum EnumItemClass Methods Block = 0 This itemstack holds a block. Item = 1 This itemstack holds an item."
  },
  "jsondocs/Vintagestory.API.Common.EnumItemDamageSource.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumItemDamageSource.html",
    "title": "Enum EnumItemDamageSource | VintageStory Json Docs",
    "keywords": "Enum EnumItemDamageSource Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types for how an item can damage it's durability. Open in GitHub [DocumentAsJson] public enum EnumItemDamageSource Methods BlockBreaking = 0 The item was breaking a block. Attacking = 1 The item was attacking a creature. Fire = 2 Unused. The item was thrown into a fire."
  },
  "jsondocs/Vintagestory.API.Common.EnumLightLevelType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumLightLevelType.html",
    "title": "Enum EnumLightLevelType | VintageStory Json Docs",
    "keywords": "Enum EnumLightLevelType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used in blockAccessor.GetLightLevel() to determine what kind of light level you want Open in GitHub [DocumentAsJson] public enum EnumLightLevelType Methods OnlyBlockLight = 0 Will get you just the block light OnlySunLight = 1 Will get you just the sun light unaffected by the day/night cycle MaxLight = 2 Will get you max(sunlight, onlyblocklight) MaxTimeOfDayLight = 3 Will get you max(sunlight * sunbrightness, blocklight) TimeOfDaySunLight = 4 Will get you sunlight * sunbrightness Sunbrightness = 5 Will get you sunbrightness"
  },
  "jsondocs/Vintagestory.API.Common.EnumMatterState.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumMatterState.html",
    "title": "Enum EnumMatterState | VintageStory Json Docs",
    "keywords": "Enum EnumMatterState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Various states of matter to use for collectibles. Open in GitHub [DocumentAsJson] public enum EnumMatterState Methods Gas = 0 The state of being so thin that molecules don't often touch Liquid = 1 The state of being still together but loose enough to move around each other. Solid = 2 The state of being together and held still by the internal structure. Plasma = 3 The state of reacting with itself with some kind of reactant, a high heat state. BoseEinsteinCondensate = 4 The state of becoming Quantum Jelly."
  },
  "jsondocs/Vintagestory.API.Common.EnumMouseButton.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumMouseButton.html",
    "title": "Enum EnumMouseButton | VintageStory Json Docs",
    "keywords": "Enum EnumMouseButton Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A list of mouse buttons. Open in GitHub [DocumentAsJson] public enum EnumMouseButton Methods Left = 0 Middle = 1 Right = 2 Button4 = 3 Button5 = 4 Button6 = 5 Button7 = 6 Button8 = 7 Wheel = 13 Used to signal to event handlers, but not actually a button: activated when the wheel is scrolled. None = 255"
  },
  "jsondocs/Vintagestory.API.Common.EnumParticleModel.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumParticleModel.html",
    "title": "Enum EnumParticleModel | VintageStory Json Docs",
    "keywords": "Enum EnumParticleModel Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of model for a particle. Open in GitHub [DocumentAsJson] public enum EnumParticleModel Methods Quad = 0 A 2D quad. Cube = 1 A 3D cube."
  },
  "jsondocs/Vintagestory.API.Common.EnumRandomizeAxes.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumRandomizeAxes.html",
    "title": "Enum EnumRandomizeAxes | VintageStory Json Docs",
    "keywords": "Enum EnumRandomizeAxes Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll When picking a random seed for this block, what axes should we base it on? Open in GitHub [DocumentAsJson] public enum EnumRandomizeAxes Methods XYZ = 0 Create a random value based on all three axes. XZ = 1 Create a random value based only on the X and Z axes. Allows blocks placed on top of each other to all have the same random properties (e.g. size, rotation, offset). Commonly used for multiblock plants."
  },
  "jsondocs/Vintagestory.API.Common.EnumShapeFormat.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumShapeFormat.html",
    "title": "Enum EnumShapeFormat | VintageStory Json Docs",
    "keywords": "Enum EnumShapeFormat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of shape that can be loaded by the game. Open in GitHub [DocumentAsJson] public enum EnumShapeFormat Methods [DocumentAsJson] VintageStory = 0 (Recommended) Imports a shape using the default JSON system. [DocumentAsJson] Obj = 1 Imports a shape using an Obj file. [DocumentAsJson] GltfEmbedded = 2 Imports a shape using a Gltf file."
  },
  "jsondocs/Vintagestory.API.Common.EnumSmeltType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumSmeltType.html",
    "title": "Enum EnumSmeltType | VintageStory Json Docs",
    "keywords": "Enum EnumSmeltType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of smelting for the collectible. This effects how the object is smelted. Open in GitHub [DocumentAsJson] public enum EnumSmeltType Methods Smelt = 0 Currently has no special behavior. Cook = 1 Currently has no special behavior. Bake = 2 This collectible must be baked in a clay oven. Note that you will likely want to use BakingProperties in the item's attributes. Convert = 3 Currently has no special behavior. Fire = 4 This collectible must be fired in a kiln."
  },
  "jsondocs/Vintagestory.API.Common.EnumSoilNutrient.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumSoilNutrient.html",
    "title": "Enum EnumSoilNutrient | VintageStory Json Docs",
    "keywords": "Enum EnumSoilNutrient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The three types of soil nutrient for farmland and crops. Open in GitHub [DocumentAsJson] public enum EnumSoilNutrient Methods N = 0 P = 1 K = 2"
  },
  "jsondocs/Vintagestory.API.Common.EnumTool.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumTool.html",
    "title": "Enum EnumTool | VintageStory Json Docs",
    "keywords": "Enum EnumTool Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types for each tool in the game. Some of these are unused. Open in GitHub [DocumentAsJson] public enum EnumTool Methods Knife = 0 Pickaxe = 1 Axe = 2 Sword = 3 Shovel = 4 Hammer = 5 Spear = 6 Bow = 7 Shears = 8 Sickle = 9 Hoe = 10 Saw = 11 Chisel = 12 Scythe = 13 Sling = 14 Wrench = 15 Probe = 16 Meter = 17 Drill = 18 Firearm = 19 Crossbow = 20 Javelin = 21 Pike = 22 Shield = 23 Club = 24 Mace = 25 Warhammer = 26 Poleaxe = 27 Halberd = 28 Polearm = 29 Staff = 30"
  },
  "jsondocs/Vintagestory.API.Common.EnumTransitionType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumTransitionType.html",
    "title": "Enum EnumTransitionType | VintageStory Json Docs",
    "keywords": "Enum EnumTransitionType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of transition for items. Open in GitHub [DocumentAsJson] public enum EnumTransitionType Methods Perish = 0 For food, animals or non-organic materials. Dry = 1 Can be dried. Burn = 2 Can be burned. Cure = 3 Can be cured, for meat. Convert = 4 Generic 'other' conversion. Ripen = 5 Cheese ripening. Melt = 6 Snow/ice melting. Harden = 7 Glue hardening. None = 8 Used for cooking recipes where the output has no perishableprops, but we still need a non-null TransitionableProperties (e.g. sulfuric acid in 1.20)"
  },
  "jsondocs/Vintagestory.API.Common.FoodNutritionProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.FoodNutritionProperties.html",
    "title": "Class FoodNutritionProperties | VintageStory Json Docs",
    "keywords": "Class FoodNutritionProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows you to make collectibles edible, and adds data about their nutrition. Open in GitHub [DocumentAsJson] public class FoodNutritionProperties Inheritance object FoodNutritionProperties Examples \"nutritionPropsByType\": { \"*-flyagaric-*\": { \"saturation\": 80, \"health\": -6.5, \"foodcategory\": \"Vegetable\" }, \"*-earthball-*\": { \"saturation\": 80, \"health\": -8, \"foodcategory\": \"Vegetable\" }, ... Fields FoodCategory (Recommended) (Default: Fruit) The category of the food. [DocumentAsJson] public EnumFoodCategory FoodCategory Field Value EnumFoodCategory Satiety (Recommended) (Default: 0) The saturation restored by the food. [DocumentAsJson] public float Satiety Field Value float EatenStack (Optional) (Default: None) When an instance of this collectible is eaten, what item stack should be returned to the player? Possible example: Eating a 'meat on a stick' item would return a single stick. (Note: Bowl meals/liquids are specially designed to do this through their attributes and class.) [DocumentAsJson] public JsonItemStack EatenStack Field Value JsonItemStack Health (Optional) (Default: 0) The health restored by the food. Usually actually used to hurt the player with negative values. [DocumentAsJson] public float Health Field Value float Intoxication (Optional) (Default: 0) How much eating this will affect the player's intoxication. [DocumentAsJson] public float Intoxication { get; set; } Field Value float SaturationLossDelay (Optional) (Default: 10) The delay before that extra saturation starts to go away. [DocumentAsJson] public float SaturationLossDelay Field Value float Saturation (Obsolete) Obsolete - Please use Satiety instead. [DocumentAsJson] [Obsolete(\"Use Satiety instead.\")] public float Saturation { get; set; } Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.GridRecipe.html": {
    "href": "jsondocs/Vintagestory.API.Common.GridRecipe.html",
    "title": "Class GridRecipe | VintageStory Json Docs",
    "keywords": "Class GridRecipe Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a crafting recipe to be made on the crafting grid. Open in GitHub [DocumentAsJson] public class GridRecipe Inheritance object GridRecipe Examples { \"ingredientPattern\": \"GS,S_\", \"ingredients\": { \"G\": { \"type\": \"item\", \"code\": \"drygrass\" }, \"S\": { \"type\": \"item\", \"code\": \"stick\" } }, \"width\": 2, \"height\": 2, \"output\": { \"type\": \"item\", \"code\": \"firestarter\" } } Fields IngredientPattern (Required) The pattern of the ingredient. Order for a 3x3 recipe: 1 2 3 4 5 6 7 8 9 Order for a 2x2 recipe: 1 2 3 4 Commas seperate each horizontal row, and an underscore ( _ ) marks a space as empty. Note: from game version 1.20.4, this becomes null on server-side after completion of recipe resolving during server start-up phase [DocumentAsJson] public string IngredientPattern Field Value string Ingredients (Required) The recipes ingredients in any order, including the code used in the ingredient pattern. Note: from game version 1.20.4, this becomes null on server-side after completion of recipe resolving during server start-up phase [DocumentAsJson] public Dictionary<string, CraftingRecipeIngredient> Ingredients Field Value Dictionary<string, CraftingRecipeIngredient> Output (Required) The resulting stack when the recipe is created. [DocumentAsJson] public CraftingRecipeIngredient Output Field Value CraftingRecipeIngredient Height (Recommended) (Default: 3) Required grid height for crafting this recipe [DocumentAsJson] public int Height Field Value int Width (Recommended) (Default: 3) Required grid width for crafting this recipe [DocumentAsJson] public int Width Field Value int AllowedVariants (Optional) (Default: None) If '{code}' is used in ingredient code, allowed variants for this code should be specified in this map [DocumentAsJson] public Dictionary<string, string[]> AllowedVariants Field Value Dictionary<string, string[]> Attributes (Optional) (Default: None) Optional attribute data that you can attach any data to. Useful for code mods, but also required when using liquid ingredients. See dough.json grid recipe file for example. [JsonConverter(typeof(JsonAttributesConverter))] [DocumentAsJson] public JsonObject Attributes Field Value JsonObject AverageDurability (Optional) (Default: True) If true, the output item will have its durability averaged over the input items [DocumentAsJson] public bool AverageDurability Field Value bool CopyAttributesFrom (Optional) (Default: None) If set, it will copy over the itemstack attributes from given ingredient code [DocumentAsJson] public string CopyAttributesFrom { get; set; } Field Value string Enabled (Optional) (Default: True) If set to false, the recipe will never be loaded. If loaded, you can use this field to disable recipes during runtime. [DocumentAsJson] public bool Enabled Field Value bool MergeAttributesFrom (Optional) (Default: None) Attributes from thise ingredients will be merged into output itemstack [DocumentAsJson] public string[] MergeAttributesFrom Field Value string[] Name (Optional) (Default: Asset Location) Name of the recipe. Used for logging, and some specific uses. Recipes for repairing objects must contain 'repair' in the name. [DocumentAsJson] public AssetLocation Name Field Value AssetLocation RecipeGroup (Optional) (Default: 0) Info used by the handbook. By default, all recipes for an object will appear in a single preview. This allows you to split grid recipe previews into multiple. [DocumentAsJson] public int RecipeGroup Field Value int RequiresTrait (Optional) (Default: None) If set, only players with given trait can use this recipe. See config/traits.json for a list of traits. [DocumentAsJson] public string RequiresTrait Field Value string Shapeless (Optional) (Default: False) Whether the order of input items should be respected [DocumentAsJson] public bool Shapeless Field Value bool ShowInCreatedBy (Optional) (Default: True) Used by the handbook. If false, will not appear in the \"Created by\" section [DocumentAsJson] public bool ShowInCreatedBy Field Value bool SkipVariants (Optional) (Default: None) If '{code}' is used in ingredient code, skip variants for this code should be specified in this map [DocumentAsJson] public Dictionary<string, string[]> SkipVariants Field Value Dictionary<string, string[]>"
  },
  "jsondocs/Vintagestory.API.Common.GrindingProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.GrindingProperties.html",
    "title": "Class GrindingProperties | VintageStory Json Docs",
    "keywords": "Class GrindingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of properties that allow an object to be ground in a quern. Open in GitHub [DocumentAsJson] public class GrindingProperties Inheritance object GrindingProperties Examples \"grindingProps\": { \"groundStack\": { \"type\": \"item\", \"code\": \"bonemeal\" } }, Fields GroundStack (Required) If set, the collectible is grindable in a quern and this is the resulting itemstack once the grinding time is over. [DocumentAsJson] public JsonItemStack GroundStack Field Value JsonItemStack GrindedStack (Obsolete) Obsolete. Please use GroundStack instead. [DocumentAsJson] [Obsolete(\"Use GroundStack instead\")] public JsonItemStack GrindedStack { get; set; } Field Value JsonItemStack"
  },
  "jsondocs/Vintagestory.API.Common.HeldSounds.html": {
    "href": "jsondocs/Vintagestory.API.Common.HeldSounds.html",
    "title": "Class HeldSounds | VintageStory Json Docs",
    "keywords": "Class HeldSounds Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of sounds for a collectible object. Open in GitHub [DocumentAsJson] public class HeldSounds Inheritance object HeldSounds Examples \"heldSoundsbyType\": { \"*-lit-*\": { \"idle\": \"held/torch-idle\", \"equip\": \"held/torch-equip\", \"unequip\": \"held/torch-unequip\", \"attack\": \"held/torch-attack\" } }, Fields Attack (Optional) (Default: None) The path to a sound played when this item is used to attack. [DocumentAsJson] public AssetLocation Attack Field Value AssetLocation Equip (Optional) (Default: None) The path to a sound played when this item is equipped. [DocumentAsJson] public AssetLocation Equip Field Value AssetLocation Idle (Optional) (Default: None) The path to a sound played when this item is being held. [DocumentAsJson] public AssetLocation Idle Field Value AssetLocation InvPickup (Optional) (Default: \"player/clayformhi\") The path to a sound played when this item is picked up in the inventory using the mouse. [DocumentAsJson] public AssetLocation InvPickup Field Value AssetLocation InvPlace (Optional) (Default: \"player/clayform\") The path to a sound played when this item is placed in the inventory using the mouse. [DocumentAsJson] public AssetLocation InvPlace Field Value AssetLocation Unequip (Optional) (Default: None) The path to a sound played when this item is unequipped. [DocumentAsJson] public AssetLocation Unequip Field Value AssetLocation"
  },
  "jsondocs/Vintagestory.API.Common.JsonItemStack.html": {
    "href": "jsondocs/Vintagestory.API.Common.JsonItemStack.html",
    "title": "Class JsonItemStack | VintageStory Json Docs",
    "keywords": "Class JsonItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a representation of an item stack in JSON. It resembles a standard in-game item stack but can be stored before the game is loaded. Open in GitHub [DocumentAsJson] [ProtoContract] public class JsonItemStack Inheritance object JsonItemStack Derived BarrelOutputStack CookingRecipeStack MetalAlloyIngredient Examples \"output\": { \"type\": \"item\", \"code\": \"knifeblade-flint\", \"stacksize\": 1 }, \"output\": { \"type\": \"block\", \"code\": \"ladder-wood-north\", \"quantity\": 3 }, Fields Code (Required) The asset location code of the block or item. [ProtoMember(2)] [DocumentAsJson] public AssetLocation Code Field Value AssetLocation Type (Recommended) (Default: Block) Block or Item? [ProtoMember(1)] [DocumentAsJson] public EnumItemClass Type Field Value EnumItemClass Attributes (Optional) (Default: None) Tree Attributes that should be attached to the resulting itemstack. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] [ProtoMember(4)] public JsonObject Attributes Field Value JsonObject Quantity (Optional) (Default: 1) Alias of StackSize. No real need to use this instead of it. [DocumentAsJson] public int Quantity { get; set; } Field Value int StackSize (Optional) (Default: 1) Amount of items in this stacks [ProtoMember(3)] [DocumentAsJson] public int StackSize Field Value int"
  },
  "jsondocs/Vintagestory.API.Common.LayeredVoxelRecipe-1.html": {
    "href": "jsondocs/Vintagestory.API.Common.LayeredVoxelRecipe-1.html",
    "title": "Class LayeredVoxelRecipe<T> | VintageStory Json Docs",
    "keywords": "Class LayeredVoxelRecipe<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Creates a recipe using a 3D voxel-based system. Used for recipes types such as clayforming, smithing, or stone-knapping. [DocumentAsJson] public abstract class LayeredVoxelRecipe<T> : RecipeBase<T> Type Parameters T Inheritance object RecipeBase<T> LayeredVoxelRecipe<T> Derived ClayFormingRecipe KnappingRecipe SmithingRecipe Inherited Members RecipeBase<T>.Ingredients RecipeBase<T>.Ingredient RecipeBase<T>.Output RecipeBase<T>.Name RecipeBase<T>.Enabled Fields Pattern (Required) A 2D array of strings that are layered together to form the recipe. Use \"#\" for solid, and \"_\" or \" \" for a gap. [DocumentAsJson] public string[][] Pattern Field Value string[][]"
  },
  "jsondocs/Vintagestory.API.Common.ModelTransform.html": {
    "href": "jsondocs/Vintagestory.API.Common.ModelTransform.html",
    "title": "Class ModelTransform | VintageStory Json Docs",
    "keywords": "Class ModelTransform Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used for transformations applied to a block or item model. Uses values from ModelTransformNoDefaults but will assign defaults if not included. Open in GitHub [DocumentAsJson] public class ModelTransform : ModelTransformNoDefaults Inheritance object ModelTransformNoDefaults ModelTransform Inherited Members ModelTransformNoDefaults.Translation ModelTransformNoDefaults.Rotation ModelTransformNoDefaults.Scale ModelTransformNoDefaults.Origin ModelTransformNoDefaults.Rotate ModelTransformNoDefaults.ScaleXYZ Examples Use '.tfedit' in game to help customize these values, just make sure to copy them into your json file when you finish. \"tpHandTransform\": { \"translation\": { \"x\": -0.87, \"y\": -0.01, \"z\": -0.56 }, \"rotation\": { \"x\": -90, \"y\": 0, \"z\": 0 }, \"origin\": { \"x\": 0.5, \"y\": 0, \"z\": 0.5 }, \"scale\": 0.8 },"
  },
  "jsondocs/Vintagestory.API.Common.ModelTransformNoDefaults.html": {
    "href": "jsondocs/Vintagestory.API.Common.ModelTransformNoDefaults.html",
    "title": "Class ModelTransformNoDefaults | VintageStory Json Docs",
    "keywords": "Class ModelTransformNoDefaults Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Controls the transformations of 3D shapes. Note that defaults change depending on where this class is used. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class ModelTransformNoDefaults Inheritance object ModelTransformNoDefaults Derived ModelTransform Examples Use '.tfedit' in game to help customize these values, just make sure to copy them into your json file when you finish. \"tpHandTransform\": { \"translation\": { \"x\": -0.87, \"y\": -0.01, \"z\": -0.56 }, \"rotation\": { \"x\": -90, \"y\": 0, \"z\": 0 }, \"origin\": { \"x\": 0.5, \"y\": 0, \"z\": 0.5 }, \"scale\": 0.8 }, Fields Origin (Optional) Rotation/Scaling Origin [JsonProperty] public FastVec3f Origin Field Value FastVec3f Rotate (Optional) For Gui Transform: Whether to slowly spin in gui item preview For Ground Transform: Whether to apply a random rotation to the dropped item No effect on other transforms [JsonProperty] public bool Rotate Field Value bool Rotation (Optional) Rotation in degrees [JsonProperty] public FastVec3f Rotation Field Value FastVec3f Scale (Optional) Sets the same scale of an object for all axes. [JsonProperty] public float Scale { set; } Field Value float ScaleXYZ (Optional) Scaling per axis [JsonProperty] public FastVec3f ScaleXYZ Field Value FastVec3f Translation (Optional) Offsetting [JsonProperty] public FastVec3f Translation Field Value FastVec3f"
  },
  "jsondocs/Vintagestory.API.Common.RecipeBase-1.html": {
    "href": "jsondocs/Vintagestory.API.Common.RecipeBase-1.html",
    "title": "Class RecipeBase<T> | VintageStory Json Docs",
    "keywords": "Class RecipeBase<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Creates a new base recipe type. Almost all recipe types extend from this. [DocumentAsJson] public abstract class RecipeBase<T> Type Parameters T The resulting recipe type. Inheritance object RecipeBase<T> Derived LayeredVoxelRecipe<T> Fields Ingredient (Required) A single ingredient for this recipe. If you need to use more than one ingredient, see Ingredients. Required if not using Ingredients. [DocumentAsJson] public CraftingRecipeIngredient Ingredient { get; set; } Field Value CraftingRecipeIngredient Ingredients (Required) An array of ingredients for this recipe. If only using a single ingredient, see Ingredient. Required if not using Ingredient. [DocumentAsJson] public CraftingRecipeIngredient[] Ingredients Field Value CraftingRecipeIngredient[] Output (Required) The output when the recipe is successful. [DocumentAsJson] public JsonItemStack Output Field Value JsonItemStack Enabled (Optional) (Default: True) Should this recipe be loaded by the game? [DocumentAsJson] public bool Enabled { get; set; } Field Value bool Name (Optional) (Default: Asset Path) Adds a name to this recipe. Used for logging, and determining helve hammer workability for smithing recipes. [DocumentAsJson] public AssetLocation Name { get; set; } Field Value AssetLocation"
  },
  "jsondocs/Vintagestory.API.Common.TransitionableProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.TransitionableProperties.html",
    "title": "Class TransitionableProperties | VintageStory Json Docs",
    "keywords": "Class TransitionableProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a versatile way of allowing a collectible to change to another after a certain time in the inventory. Open in GitHub [DocumentAsJson] public class TransitionableProperties Inheritance object TransitionableProperties Examples \"transitionablePropsByType\": { \"*-long-raw\": [ { \"type\": \"Dry\", \"freshHours\": { \"avg\": 0 }, \"transitionHours\": { \"avg\": 168 }, \"transitionedStack\": { \"type\": \"item\", \"code\": \"bowstave-long-dry\" }, \"transitionRatio\": 1 } ] }, \"transitionableProps\": [ { \"type\": \"Perish\", \"freshHours\": { \"avg\": 120 }, \"transitionHours\": { \"avg\": 24 }, \"transitionedStack\": { \"type\": \"item\", \"code\": \"rot\" }, \"transitionRatio\": 0.5 } ], Fields TransitionedStack (Required) The itemstack the collectible turns into upon transitioning. [DocumentAsJson] public JsonItemStack TransitionedStack Field Value JsonItemStack FreshHours (Recommended) (Default: 36) The amount of hours before this item starts the transitioning process. [DocumentAsJson] public NatFloat FreshHours Field Value NatFloat TransitionHours (Recommended) (Default: 12) The amount of hours it takes for the item to transition, after FreshHours has elapsed. [DocumentAsJson] public NatFloat TransitionHours Field Value NatFloat Type (Recommended) (Default: None) What kind of transition can it make? [DocumentAsJson] public EnumTransitionType Type Field Value EnumTransitionType TransitionRatio (Optional) (Default: 1) Conversion ratio of fresh stacksize to transitioned stack size [DocumentAsJson] public float TransitionRatio Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.VertexFlags.html": {
    "href": "jsondocs/Vintagestory.API.Common.VertexFlags.html",
    "title": "Class VertexFlags | VintageStory Json Docs",
    "keywords": "Class VertexFlags Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Special class to handle the vertex flagging in a very nicely compressed space. Bit 0-7: Glow level Bit 8-10: Z-Offset Bit 11: Reflective bit Bit 12: Lod 0 Bit Bit 13-24: X/Y/Z Normals Bit 25, 26, 27, 28: Wind mode Bit 29, 30, 31: Wind data (also sometimes used for other data, e.g. reflection mode if Reflective bit is set, or additional water surface data if this is a water block) Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class VertexFlags Inheritance object VertexFlags Examples \"vertexFlagsByType\": { \"metalblock-new-*\": { \"reflective\": true, \"windDataByType\": { \"*-gold\": 1, \"*\": 1 } } }, Fields All Sets all the vertex flags from one integer. [JsonProperty] public int All { get; set; } Field Value int GlowLevel [JsonProperty] public byte GlowLevel { get; set; } Field Value byte Lod0 [JsonProperty] public bool Lod0 { get; set; } Field Value bool Normal [JsonProperty] public short Normal { get; set; } Field Value short Reflective [JsonProperty] public bool Reflective { get; set; } Field Value bool WindData [JsonProperty] public byte WindData { get; set; } Field Value byte WindMode [JsonProperty] public EnumWindBitMode WindMode { get; set; } Field Value EnumWindBitMode ZOffset [JsonProperty] public byte ZOffset { get; set; } Field Value byte"
  },
  "jsondocs/Vintagestory.API.Common.html": {
    "href": "jsondocs/Vintagestory.API.Common.html",
    "title": "Namespace Vintagestory.API.Common | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Common Classes AdvancedParticleProperties Used to add a set of particle properties to a collectible. Open in GitHub AnimationMetaData Animation Meta Data is a json type that controls how an animation should be played. Open in GitHub AnimationSound Open in GitHub AnimationTrigger Data about when an animation should be triggered. Open in GitHub AssetLocation Defines a complete path to an assets, including it's domain. Open in GitHub BakingProperties Baking Properties are collectible attribute used for baking items in a clay oven. You will need to add these attributes if using Bake inside SmeltingType. Open in GitHub BlockBehavior Allows for definitions of behaviors of a block that can be applied to any block See the derived types for a list of all documented block behaviors. Open in GitHub BlockDropItemStack Represents an itemstack that is dropped when breaking a block, with a potentially random quantity. Open in GitHub BlockEntityBehaviorType Allows adding behaviors for block entities. Remember, block entities are specific instances of blocks placed within the world. Open in GitHub BlockSounds A set of sounds that are defined for a block. All fields use default or empty sounds if not set. Open in GitHub CollectibleBehavior A behavior object which can be added to any collectible. See the derived types for a list of documented collectible behaviors. Open in GitHub CombustibleProperties Marks an item as combustible, either by cooking, smelting or firing. This can either imply it is used as a fuel, or can be cooked into another object. Open in GitHub CompositeShape Holds shape data to create 3D representations of objects. Also allows shapes to be overlayed on top of one another recursively. Open in GitHub CraftingRecipeIngredient A crafting recipe ingredient Open in GitHub CreativeTabAndStackList Allows you to add a list of item stacks to put various into creative menu tabs. Open in GitHub CrushingProperties Defines a set of properties that allow an object to be ground in a quern. Open in GitHub FoodNutritionProperties Allows you to make collectibles edible, and adds data about their nutrition. Open in GitHub GridRecipe Represents a crafting recipe to be made on the crafting grid. Open in GitHub GrindingProperties Defines a set of properties that allow an object to be ground in a quern. Open in GitHub HeldSounds Defines a set of sounds for a collectible object. Open in GitHub JsonItemStack This is a representation of an item stack in JSON. It resembles a standard in-game item stack but can be stored before the game is loaded. Open in GitHub LayeredVoxelRecipe<T> Creates a recipe using a 3D voxel-based system. Used for recipes types such as clayforming, smithing, or stone-knapping. ModelTransform Used for transformations applied to a block or item model. Uses values from ModelTransformNoDefaults but will assign defaults if not included. Open in GitHub ModelTransformNoDefaults Controls the transformations of 3D shapes. Note that defaults change depending on where this class is used. Open in GitHub RecipeBase<T> Creates a new base recipe type. Almost all recipe types extend from this. TransitionableProperties This is a versatile way of allowing a collectible to change to another after a certain time in the inventory. Open in GitHub VertexFlags Special class to handle the vertex flagging in a very nicely compressed space. Bit 0-7: Glow level Bit 8-10: Z-Offset Bit 11: Reflective bit Bit 12: Lod 0 Bit Bit 13-24: X/Y/Z Normals Bit 25, 26, 27, 28: Wind mode Bit 29, 30, 31: Wind data (also sometimes used for other data, e.g. reflection mode if Reflective bit is set, or additional water surface data if this is a water block) Open in GitHub Enums EnumAICreatureType Types of creatures used for pathfinding. Humanoids prefer taking paths. Open in GitHub EnumAnimationBlendMode Defines how multiple animations should be blended together. Open in GitHub EnumAppSide A server/client side used by for the Vintage Story app. Open in GitHub EnumBlockMaterial Materials of which a block may be made of. Currently only used for mining speed for tools and blast resistance. Open in GitHub EnumFoodCategory Types of nutrition for foods. Open in GitHub EnumGetClimateMode The type of climate values you wish to receive Open in GitHub EnumHabitat Habitats for entities. Controls some minor logic for entities. Open in GitHub EnumItemClass The type of collectible in an itemstack. Open in GitHub EnumItemDamageSource Types for how an item can damage it's durability. Open in GitHub EnumLightLevelType Used in blockAccessor.GetLightLevel() to determine what kind of light level you want Open in GitHub EnumMatterState Various states of matter to use for collectibles. Open in GitHub EnumMouseButton A list of mouse buttons. Open in GitHub EnumParticleModel Types of model for a particle. Open in GitHub EnumRandomizeAxes When picking a random seed for this block, what axes should we base it on? Open in GitHub EnumShapeFormat Types of shape that can be loaded by the game. Open in GitHub EnumSmeltType The type of smelting for the collectible. This effects how the object is smelted. Open in GitHub EnumSoilNutrient The three types of soil nutrient for farmland and crops. Open in GitHub EnumTool Types for each tool in the game. Some of these are unused. Open in GitHub EnumTransitionType Types of transition for items. Open in GitHub"
  },
  "jsondocs/Vintagestory.API.Datastructures.RotatableCube.html": {
    "href": "jsondocs/Vintagestory.API.Datastructures.RotatableCube.html",
    "title": "Class RotatableCube | VintageStory Json Docs",
    "keywords": "Class RotatableCube Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A rotatable version of a cuboid. Open in GitHub [DocumentAsJson] public class RotatableCube : Cuboidf Inheritance object Cuboidf RotatableCube Inherited Members Cuboidf.X1 Cuboidf.Y1 Cuboidf.Z1 Cuboidf.X2 Cuboidf.Y2 Cuboidf.Z2 Examples \"selectionboxbytype\": { \"*-up\": { \"x1\": 0, \"y1\": 0, \"z1\": 0, \"x2\": 1, \"y2\": 0.4, \"z2\": 1 }, \"*-north\": { \"x1\": 0, \"y1\": 0, \"z1\": 0, \"x2\": 1, \"y2\": 0.4, \"z2\": 1, \"rotateZ\": 90, \"rotateY\": 270 }, ... }, Fields Origin (Optional) (Default: (0.5, 0.5, 0.5)) The origin point for the object to rotate around. Measured in meters from zero, not percent. [DocumentAsJson] public Vec3d Origin Field Value Vec3d RotateX (Optional) (Default: 0) The cube's rotation around the X axis. [DocumentAsJson] public float RotateX Field Value float RotateY (Optional) (Default: 0) The cube's rotation around the Y axis. [DocumentAsJson] public float RotateY Field Value float RotateZ (Optional) (Default: 0) The cube's rotation around the Z axis. [DocumentAsJson] public float RotateZ Field Value float"
  },
  "jsondocs/Vintagestory.API.Datastructures.html": {
    "href": "jsondocs/Vintagestory.API.Datastructures.html",
    "title": "Namespace Vintagestory.API.Datastructures | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Datastructures Classes RotatableCube A rotatable version of a cuboid. Open in GitHub"
  },
  "jsondocs/Vintagestory.API.MathTools.Cuboidf.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Cuboidf.html",
    "title": "Class Cuboidf | VintageStory Json Docs",
    "keywords": "Class Cuboidf Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a three dimensional axis-aligned cuboid using two 3D coordinates. Used for collision and selection boxes. Open in GitHub [DocumentAsJson] public class Cuboidf Inheritance object Cuboidf Derived RotatableCube Fields X1 (Optional) (Default: 0) Start X Pos [DocumentAsJson] public float X1 Field Value float X2 (Optional) (Default: 0) End X Pos [DocumentAsJson] public float X2 Field Value float Y1 (Optional) (Default: 0) Start Y Pos [DocumentAsJson] public float Y1 Field Value float Y2 (Optional) (Default: 0) End Y Pos [DocumentAsJson] public float Y2 Field Value float Z1 (Optional) (Default: 0) Start Z Pos [DocumentAsJson] public float Z1 Field Value float Z2 (Optional) (Default: 0) End Z Pos [DocumentAsJson] public float Z2 Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.Cuboidi.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Cuboidi.html",
    "title": "Class Cuboidi | VintageStory Json Docs",
    "keywords": "Class Cuboidi Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A 3D cuboid, created out of integers. Open in GitHub [DocumentAsJson] [ProtoContract] public class Cuboidi Inheritance object Cuboidi Fields X1 [ProtoMember(1)] [DocumentAsJson] public int X1 Field Value int X2 [ProtoMember(4)] [DocumentAsJson] public int X2 Field Value int Y1 [ProtoMember(2)] [DocumentAsJson] public int Y1 Field Value int Y2 [ProtoMember(5)] [DocumentAsJson] public int Y2 Field Value int Z1 [ProtoMember(3)] [DocumentAsJson] public int Z1 Field Value int Z2 [ProtoMember(6)] [DocumentAsJson] public int Z2 Field Value int"
  },
  "jsondocs/Vintagestory.API.MathTools.EnumColorBlendMode.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumColorBlendMode.html",
    "title": "Enum EnumColorBlendMode | VintageStory Json Docs",
    "keywords": "Enum EnumColorBlendMode Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Specifies types of per-pixel color blending. Open in GitHub [DocumentAsJson] public enum EnumColorBlendMode Methods Normal = 0 Darken = 1 Lighten = 2 Multiply = 3 Screen = 4 ColorDodge = 5 ColorBurn = 6 Overlay = 7 OverlayCutout = 8"
  },
  "jsondocs/Vintagestory.API.MathTools.EnumCombination.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumCombination.html",
    "title": "Enum EnumCombination | VintageStory Json Docs",
    "keywords": "Enum EnumCombination Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Used to define how variant types interact with each other to create unique objects. Open in GitHub [DocumentAsJson] public enum EnumCombination Methods Add = 0 This variant type will ignore all other variant types. Each state is appended onto the object's code, without any other variant types. Multiply = 1 Default behavior - This variant's states will be enumerated with all other variant states that have this combination. SelectiveMultiply = 2 This variant's states will be enumerated only with the selected variant group. You must select another variant code using the 'onVariant' property."
  },
  "jsondocs/Vintagestory.API.MathTools.EnumDistribution.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumDistribution.html",
    "title": "Enum EnumDistribution | VintageStory Json Docs",
    "keywords": "Enum EnumDistribution Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll The distribution of the random numbers Open in GitHub [DocumentAsJson] public enum EnumDistribution Methods UNIFORM = 0 Select completely random numbers within avg-var until avg+var TRIANGLE = 1 Select random numbers with numbers near avg being the most commonly selected ones, following a triangle curve GAUSSIAN = 2 Select random numbers with numbers near avg being the more commonly selected ones, following a gaussian curve NARROWGAUSSIAN = 3 Select random numbers with numbers near avg being the much more commonly selected ones, following a narrow gaussian curve VERYNARROWGAUSSIAN = 10 Select random numbers with numbers near avg being the much much more commonly selected ones, following an even narrower gaussian curve INVERSEGAUSSIAN = 4 Select random numbers with numbers near avg being the less commonly selected ones, following an upside down gaussian curve NARROWINVERSEGAUSSIAN = 5 Select random numbers with numbers near avg being the much less commonly selected ones, following an upside down gaussian curve INVEXP = 6 Select random numbers in the form of avg + var, with numbers near avg being preferred STRONGINVEXP = 7 Select random numbers in the form of avg + var, with numbers near avg being strongly preferred STRONGERINVEXP = 8 Select random numbers in the form of avg + var, with numbers near avg being very strongly preferred DIRAC = 9 Select completely random numbers within avg-var until avg+var only ONCE and then always 0"
  },
  "jsondocs/Vintagestory.API.MathTools.EnumTransformFunction.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumTransformFunction.html",
    "title": "Enum EnumTransformFunction | VintageStory Json Docs",
    "keywords": "Enum EnumTransformFunction Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Used for EvolvingNatFloat value transforms Open in GitHub [DocumentAsJson] public enum EnumTransformFunction Methods IDENTICAL = 0 y = firstval LINEAR = 1 y = firstval + factor * seq LINEARNULLIFY = 2 y = factor > 0 ? Math.Min(0, firstval + factor * seq) : Math.Max(0, firstval + factor * seq) LINEARREDUCE = 3 firstval - firstval / Math.Abs(firstval) * factor * seq LINEARINCREASE = 4 firstval + firstval / Math.Abs(firstval) * factor * seq QUADRATIC = 5 firstval + Math.Sign(factor) * (factor * seq) * (factor * seq) INVERSELINEAR = 6 firstval + 1f / (1f + factor * seq) ROOT = 7 firstval + (float)Math.Sqrt(factor * seq) SINUS = 8 firstval + GameMath.FastSin(factor * seq) CLAMPEDPOSITIVESINUS = 9 firstval * GameMath.Min(5 * Math.Abs(GameMath.FastSin(factor * seq)), 1) COSINUS = 10 firstval + GameMath.FastCos(factor * seq) SMOOTHSTEP = 11 firstval + GameMath.SmoothStep(factor * seq)"
  },
  "jsondocs/Vintagestory.API.MathTools.EvolvingNatFloat.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EvolvingNatFloat.html",
    "title": "Class EvolvingNatFloat | VintageStory Json Docs",
    "keywords": "Class EvolvingNatFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A number generator whose return value changes over time, parametrized by a transform function and some constants Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class EvolvingNatFloat Inheritance object EvolvingNatFloat Fields factor (Recommended) (Default: 0) A scale factor for the value during the transformation function. [JsonProperty] private float factor Field Value float maxvalue (Optional) (Default: None) The maximum value this random value can return. [JsonProperty] private float? maxvalue Field Value float? transform (Optional) (Default: IDENTICAL) The type of function to use as this value changes. [JsonProperty] private EnumTransformFunction transform Field Value EnumTransformFunction"
  },
  "jsondocs/Vintagestory.API.MathTools.NatFloat.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.NatFloat.html",
    "title": "Class NatFloat | VintageStory Json Docs",
    "keywords": "Class NatFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly) Open in GitHub [DocumentAsJson] public class NatFloat Inheritance object NatFloat Examples \"quantity\": { \"dist\": \"strongerinvexp\", \"avg\": 6, \"var\": 4 } \"quantity\": { \"avg\": 4, \"var\": 2 } Fields avg (Recommended) (Default: 0) The average value for the random float. [DocumentAsJson] public float avg Field Value float var (Recommended) (Default: 0) The variation for the random float. [DocumentAsJson] public float var Field Value float dist (Optional) (Default: UNIFORM) The type of distribution to use that determines the commodity of values. [DocumentAsJson] public EnumDistribution dist Field Value EnumDistribution offset (Optional) (Default: 0) A full offset to apply to any values returned. [DocumentAsJson] public float offset Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.Size3f.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Size3f.html",
    "title": "Class Size3f | VintageStory Json Docs",
    "keywords": "Class Size3f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub [DocumentAsJson] public class Size3f Inheritance object Size3f Fields Height (Recommended) (Default: 0) The Y-dimension for this size. [DocumentAsJson] public float Height Field Value float Length (Recommended) (Default: 0) The Z-dimension for this size. [DocumentAsJson] public float Length Field Value float Width (Recommended) (Default: 0) The X-dimension of this size. [DocumentAsJson] public float Width Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.Vec2f.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Vec2f.html",
    "title": "Class Vec2f | VintageStory Json Docs",
    "keywords": "Class Vec2f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] [ProtoContract] public class Vec2f Inheritance object Vec2f Fields X (Optional) (Default: 0) The X element of the vector. [DocumentAsJson] [JsonProperty] [ProtoMember(1)] public float X Field Value float Y (Optional) (Default: 0) The Y element of the vector. [DocumentAsJson] [JsonProperty] [ProtoMember(2)] public float Y Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.html",
    "title": "Namespace Vintagestory.API.MathTools | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.MathTools Classes Cuboidf Represents a three dimensional axis-aligned cuboid using two 3D coordinates. Used for collision and selection boxes. Open in GitHub Cuboidi A 3D cuboid, created out of integers. Open in GitHub EvolvingNatFloat A number generator whose return value changes over time, parametrized by a transform function and some constants Open in GitHub NatFloat A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly) Open in GitHub Size3f Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub Vec2f Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub Enums EnumColorBlendMode Specifies types of per-pixel color blending. Open in GitHub EnumCombination Used to define how variant types interact with each other to create unique objects. Open in GitHub EnumDistribution The distribution of the random numbers Open in GitHub EnumTransformFunction Used for EvolvingNatFloat value transforms Open in GitHub"
  },
  "jsondocs/Vintagestory.GameContent.AlloyRecipe.html": {
    "href": "jsondocs/Vintagestory.GameContent.AlloyRecipe.html",
    "title": "Class AlloyRecipe | VintageStory Json Docs",
    "keywords": "Class AlloyRecipe Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll This is used to define what metals can be mixed together to create another type of metal inside of a crucible. Open in GitHub [DocumentAsJson] public class AlloyRecipe Inheritance object AlloyRecipe Examples { \"ingredients\": [ { \"type\": \"item\", \"code\": \"ingot-copper\", \"minratio\": 0.5, \"maxratio\": 0.7 }, { \"type\": \"item\", \"code\": \"ingot-zinc\", \"minratio\": 0.2, \"maxratio\": 0.3 }, { \"type\": \"item\", \"code\": \"ingot-bismuth\", \"minratio\": 0.1, \"maxratio\": 0.2 } ], \"output\": { \"type\": \"item\", \"code\": \"ingot-bismuthbronze\" } } Fields Ingredients (Required) The ingredients for this alloy, defined as an item stack with a minimum and maximum range. [DocumentAsJson] public MetalAlloyIngredient[] Ingredients Field Value MetalAlloyIngredient[] Output (Required) The output for the alloy. [DocumentAsJson] public JsonItemStack Output Field Value JsonItemStack Enabled (Optional) (Default: true) Should this recipe be loaded in the game? [DocumentAsJson] public bool Enabled Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BarrelOutputStack.html": {
    "href": "jsondocs/Vintagestory.GameContent.BarrelOutputStack.html",
    "title": "Class BarrelOutputStack | VintageStory Json Docs",
    "keywords": "Class BarrelOutputStack Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Defines an output for use in a BarrelRecipe. This object takes most of its properties from the JsonItemStack class. Open in GitHub [DocumentAsJson] public class BarrelOutputStack : JsonItemStack Inheritance object JsonItemStack BarrelOutputStack Inherited Members JsonItemStack.Type JsonItemStack.Code JsonItemStack.StackSize JsonItemStack.Quantity JsonItemStack.Attributes Examples \"output\": { \"type\": \"item\", \"code\": \"leather-normal-plain\", \"stackSize\": 3 } \"output\": { \"type\": \"item\", \"code\": \"weaktanninportion\", \"litres\": 10 } Fields Litres (Optional) (Default: 0) If this output is a liquid, this should be used instead of StackSize to define quantity. [DocumentAsJson] public float Litres Field Value float"
  },
  "jsondocs/Vintagestory.GameContent.BarrelRecipe.html": {
    "href": "jsondocs/Vintagestory.GameContent.BarrelRecipe.html",
    "title": "Class BarrelRecipe | VintageStory Json Docs",
    "keywords": "Class BarrelRecipe Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Creates a recipe for use inside a barrel. Primarily used to craft with liquids. Open in GitHub [DocumentAsJson] public class BarrelRecipe Inheritance object BarrelRecipe Examples { \"code\": \"compost\", \"sealHours\": 480, \"ingredients\": [ { \"type\": \"item\", \"code\": \"rot\", \"litres\": 64 } ], \"output\": { \"type\": \"item\", \"code\": \"compost\", \"stackSize\": 16 } } Fields Code (Required) A code for this recipe, used to create an entry in the handbook. [DocumentAsJson] public string Code Field Value string Ingredients (Required) Defines the set of ingredients used inside the barrel. Barrels can have a maximum of one item and one liquid ingredient. [DocumentAsJson] public BarrelRecipeIngredient[] Ingredients Field Value BarrelRecipeIngredient[] Output (Required) The final output of this recipe. [DocumentAsJson] public BarrelOutputStack Output Field Value BarrelOutputStack SealHours (Required) How many in-game hours this recipe takes after sealing. [DocumentAsJson] public double SealHours Field Value double Enabled (Optional) (Default: True) Should this recipe be loaded by the recipe loader? [DocumentAsJson] public bool Enabled { get; set; } Field Value bool Name (Obsolete) Unused. Defines a name for the recipe. [DocumentAsJson] public AssetLocation Name { get; set; } Field Value AssetLocation RecipeId (Obsolete) Unused. Defines an ID for the recipe. [DocumentAsJson] public int RecipeId Field Value int"
  },
  "jsondocs/Vintagestory.GameContent.BarrelRecipeIngredient.html": {
    "href": "jsondocs/Vintagestory.GameContent.BarrelRecipeIngredient.html",
    "title": "Class BarrelRecipeIngredient | VintageStory Json Docs",
    "keywords": "Class BarrelRecipeIngredient Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Defines an ingredient for use in a BarrelRecipe. Open in GitHub [DocumentAsJson] public class BarrelRecipeIngredient : CraftingRecipeIngredient Inheritance object CraftingRecipeIngredient BarrelRecipeIngredient Inherited Members CraftingRecipeIngredient.Type CraftingRecipeIngredient.Code CraftingRecipeIngredient.Name CraftingRecipeIngredient.Quantity CraftingRecipeIngredient.Attributes CraftingRecipeIngredient.RecipeAttributes CraftingRecipeIngredient.IsTool CraftingRecipeIngredient.ToolDurabilityCost CraftingRecipeIngredient.AllowedVariants CraftingRecipeIngredient.SkipVariants CraftingRecipeIngredient.ReturnedStack Examples { \"type\": \"item\", \"code\": \"strongtanninportion\", \"litres\": 2, \"consumeLitres\": 2 } { \"type\": \"item\", \"code\": \"hide-prepared-small\", \"quantity\": 1 } Fields ConsumeLitres (Optional) (Default: Consume All) How much of the liquid should be consumed in the recipe? This should only be used by recipes with a non-liquid output. [DocumentAsJson] public float? ConsumeLitres Field Value float? ConsumeQuantity (Optional) (Default: Consume All) How many of this itemstack should be consumed in the recipe? This should only be used for recipes with a liquid output. [DocumentAsJson] public int? ConsumeQuantity Field Value int? Litres (Optional) (Default: None) If the ingredient is a liquid, will use this value instead of Quantity. [DocumentAsJson] public float Litres Field Value float"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorBreakIfFloating.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorBreakIfFloating.html",
    "title": "Class BlockBehaviorBreakIfFloating | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorBreakIfFloating Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Forces the Block to drop as an item when surrounded by air blocks. It will override drops returned by the Block when this happens. Uses the code \"BreakIfFloating\". This behavior doesn't use any properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorBreakIfFloating : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorBreakIfFloating Examples \"behaviors\": [ { \"name\": \"BreakIfFloating\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorBreakSnowFirst.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorBreakSnowFirst.html",
    "title": "Class BlockBehaviorBreakSnowFirst | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorBreakSnowFirst Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll A simple block behavior that breaks a snow cover first, before breaking the block. Uses the code \"BreakSnowFirst\". This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorBreakSnowFirst : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorBreakSnowFirst Examples \"behaviorsByType\": { \"*-snow\": [ { \"name\": \"BreakSnowFirst\" } ] }"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorCanAttach.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorCanAttach.html",
    "title": "Class BlockBehaviorCanAttach | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorCanAttach Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows some other blocks, such as torches, to be attached onto specific sides of this block. Uses the code \"CanAttach\". Open in GitHub [DocumentAsJson] public class BlockBehaviorCanAttach : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorCanAttach Examples \"behaviors\": [ { \"name\": \"CanAttach\", \"properties\": { \"sides\": [ \"up\", \"down\" ] } } ] Fields sides (Required) The specified sides of this block that a block can be attached onto. Valid options are up, down, north, east, south, west. Non-specified sides will use default 'CanAttachBlockAt' logic. [DocumentAsJson(\"Required\", \"\", false)] private string[] sides Field Value string[]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorCanIgnite.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorCanIgnite.html",
    "title": "Class BlockBehaviorCanIgnite | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorCanIgnite Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Used if the attached block can ignite other blocks with Shift + Right Click. This behavior uses the code \"CanIgnite\", and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorCanIgnite : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorCanIgnite Examples \"behaviorsbyType\": { \"*-lit-*\": [ { \"name\": \"CanIgnite\" } ] }"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorChimney.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorChimney.html",
    "title": "Class BlockBehaviorChimney | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorChimney Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll If this block is placed directly above a smoke emitter (such as a firepit or pit kiln), smoke particles will be emitted. Uses the code \"chimney\" and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorChimney : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorChimney Examples \"behaviors\": [ { \"name\": \"Chimney\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorContainer.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorContainer.html",
    "title": "Class BlockBehaviorContainer | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorContainer Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Specifies that this block works as a container. Note that it requires a block entity class which implements BlockEntityOpenableContainer. Used with the code \"Container\". This behavior does not use any properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorContainer : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorContainer Examples \"behaviors\": [ { \"name\": \"Container\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorCreatureContainer.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorCreatureContainer.html",
    "title": "Class BlockBehaviorCreatureContainer | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorCreatureContainer Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a creature to be contained inside of this block, as well as catching and releasing the entity. Note that this behavior is built around use with the reed chest, and may have unexpected results with other blocks. This behavior uses the code \"CreatureContainer\", and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorCreatureContainer : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorCreatureContainer Examples \"behaviors\": [ { \"name\": \"CreatureContainer\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorDecor.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorDecor.html",
    "title": "Class BlockBehaviorDecor | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorDecor Namespace Vintagestory.GameContent Assembly VSEssentials.dll Allows this block to be placed on the side of another block, as a decorational shape/texture. Uses the code \"decor\". Open in GitHub [AddDocumentationProperty(\"Sides\", \"A list of sides that this decor block can be placed on.\", \"System.String[]\", \"Required\", \"\", false)] [AddDocumentationProperty(\"DrawIfCulled\", \"If true, do not cull even if parent face was culled (used e.g. for medium carpet, which stick out beyond the parent face)\", \"System.Boolean\", \"Optional\", \"False\", false)] [AddDocumentationProperty(\"AlternateZOffset\", \"If true, alternates z-offset vertexflag by 1 in odd/even XZ positions to reduce z-fighting (used e.g. for medium carpets overlaying neighbours)\", \"System.Boolean\", \"Optional\", \"False\", false)] [AddDocumentationProperty(\"NotFullFace\", \"If true, this decor is NOT (at least) a full opaque face so that the parent block face still needs to be drawn\", \"System.Boolean\", \"Optional\", \"False\", false)] [AddDocumentationProperty(\"Removable\", \"If true, this decor is removable using the players hands, without breaking the parent block\", \"System.Boolean\", \"Optional\", \"False\", false)] [AddDocumentationProperty(\"Thickness\", \"The thickness of this decor block. Used to adjust selection box of the parent block.\", \"System.Single\", \"Optional\", \"0.03125\", false)] [DocumentAsJson] public class BlockBehaviorDecor : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorDecor Examples \"behaviors\": [ { \"name\": \"Decor\", \"properties\": { \"sides\": [ \"north\", \"east\", \"south\", \"west\", \"up\", \"down\" ], \"notFullFace\": true, \"thickness\": 0.0 } } ], Fields Sides (Required) A list of sides that this decor block can be placed on. Field Value String[] AlternateZOffset (Optional) (Default: False) If true, alternates z-offset vertexflag by 1 in odd/even XZ positions to reduce z-fighting (used e.g. for medium carpets overlaying neighbours) Field Value bool DrawIfCulled (Optional) (Default: False) If true, do not cull even if parent face was culled (used e.g. for medium carpet, which stick out beyond the parent face) Field Value bool NotFullFace (Optional) (Default: False) If true, this decor is NOT (at least) a full opaque face so that the parent block face still needs to be drawn Field Value bool nwOrientable (Optional) (Default: False) If true, this decor will automatically pick a variant based on rotation. [DocumentAsJson(\"Optional\", \"False\", false)] private bool nwOrientable Field Value bool Removable (Optional) (Default: False) If true, this decor is removable using the players hands, without breaking the parent block Field Value bool sidedVariants (Optional) (Default: False) If true, this decor supplies its own different models for NSEWUD placement, if false the code will auto-rotate the model. [DocumentAsJson(\"Optional\", \"False\", false)] private bool sidedVariants Field Value bool Thickness (Optional) (Default: 0.03125) The thickness of this decor block. Used to adjust selection box of the parent block. Field Value Single"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorDoor.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorDoor.html",
    "title": "Class BlockBehaviorDoor | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorDoor Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll A block behavior for a door. Also requires the \"door\" block entity behavior type on a block to work. Defined with the \"Door\" code. Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"TriggerSound\", \"Sets both OpenSound & CloseSound.\", \"Vintagestory.API.Common.AssetLocation\", \"Optional\", \"sounds/block/door\", true)] public class BlockBehaviorDoor : StrongBlockBehavior Inheritance object CollectibleBehavior BlockBehavior StrongBlockBehavior BlockBehaviorDoor Examples \"behaviors\": [ { \"name\": \"Door\" } ] \"attributes\": { \"widthByType\": { \"*\": 1 }, \"heightByType\": { \"*\": 2 }, \"openSoundByType\": { \"*\": \"sounds/block/cokeovendoor-open\" }, \"closeSoundByType\": { \"*\": \"sounds/block/cokeovendoor-close\" } } Properties airtight (Optional) (Default: True) Is this door airtight? [DocumentAsJson(\"Optional\", \"True\", true)] public bool airtight Property Value bool CloseSound (Optional) (Default: sounds/block/door) The sound to play when the door is closed. [DocumentAsJson(\"Optional\", \"sounds/block/door\", true)] public AssetLocation CloseSound Property Value AssetLocation handopenable (Optional) (Default: True) Can this door be opened by hand? [DocumentAsJson(\"Optional\", \"True\", true)] public bool handopenable Property Value bool height (Optional) (Default: 1) The height of the multiblock instance for the door. [DocumentAsJson(\"Optional\", \"1\", true)] public int height Property Value int OpenSound (Optional) (Default: sounds/block/door) The sound to play when the door is opened. [DocumentAsJson(\"Optional\", \"sounds/block/door\", true)] public AssetLocation OpenSound Property Value AssetLocation TriggerSound (Optional) (Default: sounds/block/door) Sets both OpenSound & CloseSound. Property Value AssetLocation width (Optional) (Default: 1) The width of the multiblock instance for the door. [DocumentAsJson(\"Optional\", \"1\", true)] public int width Property Value int"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorDropNotSnowCovered.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorDropNotSnowCovered.html",
    "title": "Class BlockBehaviorDropNotSnowCovered | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorDropNotSnowCovered Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Drops the non-snow-covered block, when the snow covered version one is destroyed. This behavior uses the \"DropNotSnowCovered\" code, and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorDropNotSnowCovered : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorDropNotSnowCovered Examples \"behaviors\": [ { \"name\": \"DropNotSnowCovered\" } ],"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorElevatorControl.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorElevatorControl.html",
    "title": "Class BlockBehaviorElevatorControl | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorElevatorControl Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Used in combination with the \"BEBehaviorElevatorControl\" to create an elevator. Uses the code \"ElevatorControl\", and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorElevatorControl : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorElevatorControl Examples \"behaviors\": [ { \"name\": \"ElevatorControl\" } ],"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorExchangeOnInteract.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorExchangeOnInteract.html",
    "title": "Class BlockBehaviorExchangeOnInteract | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorExchangeOnInteract Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to swap between a set of states on activation. Note that this behavior has some small hardcoding for legacy trapdoors. This behavior is used with the code \"ExchangeOnInteract\". Open in GitHub [DocumentAsJson] public class BlockBehaviorExchangeOnInteract : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorExchangeOnInteract Examples \"behaviors\": [ { \"name\": \"ExchangeOnInteract\", \"properties\": { \"exchangeStates\": [ \"*-closed-*\", \"*-opened-*\" ], \"sound\": \"block/door\", \"actionLangCode\": \"blockhelp-trapdoor-openclose\" } } ] Fields actionlangcode (Required) The lang code to show text when hovering over this block. [DocumentAsJson(\"Required\", \"\", false)] private string actionlangcode Field Value string blockCodes (Required) The list of block codes to iterate over upon interaction. [DocumentAsJson(\"Required\", \"\", false)] private AssetLocation[] blockCodes Field Value AssetLocation[] sound (Required) The soudn to play when this block with exchanged. [DocumentAsJson(\"Required\", \"\", false)] private string sound Field Value string"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorFiniteSpreadingLiquid.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorFiniteSpreadingLiquid.html",
    "title": "Class BlockBehaviorFiniteSpreadingLiquid | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorFiniteSpreadingLiquid Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Used to create a liquid which distrubutes itself over an area, and has interaction with other liquids. Uses the \"FiniteSpreadingLiquid\" code. Open in GitHub [DocumentAsJson] public class BlockBehaviorFiniteSpreadingLiquid : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorFiniteSpreadingLiquid Examples \"behaviors\": [ { \"name\": \"FiniteSpreadingLiquid\", \"properties\": { \"spreadDelay\": 125, \"liquidCollisionSound\": \"sizzle\", \"sourceReplacementCode\": \"rock-obsidian\", \"flowingReplacementCode\": \"rock-basalt\", \"collidesWith\": \"lava\" } } ] Fields collidesWith (Optional) (Default: None) The liquid this one can collide with [DocumentAsJson(\"Optional\", \"None\", false)] private string collidesWith Field Value string collisionReplaceSound The sound to play when a liquid collision causes blocks to be replaced [DocumentAsJson] private AssetLocation collisionReplaceSound Field Value AssetLocation spreadDelay (Recommended) (Default: 150) Controls how fast the liquid spreads [DocumentAsJson(\"Recommended\", \"150\", false)] private int spreadDelay Field Value int liquidFlowingCollisionReplacement (Optional) (Default: None) Block code to replace the block with when colliding with a flowing block of a different liquid [DocumentAsJson(\"Optional\", \"None\", false)] private AssetLocation liquidFlowingCollisionReplacement Field Value AssetLocation liquidSourceCollisionReplacement (Optional) (Default: None) Block code to replace the block with when colliding with the source block of a different liquid [DocumentAsJson(\"Optional\", \"None\", false)] private AssetLocation liquidSourceCollisionReplacement Field Value AssetLocation"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorGiveItemPerPlayer.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorGiveItemPerPlayer.html",
    "title": "Class BlockBehaviorGiveItemPerPlayer | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorGiveItemPerPlayer Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Passes functions through to the BEBehaviorGiveItemPerPlayer block entity behavior. Therefore, requires that. Uses the \"GiveItemPerPlayer\" code. Open in GitHub [DocumentAsJson] public class BlockBehaviorGiveItemPerPlayer : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorGiveItemPerPlayer Properties interactionHelpCode (Required) The lang code to use when hovering over this placed block. [DocumentAsJson(\"Required\", \"\", true)] private string interactionHelpCode Property Value string"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorHarvestable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorHarvestable.html",
    "title": "Class BlockBehaviorHarvestable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorHarvestable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to be harvested with the right mouse button for set items. Uses the code \"harvestable\". Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"ForageStatAffected\", \"Should the harvested stack amount be multiplied by the player's 'forageDropRate' stat?\", \"System.Boolean\", \"Optional\", \"False\", true)] public class BlockBehaviorHarvestable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorHarvestable Examples \"behaviorsByType\": { \"*-ripe\": [ { \"name\": \"Harvestable\", \"properties\": { \"harvestTime\": 0.6, \"harvestedStack\": { \"type\": \"item\", \"code\": \"fruit-{type}\", \"quantity\": { \"avg\": 4.4 } }, \"harvestedBlockCode\": \"bigberrybush-{type}-empty\", \"exchangeBlock\": true } } ] } ... \"attributes\": { \"forageStatAffected\": true } Fields harvestedStack (Required) A drop for when the block is harvested. If using more than a single drop, use harvestedStacks, otherwise this property is required. [DocumentAsJson(\"Required\", \"\", false)] public BlockDropItemStack harvestedStack { get; set; } Field Value BlockDropItemStack harvestedStacks (Required) An array of drops for when the block is harvested. If only using a single drop you can use harvestedStack, otherwise this property is required. [DocumentAsJson(\"Required\", \"\", false)] public BlockDropItemStack[] harvestedStacks Field Value BlockDropItemStack[] harvestTime (Recommended) (Default: 0) The amount of time, in seconds, it takes to harvest this block. [DocumentAsJson(\"Recommended\", \"0\", false)] private float harvestTime Field Value float exchangeBlock (Optional) (Default: False) Should this block be exchanged (true) or replaced (false)? If true, then any block entity at the same position will not be deleted. [DocumentAsJson(\"Optional\", \"False\", false)] private bool exchangeBlock Field Value bool harvestedBlockCode (Optional) (Default: None) The block to replace this one after it is harvested. [DocumentAsJson(\"Optional\", \"None\", false)] private AssetLocation harvestedBlockCode Field Value AssetLocation harvestingSound (Optional) (Default: sounds/block/leafy-picking) The sound to play whilst the object is being harvested. [DocumentAsJson(\"Optional\", \"sounds/block/leafy-picking\", false)] public AssetLocation harvestingSound Field Value AssetLocation interactionHelpCode (Optional) (Default: blockhelp-harvetable-harvest) The code to use for the interaction help of this block. [DocumentAsJson(\"Optional\", \"blockhelp-harvetable-harvest\", false)] private string interactionHelpCode Field Value string Properties ForageStatAffected (Optional) (Default: False) Should the harvested stack amount be multiplied by the player's 'forageDropRate' stat? Property Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorHeatSource.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorHeatSource.html",
    "title": "Class BlockBehaviorHeatSource | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorHeatSource Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows this block to work as a heat source for entities. BlockEntities for a block with this behavior may also define their own custom heat strength. Uses the code \"HeatSource\". Open in GitHub [DocumentAsJson] public class BlockBehaviorHeatSource : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorHeatSource Examples \"behaviors\": [ { \"name\": \"HeatSource\", \"properties\": { \"heatStrength\": 10 } } ] Fields heatStrength (Recommended) (Default: 0) The level of heat that this block emits. Some BlockEntities may omit this property and define their own heat strength. Fire has a heat strength of 10. [DocumentAsJson(\"Recommended\", \"0\", false)] private float heatStrength Field Value float"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorHorizontalAttachable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorHorizontalAttachable.html",
    "title": "Class BlockBehaviorHorizontalAttachable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorHorizontalAttachable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Forces a block to only allow placement on the side of another block. Requires use of the \"horizontalorientation\" variant group. Uses the code \"HorizontalAttachable\". Open in GitHub [DocumentAsJson] public class BlockBehaviorHorizontalAttachable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorHorizontalAttachable Examples \"behaviors\": [ { \"name\": \"HorizontalAttachable\", \"properties\": { \"handleDrops\": false, \"attachmentAreas\": { \"north\": { \"x1\": 7, \"y1\": 0, \"z1\": 15, \"x2\": 8, \"y2\": 6, \"z2\": 15, \"rotateY\": 180 }, \"east\": { ... }, \"south\": { ... }, \"west\": { ... } } } } ] \"variantgroups\": [ { \"code\": \"side\", \"loadFromProperties\": \"abstract/horizontalorientation\" } ] Fields attachmentAreas (Optional) (Default: None) A list of cuboids for each face which define where the object should be attached for each. [DocumentAsJson(\"Optional\", \"None\", false)] private Dictionary<string, Cuboidi> attachmentAreas Field Value Dictionary<string, Cuboidi> dropBlock (Optional) (Default: None) A custom block to drop when this block is mined, if handleDrops is set. [DocumentAsJson(\"Optional\", \"None\", false)] private string dropBlock Field Value string dropBlockFace (Optional) (Default: north) The 'face' variant to drop when this block is mined, if handleDrops is set and dropBlock is not set. [DocumentAsJson(\"Optional\", \"north\", false)] private string dropBlockFace Field Value string handleDrops (Optional) (Default: False) Should the drops be handled by this behavior? If true, then uses values from dropBlockFace or dropBlock. [DocumentAsJson(\"Optional\", \"False\", false)] private bool handleDrops Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorHorizontalOrientable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorHorizontalOrientable.html",
    "title": "Class BlockBehaviorHorizontalOrientable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorHorizontalOrientable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to automatically rotate between the four horizontal directions based on placement angle. Requires use of the \"horizontalorientation\" variant group. Uses the \"HorizontalOrientable\" code. Open in GitHub [DocumentAsJson] public class BlockBehaviorHorizontalOrientable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorHorizontalOrientable Examples \"behaviors\": [ { \"name\": \"HorizontalOrientable\" } ] \"variantgroups\": [ { \"code\": \"side\", \"loadFromProperties\": \"abstract/horizontalorientation\" } ] Fields drop (Optional) (Default: None) A custom item stack which will be dropped when this block is mined. If not set, then dropBlockFace will be used. [DocumentAsJson(\"Optional\", \"None\", false)] private JsonItemStack drop Field Value JsonItemStack dropBlockFace (Optional) (Default: north) The face variant of this block to drop when mined, if drop is not set. [DocumentAsJson(\"Optional\", \"north\", false)] private string dropBlockFace Field Value string"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorJonasBoilerDoor.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorJonasBoilerDoor.html",
    "title": "Class BlockBehaviorJonasBoilerDoor | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorJonasBoilerDoor Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Provides interaction for the JonasBoilerDoor block entity behavior. Uses the \"JonasBoilerDoor\" code. This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorJonasBoilerDoor : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorJonasBoilerDoor Examples \"behaviors\": [ { \"name\": \"JonasBoilerDoor\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorJonasGasifier.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorJonasGasifier.html",
    "title": "Class BlockBehaviorJonasGasifier | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorJonasGasifier Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Passes functions to the BEBehaviorJonasGasifier block entity behavior, and therefore requires that. Uses the code \"JonasGasifier\". This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorJonasGasifier : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorJonasGasifier Examples \"behaviors\": [ { \"name\": \"JonasGasifier\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorJonasHydraulicPump.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorJonasHydraulicPump.html",
    "title": "Class BlockBehaviorJonasHydraulicPump | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorJonasHydraulicPump Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Passes functions to the BEBehaviorJonasHydraulicPump block entity behavior, and therefore requires that. Uses the code \"JonasHydraulicPump\". This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorJonasHydraulicPump : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorJonasHydraulicPump Examples \"behaviors\": [ { \"name\": \"JonasHydraulicPump\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorLadder.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorLadder.html",
    "title": "Class BlockBehaviorLadder | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorLadder Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Used to control ladder behavior, including horizontal orientation, placement, collection. Note that this does not control how entities react to ladders (see \"climbable\" in blocktype). Requires use of the 'horizontalorientation' variants. Uses the code \"Ladder\". Open in GitHub [DocumentAsJson] public class BlockBehaviorLadder : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorLadder Examples \"behaviors\": [ { \"name\": \"Ladder\", \"properties\": { \"isFlexibleByType\": { \"ladder-rope-*\": true } } } ] \"variantgroups\": [ { \"code\": \"side\", \"loadFromProperties\": \"abstract/horizontalorientation\" } ] Fields dropBlockFace (Optional) (Default: north) What face variant should this block drop when mined? [DocumentAsJson(\"Optional\", \"north\", false)] private string dropBlockFace Field Value string isFlexible (Optional) (Default: False) Can the base of this ladder be collected with a right click? Flexible ladders also cannot be built upwards. [DocumentAsJson(\"Optional\", \"False\", false)] public bool isFlexible Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorLockable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorLockable.html",
    "title": "Class BlockBehaviorLockable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorLockable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to be locked by a player with a padlock, preventing any interaction from any other players. Uses the \"lockable\" code. This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorLockable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorLockable Examples \"behaviors\": [ { \"name\": \"Lockable\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorMilkingContainer.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorMilkingContainer.html",
    "title": "Class BlockBehaviorMilkingContainer | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorMilkingContainer Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to be used as a container for milking an entity. Must be on a block that has the \"BlockLiquidContainerBase\" class. Uses the code \"MilkingContainer\", and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorMilkingContainer : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorMilkingContainer Examples \"behaviors\": [ { \"name\": \"MilkingContainer\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorMultiblock.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorMultiblock.html",
    "title": "Class BlockBehaviorMultiblock | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorMultiblock Namespace Vintagestory.GameContent Assembly VSEssentials.dll Turns this block into a multiblock, allowing it to be larger than a single block. By default, all blocks will have the same properties. If you need different properties or functionality for each block section, you will need to use a new block class. Uses the code \"Multiblock\". Open in GitHub [DocumentAsJson] public class BlockBehaviorMultiblock : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorMultiblock Examples \"behaviors\": [ { \"name\": \"Multiblock\", \"properties\": { \"sizex\": 1, \"sizey\": 3, \"sizez\": 1, \"cposition\": { \"x\": 0, \"y\": 0, \"z\": 0 } } } ], Fields cposition (Recommended) (Default: (1, 0, 1)) The controller position of the multiblock. This is the primary placed location of the multiblock. [DocumentAsJson(\"Recommended\", \"(1, 0, 1)\", false)] private Vec3i ControllerPositionRel Field Value Vec3i SizeX (Recommended) (Default: 3) The size in blocks, in the X axis, of the multiblock. Maximum of 5. [DocumentAsJson(\"Recommended\", \"3\", false)] private int SizeX Field Value int SizeY (Recommended) (Default: 3) The size in blocks, in the Y axis, of the multiblock. Maximum of 5. [DocumentAsJson(\"Recommended\", \"3\", false)] private int SizeY Field Value int SizeZ (Recommended) (Default: 3) The size in blocks, in the Z axis, of the multiblock. Maximum of 5. [DocumentAsJson(\"Recommended\", \"3\", false)] private int SizeZ Field Value int"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorMyceliumHost.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorMyceliumHost.html",
    "title": "Class BlockBehaviorMyceliumHost | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorMyceliumHost Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to have mushrooms naturally spawn on it. Uses the code \"MyceliumHost\", and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorMyceliumHost : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorMyceliumHost Examples \"behaviors\": [ { \"name\": \"MyceliumHost\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorNWOrientable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorNWOrientable.html",
    "title": "Class BlockBehaviorNWOrientable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorNWOrientable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Automatically swaps between 'North/South' and 'West/East' variants based on placement rotation. Requires an \"orientation\" or \"side\" variant with the codes \"ns\" and \"we\". Uses the code \"NWOrientable\", and has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorNWOrientable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorNWOrientable Examples \"behaviors\": [ { \"name\": \"NWOrientable\" } ] \"variantgroups\": [ { \"code\": \"orientation\", \"states\": [ \"ns\", \"we\" ] } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorOmniAttachable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorOmniAttachable.html",
    "title": "Class BlockBehaviorOmniAttachable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorOmniAttachable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to be attached to any face, including vertical faces. Requires states from \"abstract/horizontalorientation\", as well as additional \"up\" and \"down\" states. Uses the code \"OmniAttachable\". Open in GitHub [DocumentAsJson] public class BlockBehaviorOmniAttachable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorOmniAttachable Examples \"behaviors\": [ { \"name\": \"OmniAttachable\", \"properties\": { \"facingCode\": \"position\", \"attachmentAreas\": { \"down\": { \"x1\": 7, \"y1\": 15, \"z1\": 7, \"x2\": 8, \"y2\": 15, \"z2\": 8 }, \"up\": { ... }, \"north\": { ... }, \"east\": { ... }, \"south\": { ... }, \"west\": { ... } } } } ], \"variantgroups\": [ { \"code\": \"position\", \"states\": [ \"up\", \"down\" ], \"loadFromProperties\": \"abstract/horizontalorientation\" } ] Fields attachmentAreas (Optional) (Default: None) A set of attachment cuboids for each attached face. [DocumentAsJson(\"Optional\", \"None\", false)] private Dictionary<string, Cuboidi> attachmentAreas Field Value Dictionary<string, Cuboidi> facingCode (Optional) (Default: orientation) The variant code that defines the required states. [DocumentAsJson(\"Optional\", \"orientation\", false)] public string facingCode Field Value string"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorPillar.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorPillar.html",
    "title": "Class BlockBehaviorPillar | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorPillar Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Used to rotate a block that has a 'top' face, such as a wooden log. Requires a \"rotation\" variant group with \"ud\", \"ns\", \"we\" states. Uses the \"pillar\" code. Open in GitHub [DocumentAsJson] public class BlockBehaviorPillar : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorPillar Examples \"behaviors\": [ { \"name\": \"Pillar\" } ] \"variantgroups\": [ { \"code\": \"rotation\", \"states\": [ \"ud\", \"ns\", \"we\" ] } ] Fields invertedPlacement (Optional) (Default: False) Swaps placement between horizontal and vertical. [DocumentAsJson(\"Optional\", \"False\", false)] private bool invertedPlacement Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorPushEventOnBlockBroken.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorPushEventOnBlockBroken.html",
    "title": "Class BlockBehaviorPushEventOnBlockBroken | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorPushEventOnBlockBroken Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Publishes the BlockPos when a Block is broken with the given event name. Likely used in tandem with code mods. Uses the \"PushEventOnBlockBroken\" code. Open in GitHub [DocumentAsJson] public class BlockBehaviorPushEventOnBlockBroken : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorPushEventOnBlockBroken Examples \"behaviorsByType\": { \"bamboo-grown-*\": [ { \"name\": \"PushEventOnBlockBroken\", \"properties\": { \"eventName\": \"testForDecay\" } } ] } Fields eventName (Required) The name of the event to call. Use Api.Event.RegisterEventBusListener in code to register an event. [DocumentAsJson(\"Required\", \"\", false)] private string eventName Field Value string"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorRainDrip.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorRainDrip.html",
    "title": "Class BlockBehaviorRainDrip | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorRainDrip Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Makes a block emit rain particles during or after rainy weather. Uses the \"RainDrip\" code. This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorRainDrip : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorRainDrip Examples \"behaviors\": [ { \"name\": \"RainDrip\" }, ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorReinforcable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorReinforcable.html",
    "title": "Class BlockBehaviorReinforcable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorReinforcable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to be reinforced, which protects against it being broken as quickly. Appropriate blocks are automatically given this behavior. This behavior is not added through the normal property, but instead a custom attribute. This behavior has no properties. You can add the \"reinforcable\" attribute to force an object to be reinforcable. Open in GitHub [DocumentAsJson] public class BlockBehaviorReinforcable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorReinforcable Examples \"attributes\": { \"reinforcable\": true }"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorReparable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorReparable.html",
    "title": "Class BlockBehaviorReparable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorReparable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Blocks which can be repaired using glue. If not repaired, they will shatter (dropping nothing) when broken. Requires use of the ShapeFromAttributes block entity behavior. Uses the code \"Reparable\". Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"Reparability\", \"The amount of glue needed for a full repair (abstract units corresponding to 1 resin, PLUS ONE), e.g. 5 resin is shown as 6. 0 means unspecified (we don't use the repair system), -1 means cannot be repaired will alway shatter.\", \"System.Int32\", \"Recommended\", \"0\", false)] public class BlockBehaviorReparable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorReparable Examples \"behaviors\": [ { \"name\": \"Reparable\" } ] Fields Reparability (Recommended) (Default: 0) The amount of glue needed for a full repair (abstract units corresponding to 1 resin, PLUS ONE), e.g. 5 resin is shown as 6. 0 means unspecified (we don't use the repair system), -1 means cannot be repaired will alway shatter. Field Value Int32"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorRightClickPickup.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorRightClickPickup.html",
    "title": "Class BlockBehaviorRightClickPickup | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorRightClickPickup Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to be picked up with a right click. Uses the code \"RightClickPickup\". Open in GitHub [DocumentAsJson] public class BlockBehaviorRightClickPickup : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorRightClickPickup Fields dropsPickupMode (Optional) (Default: False) If true, uses the blocks defined drops instead of simply collecting the block. Otherwise, uses the default 'pick block' feature. [DocumentAsJson(\"Optional\", \"False\", false)] private bool dropsPickupMode Field Value bool pickupSound (Optional) (Default: None) The sound to play when the block is collected. [DocumentAsJson(\"Optional\", \"None\", false)] private AssetLocation pickupSound Field Value AssetLocation"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorRopeTieable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorRopeTieable.html",
    "title": "Class BlockBehaviorRopeTieable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorRopeTieable Namespace Vintagestory.GameContent Assembly VSEssentials.dll Allows rope to be tied to this block. This behavior does not have any specific JSON properties. This block behavior uses the code \"RopeTieable\". Open in GitHub [DocumentAsJson] public class BlockBehaviorRopeTieable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorRopeTieable Examples \"behaviors\": [ { \"name\": \"RopeTieable\" } ],"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorSlab.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorSlab.html",
    "title": "Class BlockBehaviorSlab | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorSlab Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Unused block behavior for slab placement. Consider using BlockBehaviorOmniRotatable instead. Uses the \"slab\" code. This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorSlab : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorSlab"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorSneakPlacing.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorSneakPlacing.html",
    "title": "Class BlockBehaviorSneakPlacing | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorSneakPlacing Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Forces a block to only allow to be placed when the player is sneaking. Uses the code \"SneakPlacing\". This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorSneakPlacing : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorSneakPlacing Examples \"behaviors\": [ { \"name\": \"SneakPlacing\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorSnowballable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorSnowballable.html",
    "title": "Class BlockBehaviorSnowballable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorSnowballable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to have snowballs taken from it. Many blocks automatically receive this behavior if they have a snow layer or the SnowballableDecrementedBlockCode attribute. Uses the code 'Snowballable'. Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"SnowballableDecrementedBlockCode\", \"When the block is harvested for snowballs, what block should it be replaced with?\", \"System.String\", \"Optional\", \"None\", true)] public class BlockBehaviorSnowballable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorSnowballable Properties SnowballableDecrementedBlockCode (Optional) (Default: None) When the block is harvested for snowballs, what block should it be replaced with? Property Value String"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorSteaming.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorSteaming.html",
    "title": "Class BlockBehaviorSteaming | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorSteaming Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Makes a block emit steam particles, and also marks some water blocks as 'boiling'. Uses the code \"Steaming\". This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorSteaming : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorSteaming Examples \"behaviors\": [ { \"name\": \"Steaming\" }, ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorTransformBreak.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorTransformBreak.html",
    "title": "Class BlockBehaviorTransformBreak | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorTransformBreak Namespace Vintagestory.GameContent Assembly VSEssentials.dll When a block with this behavior is broken. it will turn into another specified block instead of air. This block behavior uses the code \"TransformBreak\". Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"TransformIntoBlock\", \"The asset location of the block to replace this one with.\", \"Vintagestory.API.Common.AssetLocation\", \"Required\", \"\", false)] public class BlockBehaviorTransformBreak : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorTransformBreak Examples \"behaviors\": [ { \"name\": \"TransformBreak\", \"properties\": { \"transformIntoBlock\": \"termitemound-harvested-{rock}-{size}\", \"withDrops\": true } } ] Fields TransformIntoBlock (Required) The asset location of the block to replace this one with. Field Value AssetLocation withDrops (Optional) (Default: False) When mined/destroyed, should this block drop its normal drops? [DocumentAsJson(\"Optional\", \"False\", false)] private bool withDrops Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorTrapDoor.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorTrapDoor.html",
    "title": "Class BlockBehaviorTrapDoor | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorTrapDoor Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Marks a block as an animated trapdoor. Requires the use of the BEBehaviorTrapDoor block entity behavior. Uses the \"TrapDoor\" code. Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"TriggerSound\", \"The sound to play when the trapdoor is opened or closed.\", \"System.String\", \"Optional\", \"sounds/block/door\", true)] public class BlockBehaviorTrapDoor : StrongBlockBehavior Inheritance object CollectibleBehavior BlockBehavior StrongBlockBehavior BlockBehaviorTrapDoor Examples \"behaviors\": [ { \"name\": \"TrapDoor\" } ], ... \"attributes\": { \"airtightByType\": { \"trapdoor-solid*\": true, \"*\": false }, \"openSound\": \"sounds/block/door\", \"closeSound\": \"sounds/block/door\" } Properties airtight (Optional) (Default: True) Is the trapdoor classed as being airtight? [DocumentAsJson(\"Optional\", \"True\", true)] public bool airtight Property Value bool CloseSound (Optional) (Default: sounds/block/door) The sound to play when the trapdoor is closed. [DocumentAsJson(\"Optional\", \"sounds/block/door\", true)] public AssetLocation CloseSound Property Value AssetLocation handopenable (Optional) (Default: True) Can the trapdoor be opened by hand? [DocumentAsJson(\"Optional\", \"True\", true)] public bool handopenable Property Value bool OpenSound (Optional) (Default: sounds/block/door) The sound to play when the trapdoor is opened. [DocumentAsJson(\"Optional\", \"sounds/block/door\", true)] public AssetLocation OpenSound Property Value AssetLocation TriggerSound (Optional) (Default: sounds/block/door) The sound to play when the trapdoor is opened or closed. Property Value String"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorUnplaceable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorUnplaceable.html",
    "title": "Class BlockBehaviorUnplaceable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorUnplaceable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Disallows standard placement for this block. If a previous listed behavior allows a special placement method (see CollectibleBehaviorGroundStorable), then that method will be allowed. Uses the \"unplaceable\" code. This behavior has no properties. Open in GitHub [DocumentAsJson] public class BlockBehaviorUnplaceable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorUnplaceable Examples \"behaviors\": [ { \"name\": \"Unplaceable\" } ]"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorUnstable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorUnstable.html",
    "title": "Class BlockBehaviorUnstable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorUnstable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Only allows a block to exist if it is attached to another block. Uses the code \"unstable\". Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"AttachedToFaces\", \"A list of faces on this block that can be attached to other blocks.\", \"System.String[]\", \"Optional\", \"Down\", false)] [AddDocumentationProperty(\"AttachmentAreas\", \"A list of attachment areas per face that determine what blocks can be attached to.\", \"System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Datastructures.RotatableCube}\", \"Optional\", \"None\", false)] public class BlockBehaviorUnstable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorUnstable Examples \"behaviors\": [ { \"name\": \"Unstable\", \"properties\": { \"attachedToFaces\": [ \"up\" ] } } ] Fields AttachedToFaces (Optional) (Default: Down) A list of faces on this block that can be attached to other blocks. Field Value String[] AttachmentAreas (Optional) (Default: None) A list of attachment areas per face that determine what blocks can be attached to. Field Value Dictionary<String, RotatableCube>"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorUnstableFalling.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorUnstableFalling.html",
    "title": "Class BlockBehaviorUnstableFalling | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorUnstableFalling Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Spawns an EntityBlockFalling when the user places a block that has air underneath it or if a neighbor block is removed and causes air to be underneath it. Also has optional functionality to prevent a block being placed if it is unstable. Uses the code \"UnstableFalling\". Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"AttachableFaces\", \"The faces that this block could be attached from which will prevent it from falling.\", \"System.String[]\", \"Optional\", \"None\", false)] [AddDocumentationProperty(\"AttachmentAreas\", \"A list of attachment areas per face that determine what blocks can be attached to.\", \"System.Collections.Generic.Dictionary{System.String,Vintagestory.API.Datastructures.RotatableCube}\", \"Optional\", \"None\", false)] [AddDocumentationProperty(\"AttachmentArea\", \"A single attachment area that determine what blocks can be attached to. Used if AttachmentAreas is not supplied.\", \"Vintagestory.API.Mathtools.Cuboidi\", \"Optional\", \"None\", false)] [AddDocumentationProperty(\"AllowUnstablePlacement\", \"Can this block be placed in an unstable position?\", \"System.Boolean\", \"Optional\", \"False\", true)] [AddDocumentationProperty(\"IgnorePlaceTest\", \"(Obsolete) Please use the AllowUnstablePlacement attribute instead.\", \"System.Boolean\", \"Obsolete\", \"\", false)] public class BlockBehaviorUnstableFalling : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorUnstableFalling Fields AttachableFaces (Optional) (Default: None) The faces that this block could be attached from which will prevent it from falling. Field Value String[] AttachmentArea (Optional) (Default: None) A single attachment area that determine what blocks can be attached to. Used if AttachmentAreas is not supplied. Field Value Cuboidi AttachmentAreas (Optional) (Default: None) A list of attachment areas per face that determine what blocks can be attached to. Field Value Dictionary<String, RotatableCube> dustIntensity (Optional) (Default: 0) A multiplier for the number of dust particles for the falling block. A value of 0 means no dust particles. [DocumentAsJson(\"Optional\", \"0\", false)] private float dustIntensity Field Value float exceptions (Optional) (Default: None) A list of block types which this block can always be attached to, regardless if there is a correct attachment area. [DocumentAsJson(\"Optional\", \"None\", false)] private AssetLocation[] exceptions Field Value AssetLocation[] fallSideways (Optional) (Default: False) Can this block fall horizontally? [DocumentAsJson(\"Optional\", \"False\", false)] public bool fallSideways Field Value bool fallSidewaysChance (Optional) (Default: 0.3) If fallSideways is enabled, this is the chance that the block will fall sideways instead of straight down. [DocumentAsJson(\"Optional\", \"0.3\", false)] private float fallSidewaysChance Field Value float fallSound (Optional) (Default: None) The path to the sound to play when the block falls. [DocumentAsJson(\"Optional\", \"None\", false)] private AssetLocation fallSound Field Value AssetLocation impactDamageMul (Optional) (Default: 1) A multiplier of damage dealt to an entity when hit by the falling block. Damage depends on falling height. [DocumentAsJson(\"Optional\", \"1\", false)] private float impactDamageMul Field Value float IgnorePlaceTest (Obsolete) (Obsolete) Please use the AllowUnstablePlacement attribute instead. Field Value bool Properties AllowUnstablePlacement (Optional) (Default: False) Can this block be placed in an unstable position? Property Value bool"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorUnstableRock.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorUnstableRock.html",
    "title": "Class BlockBehaviorUnstableRock | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorUnstableRock Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Makes a block potentially unstable, but can be held up using support beams. This behavior will only function if the \"caveIns\" world config is set to true. Uses the code \"UnstableRock\". Open in GitHub [DocumentAsJson] [AddDocumentationProperty(\"UnstableRockStabilization\", \"The vertical stabilization that this block gives to nearby unstable rock blocks.\", \"System.Int32\", \"Optional\", \"0\", true)] [AddDocumentationProperty(\"MaxCollapseDistance\", \"Obsolete. No longer used.\", \"System.Single\", \"Obsolete\", \"1\", false)] public class BlockBehaviorUnstableRock : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorUnstableRock Examples Fields collapseChance (Optional) (Default: 0.25) If the block is deemed unstable, what is the chance that it will fall? Unconnected blocks will fall regardless. [DocumentAsJson(\"Optional\", \"0.25\", false)] protected float collapseChance Field Value float collapsedBlockLoc (Optional) (Default: None) If set, then the block will be replaced with this when it begins to fall. [DocumentAsJson(\"Optional\", \"None\", false)] protected AssetLocation collapsedBlockLoc Field Value AssetLocation dustIntensity (Optional) (Default: 1) The multiplier of dust particles when the block falls. [DocumentAsJson(\"Optional\", \"1\", false)] protected float dustIntensity Field Value float fallSound (Optional) (Default: effect/rockslide) The sound to play when the block begins to fall. [DocumentAsJson(\"Optional\", \"effect/rockslide\", false)] protected AssetLocation fallSound Field Value AssetLocation impactDamageMul (Optional) (Default: 1) The damage multiplier when an entity is hit by a falling block. Damage also depends on how far the block has fell. [DocumentAsJson(\"Optional\", \"1\", false)] protected float impactDamageMul Field Value float maxSupportDistance (Optional) (Default: 2) The distance a support must be for it to support this block. [DocumentAsJson(\"Optional\", \"2\", false)] protected float maxSupportDistance Field Value float MaxCollapseDistance (Obsolete) (Default: 1) Obsolete. No longer used. Field Value float Properties UnstableRockStabilization (Optional) (Default: 0) The vertical stabilization that this block gives to nearby unstable rock blocks. Property Value Int32"
  },
  "jsondocs/Vintagestory.GameContent.BlockBehaviorWrenchOrientable.html": {
    "href": "jsondocs/Vintagestory.GameContent.BlockBehaviorWrenchOrientable.html",
    "title": "Class BlockBehaviorWrenchOrientable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorWrenchOrientable Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Allows a block to cycle through variants when using a wrench. Uses the code \"WrenchOrientable\". Open in GitHub [DocumentAsJson] public class BlockBehaviorWrenchOrientable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorWrenchOrientable Examples \"behaviorsByType\": { \"*\": [ { \"name\": \"WrenchOrientable\", \"properties\": { \"baseCode\": \"log-placed-{wood}\" } } ] }, Fields BaseCode (Required) The code of the block that should be cycled through when used with a wrench. Required if not using a block class which inherits IWrenchOrientable. [DocumentAsJson(\"Required\", \"\", false)] public string BaseCode Field Value string hideInteractionHelpInSurvival (Optional) (Default: False) Should the block hide the placed block interaction help when in survival mode? [DocumentAsJson(\"Optional\", \"False\", false)] private bool hideInteractionHelpInSurvival Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.ClayFormingRecipe.html": {
    "href": "jsondocs/Vintagestory.GameContent.ClayFormingRecipe.html",
    "title": "Class ClayFormingRecipe | VintageStory Json Docs",
    "keywords": "Class ClayFormingRecipe Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Creates a recipe that can be created using clay. This class takes all of its properties from the LayeredVoxelRecipe<T> class. Open in GitHub [DocumentAsJson] public class ClayFormingRecipe : LayeredVoxelRecipe<ClayFormingRecipe> Inheritance object RecipeBase<ClayFormingRecipe> LayeredVoxelRecipe<ClayFormingRecipe> ClayFormingRecipe Inherited Members LayeredVoxelRecipe<ClayFormingRecipe>.Pattern RecipeBase<ClayFormingRecipe>.Ingredients RecipeBase<ClayFormingRecipe>.Ingredient RecipeBase<ClayFormingRecipe>.Output RecipeBase<ClayFormingRecipe>.Name RecipeBase<ClayFormingRecipe>.Enabled Examples { \"ingredient\": { \"type\": \"item\", \"code\": \"clay-*\", \"name\": \"type\", \"allowedVariants\": [ \"blue\", \"fire\", \"red\" ] }, \"pattern\": [ [ \"#####\", \"#####\", \"#####\", \"#####\", \"#####\" ], [ \"#####\", \"#___#\", \"#___#\", \"#___#\", \"#####\" ] ], \"name\": \"Bowl\", \"output\": { \"type\": \"block\", \"code\": \"bowl-raw\" } }"
  },
  "jsondocs/Vintagestory.GameContent.CookingRecipe.html": {
    "href": "jsondocs/Vintagestory.GameContent.CookingRecipe.html",
    "title": "Class CookingRecipe | VintageStory Json Docs",
    "keywords": "Class CookingRecipe Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Defines a recipe to be made using a cooking pot. Creating a new recipe for a cooking pot will automatically register the new meal item, unless using CooksInto. Open in GitHub [DocumentAsJson] public class CookingRecipe Inheritance object CookingRecipe Examples { \"code\": \"jam\", \"perishableProps\": { \"freshHours\": { \"avg\": 1080 }, \"transitionHours\": { \"avg\": 180 }, \"transitionRatio\": 1, \"transitionedStack\": { \"type\": \"item\", \"code\": \"rot\" } }, \"shape\": { \"base\": \"block/food/meal/jam\" }, \"ingredients\": [ { \"code\": \"honey\", \"validStacks\": [ { \"type\": \"item\", \"code\": \"honeyportion\", \"shapeElement\": \"bowl/honey\", \"cookedStack\": { \"type\": \"item\", \"code\": \"jamhoneyportion\" } } ], \"minQuantity\": 2, \"maxQuantity\": 2, \"portionSizeLitres\": 0.2 }, { \"code\": \"fruit\", \"validStacks\": [ { \"type\": \"item\", \"code\": \"fruit-*\", \"shapeElement\": \"bowl/fruit\" } ], \"minQuantity\": 2, \"maxQuantity\": 2 } ] } Fields Code (Required) A unique code for the recipe and meal created. [DocumentAsJson] public string? Code Field Value string Ingredients (Required) A list of ingredients for the recipe. Although cooking pots have a maximum of 4 unique entries, there is no limit on the number of potential ingredients. [DocumentAsJson] public CookingRecipeIngredient[]? Ingredients Field Value CookingRecipeIngredient[] PerishableProps (Required) The transitionable properties for the meal item. Usually controls meal expiry. [DocumentAsJson] public TransitionableProperties? PerishableProps Field Value TransitionableProperties Shape (Required) A path to the shape file for this meal when inside a cooking pot. Specific ingredient-based elements can be enabled using the ShapeElement in the ingredient stacks. [DocumentAsJson] public CompositeShape? Shape Field Value CompositeShape CooksInto (Optional) (Default: None) If set, will treat the recipe not as a meal with its ingredients retained but convert the ingredients into supplied itemstack. [DocumentAsJson] public JsonItemStack? CooksInto Field Value JsonItemStack Enabled (Optional) (Default: True) Should this recipe be loaded by the game? [DocumentAsJson] public bool Enabled Field Value bool IsFood (Optional) (Default: False) If this is true and CooksInto is set the recipe will not dirty the pot. [DocumentAsJson] public bool IsFood Field Value bool"
  },
  "jsondocs/Vintagestory.GameContent.CookingRecipeIngredient.html": {
    "href": "jsondocs/Vintagestory.GameContent.CookingRecipeIngredient.html",
    "title": "Class CookingRecipeIngredient | VintageStory Json Docs",
    "keywords": "Class CookingRecipeIngredient Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll An ingredient for a CookingRecipe. Note that each ingredient can have multiple valid itemstacks that satisfy the ingredient. Open in GitHub [DocumentAsJson] public class CookingRecipeIngredient Inheritance object CookingRecipeIngredient Examples { \"code\": \"water\", \"validStacks\": [ { \"type\": \"item\", \"code\": \"waterportion\", \"shapeElement\": \"bowl/water\" } ], \"minQuantity\": 1, \"maxQuantity\": 1, \"portionSizeLitres\": 1 } Fields Code (Required) The code for the recipe ingredient. Should be unique in the recipe, but isn't specifically used for anything. [DocumentAsJson] public required string Code Field Value string MaxQuantity (Required) The maximum quantity required for the given ingredient. [DocumentAsJson] public int MaxQuantity Field Value int MinQuantity (Required) The minimum quantity required for the given ingredient. [DocumentAsJson] public int MinQuantity Field Value int TypeName (Required) The string to use when displaying the ingredient name in the recipe book. [DocumentAsJson] public string TypeName Field Value string ValidStacks (Required) A list of item stacks that satisfy this ingredient. [DocumentAsJson] public required CookingRecipeStack[] ValidStacks Field Value CookingRecipeStack[] PortionSizeLitres (Optional) (Default: 0) If this ingredient is a liquid, how many litres of it do we need for it to be a valid ingredient? [DocumentAsJson] public float PortionSizeLitres Field Value float"
  },
  "jsondocs/Vintagestory.GameContent.CookingRecipeStack.html": {
    "href": "jsondocs/Vintagestory.GameContent.CookingRecipeStack.html",
    "title": "Class CookingRecipeStack | VintageStory Json Docs",
    "keywords": "Class CookingRecipeStack Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll An itemstack specific for a CookingRecipeIngredient. Most properties are extended from JsonItemStack. Open in GitHub [DocumentAsJson] public class CookingRecipeStack : JsonItemStack Inheritance object JsonItemStack CookingRecipeStack Inherited Members JsonItemStack.Type JsonItemStack.Code JsonItemStack.StackSize JsonItemStack.Quantity JsonItemStack.Attributes Fields CookedStack (Optional) (Default: None) A cooked version of the ingredient stack that also satisfies this recipe. [DocumentAsJson] public JsonItemStack? CookedStack Field Value JsonItemStack ShapeElement (Optional) (Default: None) The hierachy/path of the shape element inside the recipe's shape file. Will be enabled/disabled in the final meal if this itemstack is used. [DocumentAsJson] public string? ShapeElement Field Value string TextureMapping (Optional) (Default: None) Overrides a texture mapping for the shape element. Uses two strings, the first being the original texture code, and the second being a new texture code. [DocumentAsJson] public string[]? TextureMapping Field Value string[]"
  },
  "jsondocs/Vintagestory.GameContent.KnappingRecipe.html": {
    "href": "jsondocs/Vintagestory.GameContent.KnappingRecipe.html",
    "title": "Class KnappingRecipe | VintageStory Json Docs",
    "keywords": "Class KnappingRecipe Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Defines a stone/flint knapping recipe. Uses all properties from LayeredVoxelRecipe<T>, however always uses a single layer. Open in GitHub [DocumentAsJson] public class KnappingRecipe : LayeredVoxelRecipe<KnappingRecipe> Inheritance object RecipeBase<KnappingRecipe> LayeredVoxelRecipe<KnappingRecipe> KnappingRecipe Inherited Members LayeredVoxelRecipe<KnappingRecipe>.Pattern RecipeBase<KnappingRecipe>.Ingredients RecipeBase<KnappingRecipe>.Ingredient RecipeBase<KnappingRecipe>.Output RecipeBase<KnappingRecipe>.Name RecipeBase<KnappingRecipe>.Enabled Examples { \"ingredient\": { \"type\": \"item\", \"code\": \"flint\" }, \"pattern\": [ [ \"___###___\", \"__#####__\", \"__#####__\", \"__#####__\", \"__#####__\", \"__#####__\" ] ], \"name\": \"Hoe\", \"output\": { \"type\": \"item\", \"code\": \"hoehead-flint\" } }"
  },
  "jsondocs/Vintagestory.GameContent.MetalAlloyIngredient.html": {
    "href": "jsondocs/Vintagestory.GameContent.MetalAlloyIngredient.html",
    "title": "Class MetalAlloyIngredient | VintageStory Json Docs",
    "keywords": "Class MetalAlloyIngredient Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Defines an ingredient for a AlloyRecipe recipe. Open in GitHub [DocumentAsJson] public class MetalAlloyIngredient : JsonItemStack Inheritance object JsonItemStack MetalAlloyIngredient Inherited Members JsonItemStack.Type JsonItemStack.Code JsonItemStack.StackSize JsonItemStack.Quantity JsonItemStack.Attributes Examples { \"type\": \"item\", \"code\": \"ingot-copper\", \"minratio\": 0.5, \"maxratio\": 0.7 } Fields MaxRatio (Required) The maximum ratio of this metal to be used in the alloy, between 0 and 1. [DocumentAsJson] public float MaxRatio Field Value float MinRatio (Required) The minimum ratio of this metal to be used in the alloy, between 0 and 1. [DocumentAsJson] public float MinRatio Field Value float"
  },
  "jsondocs/Vintagestory.GameContent.SmithingRecipe.html": {
    "href": "jsondocs/Vintagestory.GameContent.SmithingRecipe.html",
    "title": "Class SmithingRecipe | VintageStory Json Docs",
    "keywords": "Class SmithingRecipe Namespace Vintagestory.GameContent Assembly VSSurvivalMod.dll Defines a smithing recipe, to be created on an anvil. Uses a total of 6 layers, and gets its properties from LayeredVoxelRecipe<T>. Open in GitHub [DocumentAsJson] public class SmithingRecipe : LayeredVoxelRecipe<SmithingRecipe> Inheritance object RecipeBase<SmithingRecipe> LayeredVoxelRecipe<SmithingRecipe> SmithingRecipe Inherited Members LayeredVoxelRecipe<SmithingRecipe>.Pattern RecipeBase<SmithingRecipe>.Ingredients RecipeBase<SmithingRecipe>.Ingredient RecipeBase<SmithingRecipe>.Output RecipeBase<SmithingRecipe>.Name RecipeBase<SmithingRecipe>.Enabled Examples { \"ingredient\": { \"type\": \"item\", \"code\": \"ingot-*\", \"name\": \"metal\", \"allowedVariants\": [ \"tinbronze\", \"bismuthbronze\", \"blackbronze\", \"silver\", \"gold\", \"iron\", \"meteoriciron\", \"steel\" ] }, \"name\": \"boss\", \"pattern\": [ [ \"____\", \"_##_\", \"_##_\", \"____\" ], [ \"####\", \"#__#\", \"#__#\", \"####\" ] ], \"output\": { \"type\": \"item\", \"code\": \"boss-{metal}\" } }"
  },
  "jsondocs/Vintagestory.GameContent.html": {
    "href": "jsondocs/Vintagestory.GameContent.html",
    "title": "Namespace Vintagestory.GameContent | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.GameContent Classes AlloyRecipe This is used to define what metals can be mixed together to create another type of metal inside of a crucible. Open in GitHub BarrelOutputStack Defines an output for use in a BarrelRecipe. This object takes most of its properties from the JsonItemStack class. Open in GitHub BarrelRecipe Creates a recipe for use inside a barrel. Primarily used to craft with liquids. Open in GitHub BarrelRecipeIngredient Defines an ingredient for use in a BarrelRecipe. Open in GitHub BlockBehaviorBreakIfFloating Forces the Block to drop as an item when surrounded by air blocks. It will override drops returned by the Block when this happens. Uses the code \"BreakIfFloating\". This behavior doesn't use any properties. Open in GitHub BlockBehaviorBreakSnowFirst A simple block behavior that breaks a snow cover first, before breaking the block. Uses the code \"BreakSnowFirst\". This behavior has no properties. Open in GitHub BlockBehaviorCanAttach Allows some other blocks, such as torches, to be attached onto specific sides of this block. Uses the code \"CanAttach\". Open in GitHub BlockBehaviorCanIgnite Used if the attached block can ignite other blocks with Shift + Right Click. This behavior uses the code \"CanIgnite\", and has no properties. Open in GitHub BlockBehaviorChimney If this block is placed directly above a smoke emitter (such as a firepit or pit kiln), smoke particles will be emitted. Uses the code \"chimney\" and has no properties. Open in GitHub BlockBehaviorContainer Specifies that this block works as a container. Note that it requires a block entity class which implements BlockEntityOpenableContainer. Used with the code \"Container\". This behavior does not use any properties. Open in GitHub BlockBehaviorCreatureContainer Allows a creature to be contained inside of this block, as well as catching and releasing the entity. Note that this behavior is built around use with the reed chest, and may have unexpected results with other blocks. This behavior uses the code \"CreatureContainer\", and has no properties. Open in GitHub BlockBehaviorDecor Allows this block to be placed on the side of another block, as a decorational shape/texture. Uses the code \"decor\". Open in GitHub BlockBehaviorDoor A block behavior for a door. Also requires the \"door\" block entity behavior type on a block to work. Defined with the \"Door\" code. Open in GitHub BlockBehaviorDropNotSnowCovered Drops the non-snow-covered block, when the snow covered version one is destroyed. This behavior uses the \"DropNotSnowCovered\" code, and has no properties. Open in GitHub BlockBehaviorElevatorControl Used in combination with the \"BEBehaviorElevatorControl\" to create an elevator. Uses the code \"ElevatorControl\", and has no properties. Open in GitHub BlockBehaviorExchangeOnInteract Allows a block to swap between a set of states on activation. Note that this behavior has some small hardcoding for legacy trapdoors. This behavior is used with the code \"ExchangeOnInteract\". Open in GitHub BlockBehaviorFiniteSpreadingLiquid Used to create a liquid which distrubutes itself over an area, and has interaction with other liquids. Uses the \"FiniteSpreadingLiquid\" code. Open in GitHub BlockBehaviorGiveItemPerPlayer Passes functions through to the BEBehaviorGiveItemPerPlayer block entity behavior. Therefore, requires that. Uses the \"GiveItemPerPlayer\" code. Open in GitHub BlockBehaviorHarvestable Allows a block to be harvested with the right mouse button for set items. Uses the code \"harvestable\". Open in GitHub BlockBehaviorHeatSource Allows this block to work as a heat source for entities. BlockEntities for a block with this behavior may also define their own custom heat strength. Uses the code \"HeatSource\". Open in GitHub BlockBehaviorHorizontalAttachable Forces a block to only allow placement on the side of another block. Requires use of the \"horizontalorientation\" variant group. Uses the code \"HorizontalAttachable\". Open in GitHub BlockBehaviorHorizontalOrientable Allows a block to automatically rotate between the four horizontal directions based on placement angle. Requires use of the \"horizontalorientation\" variant group. Uses the \"HorizontalOrientable\" code. Open in GitHub BlockBehaviorJonasBoilerDoor Provides interaction for the JonasBoilerDoor block entity behavior. Uses the \"JonasBoilerDoor\" code. This behavior has no properties. Open in GitHub BlockBehaviorJonasGasifier Passes functions to the BEBehaviorJonasGasifier block entity behavior, and therefore requires that. Uses the code \"JonasGasifier\". This behavior has no properties. Open in GitHub BlockBehaviorJonasHydraulicPump Passes functions to the BEBehaviorJonasHydraulicPump block entity behavior, and therefore requires that. Uses the code \"JonasHydraulicPump\". This behavior has no properties. Open in GitHub BlockBehaviorLadder Used to control ladder behavior, including horizontal orientation, placement, collection. Note that this does not control how entities react to ladders (see \"climbable\" in blocktype). Requires use of the 'horizontalorientation' variants. Uses the code \"Ladder\". Open in GitHub BlockBehaviorLockable Allows a block to be locked by a player with a padlock, preventing any interaction from any other players. Uses the \"lockable\" code. This behavior has no properties. Open in GitHub BlockBehaviorMilkingContainer Allows a block to be used as a container for milking an entity. Must be on a block that has the \"BlockLiquidContainerBase\" class. Uses the code \"MilkingContainer\", and has no properties. Open in GitHub BlockBehaviorMultiblock Turns this block into a multiblock, allowing it to be larger than a single block. By default, all blocks will have the same properties. If you need different properties or functionality for each block section, you will need to use a new block class. Uses the code \"Multiblock\". Open in GitHub BlockBehaviorMyceliumHost Allows a block to have mushrooms naturally spawn on it. Uses the code \"MyceliumHost\", and has no properties. Open in GitHub BlockBehaviorNWOrientable Automatically swaps between 'North/South' and 'West/East' variants based on placement rotation. Requires an \"orientation\" or \"side\" variant with the codes \"ns\" and \"we\". Uses the code \"NWOrientable\", and has no properties. Open in GitHub BlockBehaviorOmniAttachable Allows a block to be attached to any face, including vertical faces. Requires states from \"abstract/horizontalorientation\", as well as additional \"up\" and \"down\" states. Uses the code \"OmniAttachable\". Open in GitHub BlockBehaviorPillar Used to rotate a block that has a 'top' face, such as a wooden log. Requires a \"rotation\" variant group with \"ud\", \"ns\", \"we\" states. Uses the \"pillar\" code. Open in GitHub BlockBehaviorPushEventOnBlockBroken Publishes the BlockPos when a Block is broken with the given event name. Likely used in tandem with code mods. Uses the \"PushEventOnBlockBroken\" code. Open in GitHub BlockBehaviorRainDrip Makes a block emit rain particles during or after rainy weather. Uses the \"RainDrip\" code. This behavior has no properties. Open in GitHub BlockBehaviorReinforcable Allows a block to be reinforced, which protects against it being broken as quickly. Appropriate blocks are automatically given this behavior. This behavior is not added through the normal property, but instead a custom attribute. This behavior has no properties. You can add the \"reinforcable\" attribute to force an object to be reinforcable. Open in GitHub BlockBehaviorReparable Blocks which can be repaired using glue. If not repaired, they will shatter (dropping nothing) when broken. Requires use of the ShapeFromAttributes block entity behavior. Uses the code \"Reparable\". Open in GitHub BlockBehaviorRightClickPickup Allows a block to be picked up with a right click. Uses the code \"RightClickPickup\". Open in GitHub BlockBehaviorRopeTieable Allows rope to be tied to this block. This behavior does not have any specific JSON properties. This block behavior uses the code \"RopeTieable\". Open in GitHub BlockBehaviorSlab Unused block behavior for slab placement. Consider using BlockBehaviorOmniRotatable instead. Uses the \"slab\" code. This behavior has no properties. Open in GitHub BlockBehaviorSneakPlacing Forces a block to only allow to be placed when the player is sneaking. Uses the code \"SneakPlacing\". This behavior has no properties. Open in GitHub BlockBehaviorSnowballable Allows a block to have snowballs taken from it. Many blocks automatically receive this behavior if they have a snow layer or the SnowballableDecrementedBlockCode attribute. Uses the code 'Snowballable'. Open in GitHub BlockBehaviorSteaming Makes a block emit steam particles, and also marks some water blocks as 'boiling'. Uses the code \"Steaming\". This behavior has no properties. Open in GitHub BlockBehaviorTransformBreak When a block with this behavior is broken. it will turn into another specified block instead of air. This block behavior uses the code \"TransformBreak\". Open in GitHub BlockBehaviorTrapDoor Marks a block as an animated trapdoor. Requires the use of the BEBehaviorTrapDoor block entity behavior. Uses the \"TrapDoor\" code. Open in GitHub BlockBehaviorUnplaceable Disallows standard placement for this block. If a previous listed behavior allows a special placement method (see CollectibleBehaviorGroundStorable), then that method will be allowed. Uses the \"unplaceable\" code. This behavior has no properties. Open in GitHub BlockBehaviorUnstable Only allows a block to exist if it is attached to another block. Uses the code \"unstable\". Open in GitHub BlockBehaviorUnstableFalling Spawns an EntityBlockFalling when the user places a block that has air underneath it or if a neighbor block is removed and causes air to be underneath it. Also has optional functionality to prevent a block being placed if it is unstable. Uses the code \"UnstableFalling\". Open in GitHub BlockBehaviorUnstableRock Makes a block potentially unstable, but can be held up using support beams. This behavior will only function if the \"caveIns\" world config is set to true. Uses the code \"UnstableRock\". Open in GitHub BlockBehaviorWrenchOrientable Allows a block to cycle through variants when using a wrench. Uses the code \"WrenchOrientable\". Open in GitHub ClayFormingRecipe Creates a recipe that can be created using clay. This class takes all of its properties from the LayeredVoxelRecipe<T> class. Open in GitHub CookingRecipe Defines a recipe to be made using a cooking pot. Creating a new recipe for a cooking pot will automatically register the new meal item, unless using CooksInto. Open in GitHub CookingRecipeIngredient An ingredient for a CookingRecipe. Note that each ingredient can have multiple valid itemstacks that satisfy the ingredient. Open in GitHub CookingRecipeStack An itemstack specific for a CookingRecipeIngredient. Most properties are extended from JsonItemStack. Open in GitHub KnappingRecipe Defines a stone/flint knapping recipe. Uses all properties from LayeredVoxelRecipe<T>, however always uses a single layer. Open in GitHub MetalAlloyIngredient Defines an ingredient for a AlloyRecipe recipe. Open in GitHub SmithingRecipe Defines a smithing recipe, to be created on an anvil. Uses a total of 6 layers, and gets its properties from LayeredVoxelRecipe<T>. Open in GitHub"
  },
  "jsondocs/Vintagestory.ServerMods.BlockBehaviorOmniRotatable.html": {
    "href": "jsondocs/Vintagestory.ServerMods.BlockBehaviorOmniRotatable.html",
    "title": "Class BlockBehaviorOmniRotatable | VintageStory Json Docs",
    "keywords": "Class BlockBehaviorOmniRotatable Namespace Vintagestory.ServerMods Assembly VSSurvivalMod.dll Allows complex rotation of a block depending on placement angle. Also has behavior of placing the block in the crafting grid to set a 'slab placement mode'. Requires the \"rot\" variant with the 6 directional states. Uses the \"OmniRotatable\" code. Open in GitHub [DocumentAsJson] public class BlockBehaviorOmniRotatable : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior BlockBehaviorOmniRotatable Examples \"behaviors\": [ { \"name\": \"OmniRotatable\", \"properties\": { \"rotateSides\": true, \"facing\": \"block\" } } ] \"variantgroups\": [ { \"code\": \"rot\", \"states\": [ \"north\", \"east\", \"south\", \"west\", \"up\", \"down\" ] } ] Fields dropChance (Optional) (Default: 1) The chance that this block will drop its drops. Values over 1 will have no effect. [DocumentAsJson(\"Optional\", \"1\", false)] private float dropChance Field Value float facing (Optional) (Default: player) Determines where to angle the block against. Set to \"player\" for placement based on the players angle. Set to \"block\" for placement based on the block side. [DocumentAsJson(\"Optional\", \"player\", false)] private string facing Field Value string rotateSides (Optional) (Default: False) If a slab placement mode has not been set, should the block be automatically rotated? [DocumentAsJson(\"Optional\", \"False\", false)] private bool rotateSides Field Value bool"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.BlockCropPropertiesType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.BlockCropPropertiesType.html",
    "title": "Class BlockCropPropertiesType | VintageStory Json Docs",
    "keywords": "Class BlockCropPropertiesType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Used for crop blocks that grow over time. Open in GitHub [DocumentAsJson] public class BlockCropPropertiesType Inheritance object BlockCropPropertiesType Examples \"cropProps\": { \"requiredNutrient\": \"K\", \"nutrientConsumption\": 40, \"growthStages\": 7, \"totalGrowthMonths\": 1.2, \"coldDamageBelow\": -10, \"damageGrowthStuntMul\": 0.75, \"coldDamageRipeMul\": 0.5, \"heatDamageAbove\": 32 }, Fields GrowthStages (Required) Amount of growth stages this crop has. [DocumentAsJson] public int GrowthStages Field Value int NutrientConsumption (Required) Total amount of nutrient consumed to reach full maturity. (100 is the maximum available for farmland) [DocumentAsJson] public float NutrientConsumption Field Value float TotalGrowthMonths (Required) Total time in ingame months required for the crop to reach full maturity assuming full nutrient levels. [DocumentAsJson] public float TotalGrowthMonths Field Value float RequiredNutrient (Recommended) (Default: N) Which nutrient category this crop requires to grow [DocumentAsJson] public EnumSoilNutrient RequiredNutrient Field Value EnumSoilNutrient Behaviors (Optional) (Default: None) Allows customization of crop growth behavior. BlockEntityFarmland calls methods on all behaviors to allow greater control. [DocumentAsJson] public CropBehaviorType[] Behaviors Field Value CropBehaviorType[] ColdDamageBelow (Optional) (Default: -5) The crop will be damaged if it falls below this temperature. [DocumentAsJson] public float ColdDamageBelow Field Value float ColdDamageRipeMul (Optional) (Default: 0.5) If this crop is damaged from cold or heat and the crop is already grown, the yield will be multiplied by this amount. [DocumentAsJson] public float ColdDamageRipeMul Field Value float DamageGrowthStuntMul (Optional) (Default: 0.5) If this crop is growing and damaged from cold or heat, the final yield will be multiplied by this amount. [DocumentAsJson] public float DamageGrowthStuntMul Field Value float HeatDamageAbove (Optional) (Default: 40) The crop will be damaged if it goes above this temperature. [DocumentAsJson] public float HeatDamageAbove Field Value float HarvestGrowthStageLoss (Unused) (Default: 0) Currently unused. [DocumentAsJson] public int HarvestGrowthStageLoss Field Value int MultipleHarvests (Unused) (Default: false) Currently unused. [DocumentAsJson] public bool MultipleHarvests Field Value bool TotalGrowthDays (Obsolete) Obsolete. Please use TotalGrowthMonths instead. Total time in ingame days required for the crop to reach full maturity assuming full nutrient levels [DocumentAsJson] public float TotalGrowthDays Field Value float"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.BlockType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.BlockType.html",
    "title": "Class BlockType | VintageStory Json Docs",
    "keywords": "Class BlockType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Defines an in-game block using a json file. BlockTypes use all properties from CollectibleType and RegistryObjectType, but also contain some unique properties. Any json file placed in your \"assets/blocktypes\" folder will be loaded as a blocktype in the game. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class BlockType : CollectibleType Inheritance object RegistryObjectType CollectibleType BlockType Inherited Members CollectibleType.Behaviors CollectibleType.LightHsv CollectibleType.RenderAlphaTest CollectibleType.StorageFlags CollectibleType.MaxStackSize CollectibleType.AttackPower CollectibleType.Durability CollectibleType.Dimensions CollectibleType.Size CollectibleType.DamagedBy CollectibleType.Tool CollectibleType.AttackRange CollectibleType.MiningSpeed CollectibleType.ToolTier CollectibleType.MiningTier CollectibleType.MatterState CollectibleType.HeldSounds CollectibleType.MaterialDensity CollectibleType.Attributes CollectibleType.Shape CollectibleType.GuiTransform CollectibleType.FpHandTransform CollectibleType.TpHandTransform CollectibleType.TpOffHandTransform CollectibleType.GroundTransform CollectibleType.Texture CollectibleType.Textures CollectibleType.CombustibleProps CollectibleType.NutritionProps CollectibleType.TransitionableProps CollectibleType.GrindingProps CollectibleType.CrushingProps CollectibleType.LiquidSelectable CollectibleType.CreativeInventory CollectibleType.CreativeInventoryStacks CollectibleType.HeldTpHitAnimation CollectibleType.HeldRightTpIdleAnimation CollectibleType.HeldLeftTpIdleAnimation CollectibleType.HeldLeftReadyAnimation CollectibleType.HeldRightReadyAnimation CollectibleType.HeldOldTpIdleAnimation CollectibleType.HeldTpUseAnimation CollectibleType.ParticleProperties RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class RegistryObjectType.Tags Examples { \"code\": \"leather\", \"class\": \"Block\", \"shape\": { \"base\": \"block/basic/cube\" }, \"drawtype\": \"Cube\", \"attributes\": { ... }, \"blockmaterial\": \"Cloth\", \"creativeinventory\": { ... }, \"replaceable\": 700, \"resistance\": 1.5, \"lightAbsorption\": 99, \"textures\": { ... }, \"combustibleProps\": { ... }, \"sounds\": { ... }, \"materialDensity\": 400 } Fields BlockMaterial (Recommended) (Default: Stone) A way to categorize blocks. Used for getting the mining speed for each tool type, amongst other things. [JsonProperty] public EnumBlockMaterial BlockMaterial Field Value EnumBlockMaterial RequiredMiningTier (Recommended) (Default: 0) The mining tier required to break this block. [JsonProperty] public int RequiredMiningTier Field Value int Resistance (Recommended) (Default: 6) How long it takes to break this block in seconds. [JsonProperty] public float Resistance Field Value float AllowSpawnCreatureGroups (Optional) (Default: All ( [\"*\"] )) Defines what creature groups may spawn on this block. [JsonProperty] public string[] AllowSpawnCreatureGroups Field Value string[] ClimateColorMap (Optional) (Default: None) The color map for climate color mapping. Leave null for no coloring by climate [JsonProperty] public string ClimateColorMap Field Value string Climbable (Optional) (Default: false) Used for ladders. If true, walking against this blocks collisionbox will make the player climb. [JsonProperty] public bool Climbable Field Value bool CollisionBox (Optional) (Default: Default Collision Box) Defines the area with which the player character collides with. If not specified, the default of (0, 0, 0, 1, 1, 1) will be used [JsonProperty(\"CollisionBox\")] private RotatableCube CollisionBoxR Field Value RotatableCube CollisionBoxes (Optional) (Default: Default Collision Box) Defines multiple areas with which the player character collides with. [JsonProperty(\"CollisionBoxes\")] private RotatableCube[] CollisionBoxesR Field Value RotatableCube[] CollisionSelectionBox (Optional) (Default: Default Collision Box) Shorthand way of setting CollisionBoxR and SelectionBoxR at the same time. [JsonProperty(\"CollisionSelectionBox\")] private RotatableCube CollisionSelectionBoxR Field Value RotatableCube CollisionSelectionBoxes (Optional) (Default: Default Collision Box) Shorthand way of setting CollisionBoxesR and SelectionBoxesR at the same time. [JsonProperty(\"CollisionSelectionBoxes\")] private RotatableCube[] CollisionSelectionBoxesR Field Value RotatableCube[] CropProps (Optional) (Default: None) Information about the blocks as a crop. [JsonProperty] public BlockCropPropertiesType CropProps Field Value BlockCropPropertiesType DoNotRenderAtLod2 (Optional) (Default: false) If set to true, this block will not be rendered if it is too far away from the camera. [JsonProperty] public bool DoNotRenderAtLod2 Field Value bool DragMultiplier (Optional) (Default: 1) Drag multiplier applied to entities standing on it. [JsonProperty] public float DragMultiplier Field Value float DrawType (Optional) (Default: JSON) If not set to JSON it will use an efficient hardcoded model [JsonProperty] public EnumDrawType DrawType Field Value EnumDrawType Drops (Optional) (Default: None) The items that should drop from breaking this block. [JsonProperty] public BlockDropItemStack[] Drops Field Value BlockDropItemStack[] EmitSideAo (Optional) (Default: See desc.) Defines which of the 6 block neighbours should receive AO if this block is in front of them. If this block's LightAbsorption > 0, default is all true. Otherwise, all false.. [JsonProperty] public Dictionary<string, bool> EmitSideAo Field Value Dictionary<string, bool> EntityBehaviors (Optional) (Default: None) This array adds modifiers that can alter the behavior of a block entity defined in EntityClass. [JsonProperty] public BlockEntityBehaviorType[] EntityBehaviors Field Value BlockEntityBehaviorType[] EntityClass (Optional) (Default: None) A 'block entity' is stored per specific instance of a block in the world. To attach a block entity to a block, add the block entity code here.. [JsonProperty] public string EntityClass Field Value string FaceCullMode (Optional) (Default: Default) Determines which sides of the blocks should be rendered [JsonProperty] public EnumFaceCullMode FaceCullMode Field Value EnumFaceCullMode Fertility (Optional) (Default: 0) 0 = nothing can grow, 10 = some tallgrass and small trees can be grow on it, 100 = all grass and trees can grow on it [JsonProperty] public int Fertility Field Value int Frostable (Optional) (Default: false) A bit uploaded to the shader to add a frost overlay below freezing temperature [JsonProperty] public bool Frostable Field Value bool LightAbsorption (Optional) (Default: 99) For light blocking blocks. Any value above 32 will completely block all light. [JsonProperty] public ushort LightAbsorption Field Value ushort LiquidCode (Optional) (Default: None) If this block is or contains a liquid, this should be the code (or \"identifier\") of the liquid. [JsonProperty] public string LiquidCode Field Value string LiquidLevel (Optional) (Default: 0) Value between 0 to 7. Determines the height of the liquid, if LiquidCode is set. [JsonProperty] public int LiquidLevel Field Value int Lod0Shape (Optional) (Default: None) A specific shape to use when this block is near the camera. Used to add more detail to closer objects. [JsonProperty] public CompositeShape Lod0Shape Field Value CompositeShape Lod2Shape (Optional) (Default: None) A specific shape to use when this block is far away from the camera. Used to lower detail from further away objects. [JsonProperty] public CompositeShape Lod2Shape Field Value CompositeShape ParticleCollisionBox (Optional) (Default: Default Collision Box) Defines the area with which particles collide with. If not provided, will use CollisionBoxR or CollisionBoxesR. [JsonProperty(\"ParticleCollisionBox\")] private RotatableCube ParticleCollisionBoxR Field Value RotatableCube ParticleCollisionBoxes (Optional) (Default: Default Collision Box) Defines multiple areas with which particles collide with. If not provided, will use CollisionBoxR or CollisionBoxesR. [JsonProperty(\"ParticleCollisionBoxes\")] private RotatableCube[] ParticleCollisionBoxesR Field Value RotatableCube[] RainPermeable (Optional) (Default: false) Will be used for not rendering rain below this block. [JsonProperty] public bool RainPermeable Field Value bool RandomDrawOffset (Optional) (Default: false) If true then the block will be randomly offseted by 1/3 of a block when placed [JsonProperty] public bool RandomDrawOffset Field Value bool RandomizeAxes (Optional) (Default: XYZ) Whether or not to use the Y axis when picking a random value based on the block's position. If placing an instance of this block on top of one another, setting this to XZ will ensure that all vertical instances have the same random size, offset, and rotations if used. [JsonProperty] public EnumRandomizeAxes RandomizeAxes Field Value EnumRandomizeAxes RandomizeRotations (Optional) (Default: false) If true, the block will have a random rotation apploed to it. [JsonProperty] public bool RandomizeRotations Field Value bool RandomSizeAdjust (Optional) (Default: false) If set, the block will have a random size between 1 and 1+RandomSizeAdjust. [JsonProperty] public float RandomSizeAdjust Field Value float RenderPass (Optional) (Default: Opaque) During which render pass this block should be rendered. [JsonProperty] public EnumChunkRenderPass RenderPass Field Value EnumChunkRenderPass Replaceable (Optional) (Default: 0) A value usually between 0-9999 that indicates which blocks may be replaced with others. Any block with replaceable value above 5000 will be washed away by water Any block with replaceable value above 6000 will replaced when the player tries to place a block Examples: 0 = Bedrock 6000 = Tallgrass 9000 = Lava 9500 = Water 9999 = Air [JsonProperty] public int Replaceable Field Value int SeasonColorMap (Optional) (Default: None) The color map for season color mapping. Leave null for no coloring by season [JsonProperty] public string SeasonColorMap Field Value string SelectionBox (Optional) (Default: Default Collision Box) Defines the area which the players mouse pointer collides with for selection. If not specified, the default of (0, 0, 0, 1, 1, 1) will be used [JsonProperty(\"SelectionBox\")] private RotatableCube SelectionBoxR Field Value RotatableCube SelectionBoxes (Optional) (Default: Default Collision Box) Defines multiple areas which the players mouse pointer collides with for selection. [JsonProperty(\"SelectionBoxes\")] private RotatableCube[] SelectionBoxesR Field Value RotatableCube[] ShapeInventory (Optional) (Default: None) The block shape to be used when displayed in the inventory gui, held in hand or dropped on the ground. [JsonProperty] public CompositeShape ShapeInventory Field Value CompositeShape SideAo (Optional) (Default: All true) Defines which of the 6 block side should be shaded with ambient occlusion [JsonProperty] public Dictionary<string, bool> SideAo Field Value Dictionary<string, bool> SideOpaque (Optional) (Default: All true) Defines which of the 6 block sides are completely opaque. Used to determine which block faces can be culled during tesselation. [JsonProperty] public Dictionary<string, bool> SideOpaque Field Value Dictionary<string, bool> SideSolid (Optional) (Default: All true) Defines which of the 6 block side are solid. Used to determine if attachable blocks can be attached to this block. Also used to determine if snow can rest on top of this block. [JsonProperty] public Dictionary<string, bool> SideSolid Field Value Dictionary<string, bool> SideSolidOpaqueAo (Optional) Quick way of defining SideSolid, SideOpaque, and SideAo. Using this property overrides any values to those. [JsonProperty] public Dictionary<string, bool> SideSolidOpaqueAo Field Value Dictionary<string, bool> Sounds (Optional) (Default: None) The sounds played for this block during step, break, build and walk. Use GetSounds() to query if not performance critical. [JsonProperty] public BlockSounds Sounds Field Value BlockSounds TexturesInventory (Optional) (Default: None) Textures to be used for this block in the inventory gui, held in hand or dropped on the ground [JsonProperty] public Dictionary<string, CompositeTexture> TexturesInventory Field Value Dictionary<string, CompositeTexture> VertexFlags (Optional) (Default: None) Data thats passed on to the graphics card for every vertex of the blocks model [JsonProperty] public VertexFlags VertexFlags Field Value VertexFlags WalkspeedMultiplier (Optional) (Default: 1) Walk speed when standing or inside this block. [JsonProperty] public float WalkspeedMultiplier Field Value float Ambientocclusion (Unused) Currently not used. Maybe you're looking for SideAo or SideSolidOpaqueAo? [JsonProperty] public bool Ambientocclusion Field Value bool"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.ClientEntityConfig.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.ClientEntityConfig.html",
    "title": "Class ClientEntityConfig | VintageStory Json Docs",
    "keywords": "Class ClientEntityConfig Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Specific configuration settings for entities on the client-side. Open in GitHub [DocumentAsJson] public class ClientEntityConfig Inheritance object ClientEntityConfig Examples \"client\": { \"renderer\": \"Shape\", \"textures\": { \"material\": { \"base\": \"block/stone/rock/{rock}1\" } }, \"shape\": { \"base\": \"item/stone\" }, \"size\": 1, \"behaviors\": [ { \"code\": \"passivephysics\" }, { \"code\": \"interpolateposition\" } ] }, Fields Renderer (Required) Name of the renderer system that draws this entity. Vanilla Entity Renderer Systems are: Item Dummy BlockFalling Shape PlayerShape EchoChamber You will likely want to use Shape. [JsonProperty] public string Renderer Field Value string Shape (Required) The shape of the entity. Must be set unless Renderer is not set to \"Shape\". [JsonProperty] public CompositeShape Shape Field Value CompositeShape Textures (Recommended) (Default: None) A list of all available textures for the entity. First texture in the list will be the default. [JsonProperty] public Dictionary<string, CompositeTexture> Textures { get; set; } Field Value Dictionary<string, CompositeTexture> Animations (Optional) (Default: None) The animation data for the entity. [JsonProperty] public AnimationMetaData[] Animations Field Value AnimationMetaData[] Behaviors (Optional) (Default: None) A list of all client-side behaviors for the entity. [JsonProperty(ItemConverterType = typeof(JsonAttributesConverter))] public JsonObject[] Behaviors Field Value JsonObject[] GlowLevel (Optional) (Default: 0) The glow level for the entity. [JsonProperty] public int GlowLevel Field Value int PitchStep (Optional) (Default: true) Makes entities pitch forward and backwards when stepping. [JsonProperty] public bool PitchStep Field Value bool Size (Optional) (Default: 1) The size of the entity. [JsonProperty] public float Size Field Value float SizeGrowthFactor (Optional) (Default: 0) The rate at which the entity's size grows with age - used for chicks and other small baby animals. [JsonProperty] public float SizeGrowthFactor Field Value float Texture (Optional) (Default: None) Sets a single texture. It is recommended to specify texture keys by using Textures instead of this. [JsonProperty] protected CompositeTexture Texture Field Value CompositeTexture"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleBehaviorType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleBehaviorType.html",
    "title": "Class CollectibleBehaviorType | VintageStory Json Docs",
    "keywords": "Class CollectibleBehaviorType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A type of behavior to attach to a CollectibleType object. Open in GitHub [DocumentAsJson] public class CollectibleBehaviorType Inheritance object CollectibleBehaviorType Examples \"behaviors\": [ { \"name\": \"NWOrientable\" } ], \"behaviors\": [ { \"name\": \"UnstableFalling\", \"properties\": { \"fallSound\": null, \"dustIntensity\": 0 } } ], Fields name (Required) The code of the collectible behavior to add. [JsonProperty] public string name Field Value string properties (Optional) (Default: None) A list of properties for the specific behavior. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleType.html",
    "title": "Class CollectibleType | VintageStory Json Docs",
    "keywords": "Class CollectibleType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A type of in-game collectible object. Extends from RegistryObjectType. This is mainly used to control items (and block's items) when they are in the inventory. ItemTypes get most of their data from here, BlockTypes use this as well as their own specific data. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public abstract class CollectibleType : RegistryObjectType Inheritance object RegistryObjectType CollectibleType Derived BlockType ItemType Inherited Members RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class RegistryObjectType.Tags Fields CreativeInventory (Recommended) (Default: None) A list of creative tabs and variant codes for each. [JsonProperty] public Dictionary<string, string[]> CreativeInventory Field Value Dictionary<string, string[]> GroundTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the rendered as a dropped item on the ground. [JsonProperty] public ModelTransform GroundTransform Field Value ModelTransform GuiTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the block when rendered in guis. [JsonProperty] public ModelTransform GuiTransform Field Value ModelTransform Shape (Recommended) (Default: None) Details about the 3D model of this collectible. [JsonProperty] public CompositeShape Shape Field Value CompositeShape TpHandTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the block when rendered in the third person mode hand. [JsonProperty] public ModelTransform TpHandTransform Field Value ModelTransform TpOffHandTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the block when rendered in the third person mode offhand. [JsonProperty] public ModelTransform TpOffHandTransform Field Value ModelTransform AttackPower (Optional) (Default: 0.5) How much damage this collectible deals when used as a weapon. [JsonProperty] public float AttackPower Field Value float AttackRange (Optional) (Default: 1.5) The maximum distance an entity can be for you to attack it with this object. [JsonProperty] public float AttackRange Field Value float Attributes (Optional) (Default: None) Custom Attributes that're always associated with this collectible. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject Behaviors (Optional) (Default: None) Modifiers that can alter the behavior of the item or block, mostly for held interactions. [JsonProperty] public CollectibleBehaviorType[] Behaviors Field Value CollectibleBehaviorType[] CombustibleProps (Optional) (Default: None) Information about the burnable states and results from cooking. [JsonProperty] public CombustibleProperties CombustibleProps Field Value CombustibleProperties CreativeInventoryStacks (Optional) (Default: None) A list of specific item stacks to place in specific creative tabs. [JsonProperty] public CreativeTabAndStackList[] CreativeInventoryStacks Field Value CreativeTabAndStackList[] CrushingProps (Optional) (Default: None) If set, the collectible can be crushed into something else using a pulverizer. [JsonProperty] public CrushingProperties CrushingProps Field Value CrushingProperties DamagedBy (Optional) (Default: None) From which damage sources does the item takes durability damage. [JsonProperty] public EnumItemDamageSource[] DamagedBy Field Value EnumItemDamageSource[] Dimensions (Optional) (Default: 0.5, 0.5, 0.5) Notional physical size of this collectible, 0.5 x 0.5 x 0.5 meters by default. Explicitly setting a null value in JSON will result in the default 0.5m size [JsonProperty] [Obsolete(\"Use Size instead from game version 1.20.4 onwards, with the same values\")] public Size3f Dimensions { get; set; } Field Value Size3f Durability (Optional) (Default: 0) How many uses does this collectible has when being used. Item disappears at durability 0. [JsonProperty] public int Durability Field Value int GrindingProps (Optional) (Default: None) If set, the collectible can be ground into something else using a quern. [JsonProperty] public GrindingProperties GrindingProps Field Value GrindingProperties HeldLeftReadyAnimation (Optional) (Default: \"helditemready\") The animation to play in 3rd person when returning to idle from use in the left hand. [JsonProperty] public string HeldLeftReadyAnimation Field Value string HeldLeftTpIdleAnimation (Optional) (Default: None) The animation to play in 3rd person mode when holding this collectible in the left hand [JsonProperty] public string HeldLeftTpIdleAnimation Field Value string HeldRightReadyAnimation (Optional) (Default: \"helditemready\") The animation to play in 3rd person when returning to idle from use in the right hand. [JsonProperty] public string HeldRightReadyAnimation Field Value string HeldRightTpIdleAnimation (Optional) (Default: None) The animation to play in 3rd person mode when holding this collectible in the right hand [JsonProperty] public string HeldRightTpIdleAnimation Field Value string HeldSounds (Optional) (Default: None) If set, defines a specific sound set for this collectible. [JsonProperty] public HeldSounds HeldSounds Field Value HeldSounds HeldTpHitAnimation (Optional) (Default: \"breakhand\") The animation to play in 3rd person mode when hitting with this collectible [JsonProperty] public string HeldTpHitAnimation Field Value string HeldTpUseAnimation (Optional) (Default: \"interactstatic\") The animation to play in 3rd person mod when using this collectible [JsonProperty] public string HeldTpUseAnimation Field Value string LightHsv (Optional) (Default: [0, 0, 0]) For light emitting collectibles: hue, saturation and brightness value. [JsonProperty] public byte[] LightHsv Field Value byte[] LiquidSelectable (Optional) (Default: False) When this item is held, can the player select liquids? [JsonProperty] public bool LiquidSelectable Field Value bool MaterialDensity (Optional) (Default: 9999) Determines on whether an object floats on liquids or not. Water has a density of 1000. [JsonProperty] public int MaterialDensity Field Value int MatterState (Optional) (Default: Solid) What kind of matter is this collectible? Liquids are handled and rendered differently than solid blocks. [JsonProperty] public EnumMatterState MatterState Field Value EnumMatterState MaxStackSize (Optional) (Default: 1) Max amount of collectible that one default inventory slot can hold. [JsonProperty] public int MaxStackSize Field Value int MiningSpeed (Optional) (Default: None) Modifies how fast the player can break a block when holding this item [JsonProperty] public Dictionary<EnumBlockMaterial, float> MiningSpeed Field Value Dictionary<EnumBlockMaterial, float> NutritionProps (Optional) (Default: None) Information about the nutrition states (e.g. edible properties). Setting this will make the collectible edible. [JsonProperty] public FoodNutritionProperties NutritionProps Field Value FoodNutritionProperties ParticleProperties (Optional) (Default: None) Particles that should spawn in regular intervals from this block or item when held in hands [JsonProperty] public AdvancedParticleProperties[] ParticleProperties Field Value AdvancedParticleProperties[] RenderAlphaTest (Optional) (Default: 0.05) Alpha test value for rendering in gui, fp hand, tp hand or on the ground. [JsonProperty] public float RenderAlphaTest Field Value float Size (Optional) (Default: 0.5, 0.5, 0.5) Notional physical size of this collectible, 0.5 x 0.5 x 0.5 meters by default. Explicitly setting a null value in JSON will result in the default 0.5m size [JsonProperty] public Size3f Size Field Value Size3f StorageFlags (Optional) (Default: 1) Determines in which kind of bags the item can be stored in. [JsonProperty] public int StorageFlags Field Value int Texture (Optional) (Default: None) Details about the texture of this collectible. Used if the shape only has one texture. Use Textures if using more than one texture. [JsonProperty] public CompositeTexture Texture Field Value CompositeTexture Textures (Optional) (Default: None) Details about a set of textures of this collectible. Each string key should correlate to a texture value in this the collectible's shape's textures. You can use Texture if only using one texture. [JsonProperty] public Dictionary<string, CompositeTexture> Textures Field Value Dictionary<string, CompositeTexture> Tool (Optional) (Default: None) If set, this item will be classified as given tool. [JsonProperty] public EnumTool? Tool Field Value EnumTool? ToolTier (Optional) (Default: 0) The object can mine any blocks with the same or lower tier than this. If this object is a weapon, this also determines the object's damage tier. [JsonProperty] public int ToolTier Field Value int TransitionableProps (Optional) (Default: None) Information about the transitionable states - Should this collectible turn into another item after a period of time? [JsonProperty] public TransitionableProperties[] TransitionableProps Field Value TransitionableProperties[] FpHandTransform (Obsolete) Deprecated - Use TpHandTransform instead. Used for scaling, rotation or offseting the block when rendered in the first person mode hand. [JsonProperty] public ModelTransform FpHandTransform Field Value ModelTransform HeldOldTpIdleAnimation (Obsolete) Deprecated. Use HeldRightTpIdleAnimation instead. [JsonProperty(\"heldTpIdleAnimation\")] private string HeldOldTpIdleAnimation Field Value string MiningTier (Obsolete) Deprecated. Use ToolTier. [JsonProperty] [Obsolete(\"Use tool tier\")] public int MiningTier { get; set; } Field Value int"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.CropBehaviorType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.CropBehaviorType.html",
    "title": "Class CropBehaviorType | VintageStory Json Docs",
    "keywords": "Class CropBehaviorType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Allows further complex behavior for crop blocks. Open in GitHub [DocumentAsJson] public class CropBehaviorType Inheritance object CropBehaviorType Examples \"cropProps\": { \"behaviors\": [ { \"name\": \"Pumpkin\", \"properties\": { \"vineGrowthStage\": 3, \"vineGrowthQuantity\": { \"dist\": \"invexp\", \"avg\": 2, \"var\": 3 } } } ], ... }, Fields name (Required) The ID of the crop behavior class to use. [JsonProperty] public string name Field Value string properties (Optional) (Default: None) Properties for the specific crop behavior class. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.EntityType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.EntityType.html",
    "title": "Class EntityType | VintageStory Json Docs",
    "keywords": "Class EntityType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll An entity type. Any json files inside of assets/entities will be loaded in as this type. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class EntityType : RegistryObjectType Inheritance object RegistryObjectType EntityType Inherited Members RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class RegistryObjectType.Tags Fields Client (Required) The client-side properties of the entity. Usually related to rendering, precise physics calculations, and behaviors. [JsonProperty] public ClientEntityConfig Client Field Value ClientEntityConfig Server (Required) The server-side properties of the entity. Usually related to spawning, general physics, AI tasks, and other behaviors.. [JsonProperty] public ServerEntityConfig Server Field Value ServerEntityConfig Sounds (Recommended) (Default: None) The sounds that this entity can make. Keys to use are: \"hurt\" \"death\" \"idle\" \"swim\" (player only) \"eat\" (player only) [JsonProperty] public Dictionary<string, AssetLocation> Sounds Field Value Dictionary<string, AssetLocation> Attributes (Optional) (Default: None) Specific attributes for the entity. Contents can vary per entity. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject BehaviorConfigs (Optional) (Default: None) A list of properties common to each client/server entity behavior. Key is a behavior code, and value is a set of attributes. Attributes will get merged with any matching client/server entity behaviors. [JsonProperty(ItemConverterType = typeof(JsonAttributesConverter))] public Dictionary<string, JsonObject> BehaviorConfigs Field Value Dictionary<string, JsonObject> CanClimb (Optional) (Default: false) If true the entity can climb on walls. [JsonProperty] public bool CanClimb Field Value bool CanClimbAnywhere (Optional) (Default: false) If true the entity can climb anywhere. [JsonProperty] public bool CanClimbAnywhere Field Value bool ClimbTouchDistance (Optional) (Default: 0.5) The minimum distance from a block that a creature has to be to climb it. [JsonProperty] public float ClimbTouchDistance Field Value float CollisionBoxSize (Optional) (Default: 0.5, 0.5) The size of the entity's hitbox, in meters. [JsonProperty] public Vec2f CollisionBoxSize Field Value Vec2f DeadCollisionBoxSize (Optional) (Default: 0.5, 0.25) The size of the hitbox, in meters, while the entity is dead. [JsonProperty] public Vec2f DeadCollisionBoxSize Field Value Vec2f DeadHitBoxSize (Optional) Sets both DeadCollisionBoxSize and DeadSelectionBoxSize. [JsonProperty] public Vec2f DeadHitBoxSize { get; set; } Field Value Vec2f DeadSelectionBoxSize (Optional) (Default: DeadCollisionBoxSize) The size of the hitbox while the entity is dead. Defaults to DeadCollisionBoxSize. [JsonProperty] public Vec2f DeadSelectionBoxSize Field Value Vec2f Drops (Optional) (Default: None) The drops for the entity when they are killed. [JsonProperty] public BlockDropItemStack[] Drops Field Value BlockDropItemStack[] EyeHeight (Optional) (Default: 0.1) How high the camera should be placed if this entity were to be controlled by the player. [JsonProperty] public double EyeHeight Field Value double FallDamageMultiplier (Optional) (Default: 1) If less than one, mitigates fall damage (e.g. could be used for mountainous creatures); if more than one, increases fall damage. [JsonProperty] public float FallDamageMultiplier Field Value float Habitat (Optional) (Default: Land) Natural habitat of the entity. Decides whether to apply gravity or not. [JsonProperty] public EnumHabitat Habitat Field Value EnumHabitat HitBoxSize (Optional) Sets both CollisionBoxSize and SelectionBoxSize. [JsonProperty] public Vec2f HitBoxSize { get; set; } Field Value Vec2f IdleSoundChance (Optional) (Default: 0.3) The chance that an idle sound will play for the entity. [JsonProperty] public float IdleSoundChance Field Value float IdleSoundRange (Optional) (Default: 24) The sound range for the idle sound in blocks. [JsonProperty] public float IdleSoundRange Field Value float KnockbackResistance (Optional) (Default: 0) The resistance to being pushed back by an impact. Value will vary based on mob weight. [JsonProperty] public float KnockbackResistance Field Value float RotateModelOnClimb (Optional) (Default: false) Should the entity rotate to 'stand' on the direction it's climbing? [JsonProperty] public bool RotateModelOnClimb Field Value bool SelectionBoxSize (Optional) (Default: CollisionBoxSize) The size of the entity's hitbox. Defaults to CollisionBoxSize. [JsonProperty] public Vec2f SelectionBoxSize Field Value Vec2f SwimmingEyeHeight (Optional) (Default: EyeHeight) The eye height of the entity when swimming. Defaults to be same as EyeHeight. [JsonProperty] public double? SwimmingEyeHeight Field Value double? Weight (Optional) (Default: 25) The mass of this type of entity in kilograms, on average. [JsonProperty] public float Weight Field Value float"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.EnumJsonPatchOp.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.EnumJsonPatchOp.html",
    "title": "Enum EnumJsonPatchOp | VintageStory Json Docs",
    "keywords": "Enum EnumJsonPatchOp Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A set of operations that define what a patch will do. See https://datatracker.ietf.org/doc/html/rfc6902#section-4.1 for more information on each operation type. Open in GitHub [DocumentAsJson] public enum EnumJsonPatchOp Methods Add = 0 Add an element to a json property at a specific path. Please consider using AddMerge for improved mod compatability. AddEach = 1 Add a set of objects to an array. Will not work if used on other data types. Remove = 2 Remove a json property at a specific path. Does not require a value to be set. Replace = 3 Replaces a json property with one of a different value. Identical to a remove and then add. Copy = 4 Copies a json property from one place and adds it to another. Requires the FromPath property. Move = 5 Removes a json property from one place and adds it to another. Identical to removing from one place and adding it to another. Requires the FromPath property. AddMerge = 6 Add merge is similar to Add, however if the target is an array, then the current value and patched value will merge together for improved compatibility."
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.ItemType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.ItemType.html",
    "title": "Class ItemType | VintageStory Json Docs",
    "keywords": "Class ItemType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Defines an in-game item using a json file. Note that all json properties for items come from the base CollectibleType and RegistryObjectType classes. Any json file inside the \"assets/itemtypes\" folder will be loaded as an itemtype in the game. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class ItemType : CollectibleType Inheritance object RegistryObjectType CollectibleType ItemType Inherited Members CollectibleType.Behaviors CollectibleType.LightHsv CollectibleType.RenderAlphaTest CollectibleType.StorageFlags CollectibleType.MaxStackSize CollectibleType.AttackPower CollectibleType.Durability CollectibleType.Dimensions CollectibleType.Size CollectibleType.DamagedBy CollectibleType.Tool CollectibleType.AttackRange CollectibleType.MiningSpeed CollectibleType.ToolTier CollectibleType.MiningTier CollectibleType.MatterState CollectibleType.HeldSounds CollectibleType.MaterialDensity CollectibleType.Attributes CollectibleType.Shape CollectibleType.GuiTransform CollectibleType.FpHandTransform CollectibleType.TpHandTransform CollectibleType.TpOffHandTransform CollectibleType.GroundTransform CollectibleType.Texture CollectibleType.Textures CollectibleType.CombustibleProps CollectibleType.NutritionProps CollectibleType.TransitionableProps CollectibleType.GrindingProps CollectibleType.CrushingProps CollectibleType.LiquidSelectable CollectibleType.CreativeInventory CollectibleType.CreativeInventoryStacks CollectibleType.HeldTpHitAnimation CollectibleType.HeldRightTpIdleAnimation CollectibleType.HeldLeftTpIdleAnimation CollectibleType.HeldLeftReadyAnimation CollectibleType.HeldRightReadyAnimation CollectibleType.HeldOldTpIdleAnimation CollectibleType.HeldTpUseAnimation CollectibleType.ParticleProperties RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class RegistryObjectType.Tags Examples { \"code\": \"strawdummy\", \"class\": \"ItemStrawDummy\", \"shape\": { \"base\": \"entity/land/strawdummy\" }, \"creativeinventory\": { ... }, \"heldTpIdleAnimation\": \"holdunderarm\", \"maxstacksize\": 1, \"combustibleProps\": { ... }, \"guiTransform\": { ... }, \"fpHandTransform\": { ... }, \"tpHandTransform\": { ... } }"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.JsonPatch.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.JsonPatch.html",
    "title": "Class JsonPatch | VintageStory Json Docs",
    "keywords": "Class JsonPatch Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Defines a patch for a json asset. This allows modifying json files through mods without directly editing them. To help with creating patches, it is highly recommended to learn how to use the in-built modmaker program. See https://wiki.vintagestory.at/Modding:Inbuilt_ModMaker for more info. Open in GitHub [DocumentAsJson] public class JsonPatch Inheritance object JsonPatch Fields File (Required) The asset location of the file where the patch should be applied. [DocumentAsJson] public AssetLocation File Field Value AssetLocation Op (Required) The operation for the patch. Essentially controls what the patch actually does. [DocumentAsJson] public EnumJsonPatchOp Op Field Value EnumJsonPatchOp Path (Required) This is the path to the json property where the operation will take place. [DocumentAsJson] public string Path Field Value string Value (Recommended) (Default: None) If adding, this is the value (or values) that will be added. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Value Field Value JsonObject Condition (Optional) (Default: None) A condition that this patch must satisfy to be applied. Uses specific values from the world config. Useful in conjunction with code mods. [DocumentAsJson] public PatchCondition Condition Field Value PatchCondition DependsOn (Optional) (Default: None) A list of mod dependencies for the patch. Can be used to create patches that are specific on certain mods being installed. Useful for compatibility! [DocumentAsJson] public PatchModDependence[] DependsOn Field Value PatchModDependence[] Enabled (Optional) (Default: True) Should this patch be applied or not? [DocumentAsJson] public bool Enabled Field Value bool FromPath (Optional) If using Move or Copy, this is the path to the json property to move or copy from. [DocumentAsJson] public string FromPath Field Value string Side (Optional) (Default: Universal) The app side that the patch should be loaded on. [DocumentAsJson] public EnumAppSide? Side Field Value EnumAppSide? SideType (Obsolete) The app side that the patch should be loaded on. Obsolete, please use Side instead. [Obsolete(\"Use Side instead\")] [DocumentAsJson] public EnumAppSide? SideType { get; set; } Field Value EnumAppSide?"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.PatchCondition.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.PatchCondition.html",
    "title": "Class PatchCondition | VintageStory Json Docs",
    "keywords": "Class PatchCondition Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A condition for a json patch. Conditions are based on the currently loaded worldconfig. Open in GitHub [DocumentAsJson] public class PatchCondition Inheritance object PatchCondition Fields When (Required) The key for the world config that this condition relies on. [DocumentAsJson] public string When Field Value string IsValue (Recommended) (Default: None) What value does the world config need to be for this patch to happen? Required if not using useValue. Will be ignored if using useValue. [DocumentAsJson] public string IsValue Field Value string useValue (Optional) (Default: False) If true, then this will replace the Value with the value in the world config. Can be used to create more complex patches. Required if not using IsValue. [DocumentAsJson] public bool useValue Field Value bool"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.PatchModDependence.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.PatchModDependence.html",
    "title": "Class PatchModDependence | VintageStory Json Docs",
    "keywords": "Class PatchModDependence Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A mod-dependence for a json patch. If your patch depends on another mod, you need to use this. Open in GitHub [DocumentAsJson] public class PatchModDependence Inheritance object PatchModDependence Fields modid (Required) The mod ID that this patch relies on. [DocumentAsJson] public string modid Field Value string invert (Optional) (Default: False) If true, then the patch will only occur if the specified mod is not installed. [DocumentAsJson] public bool invert Field Value bool"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.RegistryObjectType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.RegistryObjectType.html",
    "title": "Class RegistryObjectType | VintageStory Json Docs",
    "keywords": "Class RegistryObjectType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll The very base class for an in-game object. Extended by blocktypes, itemtypes, and entitytypes. Controls the object's code, variant types, allowed/disallowed variants, world interactions, and a class for extra functionality. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public abstract class RegistryObjectType Inheritance object RegistryObjectType Derived CollectibleType EntityType Examples \"code\": \"cheese\", \"class\": \"ItemCheese\", \"variantgroups\": [ { \"code\": \"type\", \"states\": [ \"cheddar\", \"blue\", \"waxedcheddar\" ] }, { \"code\": \"part\", \"states\": [ \"1slice\", \"2slice\", \"3slice\", \"4slice\" ] } ], \"skipVariants\": [ \"cheese-waxedcheddar-1slice\", \"cheese-waxedcheddar-2slice\", \"cheese-waxedcheddar-3slice\" ], Fields Code (Required) The unique code for this object. Used as the prefix for any variant codes. [DocumentAsJson] public AssetLocation Code Field Value AssetLocation AllowedVariants (Optional) (Default: None) If set, only resolved code-variants in this list will be loaded by the game. [JsonProperty] public AssetLocation[] AllowedVariants Field Value AssetLocation[] Class (Optional) (Default: None) A reference to the registered C# class of the object. Can be used to add extra functionality to objects. [JsonProperty] public string Class Field Value string Enabled (Optional) (Default: true) If set to false, this object will not be loaded. [DocumentAsJson] public bool Enabled Field Value bool SkipVariants (Optional) (Default: None) A set of resolved code-variants that will not be loaded by the game. [JsonProperty] public AssetLocation[] SkipVariants Field Value AssetLocation[] Tags (Optional) (Default: None) List of tags that this type belongs to. Used for categorizing objects. [JsonProperty] public string[] Tags Field Value string[] VariantGroups (Optional) (Default: None) All available variants for this object. [DocumentAsJson] public RegistryObjectVariantGroup[] VariantGroups Field Value RegistryObjectVariantGroup[] Interactions (Unused) (Default: None) (Currently unused) A set of potential world interactions for this object. Used to display what the object is used for - e.g. Shift + Right Click to Knap Stones. [JsonProperty] public WorldInteraction[] Interactions Field Value WorldInteraction[]"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.ServerEntityConfig.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.ServerEntityConfig.html",
    "title": "Class ServerEntityConfig | VintageStory Json Docs",
    "keywords": "Class ServerEntityConfig Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Specific configuration settings for entities on the server-side. Open in GitHub [DocumentAsJson] public class ServerEntityConfig Inheritance object ServerEntityConfig Examples \"server\": { \"behaviors\": [ { \"code\": \"passivephysics\", \"groundDragFactor\": 1, \"airDragFactor\": 0.25, \"gravityFactor\": 0.75 }, { \"code\": \"despawn\", \"minSeconds\": 600 } ] }, Fields SpawnConditions (Recommended) (Default: None) The spawn conditions for the entity. Without this, the entity will not spawn anywhere. [JsonProperty] public SpawnConditions SpawnConditions Field Value SpawnConditions Attributes (Optional) (Default: None) A set of server-side attributes passed to the entity. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject Behaviors (Optional) (Default: None) A list of all server-side behaviors for the entity. [JsonProperty(ItemConverterType = typeof(JsonAttributesConverter))] public JsonObject[] Behaviors Field Value JsonObject[]"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.html",
    "title": "Namespace Vintagestory.ServerMods.NoObf | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.ServerMods.NoObf Classes BlockCropPropertiesType Used for crop blocks that grow over time. Open in GitHub BlockType Defines an in-game block using a json file. BlockTypes use all properties from CollectibleType and RegistryObjectType, but also contain some unique properties. Any json file placed in your \"assets/blocktypes\" folder will be loaded as a blocktype in the game. Open in GitHub ClientEntityConfig Specific configuration settings for entities on the client-side. Open in GitHub CollectibleBehaviorType A type of behavior to attach to a CollectibleType object. Open in GitHub CollectibleType A type of in-game collectible object. Extends from RegistryObjectType. This is mainly used to control items (and block's items) when they are in the inventory. ItemTypes get most of their data from here, BlockTypes use this as well as their own specific data. Open in GitHub CropBehaviorType Allows further complex behavior for crop blocks. Open in GitHub EntityType An entity type. Any json files inside of assets/entities will be loaded in as this type. Open in GitHub ItemType Defines an in-game item using a json file. Note that all json properties for items come from the base CollectibleType and RegistryObjectType classes. Any json file inside the \"assets/itemtypes\" folder will be loaded as an itemtype in the game. Open in GitHub JsonPatch Defines a patch for a json asset. This allows modifying json files through mods without directly editing them. To help with creating patches, it is highly recommended to learn how to use the in-built modmaker program. See https://wiki.vintagestory.at/Modding:Inbuilt_ModMaker for more info. Open in GitHub PatchCondition A condition for a json patch. Conditions are based on the currently loaded worldconfig. Open in GitHub PatchModDependence A mod-dependence for a json patch. If your patch depends on another mod, you need to use this. Open in GitHub RegistryObjectType The very base class for an in-game object. Extended by blocktypes, itemtypes, and entitytypes. Controls the object's code, variant types, allowed/disallowed variants, world interactions, and a class for extra functionality. Open in GitHub ServerEntityConfig Specific configuration settings for entities on the server-side. Open in GitHub Enums EnumJsonPatchOp A set of operations that define what a patch will do. See https://datatracker.ietf.org/doc/html/rfc6902#section-4.1 for more information on each operation type. Open in GitHub"
  },
  "jsondocs/Vintagestory.ServerMods.RegistryObjectVariantGroup.html": {
    "href": "jsondocs/Vintagestory.ServerMods.RegistryObjectVariantGroup.html",
    "title": "Class RegistryObjectVariantGroup | VintageStory Json Docs",
    "keywords": "Class RegistryObjectVariantGroup Namespace Vintagestory.ServerMods Assembly VSEssentials.dll This is used to define a set of variant groups for specific registry objects. Open in GitHub [DocumentAsJson] public class RegistryObjectVariantGroup Inheritance object RegistryObjectVariantGroup Examples \"variantgroups\": [ { \"code\": \"type\", \"states\": [ \"spelt\", \"rye\", \"flax\", \"rice\", \"cassava\", \"amaranth\", \"sunflower\" ] }, { \"code\": \"state\", \"states\": [ \"partbaked\", \"perfect\", \"charred\" ] } ], \"variantgroups\": [ { \"code\": \"rock\", \"loadFromProperties\": \"block/rockwithdeposit\" } ], Fields Code (Required) A unique code for this variant. Essentially an ID for each variant type. [DocumentAsJson] public string Code Field Value string States (Required) (Default: None) A list of all the valid states for this variant. Only required if LoadFromProperties or LoadFromPropertiesCombine are not set. [DocumentAsJson] public string[] States Field Value string[] Combine (Optional) (Default: Multiply) How this variant combines with other variant types to create individual objects. [DocumentAsJson] public EnumCombination Combine Field Value EnumCombination LoadFromProperties (Optional) (Default: None) If set, copies a WorldProperties asset to create variants from. [DocumentAsJson] public AssetLocation LoadFromProperties Field Value AssetLocation LoadFromPropertiesCombine (Optional) (Default: None) A set of world properties to combine to create variants from. [DocumentAsJson] public AssetLocation[] LoadFromPropertiesCombine Field Value AssetLocation[] OnVariant (Optional) (Default: None) Required if using the SelectiveMultiply in Combine. [DocumentAsJson] public string OnVariant Field Value string"
  },
  "jsondocs/Vintagestory.ServerMods.html": {
    "href": "jsondocs/Vintagestory.ServerMods.html",
    "title": "Namespace Vintagestory.ServerMods | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.ServerMods Classes BlockBehaviorOmniRotatable Allows complex rotation of a block depending on placement angle. Also has behavior of placing the block in the crafting grid to set a 'slab placement mode'. Requires the \"rot\" variant with the 6 directional states. Uses the \"OmniRotatable\" code. Open in GitHub RegistryObjectVariantGroup This is used to define a set of variant groups for specific registry objects. Open in GitHub"
  }
}