{
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Vintage Story JSON Reference | VintageStory Json Docs",
    "keywords": "Welcome to the Vintage Story JSON Reference If you want to learn how to mod the game, check out the tutorials on the Official Vintage Story Wiki. Using this site This site can be used in two ways: To see the functionality of a specific JSON property found within an asset. To do this, enter the exact property name in the search bar at the top-right of this page. To see what properties or options are available for specific assets. To do this, use the below Pages of Interest to find the asset type, and navigate through the properties available. Fields Each JSON type has a set of properties, known as fields, that will control how it works. The following is the standard look of every field in the following pages. Each field will list its name, its recommended status, and its default value if there is one. Field statuses include: Required - Required for this JSON type, and therefore does not have a default. Recommended - Recommended for this JSON type. Optional - Optional for this JSON type. Obsolete - Obsolete and should not be used. Usually contains a link to an alternative property that should be used. Below this will be the description or usage of the property, and a link to the property type. Many JSON types have properties which contain other JSON types, so following the link will allow you to see child properties that can be included. Note that many JSON types have examples on their page. Inheritance Many JSON types use properties (extend) from other JSON types. This is referred to as inheritance. Pages that use inheritance will have the following heading near the top of their page. In this example, BlockType extends from CollectibleType, which extends from RegistryObjectType. Therefore, BlockType can use all the properties from BlockType, all the properties from CollectibleType, and all the properties from RegistryObjectType. You can click on any inherited pages to go there. Currently documented assets: Documenting JSON assets takes time! Currently, this site contains exhaustive documentation for the following asset types: Blocktypes Itemtypes Entities It does not yet contain any behaviors (BlockBehavior, CollectibleBehaviors, etc) for the above asset types. Pages of Interest RegistryObjectType - All blocks, items, and entities extend from this. Controls IDs and variant types. CollectibleType - Blocks and items extend from this. Anything that can be held in the inventory is counted as a collectible type. ItemType - Page for item types. Note that all JSON properties for item types come from the above CollectibleType and RegistryObjectType pages. BlockType - This lists all properties for BlockTypes. EntityType - This lists all properties for EntityTypes."
  },
  "jsondocs/Vintagestory.API.Client.BlendedOverlayTexture.html": {
    "href": "jsondocs/Vintagestory.API.Client.BlendedOverlayTexture.html",
    "title": "Class BlendedOverlayTexture | VintageStory Json Docs",
    "keywords": "Class BlendedOverlayTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Defines a texture to be overlayed on another texture. public class BlendedOverlayTexture Inheritance object BlendedOverlayTexture Fields Base (Required) The path to the texture to use as an overlay. public AssetLocation Base Field Value AssetLocation BlendMode (Optional) (Default: Normal) The type of blend for each pixel. public EnumColorBlendMode BlendMode Field Value EnumColorBlendMode"
  },
  "jsondocs/Vintagestory.API.Client.CompositeTexture.html": {
    "href": "jsondocs/Vintagestory.API.Client.CompositeTexture.html",
    "title": "Class CompositeTexture | VintageStory Json Docs",
    "keywords": "Class CompositeTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds data about a texture. Also allows textures to be overlayed on top of one another. public class CompositeTexture Inheritance object CompositeTexture Examples \"textures\": { \"charcoal\": { \"base\": \"block/coal/charcoal\" }, \"coke\": { \"base\": \"block/coal/coke\" }, \"ore-anthracite\": { \"base\": \"block/coal/anthracite\" }, \"ore-lignite\": { \"base\": \"block/coal/lignite\" }, \"ore-bituminouscoal\": { \"base\": \"block/coal/bituminous\" }, \"ember\": { \"base\": \"block/coal/ember\" } }, \"textures\": { \"ore\": { \"base\": \"block/stone/rock/{rock}1\", \"overlays\": [ \"block/stone/ore/{ore}1\" ] } }, Connected textures example (See https://discord.com/channels/302152934249070593/479736466453561345/1134187385501007962) \"textures\": { \"all\": { \"base\": \"block/stone/cobblestone/tiling/1\", \"tiles\": [ { \"base\": \"block/stone/cobblestone/tiling/*\" } ], \"tilesWidth\": 4 } } Fields Alpha (Optional) (Default: 255) Can be used to modify the opacity of the texture. 255 is fully opaque, 0 is fully transparent. public int Alpha Field Value int Alternates (Optional) (Default: None) The texture may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world. public CompositeTexture[] Alternates Field Value CompositeTexture[] Base (Required) The basic texture for this composite texture public AssetLocation Base Field Value AssetLocation BlendedOverlays (Optional) (Default: None) A set of textures to overlay above this texture. The base texture may be overlayed with any quantity of textures. These are baked together during texture atlas creation. public BlendedOverlayTexture[] BlendedOverlays Field Value BlendedOverlayTexture[] Rotation (Optional) (Default: 0) Rotation of the texture may only be a multiple of 90 public int Rotation Field Value int Tiles (Optional) (Default: None) A way of basic support for connected textures. Textures should be named numerically from 1 to TilesWidth squared. E.g., if TilesWidth is 3, the order follows the pattern of: 1 2 3 4 5 6 7 8 9 public CompositeTexture[] Tiles Field Value CompositeTexture[] TilesWidth (Optional) (Default: 0) The number of tiles in one direction that make up the full connected textures defined in Tiles. public int TilesWidth Field Value int Properties Overlays (Obsolete) Obsolete. Use BlendedOverlays instead. public AssetLocation[] Overlays { set; } Property Value AssetLocation[]"
  },
  "jsondocs/Vintagestory.API.Client.EnumChunkRenderPass.html": {
    "href": "jsondocs/Vintagestory.API.Client.EnumChunkRenderPass.html",
    "title": "Enum EnumChunkRenderPass | VintageStory Json Docs",
    "keywords": "Enum EnumChunkRenderPass Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The various render passes available for rendering blocks public enum EnumChunkRenderPass Fields Opaque = 0 Backfaced culled, no alpha testing, alpha discard OpaqueNoCull = 1 Backfaced not culled, no alpha blended but alpha discard BlendNoCull = 2 Backfaced not culled, alpha blended and alpha discard Transparent = 3 Uses a special rendering system called Weighted Blended Order Independent Transparency for half transparent blocks Liquid = 4 Used for animated liquids TopSoil = 5 Special render pass for top soil only in order to have climated tinted grass half transparently overlaid over an opaque block Meta = 6 Special render pass for meta blocks"
  },
  "jsondocs/Vintagestory.API.Client.EnumDrawType.html": {
    "href": "jsondocs/Vintagestory.API.Client.EnumDrawType.html",
    "title": "Enum EnumDrawType | VintageStory Json Docs",
    "keywords": "Enum EnumDrawType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draw types for blocks. public enum EnumDrawType Fields BlockLayer_1 = 1 BlockLayer_2 = 2 BlockLayer_3 = 3 BlockLayer_4 = 4 BlockLayer_5 = 5 BlockLayer_6 = 6 BlockLayer_7 = 7 JSON = 8 You will most likely use JSON for all assets with custom shapes. Empty = 9 Cube = 10 Cross = 11 Transparent = 12 Liquid = 13 TopSoil = 14 CrossAndSnowlayer = 15 JSONAndWater = 16 JSONAndSnowLayer = 17 CrossAndSnowlayer_2 = 18 CrossAndSnowlayer_3 = 19 CrossAndSnowlayer_4 = 20 SurfaceLayer = 21"
  },
  "jsondocs/Vintagestory.API.Client.EnumFaceCullMode.html": {
    "href": "jsondocs/Vintagestory.API.Client.EnumFaceCullMode.html",
    "title": "Enum EnumFaceCullMode | VintageStory Json Docs",
    "keywords": "Enum EnumFaceCullMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Types that determine how block faces should be culled. public enum EnumFaceCullMode Fields Default = 0 Culls faces if they are opaque faces adjacent to opaque faces NeverCull = 1 Never culls any faces Merge = 2 Culls all faces that are adjacent to opaque faces and faces adjacent to blocks of the same id Callback = 7 Calls method Block.ShouldMergeFace() to determine whether to cull the face or not Collapse = 3 Culls all faces that are adjacent to opaque faces and the bottom, east or south faces adjacent to blocks of the same id This causes to still leave one single face inbetween instead of 2, eliminating any z-fighting. MergeMaterial = 4 Same as Merge but checks for equal material CollapseMaterial = 5 Same as Collapse but checks for equal material Liquid = 6 Same as CollapseMaterial but also culls faces towards opaque blocks MergeSnowLayer = 8 FlushExceptTop = 9 Used for blocks similar to Farmland or StonePath, which are not themselves opaque except on the base, but can cull horizontal sides if adjacent block is opaque (or the same id) Stairs = 10 Culls non-opaque faces if the same block is adjacent e.g. a wide staircase made from several Stairs blocks side-by-side (caution: in future this cull mode will not work with corner stairs shapes)"
  },
  "jsondocs/Vintagestory.API.Client.WorldInteraction.html": {
    "href": "jsondocs/Vintagestory.API.Client.WorldInteraction.html",
    "title": "Class WorldInteraction | VintageStory Json Docs",
    "keywords": "Class WorldInteraction Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A world interaction for the object. This is used to prompt the player about what a certain object can do. [JsonObject(MemberSerialization.OptIn)] public class WorldInteraction Inheritance object WorldInteraction Fields ActionLangCode (Required) The text to show, will be used in the form of Lang.Get(ActionLangCode); [JsonProperty] public string ActionLangCode Field Value string HotKeyCode (Optional) Does it require a mouse modifier key to perform this action (e.g. \"shift\" or \"ctrl\") [JsonProperty] public string HotKeyCode Field Value string ItemStacks (Optional) (Default: None) Does the player need to hold a certain items/blocks in hands? (e.g. a knife). You can define an array of item stacks here and the game will loop through them in a 1 second interval. This property is loaded from the entitytypes and blocktype json files and then resolved. [JsonProperty(\"ItemStacks\")] public JsonItemStack[] JsonItemStacks Field Value JsonItemStack[] MouseButton (Recommended) (Default: Left) What mouse button should be used for this interaction? [JsonProperty] public EnumMouseButton MouseButton Field Value EnumMouseButton Properties HotKeyCodes (Optional) (Default: None) Does it require pressing multiple keys to perform this action (if set then HotkeyCode is ignored) [JsonProperty] public string[] HotKeyCodes { get; set; } Property Value string[]"
  },
  "jsondocs/Vintagestory.API.Client.html": {
    "href": "jsondocs/Vintagestory.API.Client.html",
    "title": "Namespace Vintagestory.API.Client | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Client Classes BlendedOverlayTexture Defines a texture to be overlayed on another texture. CompositeTexture Holds data about a texture. Also allows textures to be overlayed on top of one another. WorldInteraction A world interaction for the object. This is used to prompt the player about what a certain object can do. Enums EnumChunkRenderPass The various render passes available for rendering blocks EnumDrawType Draw types for blocks. EnumFaceCullMode Types that determine how block faces should be culled."
  },
  "jsondocs/Vintagestory.API.Common.AdvancedParticleProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.AdvancedParticleProperties.html",
    "title": "Class AdvancedParticleProperties | VintageStory Json Docs",
    "keywords": "Class AdvancedParticleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used to add a set of particle properties to a collectible. [JsonObject(MemberSerialization.OptIn)] public class AdvancedParticleProperties Inheritance object AdvancedParticleProperties Fields HsvaColor (Optional) (Default: Random) The Hue/Saturation/Value/Alpha for the color of the particle. [JsonProperty] public NatFloat[] HsvaColor Field Value NatFloat[] PosOffset (Optional) (Default: 0, 0, 0) Offset from the blocks hitboxes top middle position [JsonProperty] public NatFloat[] PosOffset Field Value NatFloat[] Properties BlueEvolve (Optional) (Default: None) A transforming Blue value. [JsonProperty] public EvolvingNatFloat BlueEvolve { get; set; } Property Value EvolvingNatFloat Bounciness (Optional) (Default: 0) The amount of velocity to be kept when this particle collides with something. Directional velocity is multipled by (-Bounciness * 0.65) on any collision. [JsonProperty] public float Bounciness { get; set; } Property Value float ColorByBlock (Optional) (Default: false) Whether or not to color the particle by the block it's on. [JsonProperty] public bool ColorByBlock { get; set; } Property Value bool DeathParticles (Optional) (Default: None) More particles that spawn when this particle dies. [JsonProperty] public AdvancedParticleProperties[] DeathParticles { get; set; } Property Value AdvancedParticleProperties[] DieInAir (Optional) (Default: false) Whether or not the particle dies in air. [JsonProperty] public bool DieInAir { get; set; } Property Value bool DieInLiquid (Optional) (Default: false) Whether or not the particle dies in water. [JsonProperty] public bool DieInLiquid { get; set; } Property Value bool DieOnRainHeightmap (Optional) (Default: false) If true, particle dies if it falls below the rain height at its given location [JsonProperty] public bool DieOnRainHeightmap { get; set; } Property Value bool GravityEffect (Optional) (Default: 1) The gravity effect on the particle. [JsonProperty] public NatFloat GravityEffect { get; set; } Property Value NatFloat GreenEvolve (Optional) (Default: None) A transforming Green value. [JsonProperty] public EvolvingNatFloat GreenEvolve { get; set; } Property Value EvolvingNatFloat LifeLength (Optional) (Default: 1) The life length, in seconds, of the particle. [JsonProperty] public NatFloat LifeLength { get; set; } Property Value NatFloat OpacityEvolve (Optional) (Default: None) A transforming opacity value. [JsonProperty] public EvolvingNatFloat OpacityEvolve { get; set; } Property Value EvolvingNatFloat ParticleModel (Optional) (Default: Cube) Sets the base model for the particle. [JsonProperty] public EnumParticleModel ParticleModel { get; set; } Property Value EnumParticleModel Quantity (Optional) (Default: 1) The quantity of the particles given. [JsonProperty] public NatFloat Quantity { get; set; } Property Value NatFloat RandomVelocityChange (Optional) (Default: false) Allows each particle to randomly change its velocity over time. [JsonProperty] public bool RandomVelocityChange { get; set; } Property Value bool RedEvolve (Optional) (Default: None) A transforming Red value. [JsonProperty] public EvolvingNatFloat RedEvolve { get; set; } Property Value EvolvingNatFloat SecondaryParticles (Optional) (Default: None) More particles that spawn from this particle over time. See SecondarySpawnInterval to control rate. [JsonProperty] public AdvancedParticleProperties[] SecondaryParticles { get; set; } Property Value AdvancedParticleProperties[] SecondarySpawnInterval (Optional) (Default: 0) The inverval that the SecondaryParticles spawn. [JsonProperty] public NatFloat SecondarySpawnInterval { get; set; } Property Value NatFloat SelfPropelled (Optional) (Default: false) Whether or not the particle is self propelled. [JsonProperty] public bool SelfPropelled { get; set; } Property Value bool Size (Optional) (Default: 1) The size of the particles given. [JsonProperty] public NatFloat Size { get; set; } Property Value NatFloat SizeEvolve (Optional) (Default: 0) A transforming Size value. [JsonProperty] public EvolvingNatFloat SizeEvolve { get; set; } Property Value EvolvingNatFloat SwimOnLiquid (Optional) (Default: false) Whether or not the particle floats on liquids. [JsonProperty] public bool SwimOnLiquid { get; set; } Property Value bool TerrainCollision (Optional) (Default: true) Whether or not the particle collides with the terrain. [JsonProperty] public bool TerrainCollision { get; set; } Property Value bool Velocity (Optional) (Default: Random) The velocity of the particles. [JsonProperty] public NatFloat[] Velocity { get; set; } Property Value NatFloat[] VelocityEvolve (Optional) (Default: None) A dynamic velocity value. [JsonProperty] public EvolvingNatFloat[] VelocityEvolve { get; set; } Property Value EvolvingNatFloat[] VertexFlags (Optional) (Default: 0) The level of glow in the particle. [JsonProperty] public int VertexFlags { get; set; } Property Value int WindAffectednes (Optional) (Default: 0) How much the particles are affected by wind. [JsonProperty] public float WindAffectednes { get; set; } Property Value float"
  },
  "jsondocs/Vintagestory.API.Common.AnimationMetaData.html": {
    "href": "jsondocs/Vintagestory.API.Common.AnimationMetaData.html",
    "title": "Class AnimationMetaData | VintageStory Json Docs",
    "keywords": "Class AnimationMetaData Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Animation Meta Data is a json type that controls how an animation should be played. public class AnimationMetaData Inheritance object AnimationMetaData Examples \"animations\": [ { \"code\": \"hurt\", \"animation\": \"hurt\", \"animationSpeed\": 2.2, \"weight\": 10, \"blendMode\": \"AddAverage\" }, { \"code\": \"die\", \"animation\": \"death\", \"animationSpeed\": 1.25, \"weight\": 10, \"blendMode\": \"Average\", \"triggeredBy\": { \"onControls\": [ \"dead\" ] } }, { \"code\": \"idle\", \"animation\": \"idle\", \"blendMode\": \"AddAverage\", \"easeOutSpeed\": 4, \"triggeredBy\": { \"defaultAnim\": true } }, { \"code\": \"walk\", \"animation\": \"walk\", \"weight\": 5 } ] Fields Animation (Required) The animations code identifier that we want to play [JsonProperty] public string Animation Field Value string AnimationSound [JsonProperty] public AnimationSound AnimationSound Field Value AnimationSound AnimationSpeed (Optional) (Default: 1) The speed this animation should play at. [JsonProperty] public float AnimationSpeed Field Value float Attributes (Optional) (Default: None) Custom attributes that can be used for the animation. Valid vanilla attributes are: damageAtFrame (float) soundAtFrame (float) authorative (bool) [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject BlendMode (Optional) (Default: Add) The animation blend mode. Controls how this animation will react with other concurrent animations. Also see ElementBlendMode to control blend mode per element. [JsonProperty] public EnumAnimationBlendMode BlendMode Field Value EnumAnimationBlendMode ClientSide (Optional) (Default: false) If true, the server does not sync this animation. [JsonProperty] public bool ClientSide Field Value bool Code (Required) Unique identifier to be able to reference this AnimationMetaData instance [JsonProperty] public string Code Field Value string EaseInSpeed (Optional) (Default: 10) A multiplier applied to the weight value to \"ease in\" the animation. Choose a high value for looping animations or it will be glitchy [JsonProperty] public float EaseInSpeed Field Value float EaseOutSpeed (Optional) (Default: 10) A multiplier applied to the weight value to \"ease out\" the animation. Choose a high value for looping animations or it will be glitchy [JsonProperty] public float EaseOutSpeed Field Value float ElementBlendMode (Optional) (Default: None) A way of specifying BlendMode per element. [JsonProperty] public Dictionary<string, EnumAnimationBlendMode> ElementBlendMode Field Value Dictionary<string, EnumAnimationBlendMode> ElementWeight (Optional) (Default: None) A way of specifying Weight for each element. Also see ElementBlendMode to control blend modes per element.. [JsonProperty] public Dictionary<string, float> ElementWeight Field Value Dictionary<string, float> HoldEyePosAfterEasein (Optional) (Default: 99) A value that determines whether to change the first-person eye position for the camera. Higher values will keep eye position static. [JsonProperty] public float HoldEyePosAfterEasein Field Value float MulWithWalkSpeed (Optional) (Default: false) Should this animation speed be multiplied by the movement speed of the entity? [JsonProperty] public bool MulWithWalkSpeed Field Value bool SupressDefaultAnimation (Optional) (Default: false) Should this animation stop default animations from playing? [JsonProperty] public bool SupressDefaultAnimation Field Value bool TriggeredBy (Optional) (Default: None) Controls when this animation should be played. [JsonProperty] public AnimationTrigger TriggeredBy Field Value AnimationTrigger Weight (Optional) (Default: 1) The weight of this animation. When using multiple animations at a time, this controls the significance of each animation. The method for determining final animation values depends on this and BlendMode. [JsonProperty] public float Weight Field Value float WeightCapFactor (Optional) (Default: 0) This property can be used in cases where a animation with high weight is played alongside another animation with low element weight. In these cases, the easeIn become unaturally fast. Setting a value of 0.8f or similar here addresses this issue. 0f = uncapped weight 0.5f = weight cannot exceed 2 1f = weight cannot exceed 1 [JsonProperty] public float WeightCapFactor Field Value float WithFpVariant [JsonProperty] public bool WithFpVariant Field Value bool"
  },
  "jsondocs/Vintagestory.API.Common.AnimationSound.html": {
    "href": "jsondocs/Vintagestory.API.Common.AnimationSound.html",
    "title": "Class AnimationSound | VintageStory Json Docs",
    "keywords": "Class AnimationSound Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public class AnimationSound Inheritance object AnimationSound"
  },
  "jsondocs/Vintagestory.API.Common.AnimationTrigger.html": {
    "href": "jsondocs/Vintagestory.API.Common.AnimationTrigger.html",
    "title": "Class AnimationTrigger | VintageStory Json Docs",
    "keywords": "Class AnimationTrigger Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Data about when an animation should be triggered. public class AnimationTrigger Inheritance object AnimationTrigger Fields DefaultAnim (Optional) (Default: false) Is this animation the default animation for the entity? [JsonProperty] public bool DefaultAnim Field Value bool MatchExact (Optional) (Default: false) If set to true, all OnControls elements need to be happening simultaneously to trigger the animation. If set to false, at least one OnControls element needs to be happening to trigger the animation. Defaults to false. [JsonProperty] public bool MatchExact Field Value bool OnControls (Recommended) An array of controls that should begin the animation. [JsonProperty] public EnumEntityActivity[] OnControls Field Value EnumEntityActivity[]"
  },
  "jsondocs/Vintagestory.API.Common.AssetLocation.html": {
    "href": "jsondocs/Vintagestory.API.Common.AssetLocation.html",
    "title": "Class AssetLocation | VintageStory Json Docs",
    "keywords": "Class AssetLocation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a complete path to an assets, including it's domain. [TypeConverter(typeof(StringAssetLocationConverter))] [ProtoContract] public class AssetLocation Inheritance object AssetLocation Examples In JSON assets, asset locations are represented as single strings in the form \"domain:path\". To access an asset in the vanilla game, use the domain 'game'. \"code\": \"game:vegetable-cookedcattailroot\","
  },
  "jsondocs/Vintagestory.API.Common.BakingProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.BakingProperties.html",
    "title": "Class BakingProperties | VintageStory Json Docs",
    "keywords": "Class BakingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Baking Properties are collectible attribute used for baking items in a clay oven. You will need to add these attributes if using Bake inside SmeltingType. public class BakingProperties Inheritance object BakingProperties Examples Example taken from bread. Note that the levelTo value in the baking stage is the same as the levelFrom in the next baking stage. \"attributesByType\": { \"*-partbaked\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.25, \"levelTo\": 0.5, \"startScaleY\": 0.95, \"endScaleY\": 1.10, \"resultCode\": \"bread-{type}-perfect\", \"initialCode\": \"dough-{type}\" } }, \"*-perfect\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.5, \"levelTo\": 0.75, \"startScaleY\": 1.10, \"endScaleY\": 1.13, \"resultCode\": \"bread-{type}-charred\", \"initialCode\": \"bread-{type}-partbaked\" } }, \"*-charred\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.75, \"levelTo\": 1, \"startScaleY\": 1.13, \"endScaleY\": 1.10, \"initialCode\": \"bread-{type}-perfect\" } } }, Fields EndScaleY (Optional) (Default: 1) The Y scale of this collectible when it has finished cooking. Value will be linearly interpolated between StartScaleY and this. public float EndScaleY Field Value float InitialCode (Required) The code of the initial collectible that is being baked. public string InitialCode Field Value string LargeItem (Recommended) (Default: false) If true, only one instance of this collectible can be baked at a time. If false, 4 of this collectible can be baked at a time. public bool LargeItem Field Value bool LevelFrom (Recommended) (Default: 0) The initial value, from 0 to 1, that determines how cooked the item is. When cooking an object with numerous cooking stages, these stages can be stacked using these values. Simply set the second stage's LevelFrom to the first stages LevelTo. public float LevelFrom Field Value float LevelTo (Recommended) (Default: 1) The final value, from 0 to 1, that determines how cooked the item is. When the cooking value reaches this value, the collectible will change into the next item. When cooking an object with numerous cooking stages, these stages can be stacked using these values. Simply set the second stage's LevelFrom to the first stages LevelTo. public float LevelTo Field Value float ResultCode (Required) The code of the resulting collectible when this item finishes its cooking stage. public string ResultCode Field Value string StartScaleY (Optional) (Default: 1) The Y scale of this collectible when it begins cooking. Value will be linearly interpolated between this and EndScaleY. public float StartScaleY Field Value float Temp (Recommended) (Default: 160) The temperature required to bake the item. public float? Temp Field Value float?"
  },
  "jsondocs/Vintagestory.API.Common.BlockDropItemStack.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockDropItemStack.html",
    "title": "Class BlockDropItemStack | VintageStory Json Docs",
    "keywords": "Class BlockDropItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents an itemstack that is dropped when breaking a block, with a potentially random quantity. public class BlockDropItemStack Inheritance object BlockDropItemStack Examples \"drops\": [ { \"type\": \"item\", \"code\": \"bone\", \"quantity\": { \"avg\": 4, \"var\": 2 } } ] Fields Attributes (Optional) (Default: None) Tree Attributes that should be attached to the resulting itemstack [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject Code (Required) Code of the block or item public AssetLocation Code Field Value AssetLocation DropModbyStat (Optional) (Default: None) If set, the drop quantity will be modified by the collecting entity stat code - entity.Stats.GetBlended(code). public string DropModbyStat Field Value string LastDrop (Optional) (Default: false) If true, and this drop occurs, no further drops will happen. public bool LastDrop Field Value bool Quantity (Optional) (Default: 1) Quantity to be dropped public NatFloat Quantity Field Value NatFloat Tool (Optional) (Default: None) If set, then the given tool is required to make this block drop anything. public EnumTool? Tool Field Value EnumTool? Type (Recommended) (Default: Block) Block or Item? public EnumItemClass Type Field Value EnumItemClass"
  },
  "jsondocs/Vintagestory.API.Common.BlockEntityBehaviorType.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockEntityBehaviorType.html",
    "title": "Class BlockEntityBehaviorType | VintageStory Json Docs",
    "keywords": "Class BlockEntityBehaviorType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows adding behaviors for block entities. Remember, block entities are specific instances of blocks placed within the world. public class BlockEntityBehaviorType Inheritance object BlockEntityBehaviorType Examples \"entityClass\": \"Brake\", \"entityBehaviors\": [ { \"name\": \"MPBrake\" }, { \"name\": \"Animatable\" } ], Fields Name (Required) The ID for this block entity behavior. [JsonProperty] public string Name Field Value string properties (Optional) (Default: None) A set of properties specific to the block entity behavior class. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "jsondocs/Vintagestory.API.Common.BlockSounds.html": {
    "href": "jsondocs/Vintagestory.API.Common.BlockSounds.html",
    "title": "Class BlockSounds | VintageStory Json Docs",
    "keywords": "Class BlockSounds Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A set of sounds that are defined for a block. All fields use default or empty sounds if not set. public class BlockSounds Inheritance object BlockSounds Examples \"sounds\": { \"place\": \"block/dirt\", \"break\": \"block/dirt\", \"hit\": \"block/dirt\", \"walk\": \"walk/grass\" }, Fields Ambient (Optional) Played in ambience for this block. public AssetLocation Ambient Field Value AssetLocation AmbientBlockCount (Optional) (Default: 10) Amount of nearby ambient sound blocks in order to reach full ambient sound volume public float AmbientBlockCount Field Value float AmbientMaxDistanceMerge (Optional) (Default: 3) Adjacent ambient sound sources are merged to avoid playing too many sounds too loudly. This is the maximum distance a sound source can be from another to allow a merge. public float AmbientMaxDistanceMerge Field Value float AmbientSoundType (Optional) (Default: Ambient) The type of sound for this block's ambient sound. public EnumSoundType AmbientSoundType Field Value EnumSoundType Properties Break (Optional) Played when this block is broken. public virtual AssetLocation Break { get; set; } Property Value AssetLocation ByTool (Optional) (Default: None) Gets the sound that occurs when a specific tool hits a block. public virtual Dictionary<EnumTool, BlockSounds> ByTool { get; set; } Property Value Dictionary<EnumTool, BlockSounds> Hit (Optional) Played when this block is hit. Will be overridden by ByTool if an appropriate tool is set. public virtual AssetLocation Hit { get; set; } Property Value AssetLocation Inside (Optional) Played when an entity moves inside this block. Primarily used for liquids. public virtual AssetLocation Inside { get; set; } Property Value AssetLocation Place (Optional) Played when this block is placed. public virtual AssetLocation Place { get; set; } Property Value AssetLocation Walk (Optional) Played when an entity walks on this block. public virtual AssetLocation Walk { get; set; } Property Value AssetLocation"
  },
  "jsondocs/Vintagestory.API.Common.CombustibleProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.CombustibleProperties.html",
    "title": "Class CombustibleProperties | VintageStory Json Docs",
    "keywords": "Class CombustibleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Marks an item as combustible, either by cooking, smelting or firing. This can either imply it is used as a fuel, or can be cooked into another object. public class CombustibleProperties Inheritance object CombustibleProperties Examples Cooking: \"combustiblePropsByType\": { \"bushmeat-raw\": { \"meltingPoint\": 150, \"meltingDuration\": 30, \"smeltedRatio\": 1, \"smeltingType\": \"cook\", \"smeltedStack\": { \"type\": \"item\", \"code\": \"bushmeat-cooked\" }, \"requiresContainer\": false } }, Clay Firing: \"combustiblePropsByType\": { \"bowl-raw\": { \"meltingPoint\": 650, \"meltingDuration\": 45, \"smeltedRatio\": 1, \"smeltingType\": \"fire\", \"smeltedStack\": { \"type\": \"block\", \"code\": \"bowl-fired\" }, \"requiresContainer\": false } }, Fuel Source: \"combustibleProps\": { \"burnTemperature\": 1300, \"burnDuration\": 40 }, Fields BurnDuration (Optional) (Default: 0) The duration, in real life seconds, that this collectible burns for when used as a fuel. public float BurnDuration Field Value float BurnTemperature (Optional) (Default: 0) The temperature at which this collectible burns when used as a fuel. public int BurnTemperature Field Value int HeatResistance (Optional) (Default: 500) How many degrees celsius it can resists before it ignites public int HeatResistance Field Value int MaxTemperature (Optional) (Default: 0) If there is a melting point, the max temperature it can reach. A value of 0 implies no limit. public int MaxTemperature Field Value int MeltingDuration (Recommended) (Default: 0) For how many seconds the temperature has to be above the melting point until the item is smelted. Recommended if SmeltedStack is set. public float MeltingDuration Field Value float MeltingPoint (Recommended) (Default: 0) How many degrees celsius it takes to smelt/transform this collectible into another. Required if SmeltedStack is set. public int MeltingPoint Field Value int RequiresContainer (Optional) (Default: true) If true, a container is required to smelt this item. public bool RequiresContainer Field Value bool SmeltedRatio (Optional) (Default: 0) How many of this collectible are needed to smelt into SmeltedStack. public int SmeltedRatio Field Value int SmeltedStack (Recommended) (Default: 0) If set, this is the resulting itemstack once the MeltingPoint has been reached for the supplied duration. public JsonItemStack SmeltedStack Field Value JsonItemStack SmeltingType (Recommended) (Default: Smelt) Some smelt types have specific functionality, and are also used for correct naming in the tool tip. If using Bake, you will need to include BakingProperties in your item attributes. public EnumSmeltType SmeltingType Field Value EnumSmeltType SmokeLevel (Optional) (Default: 0) How much smoke this item produces when being used as fuel public float SmokeLevel Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.CompositeShape.html": {
    "href": "jsondocs/Vintagestory.API.Common.CompositeShape.html",
    "title": "Class CompositeShape | VintageStory Json Docs",
    "keywords": "Class CompositeShape Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Holds shape data to create 3D representations of objects. Also allows shapes to be overlayed on top of one another recursively. public class CompositeShape Inheritance object CompositeShape Examples \"shape\": { \"base\": \"block/basic/cube\" }, \"shapeInventory\": { \"base\": \"block/plant/bamboo/{color}/{part}-1\", \"overlays\": [ { \"base\": \"block/plant/bamboo/{color}/{part}lod0-1\" } ] }, Fields Alternates (Optional) (Default: None) The block shape may consists of any amount of alternatives, one of which will be randomly chosen when the shape is chosen. public CompositeShape[] Alternates Field Value CompositeShape[] Base (Recommended) (Default: None) The path to this shape file. public AssetLocation Base Field Value AssetLocation Format (Optional) (Default: VintageStory) The format/filetype of this shape. public EnumShapeFormat Format Field Value EnumShapeFormat InsertBakedTextures (Optional) (Default: false) Whether or not to insert baked in textures for mesh formats such as gltf into the texture atlas. public bool InsertBakedTextures Field Value bool Overlays (Optional) (Default: None) The shape will render all overlays on top of this shape. Can be used to group multiple shapes into one composite shape. public CompositeShape[] Overlays Field Value CompositeShape[] QuantityElements (Optional) (Default: None) If non zero will only tesselate the first n elements of the shape public int? QuantityElements Field Value int? Scale (Optional) (Default: 1) The scale of this shape on all axes. public float Scale Field Value float SelectiveElements (Optional) (Default: None) If set will only tesselate elements with given name public string[] SelectiveElements Field Value string[] VoxelizeTexture (Optional) (Default: false) If true, the shape is created from a voxelized version of the first defined texture public bool VoxelizeTexture Field Value bool offsetX (Optional) (Default: 0) How much should this shape be offset on X axis? public float offsetX Field Value float offsetY (Optional) (Default: 0) How much should this shape be offset on Y axis? public float offsetY Field Value float offsetZ (Optional) (Default: 0) How much should this shape be offset on Z axis? public float offsetZ Field Value float rotateX (Optional) (Default: 0) How much, in degrees, should this shape be rotated around the X axis? public float rotateX Field Value float rotateY (Optional) (Default: 0) How much, in degrees, should this shape be rotated around the Y axis? public float rotateY Field Value float rotateZ (Optional) (Default: 0) How much, in degrees, should this shape be rotated around the Z axis? public float rotateZ Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.CreativeTabAndStackList.html": {
    "href": "jsondocs/Vintagestory.API.Common.CreativeTabAndStackList.html",
    "title": "Class CreativeTabAndStackList | VintageStory Json Docs",
    "keywords": "Class CreativeTabAndStackList Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows you to add a list of item stacks to put various into creative menu tabs. public class CreativeTabAndStackList Inheritance object CreativeTabAndStackList Examples \"creativeinventoryStacksByType\": { \"*-fired\": [ { \"tabs\": [ \"general\", \"decorative\" ], \"stacks\": [ { \"type\": \"block\", \"code\": \"bowl-fired\", \"attributes\": { \"ucontents\": [ { \"type\": \"item\", \"code\": \"waterportion\", \"makefull\": true } ] } }, { \"type\": \"block\", \"code\": \"bowl-fired\", \"attributes\": { \"ucontents\": [ { \"type\": \"item\", \"code\": \"honeyportion\", \"makefull\": true } ] } }, { \"type\": \"block\", \"code\": \"bowl-fired\" }, { \"type\": \"block\", \"code\": \"bowl-raw\" } ] } ] }, Fields Stacks (Required) A list of item stacks to put in tabs. Note that every itemstack here will be placed in every Tabs entry. public JsonItemStack[] Stacks Field Value JsonItemStack[] Tabs (Required) A list of creative tabs to put items into. Note that all itemstacks in Stacks will be placed in all tabs. public string[] Tabs Field Value string[]"
  },
  "jsondocs/Vintagestory.API.Common.CrushingProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.CrushingProperties.html",
    "title": "Class CrushingProperties | VintageStory Json Docs",
    "keywords": "Class CrushingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of properties that allow an object to be ground in a quern. public class CrushingProperties Inheritance object CrushingProperties Examples \"crushingPropsByType\": { \"ore-poor-ilmenite-*\": { \"crushedStack\": { \"type\": \"item\", \"code\": \"crushed-ilmenite\" }, \"quantity\": { \"avg\": 1 }, \"hardnessTier\": 4 }, \"ore-poor-cassiterite-*\": { \"crushedStack\": { \"type\": \"item\", \"code\": \"crushed-cassiterite\" }, \"quantity\": { \"avg\": \".33\" }, \"hardnessTier\": 1 }, }, Fields CrushedStack (Required) If set, the block/item is crusable in a pulverizer and this is the resulting itemstack once the crushing time is over. public JsonItemStack CrushedStack Field Value JsonItemStack HardnessTier (Recommended) (Default: 1) The hardness tier for this collectible. Affects what pounder cap must be used for pulverization. 0 = stone 1 = copper 2 = bronze 3 = iron 4 = steel public int HardnessTier Field Value int Quantity (Optional) (Default: 1) The random quantity of item to return. Note that this value is multiplied by CrushedStack's quantity. public NatFloat Quantity Field Value NatFloat"
  },
  "jsondocs/Vintagestory.API.Common.Entities.BaseSpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.BaseSpawnConditions.html",
    "title": "Class BaseSpawnConditions | VintageStory Json Docs",
    "keywords": "Class BaseSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A base class for entities spawning conditions. public class BaseSpawnConditions : ClimateSpawnCondition Inheritance object ClimateSpawnCondition BaseSpawnConditions Derived RuntimeSpawnConditions WorldGenSpawnConditions Inherited Members ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs Fields ClimateValueMode (Optional) (Default: WorldGenValues) Whether the rain and temperature values are referring to the worldgen values (i.e. yearly averages) or the current values at the moment of spawning. public EnumGetClimateMode ClimateValueMode Field Value EnumGetClimateMode Companions (Optional) (Default: None) Additional companions for the spawn. public AssetLocation[] Companions Field Value AssetLocation[] Group (Recommended) (Default: None) The group of the spawn conditions. Vanilla groups are: hostile neutral passive Hostile creatures should be defined as such here. This will automatically stop them spawning with a grace timer, and in locations where hostiles should not spawn. public string Group Field Value string HerdSize (Recommended) (Default: 1) the group size for the spawn. public NatFloat HerdSize Field Value NatFloat InsideBlockCodes (Optional) (Default: \"air\") The blocks that the object will spawn in. public AssetLocation[] InsideBlockCodes Field Value AssetLocation[] LightLevelType (Optional) (Default: MaxLight) The type of light counted for spawning purposes. public EnumLightLevelType LightLevelType Field Value EnumLightLevelType MaxLightLevel (Optional) (Default: 32) The maximum light level for an object to spawn. public int MaxLightLevel Field Value int MinLightLevel (Optional) (Default: 0) The minimum light level for an object to spawn. public int MinLightLevel Field Value int RequireSolidGround (Optional) (Default: true) Checks to see if the object requires solid ground. public bool RequireSolidGround Field Value bool TryOnlySurface (Optional) (Default: false) checks to see if the object can only spawn in the surface. public bool TryOnlySurface Field Value bool Properties GroupSize (Obsolete) Obsolete. Use HerdSize instead. [Obsolete(\"Use HerdSize instead\")] public NatFloat GroupSize { get; set; } Property Value NatFloat"
  },
  "jsondocs/Vintagestory.API.Common.Entities.ClimateSpawnCondition.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.ClimateSpawnCondition.html",
    "title": "Class ClimateSpawnCondition | VintageStory Json Docs",
    "keywords": "Class ClimateSpawnCondition Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A list of conditions based on climate. public class ClimateSpawnCondition Inheritance object ClimateSpawnCondition Derived BaseSpawnConditions Fields MaxForest (Optional) (Default: 1) The maximum amount of forest cover needed for the object to spawn. public float MaxForest Field Value float MaxRain (Optional) (Default: 1) The maximum amount of rain for the object to spawn. public float MaxRain Field Value float MaxShrubs (Optional) (Default: 1) The maximum amount of shrubbery needed for the object to spawn. public float MaxShrubs Field Value float MaxTemp (Optional) (Default: 40) The maximum tempurature for the object to spawn. public float MaxTemp Field Value float MaxY (Optional) (Default: 2) Won't span above maxY. 0...1 is world bottom to sea level, 1...2 is sea level to world top public float MaxY Field Value float MinForest (Optional) (Default: 0) The minimum amount of forest cover needed for the object to spawn. public float MinForest Field Value float MinForestOrShrubs (Optional) (Default: 0) The minimum amount of forest or shrubs for the object to spawn. public float MinForestOrShrubs Field Value float MinRain (Optional) (Default: 0) The minimum amount of rain for the object to spawn. public float MinRain Field Value float MinShrubs (Optional) (Default: 0) The minimum amount of shrubbery needed for the object to spawn. public float MinShrubs Field Value float MinTemp (Optional) (Default: -40) The minimum tempurature for the object to spawn. public float MinTemp Field Value float MinY (Optional) (Default: 0) Won't span below minY. 0...1 is world bottom to sea level, 1...2 is sea level to world top public float MinY Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.Entities.EnumEntityActivity.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.EnumEntityActivity.html",
    "title": "Enum EnumEntityActivity | VintageStory Json Docs",
    "keywords": "Enum EnumEntityActivity Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A list of activities that an entity can perform. [Flags] public enum EnumEntityActivity Fields None = 0 Idle = 1 Move = 2 SprintMode = 4 SneakMode = 8 Fly = 16 Swim = 32 Jump = 64 Fall = 128 Climb = 256 FloorSitting = 512 Dead = 1024 Break = 2048 Place = 4096 Glide = 8192 Mounted = 16384"
  },
  "jsondocs/Vintagestory.API.Common.Entities.QuantityByGroup.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.QuantityByGroup.html",
    "title": "Class QuantityByGroup | VintageStory Json Docs",
    "keywords": "Class QuantityByGroup Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Allows you to control spawn limits based on a set of entity codes using a wildcard. public class QuantityByGroup Inheritance object QuantityByGroup Fields Code (Required) A wildcard asset location which can group many entities together. public AssetLocation Code Field Value AssetLocation MaxQuantity (Required) The maximum quantity for all entities that match the Code wildcard. public int MaxQuantity Field Value int"
  },
  "jsondocs/Vintagestory.API.Common.Entities.RuntimeSpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.RuntimeSpawnConditions.html",
    "title": "Class RuntimeSpawnConditions | VintageStory Json Docs",
    "keywords": "Class RuntimeSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A set of spawn conditions for chunks that have already been generated. Most properties are got from BaseSpawnConditions. public class RuntimeSpawnConditions : BaseSpawnConditions Inheritance object ClimateSpawnCondition BaseSpawnConditions RuntimeSpawnConditions Inherited Members BaseSpawnConditions.Group BaseSpawnConditions.MinLightLevel BaseSpawnConditions.MaxLightLevel BaseSpawnConditions.LightLevelType BaseSpawnConditions.HerdSize BaseSpawnConditions.GroupSize BaseSpawnConditions.Companions BaseSpawnConditions.InsideBlockCodes BaseSpawnConditions.RequireSolidGround BaseSpawnConditions.TryOnlySurface BaseSpawnConditions.ClimateValueMode ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs Fields Chance (Recommended) (Default: 1) The chance, usually between 0 (0% chance) and 1 (100% chance), for the entity to spawn during the spawning round. public double Chance Field Value double MaxQuantity (Recommended) (Default: 20) The max number of this entity that can ever exist in the world for a single player. With more than one player, the max number is actually (this)x(current player count)x(SpawnCapPlayerScaling). Consider using MaxQuantityByGroup to allow a max quantity based from many entities. public int MaxQuantity Field Value int MaxQuantityByGroup (Optional) (Default: None) The max quantity of objects to spawn based on a wildcard group of entities. For example, using MaxQuantity will allow a max of 20 pig-wild-male instances. Using this with a group of \"pig-*\" will allow a max of 20 pig entities, regardless if male, female, or piglet. public QuantityByGroup MaxQuantityByGroup Field Value QuantityByGroup MinDistanceToPlayer (Optional) (Default: 18) The minimum distance from the player that an object will spawn. public int MinDistanceToPlayer Field Value int SpawnCapPlayerScaling (Optional) (Default: 1) The maximum number of this entity that can exist in the world is MaxQuantity x (current player count) x (this). public float SpawnCapPlayerScaling Field Value float"
  },
  "jsondocs/Vintagestory.API.Common.Entities.SpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.SpawnConditions.html",
    "title": "Class SpawnConditions | VintageStory Json Docs",
    "keywords": "Class SpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll The spawn conditions assigned to various things. public class SpawnConditions Inheritance object SpawnConditions Examples \"spawnconditions\": { \"worldgen\": { \"TriesPerChunk\": { \"avg\": 0.1, \"var\": 0 }, \"tryOnlySurface\": true, \"minLightLevel\": 10, \"groupSize\": { \"dist\": \"verynarrowgaussian\", \"avg\": 3, \"var\": 4 }, \"insideBlockCodes\": [ \"air\", \"tallgrass-*\" ], \"minTemp\": 5, \"maxTemp\": 28, \"minRain\": 0.45, \"minForest\": 0.35, \"companions\": [ \"pig-wild-female\", \"pig-wild-piglet\" ] }, \"runtime\": { \"group\": \"neutral\", \"tryOnlySurface\": true, \"chance\": 0.0006, \"maxQuantity\": 4, \"minLightLevel\": 10, \"groupSize\": { \"dist\": \"verynarrowgaussian\", \"avg\": 3, \"var\": 4 }, \"insideBlockCodes\": [ \"air\", \"tallgrass-*\" ], \"minTemp\": 5, \"maxTemp\": 28, \"minRain\": 0.45, \"minForestOrShrubs\": 0.35, \"companions\": [ \"pig-wild-female\", \"pig-wild-piglet\" ] } } Fields Climate (Recommended) (Default: None) Control specific spawn conditions based on climate. Note that this will override any climate values set in Runtime and Worldgen. It is recommended to specify climate values here rather than setting them in the other spawn conditions. public ClimateSpawnCondition Climate Field Value ClimateSpawnCondition Runtime (Recommended) (Default: None) Runtime requirements for the object to spawn. public RuntimeSpawnConditions Runtime Field Value RuntimeSpawnConditions Worldgen (Recommended) (Default: None) Worldgen/region requirements for the object to spawn. public WorldGenSpawnConditions Worldgen Field Value WorldGenSpawnConditions"
  },
  "jsondocs/Vintagestory.API.Common.Entities.WorldGenSpawnConditions.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.WorldGenSpawnConditions.html",
    "title": "Class WorldGenSpawnConditions | VintageStory Json Docs",
    "keywords": "Class WorldGenSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A set of spawn conditions for when chunks are generated. Most properties are got from BaseSpawnConditions. public class WorldGenSpawnConditions : BaseSpawnConditions Inheritance object ClimateSpawnCondition BaseSpawnConditions WorldGenSpawnConditions Inherited Members BaseSpawnConditions.Group BaseSpawnConditions.MinLightLevel BaseSpawnConditions.MaxLightLevel BaseSpawnConditions.LightLevelType BaseSpawnConditions.HerdSize BaseSpawnConditions.GroupSize BaseSpawnConditions.Companions BaseSpawnConditions.InsideBlockCodes BaseSpawnConditions.RequireSolidGround BaseSpawnConditions.TryOnlySurface BaseSpawnConditions.ClimateValueMode ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs Fields TriesPerChunk (Recommended) (Default: 0) The amount of times the object will attempt to spawn per chunk. public NatFloat TriesPerChunk Field Value NatFloat"
  },
  "jsondocs/Vintagestory.API.Common.Entities.html": {
    "href": "jsondocs/Vintagestory.API.Common.Entities.html",
    "title": "Namespace Vintagestory.API.Common.Entities | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Common.Entities Classes BaseSpawnConditions A base class for entities spawning conditions. ClimateSpawnCondition A list of conditions based on climate. QuantityByGroup Allows you to control spawn limits based on a set of entity codes using a wildcard. RuntimeSpawnConditions A set of spawn conditions for chunks that have already been generated. Most properties are got from BaseSpawnConditions. SpawnConditions The spawn conditions assigned to various things. WorldGenSpawnConditions A set of spawn conditions for when chunks are generated. Most properties are got from BaseSpawnConditions. Enums EnumEntityActivity A list of activities that an entity can perform."
  },
  "jsondocs/Vintagestory.API.Common.EnumAICreatureType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumAICreatureType.html",
    "title": "Enum EnumAICreatureType | VintageStory Json Docs",
    "keywords": "Enum EnumAICreatureType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of creatures used for pathfinding. Humanoids prefer taking paths. public enum EnumAICreatureType Fields Default = 0 Dumbest version. Never enters boiling water and lava. Prefers not to be in water. Slightly prefers to walk on blocks that give a walk speed bonus. LandCreature = 1 Same as Default, Additionally never enters some types of blocks that are on fire (fire pits, coal piles and pit kilns) Humanoid = 2 Same as LandCreature, additionally strongly prefers to walk on blocks that give a walk speed bonues, such as stone paths HeatProofCreature = 3 Does not avoid fire or boiling water. Still Avoids Lava SeaCreature = 4 Does not avoid water in any way"
  },
  "jsondocs/Vintagestory.API.Common.EnumAnimationBlendMode.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumAnimationBlendMode.html",
    "title": "Enum EnumAnimationBlendMode | VintageStory Json Docs",
    "keywords": "Enum EnumAnimationBlendMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines how multiple animations should be blended together. public enum EnumAnimationBlendMode Fields Add = 0 Add the animation without taking other animations into considerations Average = 1 Add the pose and average it together with all other running animations with blendmode Average or AddAverage AddAverage = 2 Add the animation without taking other animations into consideration, but add it's weight for averaging"
  },
  "jsondocs/Vintagestory.API.Common.EnumBlockMaterial.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumBlockMaterial.html",
    "title": "Enum EnumBlockMaterial | VintageStory Json Docs",
    "keywords": "Enum EnumBlockMaterial Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Materials of which a block may be made of. Currently only used for mining speed for tools and blast resistance. public enum EnumBlockMaterial Fields Air = 0 Soil = 1 Gravel = 2 Sand = 3 Wood = 4 Leaves = 5 Stone = 6 Ore = 7 Liquid = 8 Snow = 9 Ice = 10 Metal = 11 Mantle = 12 Plant = 13 Glass = 14 Ceramic = 15 Cloth = 16 Lava = 17 Brick = 18 Fire = 19 Meta = 20 Other = 21"
  },
  "jsondocs/Vintagestory.API.Common.EnumFoodCategory.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumFoodCategory.html",
    "title": "Enum EnumFoodCategory | VintageStory Json Docs",
    "keywords": "Enum EnumFoodCategory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of nutrition for foods. public enum EnumFoodCategory Fields NoNutrition = -1 Fruit = 0 Vegetable = 1 Protein = 2 Grain = 3 Dairy = 4 Unknown = 5"
  },
  "jsondocs/Vintagestory.API.Common.EnumGetClimateMode.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumGetClimateMode.html",
    "title": "Enum EnumGetClimateMode | VintageStory Json Docs",
    "keywords": "Enum EnumGetClimateMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of climate values you wish to receive public enum EnumGetClimateMode Fields WorldGenValues = 0 The values generate during world generation, these are loosely considered as yearly averages NowValues = 1 The values at the current calendar time ForSuppliedDateValues = 2 The values at the supplied calendar time, supplied as additional arg ForSuppliedDate_TemperatureOnly = 3 The values at the supplied calendar time, ignoring rainfall etc. Calling IBlockAccessor.GetClimateAt with this mode will never return a null ClimateCondition value, if it would be null it returns a ClimateCondition with a default 4 degrees temperature value ForSuppliedDate_TemperatureRainfallOnly = 4 The values at the supplied calendar time, ignoring forest cover etc. Calling IBlockAccessor.GetClimateAt with this mode will never return a null ClimateCondition value, if it would be null it returns a ClimateCondition with a default 4 degrees temperature value and no rain"
  },
  "jsondocs/Vintagestory.API.Common.EnumHabitat.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumHabitat.html",
    "title": "Enum EnumHabitat | VintageStory Json Docs",
    "keywords": "Enum EnumHabitat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Habitats for entities. Controls some minor logic for entities. public enum EnumHabitat Fields Sea = 0 No gravity, AiTaskWander will look for water or ice. Land = 1 Apply gravity. Standard land creature. Air = 2 No gravity. Underwater = 3 No gravity, AiTaskWander will look for water or ice."
  },
  "jsondocs/Vintagestory.API.Common.EnumItemClass.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumItemClass.html",
    "title": "Enum EnumItemClass | VintageStory Json Docs",
    "keywords": "Enum EnumItemClass Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of collectible in an itemstack. public enum EnumItemClass Fields Block = 0 This itemstack holds a block. Item = 1 This itemstack holds an item."
  },
  "jsondocs/Vintagestory.API.Common.EnumItemDamageSource.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumItemDamageSource.html",
    "title": "Enum EnumItemDamageSource | VintageStory Json Docs",
    "keywords": "Enum EnumItemDamageSource Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types for how an item can damage it's durability. public enum EnumItemDamageSource Fields BlockBreaking = 0 The item was breaking a block. Attacking = 1 The item was attacking a creature. Fire = 2 Unused. The item was thrown into a fire."
  },
  "jsondocs/Vintagestory.API.Common.EnumLightLevelType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumLightLevelType.html",
    "title": "Enum EnumLightLevelType | VintageStory Json Docs",
    "keywords": "Enum EnumLightLevelType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used in blockAccessor.GetLightLevel() to determine what kind of light level you want public enum EnumLightLevelType Fields OnlyBlockLight = 0 Will get you just the block light OnlySunLight = 1 Will get you just the sun light unaffected by the day/night cycle MaxLight = 2 Will get you max(onlysunlight, onlyblocklight) MaxTimeOfDayLight = 3 Will get you max(sunlight * sunbrightness, blocklight) TimeOfDaySunLight = 4 Will get you sunlight * sunbrightness Sunbrightness = 5 Will get you sunbrightness"
  },
  "jsondocs/Vintagestory.API.Common.EnumMatterState.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumMatterState.html",
    "title": "Enum EnumMatterState | VintageStory Json Docs",
    "keywords": "Enum EnumMatterState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Various states of matter to use for collectibles. public enum EnumMatterState Fields Gas = 0 The state of being so thin that molecules don't often touch Liquid = 1 The state of being still together but loose enough to move around each other. Solid = 2 The state of being together and held still by the internal structure. Plasma = 3 The state of reacting with itself with some kind of reactant, a high heat state. BoseEinsteinCondensate = 4 The state of becoming Quantum Jelly."
  },
  "jsondocs/Vintagestory.API.Common.EnumMouseButton.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumMouseButton.html",
    "title": "Enum EnumMouseButton | VintageStory Json Docs",
    "keywords": "Enum EnumMouseButton Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A list of mouse buttons. public enum EnumMouseButton Fields Left = 0 Middle = 1 Right = 2 Button4 = 3 Button5 = 4 Button6 = 5 Button7 = 6 Button8 = 7 Wheel = 13 Used to signal to event handlers, but not actually a button: activated when the wheel is scrolled. None = 255"
  },
  "jsondocs/Vintagestory.API.Common.EnumParticleModel.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumParticleModel.html",
    "title": "Enum EnumParticleModel | VintageStory Json Docs",
    "keywords": "Enum EnumParticleModel Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of model for a particle. public enum EnumParticleModel Fields Quad = 0 A 2D quad. Cube = 1 A 3D cube."
  },
  "jsondocs/Vintagestory.API.Common.EnumRandomizeAxes.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumRandomizeAxes.html",
    "title": "Enum EnumRandomizeAxes | VintageStory Json Docs",
    "keywords": "Enum EnumRandomizeAxes Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll When picking a random seed for this block, what axes should we base it on? public enum EnumRandomizeAxes Fields XYZ = 0 Create a random value based on all three axes. XZ = 1 Create a random value based only on the X and Z axes. Allows blocks placed on top of each other to all have the same random properties (e.g. size, rotation, offset). Commonly used for multiblock plants."
  },
  "jsondocs/Vintagestory.API.Common.EnumShapeFormat.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumShapeFormat.html",
    "title": "Enum EnumShapeFormat | VintageStory Json Docs",
    "keywords": "Enum EnumShapeFormat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of shape that can be loaded by the game. public enum EnumShapeFormat Fields VintageStory = 0 (Recommended) Imports a shape using the default JSON system. Obj = 1 Imports a shape using an Obj file. GltfEmbedded = 2 Imports a shape using a Gltf file."
  },
  "jsondocs/Vintagestory.API.Common.EnumSmeltType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumSmeltType.html",
    "title": "Enum EnumSmeltType | VintageStory Json Docs",
    "keywords": "Enum EnumSmeltType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of smelting for the collectible. This effects how the object is smelted. public enum EnumSmeltType Fields Smelt = 0 Currently has no special behavior. Cook = 1 Currently has no special behavior. Bake = 2 This collectible must be baked in a clay oven. Note that you will likely want to use BakingProperties in the item's attributes. Convert = 3 Currently has no special behavior. Fire = 4 This collectible must be fired in a kiln."
  },
  "jsondocs/Vintagestory.API.Common.EnumSoilNutrient.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumSoilNutrient.html",
    "title": "Enum EnumSoilNutrient | VintageStory Json Docs",
    "keywords": "Enum EnumSoilNutrient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The three types of soil nutrient for farmland and crops. public enum EnumSoilNutrient Fields N = 0 P = 1 K = 2"
  },
  "jsondocs/Vintagestory.API.Common.EnumTool.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumTool.html",
    "title": "Enum EnumTool | VintageStory Json Docs",
    "keywords": "Enum EnumTool Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types for each tool in the game. Some of these are unused. public enum EnumTool Fields Knife = 0 Pickaxe = 1 Axe = 2 Sword = 3 Shovel = 4 Hammer = 5 Spear = 6 Bow = 7 Shears = 8 Sickle = 9 Hoe = 10 Saw = 11 Chisel = 12 Scythe = 13 Sling = 14 Wrench = 15 Probe = 16 Meter = 17 Drill = 18"
  },
  "jsondocs/Vintagestory.API.Common.EnumTransitionType.html": {
    "href": "jsondocs/Vintagestory.API.Common.EnumTransitionType.html",
    "title": "Enum EnumTransitionType | VintageStory Json Docs",
    "keywords": "Enum EnumTransitionType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of transition for items. public enum EnumTransitionType Fields Perish = 0 For food, animals or non-organic materials. Dry = 1 Can be dried. Burn = 2 Can be burned. Cure = 3 Can be cured, for meat. Convert = 4 Generic 'other' conversion. Ripen = 5 Cheese ripening. Melt = 6 Snow/ice melting. Harden = 7 Glue hardening. None = 8 Used for cooking recipes where the output has no perishableprops, but we still need a non-null TransitionableProperties (e.g. sulfuric acid in 1.20)"
  },
  "jsondocs/Vintagestory.API.Common.FoodNutritionProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.FoodNutritionProperties.html",
    "title": "Class FoodNutritionProperties | VintageStory Json Docs",
    "keywords": "Class FoodNutritionProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows you to make collectibles edible, and adds data about their nutrition. public class FoodNutritionProperties Inheritance object FoodNutritionProperties Examples \"nutritionPropsByType\": { \"*-flyagaric-*\": { \"saturation\": 80, \"health\": -6.5, \"foodcategory\": \"Vegetable\" }, \"*-earthball-*\": { \"saturation\": 80, \"health\": -8, \"foodcategory\": \"Vegetable\" }, ... Fields EatenStack (Optional) (Default: None) When an instance of this collectible is eaten, what item stack should be returned to the player? Possible example: Eating a 'meat on a stick' item would return a single stick. (Note: Bowl meals/liquids are specially designed to do this through their attributes and class.) public JsonItemStack EatenStack Field Value JsonItemStack FoodCategory (Recommended) (Default: Fruit) The category of the food. public EnumFoodCategory FoodCategory Field Value EnumFoodCategory Health (Optional) (Default: 0) The health restored by the food. Usually actually used to hurt the player with negative values. public float Health Field Value float Satiety (Recommended) (Default: 0) The saturation restored by the food. public float Satiety Field Value float SaturationLossDelay (Optional) (Default: 10) The delay before that extra saturation starts to go away. public float SaturationLossDelay Field Value float Properties Intoxication (Optional) (Default: 0) How much eating this will affect the player's intoxication. public float Intoxication { get; set; } Property Value float Saturation (Obsolete) Obsolete - Please use Satiety instead. [Obsolete(\"Use Satiety instead.\")] public float Saturation { get; set; } Property Value float"
  },
  "jsondocs/Vintagestory.API.Common.GrindingProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.GrindingProperties.html",
    "title": "Class GrindingProperties | VintageStory Json Docs",
    "keywords": "Class GrindingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of properties that allow an object to be ground in a quern. public class GrindingProperties Inheritance object GrindingProperties Examples \"grindingProps\": { \"groundStack\": { \"type\": \"item\", \"code\": \"bonemeal\" } }, Fields GroundStack (Required) If set, the collectible is grindable in a quern and this is the resulting itemstack once the grinding time is over. public JsonItemStack GroundStack Field Value JsonItemStack Properties GrindedStack (Obsolete) Obsolete. Please use GroundStack instead. [Obsolete(\"Use GroundStack instead\")] public JsonItemStack GrindedStack { get; set; } Property Value JsonItemStack"
  },
  "jsondocs/Vintagestory.API.Common.HeldSounds.html": {
    "href": "jsondocs/Vintagestory.API.Common.HeldSounds.html",
    "title": "Class HeldSounds | VintageStory Json Docs",
    "keywords": "Class HeldSounds Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of sounds for a collectible object. public class HeldSounds Inheritance object HeldSounds Examples \"heldSoundsbyType\": { \"*-lit-*\": { \"idle\": \"held/torch-idle\", \"equip\": \"held/torch-equip\", \"unequip\": \"held/torch-unequip\", \"attack\": \"held/torch-attack\" } }, Fields Attack (Optional) (Default: None) The path to a sound played when this item is used to attack. public AssetLocation Attack Field Value AssetLocation Equip (Optional) (Default: None) The path to a sound played when this item is equipped. public AssetLocation Equip Field Value AssetLocation Idle (Optional) (Default: None) The path to a sound played when this item is being held. public AssetLocation Idle Field Value AssetLocation InvPickup (Optional) (Default: \"player/clayformhi\") The path to a sound played when this item is picked up in the inventory using the mouse. public AssetLocation InvPickup Field Value AssetLocation InvPlace (Optional) (Default: \"player/clayform\") The path to a sound played when this item is placed in the inventory using the mouse. public AssetLocation InvPlace Field Value AssetLocation Unequip (Optional) (Default: None) The path to a sound played when this item is unequipped. public AssetLocation Unequip Field Value AssetLocation"
  },
  "jsondocs/Vintagestory.API.Common.JsonItemStack.html": {
    "href": "jsondocs/Vintagestory.API.Common.JsonItemStack.html",
    "title": "Class JsonItemStack | VintageStory Json Docs",
    "keywords": "Class JsonItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a representation of an item stack in JSON. It resembles a standard in-game item stack but can be stored before the game is loaded. [ProtoContract] public class JsonItemStack Inheritance object JsonItemStack Examples \"output\": { \"type\": \"item\", \"code\": \"knifeblade-flint\", \"stacksize\": 1 }, \"output\": { \"type\": \"block\", \"code\": \"ladder-wood-north\", \"quantity\": 3 }, Fields Attributes (Optional) (Default: None) Tree Attributes that should be attached to the resulting itemstack. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] [ProtoMember(4)] public JsonObject Attributes Field Value JsonObject Code (Required) The asset location code of the block or item. [ProtoMember(2)] public AssetLocation Code Field Value AssetLocation StackSize (Optional) (Default: 1) Amount of items in this stacks [ProtoMember(3)] public int StackSize Field Value int Type (Recommended) (Default: Block) Block or Item? [ProtoMember(1)] public EnumItemClass Type Field Value EnumItemClass Properties Quantity (Optional) (Default: 1) Alias of StackSize. No real need to use this instead of it. public int Quantity { get; set; } Property Value int"
  },
  "jsondocs/Vintagestory.API.Common.ModelTransform.html": {
    "href": "jsondocs/Vintagestory.API.Common.ModelTransform.html",
    "title": "Class ModelTransform | VintageStory Json Docs",
    "keywords": "Class ModelTransform Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used for transformations applied to a block or item model. Uses values from ModelTransformNoDefaults but will assign defaults if not included. public class ModelTransform : ModelTransformNoDefaults Inheritance object ModelTransformNoDefaults ModelTransform Inherited Members ModelTransformNoDefaults.Translation ModelTransformNoDefaults.Rotation ModelTransformNoDefaults.Scale ModelTransformNoDefaults.Origin ModelTransformNoDefaults.Rotate ModelTransformNoDefaults.ScaleXYZ Examples Use '.tfedit' in game to help customize these values, just make sure to copy them into your json file when you finish. \"tpHandTransform\": { \"translation\": { \"x\": -0.87, \"y\": -0.01, \"z\": -0.56 }, \"rotation\": { \"x\": -90, \"y\": 0, \"z\": 0 }, \"origin\": { \"x\": 0.5, \"y\": 0, \"z\": 0.5 }, \"scale\": 0.8 },"
  },
  "jsondocs/Vintagestory.API.Common.ModelTransformNoDefaults.html": {
    "href": "jsondocs/Vintagestory.API.Common.ModelTransformNoDefaults.html",
    "title": "Class ModelTransformNoDefaults | VintageStory Json Docs",
    "keywords": "Class ModelTransformNoDefaults Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Controls the transformations of 3D shapes. Note that defaults change depending on where this class is used. [JsonObject(MemberSerialization.OptIn)] public class ModelTransformNoDefaults Inheritance object ModelTransformNoDefaults Derived ModelTransform Examples Use '.tfedit' in game to help customize these values, just make sure to copy them into your json file when you finish. \"tpHandTransform\": { \"translation\": { \"x\": -0.87, \"y\": -0.01, \"z\": -0.56 }, \"rotation\": { \"x\": -90, \"y\": 0, \"z\": 0 }, \"origin\": { \"x\": 0.5, \"y\": 0, \"z\": 0.5 }, \"scale\": 0.8 }, Fields Origin (Optional) Rotation/Scaling Origin [JsonProperty] public Vec3f Origin Field Value Vec3f Rotate (Optional) For Gui Transform: Whether to slowly spin in gui item preview For Ground Transform: Whether to apply a random rotation to the dropped item No effect on other transforms [JsonProperty] public bool Rotate Field Value bool Rotation (Optional) Rotation in degrees [JsonProperty] public Vec3f Rotation Field Value Vec3f ScaleXYZ (Optional) Scaling per axis [JsonProperty] public Vec3f ScaleXYZ Field Value Vec3f Translation (Optional) Offsetting [JsonProperty] public Vec3f Translation Field Value Vec3f Properties Scale (Optional) Sets the same scale of an object for all axes. [JsonProperty] public float Scale { set; } Property Value float"
  },
  "jsondocs/Vintagestory.API.Common.TransitionableProperties.html": {
    "href": "jsondocs/Vintagestory.API.Common.TransitionableProperties.html",
    "title": "Class TransitionableProperties | VintageStory Json Docs",
    "keywords": "Class TransitionableProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a versatile way of allowing a collectible to change to another after a certain time in the inventory. public class TransitionableProperties Inheritance object TransitionableProperties Examples \"transitionablePropsByType\": { \"*-long-raw\": [ { \"type\": \"Dry\", \"freshHours\": { \"avg\": 0 }, \"transitionHours\": { \"avg\": 168 }, \"transitionedStack\": { \"type\": \"item\", \"code\": \"bowstave-long-dry\" }, \"transitionRatio\": 1 } ] }, \"transitionableProps\": [ { \"type\": \"Perish\", \"freshHours\": { \"avg\": 120 }, \"transitionHours\": { \"avg\": 24 }, \"transitionedStack\": { \"type\": \"item\", \"code\": \"rot\" }, \"transitionRatio\": 0.5 } ], Fields FreshHours (Recommended) (Default: 36) The amount of hours before this item starts the transitioning process. public NatFloat FreshHours Field Value NatFloat TransitionHours (Recommended) (Default: 12) The amount of hours it takes for the item to transition, after FreshHours has elapsed. public NatFloat TransitionHours Field Value NatFloat TransitionRatio (Optional) (Default: 1) Conversion ratio of fresh stacksize to transitioned stack size public float TransitionRatio Field Value float TransitionedStack (Required) The itemstack the collectible turns into upon transitioning. public JsonItemStack TransitionedStack Field Value JsonItemStack Type (Recommended) (Default: None) What kind of transition can it make? public EnumTransitionType Type Field Value EnumTransitionType"
  },
  "jsondocs/Vintagestory.API.Common.VertexFlags.html": {
    "href": "jsondocs/Vintagestory.API.Common.VertexFlags.html",
    "title": "Class VertexFlags | VintageStory Json Docs",
    "keywords": "Class VertexFlags Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Special class to handle the vertex flagging in a very nicely compressed space. Bit 0-7: Glow level Bit 8-10: Z-Offset Bit 11: Reflective bit Bit 12: Lod 0 Bit Bit 13-24: X/Y/Z Normals Bit 25, 26, 27, 28: Wind mode Bit 29, 30, 31: Wind data (also sometimes used for other data, e.g. reflection mode if Reflective bit is set, or additional water surface data if this is a water block) [JsonObject(MemberSerialization.OptIn)] public class VertexFlags Inheritance object VertexFlags Examples \"vertexFlagsByType\": { \"metalblock-new-*\": { \"reflective\": true, \"windDataByType\": { \"*-gold\": 1, \"*\": 1 } } }, Properties All Sets all the vertex flags from one integer. [JsonProperty] public int All { get; set; } Property Value int GlowLevel [JsonProperty] public byte GlowLevel { get; set; } Property Value byte Lod0 [JsonProperty] public bool Lod0 { get; set; } Property Value bool Normal [JsonProperty] public short Normal { get; set; } Property Value short Reflective [JsonProperty] public bool Reflective { get; set; } Property Value bool WindData [JsonProperty] public byte WindData { get; set; } Property Value byte WindMode [JsonProperty] public EnumWindBitMode WindMode { get; set; } Property Value EnumWindBitMode ZOffset [JsonProperty] public byte ZOffset { get; set; } Property Value byte"
  },
  "jsondocs/Vintagestory.API.Common.html": {
    "href": "jsondocs/Vintagestory.API.Common.html",
    "title": "Namespace Vintagestory.API.Common | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Common Classes AdvancedParticleProperties Used to add a set of particle properties to a collectible. AnimationMetaData Animation Meta Data is a json type that controls how an animation should be played. AnimationSound AnimationTrigger Data about when an animation should be triggered. AssetLocation Defines a complete path to an assets, including it's domain. BakingProperties Baking Properties are collectible attribute used for baking items in a clay oven. You will need to add these attributes if using Bake inside SmeltingType. BlockDropItemStack Represents an itemstack that is dropped when breaking a block, with a potentially random quantity. BlockEntityBehaviorType Allows adding behaviors for block entities. Remember, block entities are specific instances of blocks placed within the world. BlockSounds A set of sounds that are defined for a block. All fields use default or empty sounds if not set. CombustibleProperties Marks an item as combustible, either by cooking, smelting or firing. This can either imply it is used as a fuel, or can be cooked into another object. CompositeShape Holds shape data to create 3D representations of objects. Also allows shapes to be overlayed on top of one another recursively. CreativeTabAndStackList Allows you to add a list of item stacks to put various into creative menu tabs. CrushingProperties Defines a set of properties that allow an object to be ground in a quern. FoodNutritionProperties Allows you to make collectibles edible, and adds data about their nutrition. GrindingProperties Defines a set of properties that allow an object to be ground in a quern. HeldSounds Defines a set of sounds for a collectible object. JsonItemStack This is a representation of an item stack in JSON. It resembles a standard in-game item stack but can be stored before the game is loaded. ModelTransform Used for transformations applied to a block or item model. Uses values from ModelTransformNoDefaults but will assign defaults if not included. ModelTransformNoDefaults Controls the transformations of 3D shapes. Note that defaults change depending on where this class is used. TransitionableProperties This is a versatile way of allowing a collectible to change to another after a certain time in the inventory. VertexFlags Special class to handle the vertex flagging in a very nicely compressed space. Bit 0-7: Glow level Bit 8-10: Z-Offset Bit 11: Reflective bit Bit 12: Lod 0 Bit Bit 13-24: X/Y/Z Normals Bit 25, 26, 27, 28: Wind mode Bit 29, 30, 31: Wind data (also sometimes used for other data, e.g. reflection mode if Reflective bit is set, or additional water surface data if this is a water block) Enums EnumAICreatureType Types of creatures used for pathfinding. Humanoids prefer taking paths. EnumAnimationBlendMode Defines how multiple animations should be blended together. EnumBlockMaterial Materials of which a block may be made of. Currently only used for mining speed for tools and blast resistance. EnumFoodCategory Types of nutrition for foods. EnumGetClimateMode The type of climate values you wish to receive EnumHabitat Habitats for entities. Controls some minor logic for entities. EnumItemClass The type of collectible in an itemstack. EnumItemDamageSource Types for how an item can damage it's durability. EnumLightLevelType Used in blockAccessor.GetLightLevel() to determine what kind of light level you want EnumMatterState Various states of matter to use for collectibles. EnumMouseButton A list of mouse buttons. EnumParticleModel Types of model for a particle. EnumRandomizeAxes When picking a random seed for this block, what axes should we base it on? EnumShapeFormat Types of shape that can be loaded by the game. EnumSmeltType The type of smelting for the collectible. This effects how the object is smelted. EnumSoilNutrient The three types of soil nutrient for farmland and crops. EnumTool Types for each tool in the game. Some of these are unused. EnumTransitionType Types of transition for items."
  },
  "jsondocs/Vintagestory.API.Datastructures.RotatableCube.html": {
    "href": "jsondocs/Vintagestory.API.Datastructures.RotatableCube.html",
    "title": "Class RotatableCube | VintageStory Json Docs",
    "keywords": "Class RotatableCube Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A rotatable version of a cuboid. public class RotatableCube : Cuboidf Inheritance object Cuboidf RotatableCube Inherited Members Cuboidf.X1 Cuboidf.Y1 Cuboidf.Z1 Cuboidf.X2 Cuboidf.Y2 Cuboidf.Z2 Examples \"selectionboxbytype\": { \"*-up\": { \"x1\": 0, \"y1\": 0, \"z1\": 0, \"x2\": 1, \"y2\": 0.4, \"z2\": 1 }, \"*-north\": { \"x1\": 0, \"y1\": 0, \"z1\": 0, \"x2\": 1, \"y2\": 0.4, \"z2\": 1, \"rotateZ\": 90, \"rotateY\": 270 }, ... }, Fields Origin (Optional) (Default: (0.5, 0.5, 0.5)) The origin point for the object to rotate around. Measured in meters from zero, not percent. public Vec3d Origin Field Value Vec3d RotateX (Optional) (Default: 0) The cube's rotation around the X axis. public float RotateX Field Value float RotateY (Optional) (Default: 0) The cube's rotation around the Y axis. public float RotateY Field Value float RotateZ (Optional) (Default: 0) The cube's rotation around the Z axis. public float RotateZ Field Value float"
  },
  "jsondocs/Vintagestory.API.Datastructures.html": {
    "href": "jsondocs/Vintagestory.API.Datastructures.html",
    "title": "Namespace Vintagestory.API.Datastructures | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.Datastructures Classes RotatableCube A rotatable version of a cuboid."
  },
  "jsondocs/Vintagestory.API.MathTools.Cuboidf.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Cuboidf.html",
    "title": "Class Cuboidf | VintageStory Json Docs",
    "keywords": "Class Cuboidf Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a three dimensional axis-aligned cuboid using two 3D coordinates. Used for collision and selection boxes. public class Cuboidf Inheritance object Cuboidf Derived RotatableCube Fields X1 (Optional) (Default: 0) Start X Pos public float X1 Field Value float X2 (Optional) (Default: 0) End X Pos public float X2 Field Value float Y1 (Optional) (Default: 0) Start Y Pos public float Y1 Field Value float Y2 (Optional) (Default: 0) End Y Pos public float Y2 Field Value float Z1 (Optional) (Default: 0) Start Z Pos public float Z1 Field Value float Z2 (Optional) (Default: 0) End Z Pos public float Z2 Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.EnumColorBlendMode.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumColorBlendMode.html",
    "title": "Enum EnumColorBlendMode | VintageStory Json Docs",
    "keywords": "Enum EnumColorBlendMode Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Specifies types of per-pixel color blending. public enum EnumColorBlendMode Fields Normal = 0 Darken = 1 Lighten = 2 Multiply = 3 Screen = 4 ColorDodge = 5 ColorBurn = 6 Overlay = 7 OverlayCutout = 8"
  },
  "jsondocs/Vintagestory.API.MathTools.EnumCombination.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumCombination.html",
    "title": "Enum EnumCombination | VintageStory Json Docs",
    "keywords": "Enum EnumCombination Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Used to define how variant types interact with each other to create unique objects. public enum EnumCombination Fields Add = 0 This variant type will ignore all other variant types. Each state is appended onto the object's code, without any other variant types. Multiply = 1 Default behavior - This variant's states will be enumerated with all other variant states that have this combination. SelectiveMultiply = 2 This variant's states will be enumerated only with the selected variant group. You must select another variant code using the 'onVariant' property."
  },
  "jsondocs/Vintagestory.API.MathTools.EnumDistribution.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumDistribution.html",
    "title": "Enum EnumDistribution | VintageStory Json Docs",
    "keywords": "Enum EnumDistribution Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll The distribution of the random numbers public enum EnumDistribution Fields UNIFORM = 0 Select completely random numbers within avg-var until avg+var TRIANGLE = 1 Select random numbers with numbers near avg being the most commonly selected ones, following a triangle curve GAUSSIAN = 2 Select random numbers with numbers near avg being the more commonly selected ones, following a gaussian curve NARROWGAUSSIAN = 3 Select random numbers with numbers near avg being the much more commonly selected ones, following a narrow gaussian curve VERYNARROWGAUSSIAN = 10 Select random numbers with numbers near avg being the much much more commonly selected ones, following an even narrower gaussian curve INVERSEGAUSSIAN = 4 Select random numbers with numbers near avg being the less commonly selected ones, following an upside down gaussian curve NARROWINVERSEGAUSSIAN = 5 Select random numbers with numbers near avg being the much less commonly selected ones, following an upside down gaussian curve INVEXP = 6 Select numbers in the form of avg + var, wheras low value of var are preferred STRONGINVEXP = 7 Select numbers in the form of avg + var, wheras low value of var are strongly preferred STRONGERINVEXP = 8 Select numbers in the form of avg + var, wheras low value of var are very strongly preferred DIRAC = 9 Select completely random numbers within avg-var until avg+var only ONCE and then always 0"
  },
  "jsondocs/Vintagestory.API.MathTools.EnumTransformFunction.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EnumTransformFunction.html",
    "title": "Enum EnumTransformFunction | VintageStory Json Docs",
    "keywords": "Enum EnumTransformFunction Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Used for EvolvingNatFloat value transforms public enum EnumTransformFunction Fields IDENTICAL = 0 y = firstval LINEAR = 1 y = firstval + factor * seq LINEARNULLIFY = 2 y = factor > 0 ? Math.Min(0, firstval + factor * seq) : Math.Max(0, firstval + factor * seq) LINEARREDUCE = 3 firstval - firstval / Math.Abs(firstval) * factor * seq LINEARINCREASE = 4 firstval + firstval / Math.Abs(firstval) * factor * seq QUADRATIC = 5 firstval + Math.Sign(factor) * (factor * seq) * (factor * seq) INVERSELINEAR = 6 firstval + 1f / (1f + factor * seq) ROOT = 7 firstval + (float)Math.Sqrt(factor * seq) SINUS = 8 firstval + GameMath.FastSin(factor * seq) CLAMPEDPOSITIVESINUS = 9 firstval * GameMath.Min(5 * Math.Abs(GameMath.FastSin(factor * seq)), 1) COSINUS = 10 firstval + GameMath.FastCos(factor * seq) SMOOTHSTEP = 11 firstval + GameMath.SmoothStep(factor * seq)"
  },
  "jsondocs/Vintagestory.API.MathTools.EvolvingNatFloat.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.EvolvingNatFloat.html",
    "title": "Class EvolvingNatFloat | VintageStory Json Docs",
    "keywords": "Class EvolvingNatFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A number generator whose return value changes over time, parametrized by a transform function and some constants [JsonObject(MemberSerialization.OptIn)] public class EvolvingNatFloat Inheritance object EvolvingNatFloat Fields factor (Recommended) (Default: 0) A scale factor for the value during the transformation function. [JsonProperty] private float factor Field Value float maxvalue (Optional) (Default: None) The maximum value this random value can return. [JsonProperty] private float? maxvalue Field Value float? transform (Optional) (Default: IDENTICAL) The type of function to use as this value changes. [JsonProperty] private EnumTransformFunction transform Field Value EnumTransformFunction"
  },
  "jsondocs/Vintagestory.API.MathTools.NatFloat.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.NatFloat.html",
    "title": "Class NatFloat | VintageStory Json Docs",
    "keywords": "Class NatFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly) public class NatFloat Inheritance object NatFloat Examples \"quantity\": { \"dist\": \"strongerinvexp\", \"avg\": 6, \"var\": 4 } \"quantity\": { \"avg\": 4, \"var\": 2 } Fields avg (Recommended) (Default: 0) The average value for the random float. public float avg Field Value float dist (Optional) (Default: UNIFORM) The type of distribution to use that determines the commodity of values. public EnumDistribution dist Field Value EnumDistribution offset (Optional) (Default: 0) A full offset to apply to any values returned. public float offset Field Value float var (Recommended) (Default: 0) The variation for the random float. public float var Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.Size3f.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Size3f.html",
    "title": "Class Size3f | VintageStory Json Docs",
    "keywords": "Class Size3f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. public class Size3f Inheritance object Size3f Fields Height (Recommended) (Default: 0) The Y-dimension for this size. public float Height Field Value float Length (Recommended) (Default: 0) The Z-dimension for this size. public float Length Field Value float Width (Recommended) (Default: 0) The X-dimension of this size. public float Width Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.Vec2f.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.Vec2f.html",
    "title": "Class Vec2f | VintageStory Json Docs",
    "keywords": "Class Vec2f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class. [JsonObject(MemberSerialization.OptIn)] [ProtoContract] public class Vec2f Inheritance object Vec2f Fields X (Optional) (Default: 0) The X element of the vector. [JsonProperty] [ProtoMember(1)] public float X Field Value float Y (Optional) (Default: 0) The Y element of the vector. [JsonProperty] [ProtoMember(2)] public float Y Field Value float"
  },
  "jsondocs/Vintagestory.API.MathTools.html": {
    "href": "jsondocs/Vintagestory.API.MathTools.html",
    "title": "Namespace Vintagestory.API.MathTools | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.API.MathTools Classes Cuboidf Represents a three dimensional axis-aligned cuboid using two 3D coordinates. Used for collision and selection boxes. EvolvingNatFloat A number generator whose return value changes over time, parametrized by a transform function and some constants NatFloat A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly) Size3f Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Vec2f Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class. Enums EnumColorBlendMode Specifies types of per-pixel color blending. EnumCombination Used to define how variant types interact with each other to create unique objects. EnumDistribution The distribution of the random numbers EnumTransformFunction Used for EvolvingNatFloat value transforms"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.BlockCropPropertiesType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.BlockCropPropertiesType.html",
    "title": "Class BlockCropPropertiesType | VintageStory Json Docs",
    "keywords": "Class BlockCropPropertiesType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Used for crop blocks that grow over time. public class BlockCropPropertiesType Inheritance object BlockCropPropertiesType Examples \"cropProps\": { \"requiredNutrient\": \"K\", \"nutrientConsumption\": 40, \"growthStages\": 7, \"totalGrowthMonths\": 1.2, \"coldDamageBelow\": -10, \"damageGrowthStuntMul\": 0.75, \"coldDamageRipeMul\": 0.5, \"heatDamageAbove\": 32 }, Fields Behaviors (Optional) (Default: None) Allows customization of crop growth behavior. BlockEntityFarmland calls methods on all behaviors to allow greater control. public CropBehaviorType[] Behaviors Field Value CropBehaviorType[] ColdDamageBelow (Optional) (Default: -5) The crop will be damaged if it falls below this temperature. public float ColdDamageBelow Field Value float ColdDamageRipeMul (Optional) (Default: 0.5) If this crop is damaged from cold or heat and the crop is already grown, the yield will be multiplied by this amount. public float ColdDamageRipeMul Field Value float DamageGrowthStuntMul (Optional) (Default: 0.5) If this crop is growing and damaged from cold or heat, the final yield will be multiplied by this amount. public float DamageGrowthStuntMul Field Value float GrowthStages (Required) Amount of growth stages this crop has. public int GrowthStages Field Value int HarvestGrowthStageLoss (Unused) (Default: 0) Currently unused. public int HarvestGrowthStageLoss Field Value int HeatDamageAbove (Optional) (Default: 40) The crop will be damaged if it goes above this temperature. public float HeatDamageAbove Field Value float MultipleHarvests (Unused) (Default: false) Currently unused. public bool MultipleHarvests Field Value bool NutrientConsumption (Required) Total amount of nutrient consumed to reach full maturity. (100 is the maximum available for farmland) public float NutrientConsumption Field Value float RequiredNutrient (Recommended) (Default: N) Which nutrient category this crop requires to grow public EnumSoilNutrient RequiredNutrient Field Value EnumSoilNutrient TotalGrowthDays (Obsolete) Obsolete. Please use TotalGrowthMonths instead. Total time in ingame days required for the crop to reach full maturity assuming full nutrient levels public float TotalGrowthDays Field Value float TotalGrowthMonths (Required) Total time in ingame months required for the crop to reach full maturity assuming full nutrient levels. public float TotalGrowthMonths Field Value float"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.BlockType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.BlockType.html",
    "title": "Class BlockType | VintageStory Json Docs",
    "keywords": "Class BlockType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Defines an in-game block using a json file. BlockTypes use all properties from CollectibleType and RegistryObjectType, but also contain some unique properties. Any json file placed in your \"assets/blocktypes\" folder will be loaded as a blocktype in the game. [JsonObject(MemberSerialization.OptIn)] public class BlockType : CollectibleType Inheritance object RegistryObjectType CollectibleType BlockType Inherited Members CollectibleType.Behaviors CollectibleType.LightHsv CollectibleType.RenderAlphaTest CollectibleType.StorageFlags CollectibleType.MaxStackSize CollectibleType.AttackPower CollectibleType.Durability CollectibleType.Dimensions CollectibleType.DamagedBy CollectibleType.Tool CollectibleType.AttackRange CollectibleType.MiningSpeed CollectibleType.ToolTier CollectibleType.MiningTier CollectibleType.MatterState CollectibleType.HeldSounds CollectibleType.MaterialDensity CollectibleType.Attributes CollectibleType.Shape CollectibleType.GuiTransform CollectibleType.FpHandTransform CollectibleType.TpHandTransform CollectibleType.TpOffHandTransform CollectibleType.GroundTransform CollectibleType.Texture CollectibleType.Textures CollectibleType.CombustibleProps CollectibleType.NutritionProps CollectibleType.TransitionableProps CollectibleType.GrindingProps CollectibleType.CrushingProps CollectibleType.LiquidSelectable CollectibleType.CreativeInventory CollectibleType.CreativeInventoryStacks CollectibleType.HeldTpHitAnimation CollectibleType.HeldRightTpIdleAnimation CollectibleType.HeldLeftTpIdleAnimation CollectibleType.HeldLeftReadyAnimation CollectibleType.HeldRightReadyAnimation CollectibleType.HeldOldTpIdleAnimation CollectibleType.HeldTpUseAnimation CollectibleType.ParticleProperties RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class Examples { \"code\": \"leather\", \"class\": \"Block\", \"shape\": { \"base\": \"block/basic/cube\" }, \"drawtype\": \"Cube\", \"attributes\": { ... }, \"blockmaterial\": \"Cloth\", \"creativeinventory\": { ... }, \"replaceable\": 700, \"resistance\": 1.5, \"lightAbsorption\": 99, \"textures\": { ... }, \"combustibleProps\": { ... }, \"sounds\": { ... }, \"materialDensity\": 400 } Fields AllowSpawnCreatureGroups (Optional) (Default: All ( [\"*\"] )) Defines what creature groups may spawn on this block. [JsonProperty] public string[] AllowSpawnCreatureGroups Field Value string[] Ambientocclusion (Unused) Currently not used. Maybe you're looking for SideAo or SideSolidOpaqueAo? [JsonProperty] public bool Ambientocclusion Field Value bool BlockMaterial (Recommended) (Default: Stone) A way to categorize blocks. Used for getting the mining speed for each tool type, amongst other things. [JsonProperty] public EnumBlockMaterial BlockMaterial Field Value EnumBlockMaterial ClimateColorMap (Optional) (Default: None) The color map for climate color mapping. Leave null for no coloring by climate [JsonProperty] public string ClimateColorMap Field Value string Climbable (Optional) (Default: false) Used for ladders. If true, walking against this blocks collisionbox will make the player climb. [JsonProperty] public bool Climbable Field Value bool CollisionBox (Optional) (Default: Default Collision Box) Defines the area with which the player character collides with. [JsonProperty(\"CollisionBox\")] private RotatableCube CollisionBoxR Field Value RotatableCube CollisionBoxes (Optional) (Default: Default Collision Box) Defines multiple areas with which the player character collides with. [JsonProperty(\"CollisionBoxes\")] private RotatableCube[] CollisionBoxesR Field Value RotatableCube[] CollisionSelectionBox (Optional) (Default: Default Collision Box) Shorthand way of setting CollisionBoxR and SelectionBoxR at the same time. [JsonProperty(\"CollisionSelectionBox\")] private RotatableCube CollisionSelectionBoxR Field Value RotatableCube CollisionSelectionBoxes (Optional) (Default: Default Collision Box) Shorthand way of setting CollisionBoxesR and SelectionBoxesR at the same time. [JsonProperty(\"CollisionSelectionBoxes\")] private RotatableCube[] CollisionSelectionBoxesR Field Value RotatableCube[] CropProps (Optional) (Default: None) Information about the blocks as a crop. [JsonProperty] public BlockCropPropertiesType CropProps Field Value BlockCropPropertiesType DoNotRenderAtLod2 (Optional) (Default: false) If set to true, this block will not be rendered if it is too far away from the camera. [JsonProperty] public bool DoNotRenderAtLod2 Field Value bool DragMultiplier (Optional) (Default: 1) Drag multiplier applied to entities standing on it. [JsonProperty] public float DragMultiplier Field Value float DrawType (Optional) (Default: JSON) If not set to JSON it will use an efficient hardcoded model [JsonProperty] public EnumDrawType DrawType Field Value EnumDrawType Drops (Optional) (Default: None) The items that should drop from breaking this block. [JsonProperty] public BlockDropItemStack[] Drops Field Value BlockDropItemStack[] EmitSideAo (Optional) (Default: See desc.) Defines which of the 6 block neighbours should receive AO if this block is in front of them. If this block's LightAbsorption > 0, default is all true. Otherwise, all false.. [JsonProperty] public Dictionary<string, bool> EmitSideAo Field Value Dictionary<string, bool> EntityBehaviors (Optional) (Default: None) This array adds modifiers that can alter the behavior of a block entity defined in EntityClass. [JsonProperty] public BlockEntityBehaviorType[] EntityBehaviors Field Value BlockEntityBehaviorType[] EntityClass (Optional) (Default: None) A 'block entity' is stored per specific instance of a block in the world. To attach a block entity to a block, add the block entity code here.. [JsonProperty] public string EntityClass Field Value string FaceCullMode (Optional) (Default: Default) Determines which sides of the blocks should be rendered [JsonProperty] public EnumFaceCullMode FaceCullMode Field Value EnumFaceCullMode Fertility (Optional) (Default: 0) 0 = nothing can grow, 10 = some tallgrass and small trees can be grow on it, 100 = all grass and trees can grow on it [JsonProperty] public int Fertility Field Value int Frostable (Optional) (Default: false) A bit uploaded to the shader to add a frost overlay below freezing temperature [JsonProperty] public bool Frostable Field Value bool LightAbsorption (Optional) (Default: 99) For light blocking blocks. Any value above 32 will completely block all light. [JsonProperty] public ushort LightAbsorption Field Value ushort LiquidCode (Optional) (Default: None) If this block is or contains a liquid, this should be the code (or \"identifier\") of the liquid. [JsonProperty] public string LiquidCode Field Value string LiquidLevel (Optional) (Default: 0) Value between 0 to 7. Determines the height of the liquid, if LiquidCode is set. [JsonProperty] public int LiquidLevel Field Value int Lod0Shape (Optional) (Default: None) A specific shape to use when this block is near the camera. Used to add more detail to closer objects. [JsonProperty] public CompositeShape Lod0Shape Field Value CompositeShape Lod2Shape (Optional) (Default: None) A specific shape to use when this block is far away from the camera. Used to lower detail from further away objects. [JsonProperty] public CompositeShape Lod2Shape Field Value CompositeShape ParticleCollisionBox (Optional) (Default: Default Collision Box) Defines the area with which particles collide with. If not provided, will use CollisionBoxR or CollisionBoxesR. [JsonProperty(\"ParticleCollisionBox\")] private RotatableCube ParticleCollisionBoxR Field Value RotatableCube ParticleCollisionBoxes (Optional) (Default: Default Collision Box) Defines multiple areas with which particles collide with. If not provided, will use CollisionBoxR or CollisionBoxesR. [JsonProperty(\"ParticleCollisionBoxes\")] private RotatableCube[] ParticleCollisionBoxesR Field Value RotatableCube[] RainPermeable (Optional) (Default: false) Will be used for not rendering rain below this block. [JsonProperty] public bool RainPermeable Field Value bool RandomDrawOffset (Optional) (Default: false) If true then the block will be randomly offseted by 1/3 of a block when placed [JsonProperty] public bool RandomDrawOffset Field Value bool RandomSizeAdjust (Optional) (Default: false) If set, the block will have a random size between 1 and 1+RandomSizeAdjust. [JsonProperty] public float RandomSizeAdjust Field Value float RandomizeAxes (Optional) (Default: XYZ) Whether or not to use the Y axis when picking a random value based on the block's position. If placing an instance of this block on top of one another, setting this to XZ will ensure that all vertical instances have the same random size, offset, and rotations if used. [JsonProperty] public EnumRandomizeAxes RandomizeAxes Field Value EnumRandomizeAxes RandomizeRotations (Optional) (Default: false) If true, the block will have a random rotation apploed to it. [JsonProperty] public bool RandomizeRotations Field Value bool RenderPass (Optional) (Default: Opaque) During which render pass this block should be rendered. [JsonProperty] public EnumChunkRenderPass RenderPass Field Value EnumChunkRenderPass Replaceable (Optional) (Default: 0) A value usually between 0-9999 that indicates which blocks may be replaced with others. Any block with replaceable value above 5000 will be washed away by water Any block with replaceable value above 6000 will replaced when the player tries to place a block Examples: 0 = Bedrock 6000 = Tallgrass 9000 = Lava 9500 = Water 9999 = Air [JsonProperty] public int Replaceable Field Value int RequiredMiningTier (Recommended) (Default: 0) The mining tier required to break this block. [JsonProperty] public int RequiredMiningTier Field Value int Resistance (Recommended) (Default: 6) How long it takes to break this block in seconds. [JsonProperty] public float Resistance Field Value float SeasonColorMap (Optional) (Default: None) The color map for season color mapping. Leave null for no coloring by season [JsonProperty] public string SeasonColorMap Field Value string SelectionBox (Optional) (Default: Default Collision Box) Defines the area which the players mouse pointer collides with for selection. [JsonProperty(\"SelectionBox\")] private RotatableCube SelectionBoxR Field Value RotatableCube SelectionBoxes (Optional) (Default: Default Collision Box) Defines multiple areas which the players mouse pointer collides with for selection. [JsonProperty(\"SelectionBoxes\")] private RotatableCube[] SelectionBoxesR Field Value RotatableCube[] ShapeInventory (Optional) (Default: None) The block shape to be used when displayed in the inventory gui, held in hand or dropped on the ground. [JsonProperty] public CompositeShape ShapeInventory Field Value CompositeShape SideAo (Optional) (Default: All true) Defines which of the 6 block side should be shaded with ambient occlusion [JsonProperty] public Dictionary<string, bool> SideAo Field Value Dictionary<string, bool> SideOpaque (Optional) (Default: All true) Defines which of the 6 block sides are completely opaque. Used to determine which block faces can be culled during tesselation. [JsonProperty] public Dictionary<string, bool> SideOpaque Field Value Dictionary<string, bool> SideSolid (Optional) (Default: All true) Defines which of the 6 block side are solid. Used to determine if attachable blocks can be attached to this block. Also used to determine if snow can rest on top of this block. [JsonProperty] public Dictionary<string, bool> SideSolid Field Value Dictionary<string, bool> SideSolidOpaqueAo (Optional) Quick way of defining SideSolid, SideOpaque, and SideAo. Using this property overrides any values to those. [JsonProperty] public Dictionary<string, bool> SideSolidOpaqueAo Field Value Dictionary<string, bool> Sounds (Optional) (Default: None) The sounds played for this block during step, break, build and walk. Use GetSounds() to query if not performance critical. [JsonProperty] public BlockSounds Sounds Field Value BlockSounds TexturesInventory (Optional) (Default: None) Textures to be used for this block in the inventory gui, held in hand or dropped on the ground [JsonProperty] public Dictionary<string, CompositeTexture> TexturesInventory Field Value Dictionary<string, CompositeTexture> VertexFlags (Optional) (Default: None) Data thats passed on to the graphics card for every vertex of the blocks model [JsonProperty] public VertexFlags VertexFlags Field Value VertexFlags WalkspeedMultiplier (Optional) (Default: 1) Walk speed when standing or inside this block. [JsonProperty] public float WalkspeedMultiplier Field Value float"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.ClientEntityConfig.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.ClientEntityConfig.html",
    "title": "Class ClientEntityConfig | VintageStory Json Docs",
    "keywords": "Class ClientEntityConfig Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Specific configuration settings for entities on the client-side. public class ClientEntityConfig Inheritance object ClientEntityConfig Examples \"client\": { \"renderer\": \"Shape\", \"textures\": { \"material\": { \"base\": \"block/stone/rock/{rock}1\" } }, \"shape\": { \"base\": \"item/stone\" }, \"size\": 1, \"behaviors\": [ { \"code\": \"passivephysics\" }, { \"code\": \"interpolateposition\" } ] }, Fields Animations (Optional) (Default: None) The animation data for the entity. [JsonProperty] public AnimationMetaData[] Animations Field Value AnimationMetaData[] Behaviors (Optional) (Default: None) A list of all client-side behaviors for the entity. [JsonProperty(ItemConverterType = typeof(JsonAttributesConverter))] public JsonObject[] Behaviors Field Value JsonObject[] GlowLevel (Optional) (Default: 0) The glow level for the entity. [JsonProperty] public int GlowLevel Field Value int PitchStep (Optional) (Default: true) Makes entities pitch forward and backwards when stepping. [JsonProperty] public bool PitchStep Field Value bool Renderer (Required) Name of the renderer system that draws this entity. Vanilla Entity Renderer Systems are: Item Dummy BlockFalling Shape PlayerShape EchoChamber You will likely want to use Shape. [JsonProperty] public string Renderer Field Value string Shape (Required) The shape of the entity. Must be set unless Renderer is not set to \"Shape\". [JsonProperty] public CompositeShape Shape Field Value CompositeShape Size (Optional) (Default: 1) The size of the entity. [JsonProperty] public float Size Field Value float SizeGrowthFactor (Optional) (Default: 0) The rate at which the entity's size grows with age - used for chicks and other small baby animals. [JsonProperty] public float SizeGrowthFactor Field Value float Texture (Optional) (Default: None) Sets a single texture. It is recommended to specify texture keys by using Textures instead of this. [JsonProperty] protected CompositeTexture Texture Field Value CompositeTexture Properties Textures (Recommended) (Default: None) A list of all available textures for the entity. First texture in the list will be the default. [JsonProperty] public Dictionary<string, CompositeTexture> Textures { get; set; } Property Value Dictionary<string, CompositeTexture>"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleBehaviorType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleBehaviorType.html",
    "title": "Class CollectibleBehaviorType | VintageStory Json Docs",
    "keywords": "Class CollectibleBehaviorType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A type of behavior to attach to a CollectibleType object. public class CollectibleBehaviorType Inheritance object CollectibleBehaviorType Examples \"behaviors\": [ { \"name\": \"NWOrientable\" } ], \"behaviors\": [ { \"name\": \"UnstableFalling\", \"properties\": { \"fallSound\": null, \"dustIntensity\": 0 } } ], Fields name (Required) The code of the collectible behavior to add. [JsonProperty] public string name Field Value string properties (Optional) (Default: None) A list of properties for the specific behavior. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.CollectibleType.html",
    "title": "Class CollectibleType | VintageStory Json Docs",
    "keywords": "Class CollectibleType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll A type of in-game collectible object. Extends from RegistryObjectType. This is mainly used to control items (and block's items) when they are in the inventory. ItemTypes get most of their data from here, BlockTypes use this as well as their own specific data. [JsonObject(MemberSerialization.OptIn)] public abstract class CollectibleType : RegistryObjectType Inheritance object RegistryObjectType CollectibleType Derived BlockType ItemType Inherited Members RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class Fields AttackPower (Optional) (Default: 0.5) How much damage this collectible deals when used as a weapon. [JsonProperty] public float AttackPower Field Value float AttackRange (Optional) (Default: 1.5) The maximum distance an entity can be for you to attack it with this object. [JsonProperty] public float AttackRange Field Value float Attributes (Optional) (Default: None) Custom Attributes that're always associated with this collectible. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject Behaviors (Optional) (Default: None) Modifiers that can alter the behavior of the item or block, mostly for held interactions. [JsonProperty] public CollectibleBehaviorType[] Behaviors Field Value CollectibleBehaviorType[] CombustibleProps (Optional) (Default: None) Information about the burnable states and results from cooking. [JsonProperty] public CombustibleProperties CombustibleProps Field Value CombustibleProperties CreativeInventory (Recommended) (Default: None) A list of creative tabs and variant codes for each. [JsonProperty] public Dictionary<string, string[]> CreativeInventory Field Value Dictionary<string, string[]> CreativeInventoryStacks (Optional) (Default: None) A list of specific item stacks to place in specific creative tabs. [JsonProperty] public CreativeTabAndStackList[] CreativeInventoryStacks Field Value CreativeTabAndStackList[] CrushingProps (Optional) (Default: None) If set, the collectible can be crushed into something else using a pulverizer. [JsonProperty] public CrushingProperties CrushingProps Field Value CrushingProperties DamagedBy (Optional) (Default: None) From which damage sources does the item takes durability damage. [JsonProperty] public EnumItemDamageSource[] DamagedBy Field Value EnumItemDamageSource[] Dimensions (Optional) (Default: 0.5, 0.5, 0.5) Physical size of this collectible, 0.5 x 0.5 x 0.5 meters by default. [JsonProperty] public Size3f Dimensions Field Value Size3f Durability (Optional) (Default: 0) How many uses does this collectible has when being used. Item disappears at durability 0. [JsonProperty] public int Durability Field Value int FpHandTransform (Obsolete) Deprecated - Use TpHandTransform instead. Used for scaling, rotation or offseting the block when rendered in the first person mode hand. [JsonProperty] public ModelTransform FpHandTransform Field Value ModelTransform GrindingProps (Optional) (Default: None) If set, the collectible can be ground into something else using a quern. [JsonProperty] public GrindingProperties GrindingProps Field Value GrindingProperties GroundTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the rendered as a dropped item on the ground. [JsonProperty] public ModelTransform GroundTransform Field Value ModelTransform GuiTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the block when rendered in guis. [JsonProperty] public ModelTransform GuiTransform Field Value ModelTransform HeldLeftReadyAnimation (Optional) (Default: \"helditemready\") The animation to play in 3rd person when returning to idle from use in the left hand. [JsonProperty] public string HeldLeftReadyAnimation Field Value string HeldLeftTpIdleAnimation (Optional) (Default: None) The animation to play in 3rd person mode when holding this collectible in the left hand [JsonProperty] public string HeldLeftTpIdleAnimation Field Value string HeldOldTpIdleAnimation (Obsolete) Deprecated. Use HeldRightTpIdleAnimation instead. [JsonProperty(\"heldTpIdleAnimation\")] private string HeldOldTpIdleAnimation Field Value string HeldRightReadyAnimation (Optional) (Default: \"helditemready\") The animation to play in 3rd person when returning to idle from use in the right hand. [JsonProperty] public string HeldRightReadyAnimation Field Value string HeldRightTpIdleAnimation (Optional) (Default: None) The animation to play in 3rd person mode when holding this collectible in the right hand [JsonProperty] public string HeldRightTpIdleAnimation Field Value string HeldSounds (Optional) (Default: None) If set, defines a specific sound set for this collectible. [JsonProperty] public HeldSounds HeldSounds Field Value HeldSounds HeldTpHitAnimation (Optional) (Default: \"breakhand\") The animation to play in 3rd person mode when hitting with this collectible [JsonProperty] public string HeldTpHitAnimation Field Value string HeldTpUseAnimation (Optional) (Default: \"interactstatic\") The animation to play in 3rd person mod when using this collectible [JsonProperty] public string HeldTpUseAnimation Field Value string LightHsv (Optional) (Default: [0, 0, 0]) For light emitting collectibles: hue, saturation and brightness value. [JsonProperty] public byte[] LightHsv Field Value byte[] LiquidSelectable (Optional) (Default: False) When this item is held, can the player select liquids? [JsonProperty] public bool LiquidSelectable Field Value bool MaterialDensity (Optional) (Default: 9999) Determines on whether an object floats on liquids or not. Water has a density of 1000. [JsonProperty] public int MaterialDensity Field Value int MatterState (Optional) (Default: Solid) What kind of matter is this collectible? Liquids are handled and rendered differently than solid blocks. [JsonProperty] public EnumMatterState MatterState Field Value EnumMatterState MaxStackSize (Optional) (Default: 1) Max amount of collectible that one default inventory slot can hold. [JsonProperty] public int MaxStackSize Field Value int MiningSpeed (Optional) (Default: None) Modifies how fast the player can break a block when holding this item [JsonProperty] public Dictionary<EnumBlockMaterial, float> MiningSpeed Field Value Dictionary<EnumBlockMaterial, float> NutritionProps (Optional) (Default: None) Information about the nutrition states (e.g. edible properties). Setting this will make the collectible edible. [JsonProperty] public FoodNutritionProperties NutritionProps Field Value FoodNutritionProperties ParticleProperties (Optional) (Default: None) Particles that should spawn in regular intervals from this block or item when held in hands [JsonProperty] public AdvancedParticleProperties[] ParticleProperties Field Value AdvancedParticleProperties[] RenderAlphaTest (Optional) (Default: 0.05) Alpha test value for rendering in gui, fp hand, tp hand or on the ground. [JsonProperty] public float RenderAlphaTest Field Value float Shape (Recommended) (Default: None) Details about the 3D model of this collectible. [JsonProperty] public CompositeShape Shape Field Value CompositeShape StorageFlags (Optional) (Default: 1) Determines in which kind of bags the item can be stored in. [JsonProperty] public int StorageFlags Field Value int Texture (Optional) (Default: None) Details about the texture of this collectible. Used if the shape only has one texture. Use Textures if using more than one texture. [JsonProperty] public CompositeTexture Texture Field Value CompositeTexture Textures (Optional) (Default: None) Details about a set of textures of this collectible. Each string key should correlate to a texture value in this the collectible's shape's textures. You can use Texture if only using one texture. [JsonProperty] public Dictionary<string, CompositeTexture> Textures Field Value Dictionary<string, CompositeTexture> Tool (Optional) (Default: None) If set, this item will be classified as given tool. [JsonProperty] public EnumTool? Tool Field Value EnumTool? ToolTier (Optional) (Default: 0) The object can mine any blocks with the same or lower tier than this. If this object is a weapon, this also determines the object's damage tier. [JsonProperty] public int ToolTier Field Value int TpHandTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the block when rendered in the third person mode hand. [JsonProperty] public ModelTransform TpHandTransform Field Value ModelTransform TpOffHandTransform (Recommended) (Default: None) Used for scaling, rotation or offseting the block when rendered in the third person mode offhand. [JsonProperty] public ModelTransform TpOffHandTransform Field Value ModelTransform TransitionableProps (Optional) (Default: None) Information about the transitionable states - Should this collectible turn into another item after a period of time? [JsonProperty] public TransitionableProperties[] TransitionableProps Field Value TransitionableProperties[] Properties MiningTier (Obsolete) Deprecated. Use ToolTier. [JsonProperty] [Obsolete(\"Use tool tier\")] public int MiningTier { get; set; } Property Value int"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.CropBehaviorType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.CropBehaviorType.html",
    "title": "Class CropBehaviorType | VintageStory Json Docs",
    "keywords": "Class CropBehaviorType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Allows further complex behavior for crop blocks. public class CropBehaviorType Inheritance object CropBehaviorType Examples \"cropProps\": { \"behaviors\": [ { \"name\": \"Pumpkin\", \"properties\": { \"vineGrowthStage\": 3, \"vineGrowthQuantity\": { \"dist\": \"invexp\", \"avg\": 2, \"var\": 3 } } } ], ... }, Fields name (Required) The ID of the crop behavior class to use. [JsonProperty] public string name Field Value string properties (Optional) (Default: None) Properties for the specific crop behavior class. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.EntityType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.EntityType.html",
    "title": "Class EntityType | VintageStory Json Docs",
    "keywords": "Class EntityType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll An entity type. Any json files inside of assets/entities will be loaded in as this type. [JsonObject(MemberSerialization.OptIn)] public class EntityType : RegistryObjectType Inheritance object RegistryObjectType EntityType Inherited Members RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class Fields Attributes (Optional) (Default: None) Specific attributes for the entity. Contents can vary per entity. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject BehaviorConfigs (Optional) (Default: None) A list of properties common to each client/server entity behavior. Key is a behavior code, and value is a set of attributes. Attributes will get merged with any matching client/server entity behaviors. [JsonProperty(ItemConverterType = typeof(JsonAttributesConverter))] public Dictionary<string, JsonObject> BehaviorConfigs Field Value Dictionary<string, JsonObject> CanClimb (Optional) (Default: false) If true the entity can climb on walls. [JsonProperty] public bool CanClimb Field Value bool CanClimbAnywhere (Optional) (Default: false) If true the entity can climb anywhere. [JsonProperty] public bool CanClimbAnywhere Field Value bool Client (Required) The client-side properties of the entity. Usually related to rendering, precise physics calculations, and behaviors. [JsonProperty] public ClientEntityConfig Client Field Value ClientEntityConfig ClimbTouchDistance (Optional) (Default: 0.5) The minimum distance from a block that a creature has to be to climb it. [JsonProperty] public float ClimbTouchDistance Field Value float CollisionBoxSize (Optional) (Default: 0.5, 0.5) The size of the entity's hitbox, in meters. [JsonProperty] public Vec2f CollisionBoxSize Field Value Vec2f DeadCollisionBoxSize (Optional) (Default: 0.5, 0.25) The size of the hitbox, in meters, while the entity is dead. [JsonProperty] public Vec2f DeadCollisionBoxSize Field Value Vec2f DeadSelectionBoxSize (Optional) (Default: DeadCollisionBoxSize) The size of the hitbox while the entity is dead. Defaults to DeadCollisionBoxSize. [JsonProperty] public Vec2f DeadSelectionBoxSize Field Value Vec2f Drops (Optional) (Default: None) The drops for the entity when they are killed. [JsonProperty] public BlockDropItemStack[] Drops Field Value BlockDropItemStack[] EyeHeight (Optional) (Default: 0.1) How high the camera should be placed if this entity were to be controlled by the player. [JsonProperty] public double EyeHeight Field Value double FallDamage (Obsolete) Obsolete. Will be removed in 1.20. Set FallDamageMultiplier to 0.0 for no fall damage. [Obsolete(\"This will be removed in 1.20. Instead set FallDamageMultiplier to 0.0 for no fall damage\")] [JsonProperty] public bool FallDamage Field Value bool FallDamageMultiplier (Optional) (Default: 1) If less than one, mitigates fall damage (e.g. could be used for mountainous creatures); if more than one, increases fall damage. [JsonProperty] public float FallDamageMultiplier Field Value float Habitat (Optional) (Default: Land) Natural habitat of the entity. Decides whether to apply gravity or not. [JsonProperty] public EnumHabitat Habitat Field Value EnumHabitat IdleSoundChance (Optional) (Default: 0.3) The chance that an idle sound will play for the entity. [JsonProperty] public float IdleSoundChance Field Value float IdleSoundRange (Optional) (Default: 24) The sound range for the idle sound in blocks. [JsonProperty] public float IdleSoundRange Field Value float KnockbackResistance (Optional) (Default: 0) The resistance to being pushed back by an impact. Value will vary based on mob weight. [JsonProperty] public float KnockbackResistance Field Value float RotateModelOnClimb (Optional) (Default: false) Should the entity rotate to 'stand' on the direction it's climbing? [JsonProperty] public bool RotateModelOnClimb Field Value bool SelectionBoxSize (Optional) (Default: CollisionBoxSize) The size of the entity's hitbox. Defaults to CollisionBoxSize. [JsonProperty] public Vec2f SelectionBoxSize Field Value Vec2f Server (Required) The server-side properties of the entity. Usually related to spawning, general physics, AI tasks, and other behaviors.. [JsonProperty] public ServerEntityConfig Server Field Value ServerEntityConfig Sounds (Recommended) (Default: None) The sounds that this entity can make. Keys to use are: \"hurt\" \"death\" \"idle\" \"swim\" (player only) \"eat\" (player only) [JsonProperty] public Dictionary<string, AssetLocation> Sounds Field Value Dictionary<string, AssetLocation> SwimmingEyeHeight (Optional) (Default: EyeHeight) The eye height of the entity when swimming. Defaults to be same as EyeHeight. [JsonProperty] public double? SwimmingEyeHeight Field Value double? Weight (Optional) (Default: 25) The mass of this type of entity in kilograms, on average. [JsonProperty] public float Weight Field Value float Properties DeadHitBoxSize (Optional) Sets both DeadCollisionBoxSize and DeadSelectionBoxSize. [JsonProperty] public Vec2f DeadHitBoxSize { get; set; } Property Value Vec2f HitBoxSize (Optional) Sets both CollisionBoxSize and SelectionBoxSize. [JsonProperty] public Vec2f HitBoxSize { get; set; } Property Value Vec2f"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.ItemType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.ItemType.html",
    "title": "Class ItemType | VintageStory Json Docs",
    "keywords": "Class ItemType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Defines an in-game item using a json file. Note that all json properties for items come from the base CollectibleType and RegistryObjectType classes. Any json file inside the \"assets/itemtypes\" folder will be loaded as an itemtype in the game. [JsonObject(MemberSerialization.OptIn)] public class ItemType : CollectibleType Inheritance object RegistryObjectType CollectibleType ItemType Inherited Members CollectibleType.Behaviors CollectibleType.LightHsv CollectibleType.RenderAlphaTest CollectibleType.StorageFlags CollectibleType.MaxStackSize CollectibleType.AttackPower CollectibleType.Durability CollectibleType.Dimensions CollectibleType.DamagedBy CollectibleType.Tool CollectibleType.AttackRange CollectibleType.MiningSpeed CollectibleType.ToolTier CollectibleType.MiningTier CollectibleType.MatterState CollectibleType.HeldSounds CollectibleType.MaterialDensity CollectibleType.Attributes CollectibleType.Shape CollectibleType.GuiTransform CollectibleType.FpHandTransform CollectibleType.TpHandTransform CollectibleType.TpOffHandTransform CollectibleType.GroundTransform CollectibleType.Texture CollectibleType.Textures CollectibleType.CombustibleProps CollectibleType.NutritionProps CollectibleType.TransitionableProps CollectibleType.GrindingProps CollectibleType.CrushingProps CollectibleType.LiquidSelectable CollectibleType.CreativeInventory CollectibleType.CreativeInventoryStacks CollectibleType.HeldTpHitAnimation CollectibleType.HeldRightTpIdleAnimation CollectibleType.HeldLeftTpIdleAnimation CollectibleType.HeldLeftReadyAnimation CollectibleType.HeldRightReadyAnimation CollectibleType.HeldOldTpIdleAnimation CollectibleType.HeldTpUseAnimation CollectibleType.ParticleProperties RegistryObjectType.Enabled RegistryObjectType.Code RegistryObjectType.VariantGroups RegistryObjectType.Interactions RegistryObjectType.SkipVariants RegistryObjectType.AllowedVariants RegistryObjectType.Class Examples { \"code\": \"strawdummy\", \"class\": \"ItemStrawDummy\", \"shape\": { \"base\": \"entity/land/strawdummy\" }, \"creativeinventory\": { ... }, \"heldTpIdleAnimation\": \"holdunderarm\", \"maxstacksize\": 1, \"combustibleProps\": { ... }, \"guiTransform\": { ... }, \"fpHandTransform\": { ... }, \"tpHandTransform\": { ... } }"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.RegistryObjectType.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.RegistryObjectType.html",
    "title": "Class RegistryObjectType | VintageStory Json Docs",
    "keywords": "Class RegistryObjectType Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll The very base class for an in-game object. Extended by blocktypes, itemtypes, and entitytypes. Controls the object's code, variant types, allowed/disallowed variants, world interactions, and a class for extra functionality. [JsonObject(MemberSerialization.OptIn)] public abstract class RegistryObjectType Inheritance object RegistryObjectType Derived CollectibleType EntityType Examples \"code\": \"cheese\", \"class\": \"ItemCheese\", \"variantgroups\": [ { \"code\": \"type\", \"states\": [ \"cheddar\", \"blue\", \"waxedcheddar\" ] }, { \"code\": \"part\", \"states\": [ \"1slice\", \"2slice\", \"3slice\", \"4slice\" ] } ], \"skipVariants\": [ \"cheese-waxedcheddar-1slice\", \"cheese-waxedcheddar-2slice\", \"cheese-waxedcheddar-3slice\" ], Fields AllowedVariants (Optional) (Default: None) If set, only resolved code-variants in this list will be loaded by the game. [JsonProperty] public AssetLocation[] AllowedVariants Field Value AssetLocation[] Class (Optional) (Default: None) A reference to the registered C# class of the object. Can be used to add extra functionality to objects. [JsonProperty] public string Class Field Value string Code (Required) The unique code for this object. Used as the prefix for any variant codes. public AssetLocation Code Field Value AssetLocation Enabled (Optional) (Default: true) If set to false, this object will not be loaded. public bool Enabled Field Value bool Interactions (Unused) (Default: None) (Currently unused) A set of potential world interactions for this object. Used to display what the object is used for - e.g. Shift + Right Click to Knap Stones. [JsonProperty] public WorldInteraction[] Interactions Field Value WorldInteraction[] SkipVariants (Optional) (Default: None) A set of resolved code-variants that will not be loaded by the game. [JsonProperty] public AssetLocation[] SkipVariants Field Value AssetLocation[] VariantGroups (Optional) (Default: None) All available variants for this object. public RegistryObjectVariantGroup[] VariantGroups Field Value RegistryObjectVariantGroup[]"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.ServerEntityConfig.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.ServerEntityConfig.html",
    "title": "Class ServerEntityConfig | VintageStory Json Docs",
    "keywords": "Class ServerEntityConfig Namespace Vintagestory.ServerMods.NoObf Assembly VSEssentials.dll Specific configuration settings for entities on the server-side. public class ServerEntityConfig Inheritance object ServerEntityConfig Examples \"server\": { \"behaviors\": [ { \"code\": \"passivephysics\", \"groundDragFactor\": 1, \"airDragFactor\": 0.25, \"gravityFactor\": 0.75 }, { \"code\": \"despawn\", \"minSeconds\": 600 } ] }, Fields Attributes (Optional) (Default: None) A set of server-side attributes passed to the entity. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject Behaviors (Optional) (Default: None) A list of all server-side behaviors for the entity. [JsonProperty(ItemConverterType = typeof(JsonAttributesConverter))] public JsonObject[] Behaviors Field Value JsonObject[] SpawnConditions (Recommended) (Default: None) The spawn conditions for the entity. Without this, the entity will not spawn anywhere. [JsonProperty] public SpawnConditions SpawnConditions Field Value SpawnConditions"
  },
  "jsondocs/Vintagestory.ServerMods.NoObf.html": {
    "href": "jsondocs/Vintagestory.ServerMods.NoObf.html",
    "title": "Namespace Vintagestory.ServerMods.NoObf | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.ServerMods.NoObf Classes BlockCropPropertiesType Used for crop blocks that grow over time. BlockType Defines an in-game block using a json file. BlockTypes use all properties from CollectibleType and RegistryObjectType, but also contain some unique properties. Any json file placed in your \"assets/blocktypes\" folder will be loaded as a blocktype in the game. ClientEntityConfig Specific configuration settings for entities on the client-side. CollectibleBehaviorType A type of behavior to attach to a CollectibleType object. CollectibleType A type of in-game collectible object. Extends from RegistryObjectType. This is mainly used to control items (and block's items) when they are in the inventory. ItemTypes get most of their data from here, BlockTypes use this as well as their own specific data. CropBehaviorType Allows further complex behavior for crop blocks. EntityType An entity type. Any json files inside of assets/entities will be loaded in as this type. ItemType Defines an in-game item using a json file. Note that all json properties for items come from the base CollectibleType and RegistryObjectType classes. Any json file inside the \"assets/itemtypes\" folder will be loaded as an itemtype in the game. RegistryObjectType The very base class for an in-game object. Extended by blocktypes, itemtypes, and entitytypes. Controls the object's code, variant types, allowed/disallowed variants, world interactions, and a class for extra functionality. ServerEntityConfig Specific configuration settings for entities on the server-side."
  },
  "jsondocs/Vintagestory.ServerMods.RegistryObjectVariantGroup.html": {
    "href": "jsondocs/Vintagestory.ServerMods.RegistryObjectVariantGroup.html",
    "title": "Class RegistryObjectVariantGroup | VintageStory Json Docs",
    "keywords": "Class RegistryObjectVariantGroup Namespace Vintagestory.ServerMods Assembly VSEssentials.dll This is used to define a set of variant groups for specific registry objects. public class RegistryObjectVariantGroup Inheritance object RegistryObjectVariantGroup Examples \"variantgroups\": [ { \"code\": \"type\", \"states\": [ \"spelt\", \"rye\", \"flax\", \"rice\", \"cassava\", \"amaranth\", \"sunflower\" ] }, { \"code\": \"state\", \"states\": [ \"partbaked\", \"perfect\", \"charred\" ] } ], \"variantgroups\": [ { \"code\": \"rock\", \"loadFromProperties\": \"block/rockwithdeposit\" } ], Fields Code (Required) A unique code for this variant. Essentially an ID for each variant type. public string Code Field Value string Combine (Optional) (Default: Multiply) How this variant combines with other variant types to create individual objects. public EnumCombination Combine Field Value EnumCombination LoadFromProperties (Optional) (Default: None) If set, copies a WorldProperties asset to create variants from. public AssetLocation LoadFromProperties Field Value AssetLocation LoadFromPropertiesCombine (Optional) (Default: None) A set of world properties to combine to create variants from. public AssetLocation[] LoadFromPropertiesCombine Field Value AssetLocation[] OnVariant (Optional) (Default: None) Required if using the SelectiveMultiply in Combine. public string OnVariant Field Value string States (Required) (Default: None) A list of all the valid states for this variant. Only required if LoadFromProperties or LoadFromPropertiesCombine are not set. public string[] States Field Value string[]"
  },
  "jsondocs/Vintagestory.ServerMods.html": {
    "href": "jsondocs/Vintagestory.ServerMods.html",
    "title": "Namespace Vintagestory.ServerMods | VintageStory Json Docs",
    "keywords": "Namespace Vintagestory.ServerMods Classes RegistryObjectVariantGroup This is used to define a set of variant groups for specific registry objects."
  }
}