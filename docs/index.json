{
  "api/CompactExifLib.ExifByteOrder.html": {
    "href": "api/CompactExifLib.ExifByteOrder.html",
    "title": "Enum ExifByteOrder | VintageStory API",
    "keywords": "Enum ExifByteOrder Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifByteOrder Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BigEndian = 1 LittleEndian = 0"
  },
  "api/CompactExifLib.ExifData.html": {
    "href": "api/CompactExifLib.ExifData.html",
    "title": "Class ExifData | VintageStory API",
    "keywords": "Class ExifData Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public class ExifData Inheritance object ExifData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ExifData(Stream, ExifLoadOptions) public ExifData(Stream ImageStream, ExifLoadOptions Options = (ExifLoadOptions)0) Parameters ImageStream Stream Options ExifLoadOptions ExifData(string, ExifLoadOptions) public ExifData(string FileNameWithPath, ExifLoadOptions Options = (ExifLoadOptions)0) Parameters FileNameWithPath string Options ExifLoadOptions Fields IfdShift public const int IfdShift = 16 Field Value int ImageType public ImageType ImageType Field Value ImageType Properties ByteOrder public ExifByteOrder ByteOrder { get; } Property Value ExifByteOrder MakerNoteOriginalOffset public int MakerNoteOriginalOffset { get; } Property Value int Methods ComposeTagSpec(ExifIfd, ExifTagId) public static ExifTag ComposeTagSpec(ExifIfd Ifd, ExifTagId TagId) Parameters Ifd ExifIfd TagId ExifTagId Returns ExifTag Empty() public static ExifData Empty() Returns ExifData EnumerateNextTag(out ExifTag) public bool EnumerateNextTag(out ExifTag TagSpec) Parameters TagSpec ExifTag Returns bool ExifReadUInt16(byte[], int) public ushort ExifReadUInt16(byte[] Data, int StartIndex) Parameters Data byte[] StartIndex int Returns ushort ExifReadUInt32(byte[], int) public uint ExifReadUInt32(byte[] Data, int StartIndex) Parameters Data byte[] StartIndex int Returns uint ExifWriteUInt16(byte[], int, ushort) public void ExifWriteUInt16(byte[] Data, int StartIndex, ushort Value) Parameters Data byte[] StartIndex int Value ushort ExifWriteUInt32(byte[], int, uint) public void ExifWriteUInt32(byte[] Data, int StartIndex, uint Value) Parameters Data byte[] StartIndex int Value uint ExtractIfd(ExifTag) public static ExifIfd ExtractIfd(ExifTag TagSpec) Parameters TagSpec ExifTag Returns ExifIfd ExtractTagId(ExifTag) public static ExifTagId ExtractTagId(ExifTag TagSpec) Parameters TagSpec ExifTag Returns ExifTagId GetDateChanged(out DateTime) public bool GetDateChanged(out DateTime Value) Parameters Value DateTime Returns bool GetDateDigitized(out DateTime) public bool GetDateDigitized(out DateTime Value) Parameters Value DateTime Returns bool GetDateTaken(out DateTime) public bool GetDateTaken(out DateTime Value) Parameters Value DateTime Returns bool GetGpsAltitude(out decimal) public bool GetGpsAltitude(out decimal Value) Parameters Value decimal Returns bool GetGpsDateTimeStamp(out DateTime) public bool GetGpsDateTimeStamp(out DateTime Value) Parameters Value DateTime Returns bool GetGpsLatitude(out GeoCoordinate) public bool GetGpsLatitude(out GeoCoordinate Value) Parameters Value GeoCoordinate Returns bool GetGpsLongitude(out GeoCoordinate) public bool GetGpsLongitude(out GeoCoordinate Value) Parameters Value GeoCoordinate Returns bool GetTagByteCount(ExifTagType, int) public static int GetTagByteCount(ExifTagType TagType, int ValueCount) Parameters TagType ExifTagType ValueCount int Returns int GetTagRawData(ExifTag, out ExifTagType, out int, out byte[]) public bool GetTagRawData(ExifTag TagSpec, out ExifTagType TagType, out int ValueCount, out byte[] RawData) Parameters TagSpec ExifTag TagType ExifTagType ValueCount int RawData byte[] Returns bool GetTagRawData(ExifTag, out ExifTagType, out int, out byte[], out int) public bool GetTagRawData(ExifTag TagSpec, out ExifTagType TagType, out int ValueCount, out byte[] RawData, out int RawDataIndex) Parameters TagSpec ExifTag TagType ExifTagType ValueCount int RawData byte[] RawDataIndex int Returns bool GetTagType(ExifTag, out ExifTagType) public bool GetTagType(ExifTag TagSpec, out ExifTagType TagType) Parameters TagSpec ExifTag TagType ExifTagType Returns bool GetTagValue(ExifTag, out ExifRational, int) public bool GetTagValue(ExifTag TagSpec, out ExifRational Value, int Index = 0) Parameters TagSpec ExifTag Value ExifRational Index int Returns bool GetTagValue(ExifTag, out DateTime, ExifDateFormat) public bool GetTagValue(ExifTag TagSpec, out DateTime Value, ExifDateFormat Format = ExifDateFormat.DateAndTime) Parameters TagSpec ExifTag Value DateTime Format ExifDateFormat Returns bool GetTagValue(ExifTag, out int, int) public bool GetTagValue(ExifTag TagSpec, out int Value, int Index = 0) Parameters TagSpec ExifTag Value int Index int Returns bool GetTagValue(ExifTag, out string, StrCoding) public bool GetTagValue(ExifTag TagSpec, out string Value, StrCoding Coding) Parameters TagSpec ExifTag Value string Coding StrCoding Returns bool GetTagValue(ExifTag, out uint, int) public bool GetTagValue(ExifTag TagSpec, out uint Value, int Index = 0) Parameters TagSpec ExifTag Value uint Index int Returns bool GetTagValueCount(ExifTag, out int) public bool GetTagValueCount(ExifTag TagSpec, out int ValueCount) Parameters TagSpec ExifTag ValueCount int Returns bool GetThumbnailImage(out byte[], out int, out int) public bool GetThumbnailImage(out byte[] ThumbnailData, out int ThumbnailIndex, out int ThumbnailByteCount) Parameters ThumbnailData byte[] ThumbnailIndex int ThumbnailByteCount int Returns bool IfdExists(ExifIfd) public bool IfdExists(ExifIfd Ifd) Parameters Ifd ExifIfd Returns bool ImageFileBlockExists(ImageFileBlock) public bool ImageFileBlockExists(ImageFileBlock BlockType) Parameters BlockType ImageFileBlock Returns bool InitTagEnumeration(ExifIfd) public bool InitTagEnumeration(ExifIfd Ifd) Parameters Ifd ExifIfd Returns bool RemoveAllTags() public void RemoveAllTags() RemoveAllTagsFromIfd(ExifIfd) public bool RemoveAllTagsFromIfd(ExifIfd Ifd) Parameters Ifd ExifIfd Returns bool RemoveDateChanged() public void RemoveDateChanged() RemoveDateDigitized() public void RemoveDateDigitized() RemoveDateTaken() public void RemoveDateTaken() RemoveGpsAltitude() public void RemoveGpsAltitude() RemoveGpsDateTimeStamp() public void RemoveGpsDateTimeStamp() RemoveGpsLatitude() public void RemoveGpsLatitude() RemoveGpsLongitude() public void RemoveGpsLongitude() RemoveImageFileBlock(ImageFileBlock) public void RemoveImageFileBlock(ImageFileBlock BlockType) Parameters BlockType ImageFileBlock RemoveTag(ExifTag) public bool RemoveTag(ExifTag TagSpec) Parameters TagSpec ExifTag Returns bool RemoveThumbnailImage(bool) public void RemoveThumbnailImage(bool RemoveAlsoThumbnailTags) Parameters RemoveAlsoThumbnailTags bool ReplaceAllTagsBy(ExifData) public void ReplaceAllTagsBy(ExifData SourceExifData) Parameters SourceExifData ExifData Save(Stream, Stream, ExifSaveOptions) public void Save(Stream SourceStream, Stream DestStream, ExifSaveOptions SaveOptions = (ExifSaveOptions)0) Parameters SourceStream Stream DestStream Stream SaveOptions ExifSaveOptions Save(string, ExifSaveOptions) public void Save(string DestFileNameWithPath = null, ExifSaveOptions SaveOptions = (ExifSaveOptions)0) Parameters DestFileNameWithPath string SaveOptions ExifSaveOptions SetDateChanged(DateTime) public bool SetDateChanged(DateTime Value) Parameters Value DateTime Returns bool SetDateDigitized(DateTime) public bool SetDateDigitized(DateTime Value) Parameters Value DateTime Returns bool SetDateTaken(DateTime) public bool SetDateTaken(DateTime Value) Parameters Value DateTime Returns bool SetGpsAltitude(decimal) public bool SetGpsAltitude(decimal Value) Parameters Value decimal Returns bool SetGpsDateTimeStamp(DateTime) public bool SetGpsDateTimeStamp(DateTime Value) Parameters Value DateTime Returns bool SetGpsLatitude(GeoCoordinate) public bool SetGpsLatitude(GeoCoordinate Value) Parameters Value GeoCoordinate Returns bool SetGpsLongitude(GeoCoordinate) public bool SetGpsLongitude(GeoCoordinate Value) Parameters Value GeoCoordinate Returns bool SetTagRawData(ExifTag, ExifTagType, int, byte[], int) public bool SetTagRawData(ExifTag TagSpec, ExifTagType TagType, int ValueCount, byte[] RawData, int RawDataIndex = 0) Parameters TagSpec ExifTag TagType ExifTagType ValueCount int RawData byte[] RawDataIndex int Returns bool SetTagValue(ExifTag, ExifRational, ExifTagType, int) public bool SetTagValue(ExifTag TagSpec, ExifRational Value, ExifTagType TagType, int Index = 0) Parameters TagSpec ExifTag Value ExifRational TagType ExifTagType Index int Returns bool SetTagValue(ExifTag, DateTime, ExifDateFormat) public bool SetTagValue(ExifTag TagSpec, DateTime Value, ExifDateFormat Format = ExifDateFormat.DateAndTime) Parameters TagSpec ExifTag Value DateTime Format ExifDateFormat Returns bool SetTagValue(ExifTag, int, ExifTagType, int) public bool SetTagValue(ExifTag TagSpec, int Value, ExifTagType TagType, int Index = 0) Parameters TagSpec ExifTag Value int TagType ExifTagType Index int Returns bool SetTagValue(ExifTag, string, StrCoding) public bool SetTagValue(ExifTag TagSpec, string Value, StrCoding Coding) Parameters TagSpec ExifTag Value string Coding StrCoding Returns bool SetTagValue(ExifTag, uint, ExifTagType, int) public bool SetTagValue(ExifTag TagSpec, uint Value, ExifTagType TagType, int Index = 0) Parameters TagSpec ExifTag Value uint TagType ExifTagType Index int Returns bool SetTagValueCount(ExifTag, int) public bool SetTagValueCount(ExifTag TagSpec, int ValueCount) Parameters TagSpec ExifTag ValueCount int Returns bool SetTagValueCount(ExifTag, int, ExifTagType) public bool SetTagValueCount(ExifTag TagSpec, int ValueCount, ExifTagType TagType) Parameters TagSpec ExifTag ValueCount int TagType ExifTagType Returns bool SetThumbnailImage(byte[], int, int) public bool SetThumbnailImage(byte[] ThumbnailData, int ThumbnailIndex = 0, int ThumbnailByteCount = -1) Parameters ThumbnailData byte[] ThumbnailIndex int ThumbnailByteCount int Returns bool TagExists(ExifTag) public bool TagExists(ExifTag TagSpec) Parameters TagSpec ExifTag Returns bool ThumbnailImageExists() public bool ThumbnailImageExists() Returns bool"
  },
  "api/CompactExifLib.ExifDateFormat.html": {
    "href": "api/CompactExifLib.ExifDateFormat.html",
    "title": "Enum ExifDateFormat | VintageStory API",
    "keywords": "Enum ExifDateFormat Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifDateFormat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DateAndTime = 0 DateOnly = 1"
  },
  "api/CompactExifLib.ExifErrCode.html": {
    "href": "api/CompactExifLib.ExifErrCode.html",
    "title": "Enum ExifErrCode | VintageStory API",
    "keywords": "Enum ExifErrCode Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifErrCode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ExifBlockHasIllegalContent = 4 ExifDataAreTooLarge = 5 ImageHasUnsupportedFeatures = 2 ImageTypeIsNotSupported = 1 ImageTypesDoNotMatch = 6 InternalError = 0 InternalImageStructureIsWrong = 3"
  },
  "api/CompactExifLib.ExifException.html": {
    "href": "api/CompactExifLib.ExifException.html",
    "title": "Class ExifException | VintageStory API",
    "keywords": "Class ExifException Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public class ExifException : Exception, ISerializable Inheritance object Exception ExifException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ExifException(ExifErrCode) public ExifException(ExifErrCode _ErrorCode) Parameters _ErrorCode ExifErrCode Fields ErrorCode public ExifErrCode ErrorCode Field Value ExifErrCode Properties Message Gets a message that describes the current exception. public override string Message { get; } Property Value string The error message that explains the reason for the exception, or an empty string (\"\")."
  },
  "api/CompactExifLib.ExifIfd.html": {
    "href": "api/CompactExifLib.ExifIfd.html",
    "title": "Enum ExifIfd | VintageStory API",
    "keywords": "Enum ExifIfd Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifIfd Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields GpsInfoData = 2 Interoperability = 3 PrimaryData = 0 PrivateData = 1 ThumbnailData = 4"
  },
  "api/CompactExifLib.ExifLoadOptions.html": {
    "href": "api/CompactExifLib.ExifLoadOptions.html",
    "title": "Enum ExifLoadOptions | VintageStory API",
    "keywords": "Enum ExifLoadOptions Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub [Flags] public enum ExifLoadOptions Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CreateEmptyBlock = 1"
  },
  "api/CompactExifLib.ExifRational.html": {
    "href": "api/CompactExifLib.ExifRational.html",
    "title": "Struct ExifRational | VintageStory API",
    "keywords": "Struct ExifRational Namespace CompactExifLib Assembly VintagestoryAPI.dll public struct ExifRational Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ExifRational(int, int) public ExifRational(int _Numer, int _Denom) Parameters _Numer int _Denom int ExifRational(uint, uint, bool) public ExifRational(uint _Numer, uint _Denom, bool _Sign = false) Parameters _Numer uint _Denom uint _Sign bool Fields Denom public uint Denom Field Value uint Numer public uint Numer Field Value uint Sign public bool Sign Field Value bool Methods FromDecimal(decimal) public static ExifRational FromDecimal(decimal Value) Parameters Value decimal Returns ExifRational IsNegative() public bool IsNegative() Returns bool IsPositive() public bool IsPositive() Returns bool IsValid() public bool IsValid() Returns bool IsZero() public bool IsZero() Returns bool ToDecimal(ExifRational) public static decimal ToDecimal(ExifRational Value) Parameters Value ExifRational Returns decimal ToString() public string ToString() Returns string"
  },
  "api/CompactExifLib.ExifSaveOptions.html": {
    "href": "api/CompactExifLib.ExifSaveOptions.html",
    "title": "Enum ExifSaveOptions | VintageStory API",
    "keywords": "Enum ExifSaveOptions Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub [Flags] public enum ExifSaveOptions Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/CompactExifLib.ExifTag.html": {
    "href": "api/CompactExifLib.ExifTag.html",
    "title": "Enum ExifTag | VintageStory API",
    "keywords": "Enum ExifTag Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifTag Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ApertureValue = 102914 Artist = 315 BitsPerSample = 258 BodySerialNumber = 107569 BrightnessValue = 102915 CameraOwnerName = 107568 CellLength = 265 CellWidth = 264 CfaPattern = 107266 ColorMap = 320 ColorSpace = 106497 ComponentsConfiguration = 102657 CompressedBitsPerPixel = 102658 Compression = 259 Contrast = 107528 Copyright = 33432 CustomRendered = 107521 DateTime = 306 DateTimeDigitized = 102404 DateTimeOriginal = 102403 DeviceSettingDescription = 107531 DigitalZoomRatio = 107524 DocumentName = 269 DotRange = 336 ExifIfdPointer = 34665 ExifVersion = 102400 ExposureBiasValue = 102916 ExposureIndex = 107029 ExposureMode = 107522 ExposureProgram = 100386 ExposureTime = 98970 ExtraSamples = 338 FNumber = 98973 FileSource = 107264 FillOrder = 266 Flash = 102921 FlashEnergy = 107019 FlashPixVersion = 106496 FocalLength = 102922 FocalLengthIn35mmFilm = 107525 FocalPlaneResolutionUnit = 107024 FocalPlaneXResolution = 107022 FocalPlaneYResolution = 107023 FreeByteCounts = 289 FreeOffsets = 288 GainControl = 107527 GpsAltitude = 131078 GpsAltitudeRef = 131077 GpsAreaInformation = 131100 GpsDateStamp = 131101 GpsDestBearing = 131096 GpsDestBearingRef = 131095 GpsDestDistance = 131098 GpsDestDistanceRef = 131097 GpsDestLatitude = 131092 GpsDestLatitudeRef = 131091 GpsDestLongitude = 131094 GpsDestLongitudeRef = 131093 GpsDifferential = 131102 GpsDop = 131083 GpsHPositioningError = 131103 GpsImgDirection = 131089 GpsImgDirectionRef = 131088 GpsInfoIfdPointer = 34853 GpsLatitude = 131074 GpsLatitudeRef = 131073 GpsLongitude = 131076 GpsLongitudeRef = 131075 GpsMapDatum = 131090 GpsMeasureMode = 131082 GpsProcessingMethod = 131099 GpsSatellites = 131080 GpsSpeed = 131085 GpsSpeedRef = 131084 GpsStatus = 131081 GpsTimeStamp = 131079 GpsTrack = 131087 GpsTrackRef = 131086 GpsVersionId = 131072 GrayResponseCurve = 291 GrayResponseUnit = 290 HalftoneHints = 321 HostComputer = 316 ImageDescription = 270 ImageLength = 257 ImageUniqueId = 107552 ImageWidth = 256 InkNames = 333 InkSet = 332 InteroperabilityIfdPointer = 106501 InteroperabilityIndex = 196609 InteroperabilityVersion = 196610 IptcMetadata = 33723 IsoSpeed = 100403 IsoSpeedLatitudeyyy = 100404 IsoSpeedLatitudezzz = 100405 IsoSpeedRatings = 100391 JpegInterchangeFormat = 262657 JpegInterchangeFormatLength = 262658 LensMake = 107571 LensModel = 107572 LensSerialNumber = 107573 LensSpecification = 107570 LightSource = 102920 Make = 271 MakerNote = 103036 MaxApertureValue = 102917 MaxSampleValue = 281 MeteringMode = 102919 MinSampleValue = 280 Model = 272 NewSubfileType = 254 NumberOfInks = 334 Oecf = 100392 OffsetSchema = 125469 OffsetTime = 102416 OffsetTimeDigitized = 102418 OffsetTimeOriginal = 102417 Orientation = 274 PageName = 285 PageNumber = 297 PhotographicSensitivity = 100391 PhotometricInterpretation = 262 PixelXDimension = 106498 PixelYDimension = 106499 PlanarConfiguration = 284 Predictor = 317 PrimaryChromaticities = 319 PrimaryDataPadding = 59932 PrivateDataPadding = 125468 RecommendedExposureIndex = 100402 ReferenceBlackWhite = 532 RelatedSoundFile = 106500 ResolutionUnit = 296 RowsPerStrip = 278 SMaxSampleValue = 341 SMinSampleValue = 340 SampleFormat = 339 SamplesPerPixel = 277 Saturation = 107529 SceneCaptureType = 107526 SceneType = 107265 SensingMethod = 107031 SensitivityType = 100400 Sharpness = 107530 ShutterSpeedValue = 102913 Software = 305 SpatialFrequencyResponse = 107020 SpectralSensitivity = 100388 StandardOutputSensitivity = 100401 StripByteCounts = 279 StripOffsets = 273 SubfileType = 255 SubjectArea = 102932 SubjectDistance = 102918 SubjectDistanceRange = 107532 SubjectLocation = 107028 SubsecTime = 103056 SubsecTimeDigitized = 103058 SubsecTimeOriginal = 103057 T4Options = 292 T6Options = 293 TargetPrinter = 337 Threshholding = 263 ThumbnailCompression = 262403 ThumbnailImageLength = 262401 ThumbnailImageWidth = 262400 ThumbnailOrientation = 262418 ThumbnailResolutionUnit = 262440 ThumbnailXResolution = 262426 ThumbnailYResolution = 262427 TileByteCounts = 325 TileLength = 323 TileOffsets = 324 TileWidth = 322 TransferFunction = 301 TransferRange = 342 UserComment = 103046 WhiteBalance = 107523 WhitePoint = 318 XPosition = 286 XResolution = 282 XmpMetadata = 700 XpAuthor = 40093 XpComment = 40092 XpKeywords = 40094 XpSubject = 40095 XpTitle = 40091 YCbCrCoefficients = 529 YCbCrPositioning = 531 YCbCrSubSampling = 530 YPosition = 287 YResolution = 283"
  },
  "api/CompactExifLib.ExifTagId.html": {
    "href": "api/CompactExifLib.ExifTagId.html",
    "title": "Enum ExifTagId | VintageStory API",
    "keywords": "Enum ExifTagId Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifTagId Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ApertureValue = 37378 Artist = 315 BitsPerSample = 258 BodySerialNumber = 42033 BrightnessValue = 37379 CameraOwnerName = 42032 CellLength = 265 CellWidth = 264 CfaPattern = 41730 ColorMap = 320 ColorSpace = 40961 ComponentsConfiguration = 37121 CompressedBitsPerPixel = 37122 Compression = 259 Contrast = 41992 Copyright = 33432 CustomRendered = 41985 DateTime = 306 DateTimeDigitized = 36868 DateTimeOriginal = 36867 DeviceSettingDescription = 41995 DigitalZoomRatio = 41988 DocumentName = 269 DotRange = 336 ExifIfdPointer = 34665 ExifVersion = 36864 ExposureBiasValue = 37380 ExposureIndex = 41493 ExposureMode = 41986 ExposureProgram = 34850 ExposureTime = 33434 ExtraSamples = 338 FNumber = 33437 FileSource = 41728 FillOrder = 266 Flash = 37385 FlashEnergy = 41483 FlashPixVersion = 40960 FocalLength = 37386 FocalLengthIn35mmFilm = 41989 FocalPlaneResolutionUnit = 41488 FocalPlaneXResolution = 41486 FocalPlaneYResolution = 41487 FreeByteCounts = 289 FreeOffsets = 288 GainControl = 41991 GpsAltitude = 6 GpsAltitudeRef = 5 GpsAreaInformation = 28 GpsDateStamp = 29 GpsDestBearing = 24 GpsDestBearingRef = 23 GpsDestDistance = 26 GpsDestDistanceRef = 25 GpsDestLatitude = 20 GpsDestLatitudeRef = 19 GpsDestLongitude = 22 GpsDestLongitudeRef = 21 GpsDifferential = 30 GpsDop = 11 GpsHPositioningError = 31 GpsImgDirection = 17 GpsImgDirectionRef = 16 GpsInfoIfdPointer = 34853 GpsLatitude = 2 GpsLatitudeRef = 1 GpsLongitude = 4 GpsLongitudeRef = 3 GpsMapDatum = 18 GpsMeasureMode = 10 GpsProcessingMethod = 27 GpsSatellites = 8 GpsSpeed = 13 GpsSpeedRef = 12 GpsStatus = 9 GpsTimestamp = 7 GpsTrack = 15 GpsTrackRef = 14 GpsVersionId = 0 GrayResponseCurve = 291 GrayResponseUnit = 290 HalftoneHints = 321 HostComputer = 316 ImageDescription = 270 ImageLength = 257 ImageUniqueId = 42016 ImageWidth = 256 InkNames = 333 InkSet = 332 InteroperabilityIfdPointer = 40965 InteroperabilityIndex = 1 InteroperabilityVersion = 2 IptcMetadata = 33723 IsoSpeed = 34867 IsoSpeedLatitudeyyy = 34868 IsoSpeedLatitudezzz = 34869 IsoSpeedRatings = 34855 JpegInterchangeFormat = 513 JpegInterchangeFormatLength = 514 LensMake = 42035 LensModel = 42036 LensSerialNumber = 42037 LensSpecification = 42034 LightSource = 37384 Make = 271 MakerNote = 37500 MaxApertureValue = 37381 MaxSampleValue = 281 MeteringMode = 37383 MinSampleValue = 280 Model = 272 NewSubfileType = 254 NumberOfInks = 334 Oecf = 34856 OffsetSchema = 59933 OffsetTime = 36880 OffsetTimeDigitized = 36882 OffsetTimeOriginal = 36881 Orientation = 274 Padding = 59932 PageName = 285 PageNumber = 297 PhotographicSensitivity = 34855 PhotometricInterpretation = 262 PixelXDimension = 40962 PixelYDimension = 40963 PlanarConfiguration = 284 Predictor = 317 PrimaryChromaticities = 319 RecommendedExposureIndex = 34866 ReferenceBlackWhite = 532 RelatedSoundFile = 40964 ResolutionUnit = 296 RowsPerStrip = 278 SMaxSampleValue = 341 SMinSampleValue = 340 SampleFormat = 339 SamplesPerPixel = 277 Saturation = 41993 SceneCaptureType = 41990 SceneType = 41729 SensingMethod = 41495 SensitivityType = 34864 Sharpness = 41994 ShutterSpeedValue = 37377 Software = 305 SpatialFrequencyResponse = 41484 SpectralSensitivity = 34852 StandardOutputSensitivity = 34865 StripByteCounts = 279 StripOffsets = 273 SubfileType = 255 SubjectArea = 37396 SubjectDistance = 37382 SubjectDistanceRange = 41996 SubjectLocation = 41492 SubsecTime = 37520 SubsecTimeDigitized = 37522 SubsecTimeOriginal = 37521 T4Options = 292 T6Options = 293 TargetPrinter = 337 Threshholding = 263 TileByteCounts = 325 TileLength = 323 TileOffsets = 324 TileWidth = 322 TransferFunction = 301 TransferRange = 342 UserComment = 37510 WhiteBalance = 41987 WhitePoint = 318 XPosition = 286 XResolution = 282 XmpMetadata = 700 XpAuthor = 40093 XpComment = 40092 XpKeywords = 40094 XpSubject = 40095 XpTitle = 40091 YCbCrCoefficients = 529 YCbCrPositioning = 531 YCbCrSubSampling = 530 YPosition = 287 YResolution = 283"
  },
  "api/CompactExifLib.ExifTagType.html": {
    "href": "api/CompactExifLib.ExifTagType.html",
    "title": "Enum ExifTagType | VintageStory API",
    "keywords": "Enum ExifTagType Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ExifTagType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Ascii = 2 Byte = 1 Double = 12 Float = 11 SByte = 6 SLong = 9 SRational = 10 SShort = 8 ULong = 4 URational = 5 UShort = 3 Undefined = 7"
  },
  "api/CompactExifLib.GeoCoordinate.html": {
    "href": "api/CompactExifLib.GeoCoordinate.html",
    "title": "Struct GeoCoordinate | VintageStory API",
    "keywords": "Struct GeoCoordinate Namespace CompactExifLib Assembly VintagestoryAPI.dll public struct GeoCoordinate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CardinalPoint public char CardinalPoint Field Value char Degree public decimal Degree Field Value decimal Minute public decimal Minute Field Value decimal Second public decimal Second Field Value decimal Methods FromDecimal(decimal, bool) public static GeoCoordinate FromDecimal(decimal Value, bool IsLatitude) Parameters Value decimal IsLatitude bool Returns GeoCoordinate ToDecimal(GeoCoordinate) public static decimal ToDecimal(GeoCoordinate Value) Parameters Value GeoCoordinate Returns decimal"
  },
  "api/CompactExifLib.ImageFileBlock.html": {
    "href": "api/CompactExifLib.ImageFileBlock.html",
    "title": "Enum ImageFileBlock | VintageStory API",
    "keywords": "Enum ImageFileBlock Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ImageFileBlock Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Exif = 1 Iptc = 2 JpegComment = 4 PngDateChanged = 6 PngMetaData = 5 Unknown = 0 Xmp = 3"
  },
  "api/CompactExifLib.ImageType.html": {
    "href": "api/CompactExifLib.ImageType.html",
    "title": "Enum ImageType | VintageStory API",
    "keywords": "Enum ImageType Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum ImageType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Jpeg = 1 Png = 3 Tiff = 2 Unknown = 0"
  },
  "api/CompactExifLib.StrCoding.html": {
    "href": "api/CompactExifLib.StrCoding.html",
    "title": "Enum StrCoding | VintageStory API",
    "keywords": "Enum StrCoding Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum StrCoding Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields IdCode_UsAscii = 216735 IdCode_Utf16 = 197808 IdCode_WestEu = 197860 UsAscii = 20127 UsAscii_Undef = 85663 Utf16Le_Byte = 132272 Utf8 = 65001 WestEuropeanWin = 1252"
  },
  "api/CompactExifLib.StrCodingFormat.html": {
    "href": "api/CompactExifLib.StrCodingFormat.html",
    "title": "Enum StrCodingFormat | VintageStory API",
    "keywords": "Enum StrCodingFormat Namespace CompactExifLib Assembly VintagestoryAPI.dll Open in GitHub public enum StrCodingFormat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields TypeAscii = 0 TypeByte = 131072 TypeUndefined = 65536 TypeUndefinedWithIdCode = 196608"
  },
  "api/CompactExifLib.html": {
    "href": "api/CompactExifLib.html",
    "title": "Namespace CompactExifLib | VintageStory API",
    "keywords": "Namespace CompactExifLib Classes ExifData Open in GitHub ExifException Open in GitHub Structs ExifRational GeoCoordinate Enums ExifByteOrder Open in GitHub ExifDateFormat Open in GitHub ExifErrCode Open in GitHub ExifIfd Open in GitHub ExifLoadOptions Open in GitHub ExifSaveOptions Open in GitHub ExifTag Open in GitHub ExifTagId Open in GitHub ExifTagType Open in GitHub ImageFileBlock Open in GitHub ImageType Open in GitHub StrCoding Open in GitHub StrCodingFormat Open in GitHub"
  },
  "api/ProperVersion.SemVer.html": {
    "href": "api/ProperVersion.SemVer.html",
    "title": "Class SemVer | VintageStory API",
    "keywords": "Class SemVer Namespace ProperVersion Assembly VintagestoryAPI.dll Implementation of Semantic Verisoning standard, version 2.0.0. See https://semver.org/ for specifications. Open in GitHub public class SemVer : IComparable<SemVer>, IEquatable<SemVer> Inheritance object SemVer Implements IComparable<SemVer> IEquatable<SemVer> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SemVer(int, int, int) public SemVer(int major, int minor, int patch) Parameters major int minor int patch int SemVer(int, int, int, string, string) public SemVer(int major, int minor, int patch, string preRelease = \"\", string buildMetadata = \"\") Parameters major int minor int patch int preRelease string buildMetadata string SemVer(int, int, int, string[], string[]) public SemVer(int major, int minor, int patch, string[] preReleaseIdentifiers = null, string[] buildMetadataIdentifiers = null) Parameters major int minor int patch int preReleaseIdentifiers string[] buildMetadataIdentifiers string[] Properties BuildMetadata public string BuildMetadata { get; } Property Value string BuildMetadataIdentifiers public string[] BuildMetadataIdentifiers { get; } Property Value string[] Major public int Major { get; } Property Value int Minor public int Minor { get; } Property Value int Patch public int Patch { get; } Property Value int PreRelease public string PreRelease { get; } Property Value string PreReleaseIdentifiers public string[] PreReleaseIdentifiers { get; } Property Value string[] Methods Compare(SemVer, SemVer) public static int Compare(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns int CompareTo(SemVer) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(SemVer other) Parameters other SemVer An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Equals(SemVer) Indicates whether the current object is equal to another object of the same type. public bool Equals(SemVer other) Parameters other SemVer An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Parse(string) Converts the specified string representation of a semantic version to its SemVer equivalent. public static SemVer Parse(string s) Parameters s string Returns SemVer Exceptions ArgumentNullException Thrown if the specified string is null. FormatException Thrown if the specified string doesn't contain a proper properly formatted semantic version. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TryParse(string, out SemVer) Tries to convert the specified string representation of a semantic version to its SemVer equivalent, returning true if successful. public static bool TryParse(string s, out SemVer result) Parameters s string result SemVer When this method returns, contains a valid, non-null SemVer, If the conversion failed, this is set to the parser's best guess. Returns bool Exceptions ArgumentNullException Thrown if the specified string is null. TryParse(string, out SemVer, out string) Tries to convert the specified string representation of a semantic version to its SemVer equivalent, returning true if successful. public static bool TryParse(string s, out SemVer result, out string error) Parameters s string result SemVer When this method returns, contains a valid, non-null SemVer, If the conversion failed, this is set to the method's best guess. error string When this method returns, contains the first error describing why the conversion failed, or null if it succeeded. Returns bool Exceptions ArgumentNullException Thrown if the specified string is null. Operators operator ==(SemVer, SemVer) public static bool operator ==(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns bool operator >(SemVer, SemVer) public static bool operator >(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns bool operator >=(SemVer, SemVer) public static bool operator >=(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns bool operator !=(SemVer, SemVer) public static bool operator !=(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns bool operator <(SemVer, SemVer) public static bool operator <(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns bool operator <=(SemVer, SemVer) public static bool operator <=(SemVer left, SemVer right) Parameters left SemVer right SemVer Returns bool"
  },
  "api/ProperVersion.html": {
    "href": "api/ProperVersion.html",
    "title": "Namespace ProperVersion | VintageStory API",
    "keywords": "Namespace ProperVersion Classes SemVer Implementation of Semantic Verisoning standard, version 2.0.0. See https://semver.org/ for specifications. Open in GitHub"
  },
  "api/Vintagestory.API.AddDocumentationPropertyAttribute.html": {
    "href": "api/Vintagestory.API.AddDocumentationPropertyAttribute.html",
    "title": "Class AddDocumentationPropertyAttribute | VintageStory API",
    "keywords": "Class AddDocumentationPropertyAttribute Namespace Vintagestory.API Assembly VintagestoryAPI.dll Adds a new property in the DocFX JSON documentation. Useful for attribute types which do not store JSON properties as variables. Properties need to be serializable by DocFX, hence why they're all strings. Sorry about that. Open in GitHub [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class AddDocumentationPropertyAttribute : Attribute Inheritance object Attribute AddDocumentationPropertyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AddDocumentationPropertyAttribute(string, string, string, string, string, bool) Adds a new property in the DocFX JSON documentation. Useful for attribute types which do not store JSON properties as variables. Properties need to be serializable by DocFX, hence why they're all strings. Sorry about that. public AddDocumentationPropertyAttribute(string name, string summary, string typeWithFullNamespace, string requiredStatus, string defaultStatus, bool attribute = false) Parameters name string The name of the property in DocFX. summary string The summary of the property in DocFX. typeWithFullNamespace string The name of the type, along with its full namespace. e.g. \"System.Single\" or \"VintageStory.API.Common.CompositeShape\". requiredStatus string The text to put inside the \"required\" tag in DocFX. defaultStatus string The text to put inside the \"default\" tag in DocFX. Use an empty string for none. attribute bool"
  },
  "api/Vintagestory.API.Client.AvailableCodec.html": {
    "href": "api/Vintagestory.API.Client.AvailableCodec.html",
    "title": "Class AvailableCodec | VintageStory API",
    "keywords": "Class AvailableCodec Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class AvailableCodec Inheritance object AvailableCodec Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code public string Code Field Value string Name public string Name Field Value string"
  },
  "api/Vintagestory.API.Client.BakedCompositeTexture.html": {
    "href": "api/Vintagestory.API.Client.BakedCompositeTexture.html",
    "title": "Class BakedCompositeTexture | VintageStory API",
    "keywords": "Class BakedCompositeTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll An expanded, atlas-friendly version of a CompositeTexture Open in GitHub public class BakedCompositeTexture Inheritance object BakedCompositeTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BakedName The Base name and Overlay concatenated (if there was any defined) public AssetLocation BakedName Field Value AssetLocation BakedTiles If non-null also contains BakedName public BakedCompositeTexture[] BakedTiles Field Value BakedCompositeTexture[] BakedVariants If non-null also contains BakedName public BakedCompositeTexture[] BakedVariants Field Value BakedCompositeTexture[] TextureFilenames The base name and overlays as array public AssetLocation[] TextureFilenames Field Value AssetLocation[] TextureSubId Unique identifier for this texture public int TextureSubId Field Value int TilesWidth public int TilesWidth Field Value int Methods GetTiledTexturesSelector(BakedCompositeTexture[], int, int, int, int) For tiled textures, returns the selector index for which one of the tiles to use, for the given x,y,z position and tileSide public static int GetTiledTexturesSelector(BakedCompositeTexture[] tiles, int tileSide, int posX, int posY, int posZ) Parameters tiles BakedCompositeTexture[] tileSide int posX int posY int posZ int Returns int"
  },
  "api/Vintagestory.API.Client.BlendedOverlayTexture.html": {
    "href": "api/Vintagestory.API.Client.BlendedOverlayTexture.html",
    "title": "Class BlendedOverlayTexture | VintageStory API",
    "keywords": "Class BlendedOverlayTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Defines a texture to be overlayed on another texture. Open in GitHub [DocumentAsJson] public class BlendedOverlayTexture Inheritance object BlendedOverlayTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Base The path to the texture to use as an overlay. [DocumentAsJson] public AssetLocation Base Field Value AssetLocation BlendMode The type of blend for each pixel. [DocumentAsJson] public EnumColorBlendMode BlendMode Field Value EnumColorBlendMode Methods Clone() public BlendedOverlayTexture Clone() Returns BlendedOverlayTexture ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. ToString(StringBuilder) public void ToString(StringBuilder sb) Parameters sb StringBuilder"
  },
  "api/Vintagestory.API.Client.BlockChangedDelegate.html": {
    "href": "api/Vintagestory.API.Client.BlockChangedDelegate.html",
    "title": "Delegate BlockChangedDelegate | VintageStory API",
    "keywords": "Delegate BlockChangedDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll OldBlock param may be null! public delegate void BlockChangedDelegate(BlockPos pos, Block oldBlock) Parameters pos BlockPos oldBlock Block Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.CairoFont.html": {
    "href": "api/Vintagestory.API.Client.CairoFont.html",
    "title": "Class CairoFont | VintageStory API",
    "keywords": "Class CairoFont Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Represent a font with sizing and styling for use in rendering text Open in GitHub public class CairoFont : FontConfig, IDisposable Inheritance object FontConfig CairoFont Implements IDisposable Inherited Members FontConfig.UnscaledFontsize FontConfig.Fontname FontConfig.FontWeight FontConfig.Color FontConfig.StrokeColor FontConfig.StrokeWidth object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CairoFont() Creates an empty CairoFont instance. public CairoFont() CairoFont(double, string) Creates a CairoFont object. public CairoFont(double unscaledFontSize, string fontName) Parameters unscaledFontSize double The size of the font before scaling is applied. fontName string The name of the font. CairoFont(double, string, double[], double[]) Creates a CairoFont object public CairoFont(double unscaledFontSize, string fontName, double[] color, double[] strokeColor = null) Parameters unscaledFontSize double The size of the font before scaling is applied. fontName string The name of the font. color double[] The color of the font. strokeColor double[] The color for the stroke of the font. (Default: Null) CairoFont(FontConfig) Creates a pre-populated CairoFont instance. public CairoFont(FontConfig config) Parameters config FontConfig The configuration for the CairoFont Fields FontMeasuringContext The static Context for all Cairo Fonts. public static Context FontMeasuringContext Field Value Context LineHeightMultiplier public double LineHeightMultiplier Field Value double Orientation public EnumTextOrientation Orientation Field Value EnumTextOrientation RenderTwice Whether or not the font is rendered twice. public bool RenderTwice Field Value bool Slant public FontSlant Slant Field Value FontSlant Methods AutoBoxSize(string, ElementBounds, bool) Adjust the bounds so that it fits given text in one line public void AutoBoxSize(string text, ElementBounds bounds, bool onlyGrow = false) Parameters text string The text to adjust bounds ElementBounds The bounds to adjust the text to. onlyGrow bool If true, the box will not be made smaller AutoFontSize(string, ElementBounds, bool) Adjust font size so that it fits given bounds public void AutoFontSize(string text, ElementBounds bounds, bool onlyShrink = true) Parameters text string The text of the object. bounds ElementBounds The bounds of the element where the font is displayed. onlyShrink bool ButtonPressedText() Creates a text preset for when the button is pressed. public static CairoFont ButtonPressedText() Returns CairoFont The text preset for a pressed button. ButtonText() Creates a Button Text preset. public static CairoFont ButtonText() Returns CairoFont The button text preset. Clone() Clone function. Creates a duplicate of this Cairofont. public CairoFont Clone() Returns CairoFont The duplicate font. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetFontExtents() Gets the font's extents. public FontExtents GetFontExtents() Returns FontExtents The FontExtents for this particular font. GetTextExtents(string) Gets the extents of the text. public TextExtents GetTextExtents(string text) Parameters text string The text to extend. Returns TextExtents The Text extends for this font with this text. SetupContext(Context) Sets up the context. Must be executed in the main thread, as it is not thread safe. public void SetupContext(Context ctx) Parameters ctx Context The context to set up the CairoFont with. SmallButtonText(EnumButtonStyle) public static CairoFont SmallButtonText(EnumButtonStyle style = EnumButtonStyle.Normal) Parameters style EnumButtonStyle Returns CairoFont SmallTextInput() Creates a text oreset for smaller text input fields. public static CairoFont SmallTextInput() Returns CairoFont The smaller text input preset. TextInput() Creates a text preset for text input fields. public static CairoFont TextInput() Returns CairoFont The text field input preset. WhiteDetailText() Creates a white text for details. public static CairoFont WhiteDetailText() Returns CairoFont A white text for details. WhiteMediumText() Creates a white text for medium dialog. public static CairoFont WhiteMediumText() Returns CairoFont The white text for medium dialog. WhiteSmallText() Creates a white text for small dialogs. public static CairoFont WhiteSmallText() Returns CairoFont The white text for small dialogs WhiteSmallishText() Creates a white text for smallish dialogs. public static CairoFont WhiteSmallishText() Returns CairoFont The white text for small dialogs. WhiteSmallishText(string) Creates a white text for smallish dialogs, using the specified base font public static CairoFont WhiteSmallishText(string baseFont) Parameters baseFont string Returns CairoFont WithColor(double[]) Sets the color of the CairoFont. public CairoFont WithColor(double[] color) Parameters color double[] The color to set. Returns CairoFont WithFont(string) public CairoFont WithFont(string fontname) Parameters fontname string Returns CairoFont WithFontSize(float) Sets the base size of the CairoFont. public CairoFont WithFontSize(float fontSize) Parameters fontSize float The new font size Returns CairoFont WithLineHeightMultiplier(double) public CairoFont WithLineHeightMultiplier(double lineHeightMul) Parameters lineHeightMul double Returns CairoFont WithOrientation(EnumTextOrientation) public CairoFont WithOrientation(EnumTextOrientation orientation) Parameters orientation EnumTextOrientation Returns CairoFont WithRenderTwice() Sets the font to render twice. public CairoFont WithRenderTwice() Returns CairoFont WithSlant(FontSlant) public CairoFont WithSlant(FontSlant slant) Parameters slant FontSlant Returns CairoFont WithStroke(double[], double) public CairoFont WithStroke(double[] color, double width) Parameters color double[] width double Returns CairoFont WithWeight(FontWeight) Adds a weight to the font. public CairoFont WithWeight(FontWeight weight) Parameters weight FontWeight The weight of the font. Returns CairoFont"
  },
  "api/Vintagestory.API.Client.CanClickSlotDelegate.html": {
    "href": "api/Vintagestory.API.Client.CanClickSlotDelegate.html",
    "title": "Delegate CanClickSlotDelegate | VintageStory API",
    "keywords": "Delegate CanClickSlotDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate bool CanClickSlotDelegate(int slotID) Parameters slotID int Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.CaveMusicTrack.html": {
    "href": "api/Vintagestory.API.Client.CaveMusicTrack.html",
    "title": "Class CaveMusicTrack | VintageStory API",
    "keywords": "Class CaveMusicTrack Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Represent a dynamically composed track made out of individual small pieces of music mixed together defined by specific rules Requirements: Start/Stop Multiple Trackpieces Set their volumne dynamically Decide which Trackpieces to play Allow individual rules per Trackpiece Specific examples: Play Thunder ambient only if thunderlevel above 10 Thunder ambient volume based on thunderlevel (between 0.3 and 1.1?) Play Aquatic Drone only when y below 60 Play Deep Drone only when y below 50 Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class CaveMusicTrack : IMusicTrack Inheritance object CaveMusicTrack Implements IMusicTrack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ShouldPlayCaveMusic public static bool ShouldPlayCaveMusic Field Value bool Properties IsActive Is the track active? public bool IsActive { get; } Property Value bool Name The name of the music track. public string Name { get; } Property Value string PositionString public string PositionString { get; } Property Value string StartPriority The start priority of the track. A higher priority will leave active tracks playing. public float StartPriority { get; } Property Value float Methods BeginPlay(TrackedPlayerProperties) Starts playing the track. public void BeginPlay(TrackedPlayerProperties props) Parameters props TrackedPlayerProperties The properties of the current track. BeginSort() Called before sorting by start priority happens public void BeginSort() ContinuePlay(float, TrackedPlayerProperties) Do we continue playing this track? public bool ContinuePlay(float dt, TrackedPlayerProperties props) Parameters dt float Delta time or Change in time props TrackedPlayerProperties The properties of the current track. Returns bool Are we still playing or do we stop? FadeOut(float, Action) Fade out the track to end. public void FadeOut(float seconds, Action onFadedOut = null) Parameters seconds float Seconds to fade out across. onFadedOut Action Delegate to have happen once the fade-out is done. FastForward(float) public void FastForward(float seconds) Parameters seconds float Initialize(IAssetManager, ICoreClientAPI, IMusicEngine) Initializes the music track public void Initialize(IAssetManager assetManager, ICoreClientAPI capi, IMusicEngine musicEngine) Parameters assetManager IAssetManager the global Asset Manager capi ICoreClientAPI The Core Client API musicEngine IMusicEngine ShouldPlay(TrackedPlayerProperties, ClimateCondition, BlockPos) Should the game play this track? public bool ShouldPlay(TrackedPlayerProperties props, ClimateCondition conds, BlockPos pos) Parameters props TrackedPlayerProperties The properties of the current track. conds ClimateCondition pos BlockPos Returns bool Do we play this track? UpdateVolume() Updates the volume of the track. public void UpdateVolume()"
  },
  "api/Vintagestory.API.Client.ChatLineDelegate.html": {
    "href": "api/Vintagestory.API.Client.ChatLineDelegate.html",
    "title": "Delegate ChatLineDelegate | VintageStory API",
    "keywords": "Delegate ChatLineDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void ChatLineDelegate(int groupId, string message, EnumChatType chattype, string data) Parameters groupId int message string chattype EnumChatType data string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ClearFloatTextComponent.html": {
    "href": "api/Vintagestory.API.Client.ClearFloatTextComponent.html",
    "title": "Class ClearFloatTextComponent | VintageStory API",
    "keywords": "Class ClearFloatTextComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class ClearFloatTextComponent : RichTextComponent Inheritance object RichTextComponentBase RichTextComponent ClearFloatTextComponent Inherited Members RichTextComponent.textUtil RichTextComponent.linebreak RichTextComponent.DisplayText RichTextComponent.Font RichTextComponent.Lines RichTextComponent.init() RichTextComponent.GetFontOrientOffsetX() RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseDown(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.Dispose() RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ClearFloatTextComponent(ICoreClientAPI, float) public ClearFloatTextComponent(ICoreClientAPI api, float unScaleMarginTop = 0) Parameters api ICoreClientAPI unScaleMarginTop float Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult True when longer than 1 line ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context Context of the text component. surface ImageSurface The surface of the image. RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double"
  },
  "api/Vintagestory.API.Client.ClientChatLineDelegate.html": {
    "href": "api/Vintagestory.API.Client.ClientChatLineDelegate.html",
    "title": "Delegate ClientChatLineDelegate | VintageStory API",
    "keywords": "Delegate ClientChatLineDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void ClientChatLineDelegate(int groupId, ref string message, ref EnumHandling handled) Parameters groupId int message string handled EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ColorMapData.html": {
    "href": "api/Vintagestory.API.Client.ColorMapData.html",
    "title": "Struct ColorMapData | VintageStory API",
    "keywords": "Struct ColorMapData Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public struct ColorMapData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ColorMapData(byte, byte, byte, byte, bool) public ColorMapData(byte seasonMapIndex, byte climateMapIndex, byte temperature, byte rainFall, bool frostable) Parameters seasonMapIndex byte climateMapIndex byte temperature byte rainFall byte frostable bool ColorMapData(int) public ColorMapData(int value) Parameters value int ColorMapData(int, int, int, int, bool) public ColorMapData(int seasonMapIndex, int climateMapIndex, int temperature, int rainFall, bool frostable) Parameters seasonMapIndex int climateMapIndex int temperature int rainFall int frostable bool Fields Value public int Value Field Value int Properties ClimateMapIndex public byte ClimateMapIndex { get; } Property Value byte FrostableBit public byte FrostableBit { get; } Property Value byte Rainfall public byte Rainfall { get; } Property Value byte SeasonMapIndex public byte SeasonMapIndex { get; } Property Value byte Temperature public byte Temperature { get; } Property Value byte Methods FromValues(byte, byte, byte, byte, bool) public static int FromValues(byte seasonMapIndex, byte climateMapIndex, byte temperature, byte rainFall, bool frostable) Parameters seasonMapIndex byte climateMapIndex byte temperature byte rainFall byte frostable bool Returns int FromValues(byte, byte, byte, byte, bool, int) public static int FromValues(byte seasonMapIndex, byte climateMapIndex, byte temperature, byte rainFall, bool frostable, int extraColorBits) Parameters seasonMapIndex byte climateMapIndex byte temperature byte rainFall byte frostable bool extraColorBits int Returns int"
  },
  "api/Vintagestory.API.Client.CompositeTexture.html": {
    "href": "api/Vintagestory.API.Client.CompositeTexture.html",
    "title": "Class CompositeTexture | VintageStory API",
    "keywords": "Class CompositeTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds data about a texture. Also allows textures to be overlayed on top of one another. Open in GitHub [DocumentAsJson] public class CompositeTexture Inheritance object CompositeTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"textures\": { \"charcoal\": { \"base\": \"block/coal/charcoal\" }, \"coke\": { \"base\": \"block/coal/coke\" }, \"ore-anthracite\": { \"base\": \"block/coal/anthracite\" }, \"ore-lignite\": { \"base\": \"block/coal/lignite\" }, \"ore-bituminouscoal\": { \"base\": \"block/coal/bituminous\" }, \"ember\": { \"base\": \"block/coal/ember\" } }, \"textures\": { \"ore\": { \"base\": \"block/stone/rock/{rock}1\", \"overlays\": [ \"block/stone/ore/{ore}1\" ] } }, Connected textures example (See https://discord.com/channels/302152934249070593/479736466453561345/1134187385501007962) \"textures\": { \"all\": { \"base\": \"block/stone/cobblestone/tiling/1\", \"tiles\": [ { \"base\": \"block/stone/cobblestone/tiling/*\" } ], \"tilesWidth\": 4 } } Constructors CompositeTexture() Creates a new empty composite texture public CompositeTexture() CompositeTexture(AssetLocation) Creates a new empty composite texture with given base texture public CompositeTexture(AssetLocation Base) Parameters Base AssetLocation Fields Alpha Can be used to modify the opacity of the texture. 255 is fully opaque, 0 is fully transparent. [DocumentAsJson] public int Alpha Field Value int AlphaSeparator public const char AlphaSeparator = 'å' Field Value char AlphaSeparatorRegexSearch public const string AlphaSeparatorRegexSearch = \"å\\\\d+\" Field Value string Alternates The texture may consists of any amount of alternatives, one of which will be randomly chosen when the block is placed in the world. [DocumentAsJson] public CompositeTexture[] Alternates Field Value CompositeTexture[] Baked BakedCompositeTexture is an expanded, atlas friendly version of CompositeTexture. Required during texture atlas generation. public BakedCompositeTexture Baked Field Value BakedCompositeTexture Base The basic texture for this composite texture [DocumentAsJson] public AssetLocation Base Field Value AssetLocation BlendedOverlays A set of textures to overlay above this texture. The base texture may be overlayed with any quantity of textures. These are baked together during texture atlas creation. [DocumentAsJson] public BlendedOverlayTexture[] BlendedOverlays Field Value BlendedOverlayTexture[] BlendmodeSeparator public const char BlendmodeSeparator = '~' Field Value char OverlaysSeparator public const string OverlaysSeparator = \"++\" Field Value string Rotation Rotation of the texture may only be a multiple of 90 [DocumentAsJson] public int Rotation Field Value int Tiles A way of basic support for connected textures. Textures should be named numerically from 1 to TilesWidth squared. E.g., if TilesWidth is 3, the order follows the pattern of: 1 2 3 4 5 6 7 8 9 [DocumentAsJson] public CompositeTexture[] Tiles Field Value CompositeTexture[] TilesWidth The number of tiles in one direction that make up the full connected textures defined in Tiles. [DocumentAsJson] public int TilesWidth Field Value int WildCardNoFiles public AssetLocation WildCardNoFiles Field Value AssetLocation basicTexturesCache [ThreadStatic] public static Dictionary<AssetLocation, CompositeTexture> basicTexturesCache Field Value Dictionary<AssetLocation, CompositeTexture> wildcardsCache [ThreadStatic] public static Dictionary<AssetLocation, List<IAsset>> wildcardsCache Field Value Dictionary<AssetLocation, List<IAsset>> Properties AnyWildCardNoFiles public AssetLocation AnyWildCardNoFiles { get; } Property Value AssetLocation Overlays Obsolete. Use BlendedOverlays instead. [DocumentAsJson] public AssetLocation[] Overlays { set; } Property Value AssetLocation[] Methods Bake(IAssetManager) Expands the Composite Texture to a texture atlas friendly version and populates the Baked field. This method is called by the texture atlas managers. Won't have any effect if called after the texture atlasses have been created. public void Bake(IAssetManager assetManager) Parameters assetManager IAssetManager Bake(IAssetManager, CompositeTexture) Expands a CompositeTexture to a texture atlas friendly version and populates the Baked field public static BakedCompositeTexture Bake(IAssetManager assetManager, CompositeTexture ct) Parameters assetManager IAssetManager ct CompositeTexture Returns BakedCompositeTexture Clone() Creates a deep copy of the texture public CompositeTexture Clone() Returns CompositeTexture FillPlaceholder(string, string) public void FillPlaceholder(string search, string replace) Parameters search string replace string IsBasic() Tests whether this is a basic CompositeTexture with an asset location only, no rotation, alpha, alternates or overlays public bool IsBasic() Returns bool RuntimeBake(ICoreClientAPI, ITextureAtlasAPI) Expands the Composite Texture to a texture atlas friendly version and populates the Baked field. This method can be called after the game world has loaded. public void RuntimeBake(ICoreClientAPI capi, ITextureAtlasAPI intoAtlas) Parameters capi ICoreClientAPI The Client API intoAtlas ITextureAtlasAPI The atlas to insert the baked texture. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. ToString(StringBuilder) public void ToString(StringBuilder sb) Parameters sb StringBuilder"
  },
  "api/Vintagestory.API.Client.ConfigItem.html": {
    "href": "api/Vintagestory.API.Client.ConfigItem.html",
    "title": "Class ConfigItem | VintageStory API",
    "keywords": "Class ConfigItem Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A config item for the GUIElementConfigList. Open in GitHub public class ConfigItem Inheritance object ConfigItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code The code of the config item. public string Code Field Value string Data public object Data Field Value object Key The name of the config item. public string Key Field Value string Type Item or title public EnumItemType Type Field Value EnumItemType Value the value of the config item. public string Value Field Value string error Has this particular config item errored? public bool error Field Value bool height The height of the config item. public double height Field Value double posY The y position of the config item. public double posY Field Value double"
  },
  "api/Vintagestory.API.Client.ConfigItemClickDelegate.html": {
    "href": "api/Vintagestory.API.Client.ConfigItemClickDelegate.html",
    "title": "Delegate ConfigItemClickDelegate | VintageStory API",
    "keywords": "Delegate ConfigItemClickDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void ConfigItemClickDelegate(int index, int indexWithoutTitles) Parameters index int indexWithoutTitles int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ContainedTextureSource.html": {
    "href": "api/Vintagestory.API.Client.ContainedTextureSource.html",
    "title": "Class ContainedTextureSource | VintageStory API",
    "keywords": "Class ContainedTextureSource Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Helper class for implementors of ITexPositionSource Open in GitHub public class ContainedTextureSource : ITexPositionSource Inheritance object ContainedTextureSource Implements ITexPositionSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ContainedTextureSource(ICoreClientAPI, ITextureAtlasAPI, Dictionary<string, AssetLocation>, string) public ContainedTextureSource(ICoreClientAPI capi, ITextureAtlasAPI targetAtlas, Dictionary<string, AssetLocation> textures, string sourceForErrorLogging) Parameters capi ICoreClientAPI targetAtlas ITextureAtlasAPI textures Dictionary<string, AssetLocation> sourceForErrorLogging string Fields Textures public Dictionary<string, AssetLocation> Textures Field Value Dictionary<string, AssetLocation> Properties AtlasSize This returns the size of the atlas this texture resides in. public Size2i AtlasSize { get; } Property Value Size2i this[string] public TextureAtlasPosition this[string textureCode] { get; } Parameters textureCode string Property Value TextureAtlasPosition Methods getOrCreateTexPos(AssetLocation) protected TextureAtlasPosition getOrCreateTexPos(AssetLocation texturePath) Parameters texturePath AssetLocation Returns TextureAtlasPosition"
  },
  "api/Vintagestory.API.Client.ContinousParticleSpawnTaskDelegate.html": {
    "href": "api/Vintagestory.API.Client.ContinousParticleSpawnTaskDelegate.html",
    "title": "Delegate ContinousParticleSpawnTaskDelegate | VintageStory API",
    "keywords": "Delegate ContinousParticleSpawnTaskDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Return false to stop spawning particles public delegate bool ContinousParticleSpawnTaskDelegate(float dt, IAsyncParticleManager manager) Parameters dt float manager IAsyncParticleManager Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.CreateTextureDelegate.html": {
    "href": "api/Vintagestory.API.Client.CreateTextureDelegate.html",
    "title": "Delegate CreateTextureDelegate | VintageStory API",
    "keywords": "Delegate CreateTextureDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate IBitmap CreateTextureDelegate() Returns IBitmap Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.CubeMeshUtil.html": {
    "href": "api/Vintagestory.API.Client.CubeMeshUtil.html",
    "title": "Class CubeMeshUtil | VintageStory API",
    "keywords": "Class CubeMeshUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class CubeMeshUtil Inheritance object CubeMeshUtil Derived ModelCubeUtilExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BaseCubeVertexIndices Can be used for any face if offseted correctly public static int[] BaseCubeVertexIndices Field Value int[] CloudSideShadings Top, Front/Left, Back/Right, Bottom public static float[] CloudSideShadings Field Value float[] CubeFaceIndices Cube face indices, in order: North, East, South, West, Up, Down. public static byte[] CubeFaceIndices Field Value byte[] CubeUvCoords UV Coords for every Vertex in a cube public static int[] CubeUvCoords Field Value int[] CubeVertexIndices Indices for every triangle in a cube public static int[] CubeVertexIndices Field Value int[] CubeVertices XYZ Vertex positions for every vertex in a cube. Origin is the cube middle point. public static int[] CubeVertices Field Value int[] DefaultBlockSideShadings Top, Front/Left, Back/Right, Bottom public static float[] DefaultBlockSideShadings Field Value float[] DefaultBlockSideShadingsByFacing Shadings by Blockfacing index public static float[] DefaultBlockSideShadingsByFacing Field Value float[] Methods GetCube() Returns a default 2x2x2 cube with xyz,uv,rgba and indices set - ready for upload to the graphics card public static MeshData GetCube() Returns MeshData GetCube(float, float, float, Vec3f) Same as GetCubeModelData but can define scale and translation. Scale is applied first. public static MeshData GetCube(float scaleX, float scaleY, float scaleZ, Vec3f translate) Parameters scaleX float scaleY float scaleZ float translate Vec3f Returns MeshData GetCube(float, float, Vec3f) Same as GetCubeModelData but can define scale and translation. Scale is applied first. public static MeshData GetCube(float scaleH, float scaleV, Vec3f translate) Parameters scaleH float scaleV float translate Vec3f Returns MeshData GetCubeFace(BlockFacing) Gets the face of a given cube. public static MeshData GetCubeFace(BlockFacing face) Parameters face BlockFacing The face you want to fetch in cardinal directions. Returns MeshData The mesh data for the cube's given face. GetCubeFace(BlockFacing, float, float, Vec3f) Gets the face of a given cube. public static MeshData GetCubeFace(BlockFacing face, float scaleH, float scaleV, Vec3f translate) Parameters face BlockFacing The face you want to fetch in cardinal directions. scaleH float The horizontal scale. scaleV float The vertical scale. translate Vec3f The translation desired. Returns MeshData The mesh data for the given parameters. GetCubeOnlyScaleXyz(float, float, Vec3f) Same as GetCubeModelData but can define scale and translation. Scale is applied first. public static MeshData GetCubeOnlyScaleXyz(float scaleH, float scaleV, Vec3f translate) Parameters scaleH float scaleV float translate Vec3f Returns MeshData GetShadedCubeRGBA(int, float[], bool) Returns a rgba byte array to be used for default shading on a standard cube, can supply the shading levels public static byte[] GetShadedCubeRGBA(int baseColor, float[] blockSideShadings, bool smoothShadedSides) Parameters baseColor int blockSideShadings float[] smoothShadedSides bool Returns byte[] GetShadedCubeRGBA(int[], bool) Returns a rgba byte array to be used for default shading on a standard cube public static byte[] GetShadedCubeRGBA(int[] colorSides, bool smoothShadedSides) Parameters colorSides int[] smoothShadedSides bool Returns byte[] ScaleCubeMesh(MeshData, float, float, float, Vec3f) Scales a mesh retrieced by GetCube() public static MeshData ScaleCubeMesh(MeshData modelData, float scaleX, float scaleY, float scaleZ, Vec3f translate) Parameters modelData MeshData scaleX float scaleY float scaleZ float translate Vec3f Returns MeshData SetXyzFacesAndPacketNormals(MeshData) public static void SetXyzFacesAndPacketNormals(MeshData mesh) Parameters mesh MeshData"
  },
  "api/Vintagestory.API.Client.CustomMeshDataPart-1.html": {
    "href": "api/Vintagestory.API.Client.CustomMeshDataPart-1.html",
    "title": "Class CustomMeshDataPart<T> | VintageStory API",
    "keywords": "Class CustomMeshDataPart<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds arbitrary mesh data for meshes to be used in a shader public abstract class CustomMeshDataPart<T> Type Parameters T The arbitrary type. Inheritance object CustomMeshDataPart<T> Derived CustomMeshDataPartByte CustomMeshDataPartFloat CustomMeshDataPartInt CustomMeshDataPartShort Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CustomMeshDataPart() Blank constructor. public CustomMeshDataPart() CustomMeshDataPart(int) Array initialization constructor. public CustomMeshDataPart(int arraySize) Parameters arraySize int the size of the typed Array. Fields BaseOffset Used as offset when doing a partial update on an existing buffer public int BaseOffset Field Value int Count Amout of values currently added public int Count Field Value int Instanced For instanced rendering public bool Instanced Field Value bool InterleaveOffsets Offset in bytes for each variable public int[] InterleaveOffsets Field Value int[] InterleaveSizes Amount of variable components for variable (i.e. 2, 3 for a vec2 and a vec3), valid values are 1, 2, 3 and 4 (limited by glVertexAttribPointer) public int[] InterleaveSizes Field Value int[] InterleaveStride Stride - Size in bytes of all values for one vertex public int InterleaveStride Field Value int StaticDraw Set to false if you intend to update the buffer very often (i.e. every frame) public bool StaticDraw Field Value bool Values The arbitrary data to be uploaded to the graphics card public T[] Values Field Value T[] Properties AllocationSize Size of the array that should be allocated on the graphics card. public int AllocationSize { get; } Property Value int BufferSize Size of the Values array public int BufferSize { get; } Property Value int Methods Add(T) Adds a value to the buffer. public void Add(T value) Parameters value T The value to add. Add(params T[]) Adds multiple values to the buffer. public void Add(params T[] values) Parameters values T[] The values being added. Add4(T) Adds the same value to the buffer 4 times - coded for performance. public void Add4(T value) Parameters value T The value to add. AutoAllocationSize() Use the element count as the allocation size (default behavior) public void AutoAllocationSize() EmptyClone(CustomMeshDataPart<T>) Sets a value from a given mesh data part. protected CustomMeshDataPart<T> EmptyClone(CustomMeshDataPart<T> cloned) Parameters cloned CustomMeshDataPart<T> the mesh data part for this type. Returns CustomMeshDataPart<T> GrowBuffer(int) Grows the buffer with a minimum. public void GrowBuffer(int growAtLeastBy = 1) Parameters growAtLeastBy int The minimum amount to grow the buffer by. SetAllocationSize(int) Lets you define your a self defined size to be allocated on the graphics card. If not called the allocation size will be the count of the Elements in the Array public void SetAllocationSize(int size) Parameters size int SetFrom(CustomMeshDataPart<T>) Sets a value from a given mesh data part. public void SetFrom(CustomMeshDataPart<T> meshdatapart) Parameters meshdatapart CustomMeshDataPart<T> the mesh data part for this type."
  },
  "api/Vintagestory.API.Client.CustomMeshDataPartByte.html": {
    "href": "api/Vintagestory.API.Client.CustomMeshDataPartByte.html",
    "title": "Class CustomMeshDataPartByte | VintageStory API",
    "keywords": "Class CustomMeshDataPartByte Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds arbitrary byte data for meshes to be used in the shader Open in GitHub public class CustomMeshDataPartByte : CustomMeshDataPart<byte> Inheritance object CustomMeshDataPart<byte> CustomMeshDataPartByte Inherited Members CustomMeshDataPart<byte>.Values CustomMeshDataPart<byte>.Count CustomMeshDataPart<byte>.BufferSize CustomMeshDataPart<byte>.AllocationSize CustomMeshDataPart<byte>.InterleaveSizes CustomMeshDataPart<byte>.InterleaveStride CustomMeshDataPart<byte>.InterleaveOffsets CustomMeshDataPart<byte>.Instanced CustomMeshDataPart<byte>.StaticDraw CustomMeshDataPart<byte>.BaseOffset CustomMeshDataPart<byte>.GrowBuffer(int) CustomMeshDataPart<byte>.Add(byte) CustomMeshDataPart<byte>.Add4(byte) CustomMeshDataPart<byte>.Add(params byte[]) CustomMeshDataPart<byte>.SetAllocationSize(int) CustomMeshDataPart<byte>.AutoAllocationSize() CustomMeshDataPart<byte>.SetFrom(CustomMeshDataPart<byte>) CustomMeshDataPart<byte>.EmptyClone(CustomMeshDataPart<byte>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CustomMeshDataPartByte() Empty Constructor. public CustomMeshDataPartByte() CustomMeshDataPartByte(int) Size initialization constructor. public CustomMeshDataPartByte(int size) Parameters size int Fields Conversion public DataConversion Conversion Field Value DataConversion Methods AddBytes(int) adds values to the bytes part per four bytes. public void AddBytes(int fourbytes) Parameters fourbytes int the integer mask of four separate bytes. Clone() Creates a clone of this collection of data parts. public CustomMeshDataPartByte Clone() Returns CustomMeshDataPartByte A clone of this collection of data parts. EmptyClone() public CustomMeshDataPartByte EmptyClone() Returns CustomMeshDataPartByte"
  },
  "api/Vintagestory.API.Client.CustomMeshDataPartFloat.html": {
    "href": "api/Vintagestory.API.Client.CustomMeshDataPartFloat.html",
    "title": "Class CustomMeshDataPartFloat | VintageStory API",
    "keywords": "Class CustomMeshDataPartFloat Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds arbitrary float data for meshes to be used in the shader Open in GitHub public class CustomMeshDataPartFloat : CustomMeshDataPart<float> Inheritance object CustomMeshDataPart<float> CustomMeshDataPartFloat Inherited Members CustomMeshDataPart<float>.Values CustomMeshDataPart<float>.Count CustomMeshDataPart<float>.BufferSize CustomMeshDataPart<float>.AllocationSize CustomMeshDataPart<float>.InterleaveSizes CustomMeshDataPart<float>.InterleaveStride CustomMeshDataPart<float>.InterleaveOffsets CustomMeshDataPart<float>.Instanced CustomMeshDataPart<float>.StaticDraw CustomMeshDataPart<float>.BaseOffset CustomMeshDataPart<float>.GrowBuffer(int) CustomMeshDataPart<float>.Add(float) CustomMeshDataPart<float>.Add4(float) CustomMeshDataPart<float>.Add(params float[]) CustomMeshDataPart<float>.SetAllocationSize(int) CustomMeshDataPart<float>.AutoAllocationSize() CustomMeshDataPart<float>.SetFrom(CustomMeshDataPart<float>) CustomMeshDataPart<float>.EmptyClone(CustomMeshDataPart<float>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CustomMeshDataPartFloat() Empty Constructor. public CustomMeshDataPartFloat() CustomMeshDataPartFloat(int) Size initialization constructor. public CustomMeshDataPartFloat(int arraySize) Parameters arraySize int Methods Clone() Creates a clone of this collection of data parts. public CustomMeshDataPartFloat Clone() Returns CustomMeshDataPartFloat A clone of this collection of data parts. EmptyClone() public CustomMeshDataPartFloat EmptyClone() Returns CustomMeshDataPartFloat"
  },
  "api/Vintagestory.API.Client.CustomMeshDataPartInt.html": {
    "href": "api/Vintagestory.API.Client.CustomMeshDataPartInt.html",
    "title": "Class CustomMeshDataPartInt | VintageStory API",
    "keywords": "Class CustomMeshDataPartInt Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds arbitrary int data for meshes to be used in the shader Open in GitHub public class CustomMeshDataPartInt : CustomMeshDataPart<int> Inheritance object CustomMeshDataPart<int> CustomMeshDataPartInt Inherited Members CustomMeshDataPart<int>.Values CustomMeshDataPart<int>.Count CustomMeshDataPart<int>.BufferSize CustomMeshDataPart<int>.AllocationSize CustomMeshDataPart<int>.InterleaveSizes CustomMeshDataPart<int>.InterleaveStride CustomMeshDataPart<int>.InterleaveOffsets CustomMeshDataPart<int>.Instanced CustomMeshDataPart<int>.StaticDraw CustomMeshDataPart<int>.BaseOffset CustomMeshDataPart<int>.GrowBuffer(int) CustomMeshDataPart<int>.Add(int) CustomMeshDataPart<int>.Add4(int) CustomMeshDataPart<int>.Add(params int[]) CustomMeshDataPart<int>.SetAllocationSize(int) CustomMeshDataPart<int>.AutoAllocationSize() CustomMeshDataPart<int>.SetFrom(CustomMeshDataPart<int>) CustomMeshDataPart<int>.EmptyClone(CustomMeshDataPart<int>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CustomMeshDataPartInt() Empty constructor. public CustomMeshDataPartInt() CustomMeshDataPartInt(int) Size initialization constructor. public CustomMeshDataPartInt(int size) Parameters size int Fields Conversion public DataConversion Conversion Field Value DataConversion Methods Clone() Creates a clone of this collection of data parts. public CustomMeshDataPartInt Clone() Returns CustomMeshDataPartInt A clone of this collection of data parts. EmptyClone() public CustomMeshDataPartInt EmptyClone() Returns CustomMeshDataPartInt"
  },
  "api/Vintagestory.API.Client.CustomMeshDataPartShort.html": {
    "href": "api/Vintagestory.API.Client.CustomMeshDataPartShort.html",
    "title": "Class CustomMeshDataPartShort | VintageStory API",
    "keywords": "Class CustomMeshDataPartShort Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds arbitrary short data for meshes to be used in the shader Open in GitHub public class CustomMeshDataPartShort : CustomMeshDataPart<short> Inheritance object CustomMeshDataPart<short> CustomMeshDataPartShort Inherited Members CustomMeshDataPart<short>.Values CustomMeshDataPart<short>.Count CustomMeshDataPart<short>.BufferSize CustomMeshDataPart<short>.AllocationSize CustomMeshDataPart<short>.InterleaveSizes CustomMeshDataPart<short>.InterleaveStride CustomMeshDataPart<short>.InterleaveOffsets CustomMeshDataPart<short>.Instanced CustomMeshDataPart<short>.StaticDraw CustomMeshDataPart<short>.BaseOffset CustomMeshDataPart<short>.GrowBuffer(int) CustomMeshDataPart<short>.Add(short) CustomMeshDataPart<short>.Add4(short) CustomMeshDataPart<short>.Add(params short[]) CustomMeshDataPart<short>.SetAllocationSize(int) CustomMeshDataPart<short>.AutoAllocationSize() CustomMeshDataPart<short>.SetFrom(CustomMeshDataPart<short>) CustomMeshDataPart<short>.EmptyClone(CustomMeshDataPart<short>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CustomMeshDataPartShort() Empty constructor. public CustomMeshDataPartShort() CustomMeshDataPartShort(int) Size initialization constructor. public CustomMeshDataPartShort(int size) Parameters size int Fields Conversion public DataConversion Conversion Field Value DataConversion Methods AddPackedUV(float, float) public void AddPackedUV(float u1, float v1) Parameters u1 float v1 float Clone() Creates a clone of this collection of data parts. public CustomMeshDataPartShort Clone() Returns CustomMeshDataPartShort A clone of this collection of data parts. EmptyClone() public CustomMeshDataPartShort EmptyClone() Returns CustomMeshDataPartShort"
  },
  "api/Vintagestory.API.Client.DamagedPerceptionEffect.html": {
    "href": "api/Vintagestory.API.Client.DamagedPerceptionEffect.html",
    "title": "Class DamagedPerceptionEffect | VintageStory API",
    "keywords": "Class DamagedPerceptionEffect Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class DamagedPerceptionEffect : PerceptionEffect Inheritance object PerceptionEffect DamagedPerceptionEffect Inherited Members PerceptionEffect.Code PerceptionEffect.PerceptionEffectId PerceptionEffect.Intensity PerceptionEffect.DurationHours PerceptionEffect.capi PerceptionEffect.ApplyToFpHand(Matrixf) PerceptionEffect.ApplyToTpPlayer(EntityPlayer, float[], float?) PerceptionEffect.NowDisabled() PerceptionEffect.NowActive(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DamagedPerceptionEffect(ICoreClientAPI) public DamagedPerceptionEffect(ICoreClientAPI capi) Parameters capi ICoreClientAPI Methods OnBeforeGameRender(float) public override void OnBeforeGameRender(float dt) Parameters dt float OnOwnPlayerDataReceived(EntityPlayer) public override void OnOwnPlayerDataReceived(EntityPlayer player) Parameters player EntityPlayer"
  },
  "api/Vintagestory.API.Client.DataConversion.html": {
    "href": "api/Vintagestory.API.Client.DataConversion.html",
    "title": "Enum DataConversion | VintageStory API",
    "keywords": "Enum DataConversion Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum DataConversion Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Float = 0 Integer = 2 NormalizedFloat = 1"
  },
  "api/Vintagestory.API.Client.DefaultShaderUniforms.html": {
    "href": "api/Vintagestory.API.Client.DefaultShaderUniforms.html",
    "title": "Class DefaultShaderUniforms | VintageStory API",
    "keywords": "Class DefaultShaderUniforms Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class DefaultShaderUniforms Inheritance object DefaultShaderUniforms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DefaultShaderUniforms() public DefaultShaderUniforms() Fields AmbientBloomLevelAdd public float[] AmbientBloomLevelAdd Field Value float[] BlockAtlasHeight public float BlockAtlasHeight Field Value float BloomAddDrunkIndex public const int BloomAddDrunkIndex = 1 Field Value int BloomAddEnvIndex public const int BloomAddEnvIndex = 0 Field Value int ColorMapRects4 public float[] ColorMapRects4 Field Value float[] DamageVignetting public float DamageVignetting Field Value float DamageVignettingSide 0..1 (0 for left, 0.5 for left&right, 1 for right) public float DamageVignettingSide Field Value float DitherSeed public int DitherSeed Field Value int DropShadowIntensity public float DropShadowIntensity Field Value float Dusk public int Dusk Field Value int ExtraBloom public float ExtraBloom Field Value float ExtraSepia public float ExtraSepia Field Value float FlagFogDensity public float FlagFogDensity Field Value float FlatFogStartYPos public float FlatFogStartYPos Field Value float FogSphereQuantity public int FogSphereQuantity Field Value int FogSpheres Each sphere has 8 floats: 3 floats x/y/z offset to the player 1 float radius 1 float density 3 floats rgb color public float[] FogSpheres Field Value float[] FogWaveCounter public float FogWaveCounter Field Value float FrameWidth public int FrameWidth Field Value int FrostVignetting public float FrostVignetting Field Value float GlitchStrength public float GlitchStrength Field Value float GlitchWaviness public float GlitchWaviness Field Value float GlobalWorldWarp public float GlobalWorldWarp Field Value float GlowTextureId public int GlowTextureId Field Value int LightPosition3D public Vec3f LightPosition3D Field Value Vec3f MaxSpheres public const int MaxSpheres = 3 Field Value int NightVisionStrength public float NightVisionStrength Field Value float PerceptionEffectId public int PerceptionEffectId Field Value int PerceptionEffectIntensity public float PerceptionEffectIntensity Field Value float PlayerPos public Vec3f PlayerPos Field Value Vec3f PlayerPosForFoam public Vec3f PlayerPosForFoam Field Value Vec3f PlayerToSealevelOffset public float PlayerToSealevelOffset Field Value float PlayerViewVector public Vec3f PlayerViewVector Field Value Vec3f PointLightColors3 public float[] PointLightColors3 Field Value float[] PointLights3 public float[] PointLights3 Field Value float[] PointLightsCount public int PointLightsCount Field Value int SeaLevel public float SeaLevel Field Value float SeasonRel public float SeasonRel Field Value float SeasonTemperature public float SeasonTemperature Field Value float ShadowRangeFar public float ShadowRangeFar Field Value float ShadowRangeNear public float ShadowRangeNear Field Value float ShadowZExtendFar public float ShadowZExtendFar Field Value float ShadowZExtendNear public float ShadowZExtendNear Field Value float SkyTextureId public int SkyTextureId Field Value int SunLightTextureId public int SunLightTextureId Field Value int SunPosition3D public Vec3f SunPosition3D Field Value Vec3f SunPositionScreen public Vec3f SunPositionScreen Field Value Vec3f SunSpecularIntensity public float SunSpecularIntensity Field Value float SunlightExtraBrightness public float SunlightExtraBrightness Field Value float SunsetMod public float SunsetMod Field Value float TimeCounter public float TimeCounter Field Value float ToShadowMapSpaceMatrixFar public float[] ToShadowMapSpaceMatrixFar Field Value float[] ToShadowMapSpaceMatrixNear public float[] ToShadowMapSpaceMatrixNear Field Value float[] WaterFlowCounter public float WaterFlowCounter Field Value float WaterStillCounter public float WaterStillCounter Field Value float WaterWaveCounter public float WaterWaveCounter Field Value float WaterWaveIntensity public float WaterWaveIntensity Field Value float WindSpeed public float WindSpeed Field Value float WindWaveCounter public float WindWaveCounter Field Value float WindWaveCounterHighFreq public float WindWaveCounterHighFreq Field Value float WindWaveIntensity public float WindWaveIntensity Field Value float ZFar The currently configured z-far plane public float ZFar Field Value float ZNear The currently configured z-near plane public float ZNear Field Value float playerReferencePos public Vec3d playerReferencePos Field Value Vec3d playerReferencePosForFoam public Vec3d playerReferencePosForFoam Field Value Vec3d Properties CameraUnderwater public float CameraUnderwater { get; set; } Property Value float WaterMurkColor public Vec4f WaterMurkColor { get; set; } Property Value Vec4f Methods DescaleTemperature(float) public static int DescaleTemperature(float temperature) Parameters temperature float Returns int Update(float, ICoreClientAPI) public void Update(float dt, ICoreClientAPI capi) Parameters dt float capi ICoreClientAPI"
  },
  "api/Vintagestory.API.Client.DialogElement.html": {
    "href": "api/Vintagestory.API.Client.DialogElement.html",
    "title": "Class DialogElement | VintageStory API",
    "keywords": "Class DialogElement Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class DialogElement Inheritance object DialogElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code public string Code Field Value string FontSize public float FontSize Field Value float Height public int Height Field Value int Icon public string Icon Field Value string Icons public string[] Icons Field Value string[] Label public string Label Field Value string MaxValue public int MaxValue Field Value int MinValue public int MinValue Field Value int Mode public EnumDialogElementMode Mode Field Value EnumDialogElementMode Names public string[] Names Field Value string[] PaddingLeft public int PaddingLeft Field Value int Param To hold generic data public string Param Field Value string Step public int Step Field Value int Text public string Text Field Value string Tooltip public string Tooltip Field Value string Tooltips public string[] Tooltips Field Value string[] Type public EnumDialogElementType Type Field Value EnumDialogElementType Values public string[] Values Field Value string[] Width public int Width Field Value int"
  },
  "api/Vintagestory.API.Client.DialogRow.html": {
    "href": "api/Vintagestory.API.Client.DialogRow.html",
    "title": "Class DialogRow | VintageStory API",
    "keywords": "Class DialogRow Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class DialogRow Inheritance object DialogRow Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DialogRow() public DialogRow() DialogRow(params DialogElement[]) public DialogRow(params DialogElement[] elements) Parameters elements DialogElement[] Fields BottomPadding public float BottomPadding Field Value float Elements public DialogElement[] Elements Field Value DialogElement[] TopPadding public float TopPadding Field Value float"
  },
  "api/Vintagestory.API.Client.DrawDelegate.html": {
    "href": "api/Vintagestory.API.Client.DrawDelegate.html",
    "title": "Delegate DrawDelegate | VintageStory API",
    "keywords": "Delegate DrawDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void DrawDelegate(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.DrawDelegateWithBounds.html": {
    "href": "api/Vintagestory.API.Client.DrawDelegateWithBounds.html",
    "title": "Delegate DrawDelegateWithBounds | VintageStory API",
    "keywords": "Delegate DrawDelegateWithBounds Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void DrawDelegateWithBounds(Context ctx, ImageSurface surface, ElementBounds currentBounds) Parameters ctx Context surface ImageSurface currentBounds ElementBounds Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.DrawIconDelegate.html": {
    "href": "api/Vintagestory.API.Client.DrawIconDelegate.html",
    "title": "Delegate DrawIconDelegate | VintageStory API",
    "keywords": "Delegate DrawIconDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void DrawIconDelegate(Context cr, string type, int x, int y, float width, float height, double[] rgba) Parameters cr Context type string x int y int width float height float rgba double[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.DrawSkillIconDelegate.html": {
    "href": "api/Vintagestory.API.Client.DrawSkillIconDelegate.html",
    "title": "Delegate DrawSkillIconDelegate | VintageStory API",
    "keywords": "Delegate DrawSkillIconDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void DrawSkillIconDelegate(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.DrunkPerceptionEffect.html": {
    "href": "api/Vintagestory.API.Client.DrunkPerceptionEffect.html",
    "title": "Class DrunkPerceptionEffect | VintageStory API",
    "keywords": "Class DrunkPerceptionEffect Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class DrunkPerceptionEffect : PerceptionEffect Inheritance object PerceptionEffect DrunkPerceptionEffect Inherited Members PerceptionEffect.Code PerceptionEffect.PerceptionEffectId PerceptionEffect.Intensity PerceptionEffect.DurationHours PerceptionEffect.capi PerceptionEffect.OnOwnPlayerDataReceived(EntityPlayer) PerceptionEffect.NowDisabled() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DrunkPerceptionEffect(ICoreClientAPI) public DrunkPerceptionEffect(ICoreClientAPI capi) Parameters capi ICoreClientAPI Methods ApplyToFpHand(Matrixf) public override void ApplyToFpHand(Matrixf modelMat) Parameters modelMat Matrixf ApplyToTpPlayer(EntityPlayer, float[], float?) public override void ApplyToTpPlayer(EntityPlayer entityPlr, float[] modelMatrix, float? playerIntensity = null) Parameters entityPlr EntityPlayer modelMatrix float[] playerIntensity float? NowActive(float) public override void NowActive(float intensity) Parameters intensity float OnBeforeGameRender(float) public override void OnBeforeGameRender(float dt) Parameters dt float"
  },
  "api/Vintagestory.API.Client.DummyRenderer.html": {
    "href": "api/Vintagestory.API.Client.DummyRenderer.html",
    "title": "Class DummyRenderer | VintageStory API",
    "keywords": "Class DummyRenderer Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class DummyRenderer : IRenderer, IDisposable Inheritance object DummyRenderer Implements IRenderer IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields action public Action<float> action Field Value Action<float> Properties RenderOrder 0 = drawn first, 1 = drawn last Default render orders by render stage: Before: 0 = Ambient Manager 0 = Camera Opaque: 0.1 = Blue sky (Icosahedron) 0.2 = Night skybox 0.3 = Sun and moon 0.37 = Terrain opaque 0.4 = Enitities 0.5 = Decals 0.5 = Debug wireframe 0.6 = particles 0.7 = Cinematic camera line preview 0.8 = fp held item 0.9 = held item opaque custom renderer OIT: 0.2 = Frame buffer debug screen 0.35 = Clouds 0.37 = Terrain oit 0.4 = Enitities 0.6 = particles 0.9 = held item oit custom renderer Shadow far: 0 = shadow map init 0.37 = Terrain shadow far 0.4 = Enitities Shadow far done: 1 = shadow map finish Shadow near: 0 = shadow map init 0.37 = Terrain shadow near 0.4 = Enitities Shadow near done: 1 = shadow map finish Ortho: 0.2 = Frame buffer debug screen 0.4 = Enitities 0.9 = held item ortho custom renderer 0.95 = sleeping overlay 0.98 = bow/spear aiming reticle 1 = Gui manager 1.02 = crosshair and mouse cursor AfterFinalComposition: 2 = screenshot Done: 0.1 = gui manager 2 = screenshot 0.98 = Cinematic camera camera advancing and frame capture when recording 0.99 = Chunk Tesselator Manager (uploads new/modified chunk meshes) 0.999 = Compress chunks scan 1 = video recorder public double RenderOrder { get; set; } Property Value double RenderRange Within what range to the player OnRenderFrame() should be called (currently not used!) public int RenderRange { get; set; } Property Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OnRenderFrame(float, EnumRenderStage) Called every frame for rendering whatever you need to render public void OnRenderFrame(float deltaTime, EnumRenderStage stage) Parameters deltaTime float stage EnumRenderStage"
  },
  "api/Vintagestory.API.Client.ElementBounds.html": {
    "href": "api/Vintagestory.API.Client.ElementBounds.html",
    "title": "Class ElementBounds | VintageStory API",
    "keywords": "Class ElementBounds Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Box sizing model comparable to the box sizing model of cascading style sheets using \"position:relative;\" Each element has a position, size, padding and margin Padding is counted towards the size of the box, whereas margin is not Open in GitHub public class ElementBounds Inheritance object ElementBounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ElementBounds() public ElementBounds() Fields Alignment public EnumDialogArea Alignment Field Value EnumDialogArea AllowNoChildren public bool AllowNoChildren Field Value bool ChildBounds public List<ElementBounds> ChildBounds Field Value List<ElementBounds> Code For debugging purposes only public string Code Field Value string Initialized public bool Initialized Field Value bool IsDrawingSurface If set, bgDrawX/Y will be relative, instead of absolute public bool IsDrawingSurface Field Value bool IsWindowBounds protected bool IsWindowBounds Field Value bool LeftOfBounds public ElementBounds LeftOfBounds Field Value ElementBounds Name public string Name Field Value string ParentBounds public ElementBounds ParentBounds Field Value ElementBounds absFixedX public double absFixedX Field Value double absFixedY public double absFixedY Field Value double absInnerHeight public double absInnerHeight Field Value double absInnerWidth public double absInnerWidth Field Value double absMarginX public double absMarginX Field Value double absMarginY public double absMarginY Field Value double absOffsetX public double absOffsetX Field Value double absOffsetY public double absOffsetY Field Value double absPaddingX public double absPaddingX Field Value double absPaddingY public double absPaddingY Field Value double fixedHeight public double fixedHeight Field Value double fixedMarginX public double fixedMarginX Field Value double fixedMarginY public double fixedMarginY Field Value double fixedOffsetX public double fixedOffsetX Field Value double fixedOffsetY public double fixedOffsetY Field Value double fixedPaddingX public double fixedPaddingX Field Value double fixedPaddingY public double fixedPaddingY Field Value double fixedWidth public double fixedWidth Field Value double fixedX public double fixedX Field Value double fixedY public double fixedY Field Value double horizontalSizing public ElementSizing horizontalSizing Field Value ElementSizing percentHeight public double percentHeight Field Value double percentPaddingX public double percentPaddingX Field Value double percentPaddingY public double percentPaddingY Field Value double percentWidth public double percentWidth Field Value double percentX public double percentX Field Value double percentY public double percentY Field Value double renderOffsetX public double renderOffsetX Field Value double renderOffsetY public double renderOffsetY Field Value double verticalSizing public ElementSizing verticalSizing Field Value ElementSizing Properties BothSizing Set the vertical and horizontal sizing, see also ElementSizing. Setting this is equal to calling WithSizing(ElementSizing) public ElementSizing BothSizing { set; } Property Value ElementSizing Empty Create a special instance of type ElementEmptyBounds whose position is 0 and size 1. It's often used for other bounds that need a static, unchanging parent bounds public static ElementBounds Empty { get; } Property Value ElementBounds Fill Quick Method to create a new ElementBounds instance that fills 100% of its parent bounds. Useful for backgrounds. public static ElementBounds Fill { get; } Property Value ElementBounds InnerHeight public virtual double InnerHeight { get; } Property Value double InnerWidth public virtual double InnerWidth { get; } Property Value double OuterHeight Height including padding public virtual double OuterHeight { get; } Property Value double OuterHeightInt public virtual int OuterHeightInt { get; } Property Value int OuterWidth Width including padding public virtual double OuterWidth { get; } Property Value double OuterWidthInt public virtual int OuterWidthInt { get; } Property Value int RequiresRecalculation public virtual bool RequiresRecalculation { get; } Property Value bool absX Absolute position of the element plus margin. Same as renderX but without padding public virtual double absX { get; } Property Value double absY public virtual double absY { get; } Property Value double bgDrawX Position where the background has to be drawn, this encompasses the elements padding public virtual double bgDrawX { get; } Property Value double bgDrawY public virtual double bgDrawY { get; } Property Value double drawX Position where the element has to be drawn. This is a position relative to it's parent element plus margin plus padding. public virtual double drawX { get; } Property Value double drawY public virtual double drawY { get; } Property Value double relX Position relative to it's parent element plus margin public virtual double relX { get; } Property Value double relY public virtual double relY { get; } Property Value double renderX public virtual double renderX { get; } Property Value double renderY public virtual double renderY { get; } Property Value double Methods BelowCopy(double, double, double, double) Makes a copy of the current bounds but leaves the position and padding at 0. Sets the same parent as the current one. public ElementBounds BelowCopy(double fixedDeltaX = 0, double fixedDeltaY = 0, double fixedDeltaWidth = 0, double fixedDeltaHeight = 0) Parameters fixedDeltaX double fixedDeltaY double fixedDeltaWidth double fixedDeltaHeight double Returns ElementBounds CalcWorldBounds() public virtual void CalcWorldBounds() CopyOffsetedSibling(double, double, double, double) Makes a copy of the current bounds but leaves the position and padding at 0. Sets the same parent as the current one. public ElementBounds CopyOffsetedSibling(double fixedDeltaX = 0, double fixedDeltaY = 0, double fixedDeltaWidth = 0, double fixedDeltaHeight = 0) Parameters fixedDeltaX double fixedDeltaY double fixedDeltaWidth double fixedDeltaHeight double Returns ElementBounds CopyOnlySize() Makes a copy of the current bounds but leaves the position and 0. Sets the parent to the calling bounds public ElementBounds CopyOnlySize() Returns ElementBounds Fixed(double, double, double, double) Quick method to create new ElementsBounds instance that uses fixed element sizing. public static ElementBounds Fixed(double fixedX, double fixedY, double fixedWidth, double fixedHeight) Parameters fixedX double fixedY double fixedWidth double fixedHeight double Returns ElementBounds Fixed(int, int) Create a new ElementBounds instance with given fixed x/y position and width/height 0 public static ElementBounds Fixed(int fixedX, int fixedY) Parameters fixedX int fixedY int Returns ElementBounds Fixed(EnumDialogArea, double, double, double, double) Quick method to create new ElementsBounds instance that uses fixed element sizing. public static ElementBounds Fixed(EnumDialogArea alignment, double fixedX, double fixedY, double fixedWidth, double fixedHeight) Parameters alignment EnumDialogArea fixedX double fixedY double fixedWidth double fixedHeight double Returns ElementBounds FixedGrow(double) Grows the current width/height by a fixed value public ElementBounds FixedGrow(double amount) Parameters amount double Returns ElementBounds FixedGrow(double, double) Grows the current width/height by a fixed value public ElementBounds FixedGrow(double width, double height) Parameters width double height double Returns ElementBounds FixedLeftOf(ElementBounds, double) Set the fixed x-position to \"refBounds.fixedX - fixedWith - rightSpacing\" so that the element will be left of reference bounds public ElementBounds FixedLeftOf(ElementBounds refBounds, double rightSpacing = 0) Parameters refBounds ElementBounds rightSpacing double Returns ElementBounds FixedOffseted(EnumDialogArea, double, double, double, double) Quick method to create new ElementsBounds instance that uses fixed element sizing. public static ElementBounds FixedOffseted(EnumDialogArea alignment, double fixedOffsetX, double fixedOffsetY, double fixedWidth, double fixedHeight) Parameters alignment EnumDialogArea fixedOffsetX double fixedOffsetY double fixedWidth double fixedHeight double Returns ElementBounds FixedPos(EnumDialogArea, double, double) public static ElementBounds FixedPos(EnumDialogArea alignment, double fixedX, double fixedY) Parameters alignment EnumDialogArea fixedX double fixedY double Returns ElementBounds FixedRightOf(ElementBounds, double) Set the fixed x-position to \"refBounds.fixedX + refBounds.fixedWidth + leftSpacing\" so that the bounds will be right of reference bounds public ElementBounds FixedRightOf(ElementBounds refBounds, double leftSpacing = 0) Parameters refBounds ElementBounds leftSpacing double Returns ElementBounds FixedShrink(double) Shrinks the current width/height by a fixed value public ElementBounds FixedShrink(double amount) Parameters amount double Returns ElementBounds FixedSize(double, double) Quick method to create a new ElementBounds instance that uses fixed element sizing. The X/Y Coordinates are left at 0. public static ElementBounds FixedSize(double fixedWidth, double fixedHeight) Parameters fixedWidth double fixedHeight double Returns ElementBounds FixedSize(EnumDialogArea, double, double) Quick method to create a new ElementBounds instance that uses fixed element sizing. The X/Y Coordinates are left at 0. public static ElementBounds FixedSize(EnumDialogArea alignment, double fixedWidth, double fixedHeight) Parameters alignment EnumDialogArea fixedWidth double fixedHeight double Returns ElementBounds FixedUnder(ElementBounds, double) Set the fixed y-position to \"refBounds.fixedY + refBounds.fixedHeight + spacing\" so that the bounds will be under the reference bounds public ElementBounds FixedUnder(ElementBounds refBounds, double spacing = 0) Parameters refBounds ElementBounds spacing double Returns ElementBounds FlatCopy() Creates a clone of the bounds but without child elements public ElementBounds FlatCopy() Returns ElementBounds ForkBoundingParent(double, double, double, double) Creates a new elements bounds which acts as the parent bounds of the current bounds. It will also arrange the fixedX/Y and Width/Height coords of both bounds so that the parent bounds surrounds the child bounds with given spacings. Uses fixed coords only! public ElementBounds ForkBoundingParent(double leftSpacing = 0, double topSpacing = 0, double rightSpacing = 0, double bottomSpacing = 0) Parameters leftSpacing double topSpacing double rightSpacing double bottomSpacing double Returns ElementBounds ForkChild() public ElementBounds ForkChild() Returns ElementBounds ForkChildOffseted(double, double, double, double) public ElementBounds ForkChildOffseted(double fixedDeltaX = 0, double fixedDeltaY = 0, double fixedDeltaWidth = 0, double fixedDeltaHeight = 0) Parameters fixedDeltaX double fixedDeltaY double fixedDeltaWidth double fixedDeltaHeight double Returns ElementBounds ForkContainingChild(double, double, double, double) Creates a new elements bounds which acts as the child bounds of the current bounds. It will also arrange the fixedX/Y and Width/Height coords of both bounds so that the parent bounds surrounds the child bounds with given spacings. Uses fixed coords only! public ElementBounds ForkContainingChild(double leftSpacing = 0, double topSpacing = 0, double rightSpacing = 0, double bottomSpacing = 0) Parameters leftSpacing double topSpacing double rightSpacing double bottomSpacing double Returns ElementBounds MarkDirtyRecursive() public void MarkDirtyRecursive() PartiallyInside(ElementBounds) Checks if the bounds is at least partially inside it's parent bounds by checking if any of the 4 corner points is inside public bool PartiallyInside(ElementBounds boundingBounds) Parameters boundingBounds ElementBounds Returns bool Percentual(double, double, double, double) Quick method to create new ElementsBounds instance that uses percentual element sizing, e.g. setting percentWidth to 0.5 will set the width of the bounds to 50% of its parent width public static ElementBounds Percentual(double percentX, double percentY, double percentWidth, double percentHeight) Parameters percentX double percentY double percentWidth double percentHeight double Returns ElementBounds Percentual(EnumDialogArea, double, double) Quick method to create new ElementsBounds instance that uses percentual element sizing, e.g. setting percentWidth to 0.5 will set the width of the bounds to 50% of its parent width public static ElementBounds Percentual(EnumDialogArea alignment, double percentWidth, double percentHeight) Parameters alignment EnumDialogArea percentWidth double percentHeight double Returns ElementBounds PointInside(double, double) Returns true if supplied coordinate is inside the bounds public bool PointInside(double absPointX, double absPointY) Parameters absPointX double absPointY double Returns bool PointInside(int, int) Returns true if supplied coordinate is inside the bounds public bool PointInside(int absPointX, int absPointY) Parameters absPointX int absPointY int Returns bool PositionInside(int, int) Returns the relative coordinate if supplied coordinate is inside the bounds, otherwise null public Vec2d PositionInside(int absPointX, int absPointY) Parameters absPointX int absPointY int Returns Vec2d RightCopy(double, double, double, double) Create a flat copy of the element with a fixed position offset that causes it to be right of the original element public ElementBounds RightCopy(double fixedDeltaX = 0, double fixedDeltaY = 0, double fixedDeltaWidth = 0, double fixedDeltaHeight = 0) Parameters fixedDeltaX double fixedDeltaY double fixedDeltaWidth double fixedDeltaHeight double Returns ElementBounds RightOf(ElementBounds, double) public ElementBounds RightOf(ElementBounds leftBounds, double leftMargin = 0) Parameters leftBounds ElementBounds leftMargin double Returns ElementBounds ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WithAlignment(EnumDialogArea) Set the alignment property public ElementBounds WithAlignment(EnumDialogArea alignment) Parameters alignment EnumDialogArea Returns ElementBounds WithChild(ElementBounds) public ElementBounds WithChild(ElementBounds bounds) Parameters bounds ElementBounds Returns ElementBounds WithChildren(params ElementBounds[]) public ElementBounds WithChildren(params ElementBounds[] bounds) Parameters bounds ElementBounds[] Returns ElementBounds WithEmptyParent() Creates a new bounds using FitToChildren and sets that as bound parent. This is usefull if you want to draw elements that are not part of the dialog public ElementBounds WithEmptyParent() Returns ElementBounds WithFixedAlignmentOffset(double, double) Sets a new fixed offset that is applied after element alignment. So you could i.e. horizontally center an element and then offset in x direction from there using this method. public ElementBounds WithFixedAlignmentOffset(double x, double y) Parameters x double y double Returns ElementBounds WithFixedHeight(double) Set the height property public ElementBounds WithFixedHeight(double height) Parameters height double Returns ElementBounds WithFixedMargin(double) Sets a new fixed margin (pad = top/right/down/left margin) public ElementBounds WithFixedMargin(double pad) Parameters pad double Returns ElementBounds WithFixedMargin(double, double) Sets a new fixed margin (pad = top/right/down/left margin) public ElementBounds WithFixedMargin(double padH, double padV) Parameters padH double padV double Returns ElementBounds WithFixedOffset(double, double) Sets a new fixed offset that is used during element alignment. public ElementBounds WithFixedOffset(double offx, double offy) Parameters offx double offy double Returns ElementBounds WithFixedPadding(double) Sets a new fixed padding (pad = top/right/down/left padding) public ElementBounds WithFixedPadding(double pad) Parameters pad double Returns ElementBounds WithFixedPadding(double, double) Sets a new fixed padding (x = left/right, y = top/down padding) public ElementBounds WithFixedPadding(double leftRight, double upDown) Parameters leftRight double upDown double Returns ElementBounds WithFixedPosition(double, double) Sets a new fixed offset that is used during element alignment. public ElementBounds WithFixedPosition(double x, double y) Parameters x double y double Returns ElementBounds WithFixedSize(double, double) Set the fixed width and fixed height values public ElementBounds WithFixedSize(double width, double height) Parameters width double height double Returns ElementBounds WithFixedWidth(double) Set the width property public ElementBounds WithFixedWidth(double width) Parameters width double Returns ElementBounds WithParent(ElementBounds) Sets the parent of the bounds public ElementBounds WithParent(ElementBounds bounds) Parameters bounds ElementBounds Returns ElementBounds WithScale(double) public ElementBounds WithScale(double factor) Parameters factor double Returns ElementBounds WithSizing(ElementSizing) Set the vertical and horizontal sizing property to the same value. See also ElementSizing. public ElementBounds WithSizing(ElementSizing sizing) Parameters sizing ElementSizing Returns ElementBounds WithSizing(ElementSizing, ElementSizing) Set the vertical and horizontal sizing properties individually. See also ElementSizing. public ElementBounds WithSizing(ElementSizing horizontalSizing, ElementSizing verticalSizing) Parameters horizontalSizing ElementSizing verticalSizing ElementSizing Returns ElementBounds scaled(double) public static double scaled(double value) Parameters value double Returns double"
  },
  "api/Vintagestory.API.Client.ElementSizing.html": {
    "href": "api/Vintagestory.API.Client.ElementSizing.html",
    "title": "Enum ElementSizing | VintageStory API",
    "keywords": "Enum ElementSizing Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum ElementSizing Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields FitToChildren = 2 Size determined by child elements Fixed = 0 Only multiplied with scale factor Percentual = 1 Value between 0 and 100% of parent element PercentualSubstractFixed = 3 Value between 0 and 100% of parent element. Will substract fixedWidth and fixedHeight from the final size"
  },
  "api/Vintagestory.API.Client.ElementStdBounds.html": {
    "href": "api/Vintagestory.API.Client.ElementStdBounds.html",
    "title": "Class ElementStdBounds | VintageStory API",
    "keywords": "Class ElementStdBounds Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Just some default sizings for various ui elements Open in GitHub public static class ElementStdBounds Inheritance object ElementStdBounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields mainMenuUnscaledLogoHorPadding public static int mainMenuUnscaledLogoHorPadding Field Value int mainMenuUnscaledLogoSize public static int mainMenuUnscaledLogoSize Field Value int mainMenuUnscaledLogoVerPadding public static int mainMenuUnscaledLogoVerPadding Field Value int mainMenuUnscaledWoodPlankWidth public static int mainMenuUnscaledWoodPlankWidth Field Value int Properties AutosizedMainDialog Quick Method to create a new ElementBounds instance that is positioned at the screen center and sized accordingly to fit all it's child elements public static ElementBounds AutosizedMainDialog { get; } Property Value ElementBounds Methods AutosizedMainDialogAtPos(double) Quick Method to create a new ElementBounds instance that draws a background for a dialog public static ElementBounds AutosizedMainDialogAtPos(double fixedY) Parameters fixedY double Returns ElementBounds DialogBackground() Quick Method to create a new ElementBounds instance that draws a background for a dialog public static ElementBounds DialogBackground() Returns ElementBounds DialogBackground(double, double) Quick Method to create a new ElementBounds instance that draws a background for a dialog public static ElementBounds DialogBackground(double horPadding, double verPadding) Parameters horPadding double verPadding double Returns ElementBounds MainScreenRightPart() Quick Method to create a new ElementBounds instance that draws a background for a dialog public static ElementBounds MainScreenRightPart() Returns ElementBounds MenuButton(float, EnumDialogArea) Quick Method to create a new ElementBounds instance to create a menu consiting of one ore more vertically arranged and horizontally centered buttons in a grid. The y position is calculated using rowIndex * 80. public static ElementBounds MenuButton(float rowIndex, EnumDialogArea alignment = EnumDialogArea.CenterFixed) Parameters rowIndex float alignment EnumDialogArea Returns ElementBounds Rowed(float, double, EnumDialogArea) Quick Method to create a new ElementBounds instance to create a menu consiting of one ore more vertically arranged and horizontally centered buttons in a grid. The y position is calculated using rowIndex * 80. public static ElementBounds Rowed(float rowIndex, double padding, EnumDialogArea alignment = EnumDialogArea.None) Parameters rowIndex float padding double alignment EnumDialogArea Returns ElementBounds Sign(double, double, double, double) Quick Method to create a new ElementBounds instance that is currently used for Signs (e.g. graphics options) public static ElementBounds Sign(double fixedX, double fixedY, double fixedWith, double fixedHeight = 80) Parameters fixedX double fixedY double fixedWith double fixedHeight double Returns ElementBounds Slider(double, double, double) public static ElementBounds Slider(double x, double y, double width) Parameters x double y double width double Returns ElementBounds Slot(double, double) public static ElementBounds Slot(double x = 0, double y = 0) Parameters x double y double Returns ElementBounds SlotGrid(EnumDialogArea, double, double, int, int) public static ElementBounds SlotGrid(EnumDialogArea alignment, double x, double y, int cols, int rows) Parameters alignment EnumDialogArea x double y double cols int rows int Returns ElementBounds Statbar(EnumDialogArea, double) Quick method to create a new ElementBounds instance that uses fixed element sizing. The X/Y Coordinates are left at 0. public static ElementBounds Statbar(EnumDialogArea alignment, double width) Parameters alignment EnumDialogArea width double Returns ElementBounds TitleBar() public static ElementBounds TitleBar() Returns ElementBounds ToggleButton(double, double, double, double) public static ElementBounds ToggleButton(double fixedX, double fixedY, double width, double height) Parameters fixedX double fixedY double width double height double Returns ElementBounds VerticalScrollbar(ElementBounds) Creates a scrollbar right of given element bounds, requires the left element to be using fixed element positioning public static ElementBounds VerticalScrollbar(ElementBounds leftElement) Parameters leftElement ElementBounds Returns ElementBounds"
  },
  "api/Vintagestory.API.Client.EnumBlendMode.html": {
    "href": "api/Vintagestory.API.Client.EnumBlendMode.html",
    "title": "Enum EnumBlendMode | VintageStory API",
    "keywords": "Enum EnumBlendMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumBlendMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Brighten = 2 Glow = 4 Multiply = 1 Overlay = 5 PremultipliedAlpha = 3 Standard = 0"
  },
  "api/Vintagestory.API.Client.EnumBlockEntityPacketId.html": {
    "href": "api/Vintagestory.API.Client.EnumBlockEntityPacketId.html",
    "title": "Enum EnumBlockEntityPacketId | VintageStory API",
    "keywords": "Enum EnumBlockEntityPacketId Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Packet IDs for block entities. Open in GitHub public enum EnumBlockEntityPacketId Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Close = 1001 Open = 1000"
  },
  "api/Vintagestory.API.Client.EnumButtonStyle.html": {
    "href": "api/Vintagestory.API.Client.EnumButtonStyle.html",
    "title": "Enum EnumButtonStyle | VintageStory API",
    "keywords": "Enum EnumButtonStyle Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumButtonStyle Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields MainMenu = 1 None = 0 Normal = 2 Small = 3"
  },
  "api/Vintagestory.API.Client.EnumCalcBoundsResult.html": {
    "href": "api/Vintagestory.API.Client.EnumCalcBoundsResult.html",
    "title": "Enum EnumCalcBoundsResult | VintageStory API",
    "keywords": "Enum EnumCalcBoundsResult Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumCalcBoundsResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Continue = 0 Can continue on the same line Multiline = 1 Element was split between current and next line Nextline = 2 Element was put on next line"
  },
  "api/Vintagestory.API.Client.EnumCameraMode.html": {
    "href": "api/Vintagestory.API.Client.EnumCameraMode.html",
    "title": "Enum EnumCameraMode | VintageStory API",
    "keywords": "Enum EnumCameraMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumCameraMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields FirstPerson = 0 Overhead = 2 ThirdPerson = 1"
  },
  "api/Vintagestory.API.Client.EnumChannelState.html": {
    "href": "api/Vintagestory.API.Client.EnumChannelState.html",
    "title": "Enum EnumChannelState | VintageStory API",
    "keywords": "Enum EnumChannelState Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The state of a network channel Open in GitHub public enum EnumChannelState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Connected = 2 This channel has been registered client and server side. It is ready to send and receive messages NotConnected = 3 This channel has been registered only client side. You cannot send data on this channel NotFound = 0 No such channel was registered Registered = 1 This channel has been registered but he server did not send the server channel information yet"
  },
  "api/Vintagestory.API.Client.EnumChunkRenderPass.html": {
    "href": "api/Vintagestory.API.Client.EnumChunkRenderPass.html",
    "title": "Enum EnumChunkRenderPass | VintageStory API",
    "keywords": "Enum EnumChunkRenderPass Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The various render passes available for rendering blocks Open in GitHub [DocumentAsJson] public enum EnumChunkRenderPass Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlendNoCull = 2 Backfaced not culled, alpha blended and alpha discard Liquid = 4 Used for animated liquids Meta = 6 Special render pass for meta blocks Opaque = 0 Backfaced culled, no alpha testing, alpha discard OpaqueNoCull = 1 Backfaced not culled, no alpha blended but alpha discard OpaqueWaterPlant = 7 Uses the depth buffer from the OIT pass to prevent water plants showing in sailboats TopSoil = 5 Special render pass for top soil only in order to have climated tinted grass half transparently overlaid over an opaque block Transparent = 3 Uses a special rendering system called Weighted Blended Order Independent Transparency for half transparent blocks"
  },
  "api/Vintagestory.API.Client.EnumCollideFlags.html": {
    "href": "api/Vintagestory.API.Client.EnumCollideFlags.html",
    "title": "Enum EnumCollideFlags | VintageStory API",
    "keywords": "Enum EnumCollideFlags Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub [Flags] public enum EnumCollideFlags Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CollideX = 1 CollideY = 2 CollideZ = 4"
  },
  "api/Vintagestory.API.Client.EnumDialogArea.html": {
    "href": "api/Vintagestory.API.Client.EnumDialogArea.html",
    "title": "Enum EnumDialogArea | VintageStory API",
    "keywords": "Enum EnumDialogArea Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll First word = X Alignment (left, center, right or fixed) Second word = Y Alignment (top, middle, bottom or fixed) Open in GitHub public enum EnumDialogArea Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CenterBottom = 7 CenterFixed = 8 CenterMiddle = 6 CenterTop = 5 FixedBottom = 15 FixedMiddle = 14 FixedTop = 13 LeftBottom = 3 LeftFixed = 4 LeftMiddle = 2 LeftTop = 1 None = 0 RightBottom = 11 RightFixed = 12 RightMiddle = 10 RightTop = 9 TextBaselineOffset = 16"
  },
  "api/Vintagestory.API.Client.EnumDialogElementMode.html": {
    "href": "api/Vintagestory.API.Client.EnumDialogElementMode.html",
    "title": "Enum EnumDialogElementMode | VintageStory API",
    "keywords": "Enum EnumDialogElementMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDialogElementMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Buttons = 1 DropDown = 0"
  },
  "api/Vintagestory.API.Client.EnumDialogElementType.html": {
    "href": "api/Vintagestory.API.Client.EnumDialogElementType.html",
    "title": "Enum EnumDialogElementType | VintageStory API",
    "keywords": "Enum EnumDialogElementType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDialogElementType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Button = 5 DynamicSelect = 7 Input = 1 NumberInput = 4 Select = 0 Slider = 2 Switch = 3 Text = 6"
  },
  "api/Vintagestory.API.Client.EnumDialogType.html": {
    "href": "api/Vintagestory.API.Client.EnumDialogType.html",
    "title": "Enum EnumDialogType | VintageStory API",
    "keywords": "Enum EnumDialogType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDialogType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Dialog = 0 HUD = 1"
  },
  "api/Vintagestory.API.Client.EnumDrawMode.html": {
    "href": "api/Vintagestory.API.Client.EnumDrawMode.html",
    "title": "Enum EnumDrawMode | VintageStory API",
    "keywords": "Enum EnumDrawMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDrawMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields LineStrip = 2 Lines = 1 Triangles = 0"
  },
  "api/Vintagestory.API.Client.EnumDrawType.html": {
    "href": "api/Vintagestory.API.Client.EnumDrawType.html",
    "title": "Enum EnumDrawType | VintageStory API",
    "keywords": "Enum EnumDrawType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draw types for blocks. Open in GitHub [DocumentAsJson] public enum EnumDrawType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlockLayer_1 = 1 BlockLayer_2 = 2 BlockLayer_3 = 3 BlockLayer_4 = 4 BlockLayer_5 = 5 BlockLayer_6 = 6 BlockLayer_7 = 7 Cross = 11 CrossAndSnowlayer = 15 CrossAndSnowlayer_2 = 18 CrossAndSnowlayer_3 = 19 CrossAndSnowlayer_4 = 20 Cube = 10 Empty = 9 JSON = 8 You will most likely use JSON for all assets with custom shapes. JSONAndSnowLayer = 17 JSONAndWater = 16 Liquid = 13 SurfaceLayer = 21 TopSoil = 14 Transparent = 12"
  },
  "api/Vintagestory.API.Client.EnumFaceCullMode.html": {
    "href": "api/Vintagestory.API.Client.EnumFaceCullMode.html",
    "title": "Enum EnumFaceCullMode | VintageStory API",
    "keywords": "Enum EnumFaceCullMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Types that determine how block faces should be culled. Open in GitHub [DocumentAsJson] public enum EnumFaceCullMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Callback = 7 Calls method Block.ShouldMergeFace() to determine whether to cull the face or not Collapse = 3 Culls all faces that are adjacent to opaque faces and the bottom, east or south faces adjacent to blocks of the same id This causes to still leave one single face inbetween instead of 2, eliminating any z-fighting. CollapseMaterial = 5 Same as Collapse but checks for equal material Default = 0 Culls faces if they are opaque faces adjacent to opaque faces FlushExceptTop = 9 Used for blocks similar to Farmland or StonePath, which are not themselves opaque except on the base, but can cull horizontal sides if adjacent block is opaque (or the same id) Liquid = 6 Same as CollapseMaterial but also culls faces towards opaque blocks Merge = 2 Culls all faces that are adjacent to opaque faces and faces adjacent to blocks of the same id MergeMaterial = 4 Same as Merge but checks for equal material MergeSnowLayer = 8 NeverCull = 1 Never culls any faces Stairs = 10 Culls non-opaque faces if the same block is adjacent e.g. a wide staircase made from several Stairs blocks side-by-side (caution: in future this cull mode will not work with corner stairs shapes)"
  },
  "api/Vintagestory.API.Client.EnumFloat.html": {
    "href": "api/Vintagestory.API.Client.EnumFloat.html",
    "title": "Enum EnumFloat | VintageStory API",
    "keywords": "Enum EnumFloat Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumFloat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Inline = 1 Left = 2 None = 0 Right = 3"
  },
  "api/Vintagestory.API.Client.EnumFontStyle.html": {
    "href": "api/Vintagestory.API.Client.EnumFontStyle.html",
    "title": "Enum EnumFontStyle | VintageStory API",
    "keywords": "Enum EnumFontStyle Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub [Flags] public enum EnumFontStyle Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bold = 1 Italic = 2 Regular = 0 Strikeout = 8 Underline = 4"
  },
  "api/Vintagestory.API.Client.EnumFrameBuffer.html": {
    "href": "api/Vintagestory.API.Client.EnumFrameBuffer.html",
    "title": "Enum EnumFrameBuffer | VintageStory API",
    "keywords": "Enum EnumFrameBuffer Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumFrameBuffer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlurHorizontalLowRes = 9 BlurHorizontalMedRes = 2 BlurVerticalLowRes = 8 BlurVerticalMedRes = 3 Default = -1 FindBright = 4 GodRays = 7 LiquidDepth = 5 Luma = 10 Primary = 0 SSAO = 13 SSAOBlurHorizontal = 15 SSAOBlurHorizontalHalfRes = 17 SSAOBlurVertical = 14 SSAOBlurVerticalHalfRes = 16 ShadowmapFar = 11 ShadowmapNear = 12 Transparent = 1"
  },
  "api/Vintagestory.API.Client.EnumFramebufferAttachment.html": {
    "href": "api/Vintagestory.API.Client.EnumFramebufferAttachment.html",
    "title": "Enum EnumFramebufferAttachment | VintageStory API",
    "keywords": "Enum EnumFramebufferAttachment Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumFramebufferAttachment Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ColorAttachment0 = 36064 ColorAttachment1 = 36065 ColorAttachment2 = 36066 ColorAttachment3 = 36067 ColorAttachment4 = 36068 DepthAttachment = 36096"
  },
  "api/Vintagestory.API.Client.EnumFrustumCullMode.html": {
    "href": "api/Vintagestory.API.Client.EnumFrustumCullMode.html",
    "title": "Enum EnumFrustumCullMode | VintageStory API",
    "keywords": "Enum EnumFrustumCullMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumFrustumCullMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CullInstant = 2 CullInstantShadowPassFar = 4 CullInstantShadowPassNear = 3 CullNormal = 1 NoCull = 0"
  },
  "api/Vintagestory.API.Client.EnumHighlightBlocksMode.html": {
    "href": "api/Vintagestory.API.Client.EnumHighlightBlocksMode.html",
    "title": "Enum EnumHighlightBlocksMode | VintageStory API",
    "keywords": "Enum EnumHighlightBlocksMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumHighlightBlocksMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Absolute = 0 AttachedToBlockSelectionIndex = 5 AttachedToSelectedBlock = 3 CenteredToBlockSelectionIndex = 4 CenteredToSelectedBlock = 1 CenteredToSelectedBlockFollowTerrain = 2"
  },
  "api/Vintagestory.API.Client.EnumItemRenderTarget.html": {
    "href": "api/Vintagestory.API.Client.EnumItemRenderTarget.html",
    "title": "Enum EnumItemRenderTarget | VintageStory API",
    "keywords": "Enum EnumItemRenderTarget Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The render taget for an item stack Open in GitHub public enum EnumItemRenderTarget Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Ground = 4 Rendered when dropped on the ground Gui = 0 Rendered in a UI, usually the inventory [Obsolete(\"Use HandTp instead\")] HandFp = 1 Rendered in the players hand, first person mode HandTp = 2 Rendered in the players hand, third person mode HandTpOff = 3 Rendered in the players off hand, third person mode"
  },
  "api/Vintagestory.API.Client.EnumItemType.html": {
    "href": "api/Vintagestory.API.Client.EnumItemType.html",
    "title": "Enum EnumItemType | VintageStory API",
    "keywords": "Enum EnumItemType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumItemType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Item = 0 Title = 1"
  },
  "api/Vintagestory.API.Client.EnumLinebreakBehavior.html": {
    "href": "api/Vintagestory.API.Client.EnumLinebreakBehavior.html",
    "title": "Enum EnumLinebreakBehavior | VintageStory API",
    "keywords": "Enum EnumLinebreakBehavior Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumLinebreakBehavior Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AfterCharacter = 2 After any character AfterWord = 1 After every word Default = 0 Language specific default setting None = 3 Do not auto-line break, only explicitly after \\n"
  },
  "api/Vintagestory.API.Client.EnumLodPool.html": {
    "href": "api/Vintagestory.API.Client.EnumLodPool.html",
    "title": "Class EnumLodPool | VintageStory API",
    "keywords": "Class EnumLodPool Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class EnumLodPool Inheritance object EnumLodPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Everywhere public const int Everywhere = 1 Field Value int EverywhereExceptFar public const int EverywhereExceptFar = 2 Field Value int FarDistanceOnly public const int FarDistanceOnly = 3 Field Value int NearbyDetail public const int NearbyDetail = 0 Field Value int"
  },
  "api/Vintagestory.API.Client.EnumRenderStage.html": {
    "href": "api/Vintagestory.API.Client.EnumRenderStage.html",
    "title": "Enum EnumRenderStage | VintageStory API",
    "keywords": "Enum EnumRenderStage Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumRenderStage Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AfterBlit = 9 Scene has been rendered onto the default frame buffer, but not yet rendered UIs AfterFinalComposition = 11 The post processing passes are merged with all 3d geometry and the scene is color graded AfterOIT = 3 To render the held item over water. If done in the opaque pass it would not render water behind it. AfterPostProcessing = 8 After all 3d geometry has rendered and post processing of the frame is complete Before = 0 Before any rendering has begun, use for setting up stuff during render Done = 12 Scene is blitted onto the default frame buffer, buffers not yet swapped though so can still render to default FB OIT = 2 Order independent transparency Opaque = 1 Opaque/Alpha tested rendering Ortho = 10 Ortho mode for rendering GUIs and everything 2D ShadowFar = 4 Shadow map ShadowFarDone = 5 Shadow map done ShadowNear = 6 Shadow map ShadowNearDone = 7 Shadow map done"
  },
  "api/Vintagestory.API.Client.EnumShaderProgram.html": {
    "href": "api/Vintagestory.API.Client.EnumShaderProgram.html",
    "title": "Enum EnumShaderProgram | VintageStory API",
    "keywords": "Enum EnumShaderProgram Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumShaderProgram Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Autocamera = 23 Cinematic camera pather rendering Bilateralblur = 40 Blit = 28 Blockhighlights = 24 Worldedit block highlights Blur = 18 The Blur shader Celestialobject = 34 Chunkliquid = 14 Renders liquid chunk geometry Chunkliquiddepth = 41 Chunkopaque = 12 Renders opaque chunk geometry, no blend, alpha discard; Chunkshadowmap = 32 Chunkshadowmap_NoSSBOs = 42 Chunktopsoil = 21 Renders top soil chunk geometry Chunktransparent = 19 Renders half transparent chunk geometry using WOIT Colorgrade = 37 Debugdepthbuffer = 10 Decals = 15 Renders decals, obviously O_O Entityanimated = 26 For animated entities Final = 16 Color grading and merging of all rendered scenes Findbright = 20 For bloom shader Godrays = 22 For god rays Gui = 17 For drawing an item stack Guigear = 38 Guitopsoil = 35 Helditem = 11 For rendering the currently held item Luma = 27 Luma prepass for FXAA MultiTextureTest = 13 Debug shader Nightsky = 7 For rendering the stars skybox Particlescube = 2 For instanced rendering of cubic particles Particlesquad = 3 For instanced rendering of quad particles Particlesquad2d = 30 Shadowmap = 29 Shadowmapentityanimated = 31 Sky = 5 For rendering the sky colors Ssao = 39 Standard = 1 A very plain shader for drawing any geometry Texture2texture = 33 Transparentcompose = 9 Merges opaque geomerty with WOIT geometry Wireframe = 25 The selected block outline Woittest = 8 Debug shader for testing Weighted Blended Order Independent"
  },
  "api/Vintagestory.API.Client.EnumShaderType.html": {
    "href": "api/Vintagestory.API.Client.EnumShaderType.html",
    "title": "Enum EnumShaderType | VintageStory API",
    "keywords": "Enum EnumShaderType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumShaderType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ComputeShader = 37305 FragmentShader = 35632 GeometryShader = 36313 GeometryShaderExt = 36313 TessControlShader = 36488 TessEvaluationShader = 36487 VertexShader = 35633"
  },
  "api/Vintagestory.API.Client.EnumSoundType.html": {
    "href": "api/Vintagestory.API.Client.EnumSoundType.html",
    "title": "Enum EnumSoundType | VintageStory API",
    "keywords": "Enum EnumSoundType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Sound types, often used to determine specific volume controls. Open in GitHub public enum EnumSoundType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Ambient = 2 AmbientGlitchunaffected = 6 Entity = 4 Music = 1 MusicGlitchunaffected = 5 Sound = 0 SoundGlitchunaffected = 7 Weather = 3"
  },
  "api/Vintagestory.API.Client.EnumTextOrientation.html": {
    "href": "api/Vintagestory.API.Client.EnumTextOrientation.html",
    "title": "Enum EnumTextOrientation | VintageStory API",
    "keywords": "Enum EnumTextOrientation Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTextOrientation Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Center = 2 Justify = 3 Left = 0 Right = 1"
  },
  "api/Vintagestory.API.Client.EnumTextureFilter.html": {
    "href": "api/Vintagestory.API.Client.EnumTextureFilter.html",
    "title": "Enum EnumTextureFilter | VintageStory API",
    "keywords": "Enum EnumTextureFilter Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTextureFilter Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Linear = 9729 Nearest = 9728"
  },
  "api/Vintagestory.API.Client.EnumTextureInternalFormat.html": {
    "href": "api/Vintagestory.API.Client.EnumTextureInternalFormat.html",
    "title": "Enum EnumTextureInternalFormat | VintageStory API",
    "keywords": "Enum EnumTextureInternalFormat Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTextureInternalFormat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DepthComponent32 = 33191 R16f = 33325 Rgba16f = 34842 Rgba8 = 32856"
  },
  "api/Vintagestory.API.Client.EnumTexturePixelFormat.html": {
    "href": "api/Vintagestory.API.Client.EnumTexturePixelFormat.html",
    "title": "Enum EnumTexturePixelFormat | VintageStory API",
    "keywords": "Enum EnumTexturePixelFormat Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTexturePixelFormat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DepthComponent = 6402 Red = 6403 Rgba = 6408"
  },
  "api/Vintagestory.API.Client.EnumTextureWrap.html": {
    "href": "api/Vintagestory.API.Client.EnumTextureWrap.html",
    "title": "Enum EnumTextureWrap | VintageStory API",
    "keywords": "Enum EnumTextureWrap Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTextureWrap Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ClampToEdge = 33071 Repeat = 10497"
  },
  "api/Vintagestory.API.Client.EnumVelocityState.html": {
    "href": "api/Vintagestory.API.Client.EnumVelocityState.html",
    "title": "Enum EnumVelocityState | VintageStory API",
    "keywords": "Enum EnumVelocityState Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumVelocityState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Collided = 2 Was falling and has now collided with the terrain Moving = 0 Currently falling OutsideWorld = 1 Is now outside the world (x/y/z below -30 or x/z above mapsize + 30)"
  },
  "api/Vintagestory.API.Client.EnumVerticalAlign.html": {
    "href": "api/Vintagestory.API.Client.EnumVerticalAlign.html",
    "title": "Enum EnumVerticalAlign | VintageStory API",
    "keywords": "Enum EnumVerticalAlign Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum EnumVerticalAlign Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bottom = 2 FixedOffset = 3 Middle = 1 Top = 0"
  },
  "api/Vintagestory.API.Client.EventMusicTrack.html": {
    "href": "api/Vintagestory.API.Client.EventMusicTrack.html",
    "title": "Class EventMusicTrack | VintageStory API",
    "keywords": "Class EventMusicTrack Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class EventMusicTrack : SurfaceMusicTrack, IMusicTrack Inheritance object SurfaceMusicTrack EventMusicTrack Implements IMusicTrack Inherited Members SurfaceMusicTrack.Location SurfaceMusicTrack.OnPlayList SurfaceMusicTrack.OnPlayLists SurfaceMusicTrack.MinSunlight SurfaceMusicTrack.MinHour SurfaceMusicTrack.MaxHour SurfaceMusicTrack.Chance SurfaceMusicTrack.MaxTemperature SurfaceMusicTrack.MinRainFall SurfaceMusicTrack.MinSeason SurfaceMusicTrack.MaxSeason SurfaceMusicTrack.MinLatitude SurfaceMusicTrack.MaxLatitude SurfaceMusicTrack.DistanceToSpawnPoint SurfaceMusicTrack.Priority SurfaceMusicTrack.StartPriorityRnd SurfaceMusicTrack.StartPriority SurfaceMusicTrack.Sound SurfaceMusicTrack.IsActive SurfaceMusicTrack.Name SurfaceMusicTrack.ShouldPlayMusic SurfaceMusicTrack.globalCooldownUntilMs SurfaceMusicTrack.tracksCooldownUntilMs SurfaceMusicTrack.capi SurfaceMusicTrack.musicEngine SurfaceMusicTrack.nowMinHour SurfaceMusicTrack.nowMaxHour SurfaceMusicTrack.prevFrequency SurfaceMusicTrack.MusicFrequency SurfaceMusicTrack.BeginSort() SurfaceMusicTrack.selectMinMaxHour() SurfaceMusicTrack.FrequencyChanged(int, ICoreClientAPI) SurfaceMusicTrack.BeginPlay(TrackedPlayerProperties) SurfaceMusicTrack.ContinuePlay(float, TrackedPlayerProperties) SurfaceMusicTrack.FadeOut(float, Action) SurfaceMusicTrack.SetCooldown(float) SurfaceMusicTrack.UpdateVolume() SurfaceMusicTrack.FastForward(float) SurfaceMusicTrack.PositionString object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields SchematicCode [JsonProperty] public string SchematicCode Field Value string Methods Initialize(IAssetManager, ICoreClientAPI, IMusicEngine) Initialize the track. public override void Initialize(IAssetManager assetManager, ICoreClientAPI capi, IMusicEngine musicEngine) Parameters assetManager IAssetManager the global Asset Manager capi ICoreClientAPI The Core Client API musicEngine IMusicEngine ShouldPlay(TrackedPlayerProperties, ClimateCondition, BlockPos) Should this current track play? public override bool ShouldPlay(TrackedPlayerProperties props, ClimateCondition conds, BlockPos pos) Parameters props TrackedPlayerProperties Player Properties conds ClimateCondition pos BlockPos Returns bool Should we play the current track?"
  },
  "api/Vintagestory.API.Client.FastBitmap.html": {
    "href": "api/Vintagestory.API.Client.FastBitmap.html",
    "title": "Class FastBitmap | VintageStory API",
    "keywords": "Class FastBitmap Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FastBitmap Inheritance object FastBitmap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields _bmp public SKBitmap _bmp Field Value SKBitmap Properties Stride public int Stride { get; } Property Value int bmp public SKBitmap bmp { get; set; } Property Value SKBitmap Methods GetPixel(int, int) public int GetPixel(int x, int y) Parameters x int y int Returns int SetPixel(int, int, int) public void SetPixel(int x, int y, int color) Parameters x int y int color int"
  },
  "api/Vintagestory.API.Client.FileDropDelegate.html": {
    "href": "api/Vintagestory.API.Client.FileDropDelegate.html",
    "title": "Delegate FileDropDelegate | VintageStory API",
    "keywords": "Delegate FileDropDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void FileDropDelegate(FileDropEvent e) Parameters e FileDropEvent Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.FileDropEvent.html": {
    "href": "api/Vintagestory.API.Client.FileDropEvent.html",
    "title": "Class FileDropEvent | VintageStory API",
    "keywords": "Class FileDropEvent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FileDropEvent Inheritance object FileDropEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Filename public string Filename Field Value string Handled public bool Handled Field Value bool"
  },
  "api/Vintagestory.API.Client.FontConfig.html": {
    "href": "api/Vintagestory.API.Client.FontConfig.html",
    "title": "Class FontConfig | VintageStory API",
    "keywords": "Class FontConfig Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FontConfig Inheritance object FontConfig Derived CairoFont Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Color The color of the font. public double[] Color Field Value double[] FontWeight The weight of the font. public FontWeight FontWeight Field Value FontWeight Fontname The name of the font. public string Fontname Field Value string StrokeColor The color of the font outline. public double[] StrokeColor Field Value double[] StrokeWidth The thickness of the outline. public double StrokeWidth Field Value double UnscaledFontsize The size of the font before scaling is applied. public double UnscaledFontsize Field Value double"
  },
  "api/Vintagestory.API.Client.FrameBufferRef.html": {
    "href": "api/Vintagestory.API.Client.FrameBufferRef.html",
    "title": "Class FrameBufferRef | VintageStory API",
    "keywords": "Class FrameBufferRef Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FrameBufferRef Inheritance object FrameBufferRef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ColorTextureIds public int[] ColorTextureIds Field Value int[] DepthTextureId public int DepthTextureId Field Value int FbAttrs public FramebufferAttrs FbAttrs Field Value FramebufferAttrs FboId public int FboId Field Value int Height public int Height Field Value int Width public int Width Field Value int"
  },
  "api/Vintagestory.API.Client.FramebufferAttrs.html": {
    "href": "api/Vintagestory.API.Client.FramebufferAttrs.html",
    "title": "Class FramebufferAttrs | VintageStory API",
    "keywords": "Class FramebufferAttrs Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FramebufferAttrs Inheritance object FramebufferAttrs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FramebufferAttrs(string, int, int) public FramebufferAttrs(string name, int width, int height) Parameters name string width int height int Fields Attachments public FramebufferAttrsAttachment[] Attachments Field Value FramebufferAttrsAttachment[] Height public int Height Field Value int Name public string Name Field Value string Width public int Width Field Value int"
  },
  "api/Vintagestory.API.Client.FramebufferAttrsAttachment.html": {
    "href": "api/Vintagestory.API.Client.FramebufferAttrsAttachment.html",
    "title": "Class FramebufferAttrsAttachment | VintageStory API",
    "keywords": "Class FramebufferAttrsAttachment Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FramebufferAttrsAttachment Inheritance object FramebufferAttrsAttachment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AttachmentType public EnumFramebufferAttachment AttachmentType Field Value EnumFramebufferAttachment Texture public RawTexture Texture Field Value RawTexture"
  },
  "api/Vintagestory.API.Client.FreezingPerceptionEffect.html": {
    "href": "api/Vintagestory.API.Client.FreezingPerceptionEffect.html",
    "title": "Class FreezingPerceptionEffect | VintageStory API",
    "keywords": "Class FreezingPerceptionEffect Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FreezingPerceptionEffect : PerceptionEffect Inheritance object PerceptionEffect FreezingPerceptionEffect Inherited Members PerceptionEffect.Code PerceptionEffect.PerceptionEffectId PerceptionEffect.Intensity PerceptionEffect.DurationHours PerceptionEffect.capi PerceptionEffect.OnOwnPlayerDataReceived(EntityPlayer) PerceptionEffect.ApplyToFpHand(Matrixf) PerceptionEffect.ApplyToTpPlayer(EntityPlayer, float[], float?) PerceptionEffect.NowDisabled() PerceptionEffect.NowActive(float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FreezingPerceptionEffect(ICoreClientAPI) public FreezingPerceptionEffect(ICoreClientAPI capi) Parameters capi ICoreClientAPI Methods OnBeforeGameRender(float) public override void OnBeforeGameRender(float dt) Parameters dt float"
  },
  "api/Vintagestory.API.Client.FrustumCulling.html": {
    "href": "api/Vintagestory.API.Client.FrustumCulling.html",
    "title": "Class FrustumCulling | VintageStory API",
    "keywords": "Class FrustumCulling Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class FrustumCulling Inheritance object FrustumCulling Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ViewDistanceSq public int ViewDistanceSq Field Value int lod0BiasSq public float lod0BiasSq Field Value float lod2BiasSq If distance squared is above this fraction of ViewDistanceSq, switch to LOD2. Default value corresponds to distances beyond around 67% of the player's view distance. At default, approximately 55% of the total rendered chunks will use LOD2. public double lod2BiasSq Field Value double shadowRangeX public double shadowRangeX Field Value double shadowRangeZ public double shadowRangeZ Field Value double Methods CalcFrustumEquations(BlockPos, double[], double[]) public void CalcFrustumEquations(BlockPos playerPos, double[] projectionMatrix, double[] cameraMatrix) Parameters playerPos BlockPos projectionMatrix double[] cameraMatrix double[] InFrustum(Sphere) public bool InFrustum(Sphere sphere) Parameters sphere Sphere Returns bool InFrustumAndRange(Sphere, bool, int) public bool InFrustumAndRange(Sphere sphere, bool nowVisible, int lodLevel = 0) Parameters sphere Sphere nowVisible bool lodLevel int Returns bool InFrustumShadowPass(Sphere) public bool InFrustumShadowPass(Sphere sphere) Parameters sphere Sphere Returns bool SphereInFrustum(double, double, double, double) public bool SphereInFrustum(double x, double y, double z, double radius) Parameters x double y double z double radius double Returns bool UpdateViewDistance(int) public void UpdateViewDistance(int newValue) Parameters newValue int"
  },
  "api/Vintagestory.API.Client.GlKeyNames.html": {
    "href": "api/Vintagestory.API.Client.GlKeyNames.html",
    "title": "Class GlKeyNames | VintageStory API",
    "keywords": "Class GlKeyNames Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GlKeyNames Inheritance object GlKeyNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetKeyName(GlKeys) Gets the string the key would produce upon pressing it without considering any modifiers (but single keys get converted to uppercase). So GlKeys.W on QWERTY Keyboard layout returns W, GlKeys.Space returns Space etc. public static string GetKeyName(GlKeys key) Parameters key GlKeys Returns string GetPrintableChar(int) Returns the printable character for a key. Does return null on none printable keys like Enter public static string GetPrintableChar(int key) Parameters key int Returns string ToString(GlKeys) Converts the given key to a string. public static string ToString(GlKeys key) Parameters key GlKeys the key being passed in. Returns string the string name of the key."
  },
  "api/Vintagestory.API.Client.GlKeys.html": {
    "href": "api/Vintagestory.API.Client.GlKeys.html",
    "title": "Enum GlKeys | VintageStory API",
    "keywords": "Enum GlKeys Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Internally the game uses OpenTK and their Keys are by default mapped to US QWERTY Keyboard layout which the GlKeys also do. Upon typing text in a Text input field it will produce the correct characters according to your keyboard layout. If you need to get the character for the current Keyboard layout use GetKeyName(GlKeys) Open in GitHub public enum GlKeys Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields A = 83 AltLeft = 5 AltRight = 6 B = 84 Back = 53 BackSlash = 129 BackSpace = 53 BracketLeft = 122 BracketRight = 123 C = 85 CapsLock = 60 Clear = 65 Comma = 126 ControlLeft = 3 ControlRight = 4 D = 86 Delete = 55 Down = 46 E = 87 End = 59 Enter = 49 Escape = 50 F = 88 F1 = 10 F10 = 19 F11 = 20 F12 = 21 F13 = 22 F14 = 23 F15 = 24 F16 = 25 F17 = 26 F18 = 27 F19 = 28 F2 = 11 F20 = 29 F21 = 30 F22 = 31 F23 = 32 F24 = 33 F25 = 34 F26 = 35 F27 = 36 F28 = 37 F29 = 38 F3 = 12 F30 = 39 F31 = 40 F32 = 41 F33 = 42 F34 = 43 F35 = 44 F4 = 13 F5 = 14 F6 = 15 F7 = 16 F8 = 17 F9 = 18 G = 89 H = 90 Home = 58 I = 91 Insert = 54 J = 92 K = 93 Keypad0 = 67 Keypad1 = 68 Keypad2 = 69 Keypad3 = 70 Keypad4 = 71 Keypad5 = 72 Keypad6 = 73 Keypad7 = 74 Keypad8 = 75 Keypad9 = 76 KeypadAdd = 80 KeypadDecimal = 81 KeypadDivide = 77 KeypadEnter = 82 KeypadMinus = 79 KeypadMultiply = 78 KeypadPlus = 80 KeypadSubtract = 79 L = 94 LAlt = 5 LBracket = 122 LControl = 3 LShift = 1 LWin = 7 LastKey = 130 Left = 47 M = 95 Menu = 9 Minus = 120 N = 96 NumLock = 64 Number0 = 109 Number1 = 110 Number2 = 111 Number3 = 112 Number4 = 113 Number5 = 114 Number6 = 115 Number7 = 116 Number8 = 117 Number9 = 118 O = 97 P = 98 PageDown = 57 PageUp = 56 Pause = 63 Period = 127 Plus = 121 PrintScreen = 62 Q = 99 Quote = 125 R = 100 RAlt = 6 RBracket = 123 RControl = 4 RShift = 2 RWin = 8 Right = 48 S = 101 ScrollLock = 61 Semicolon = 124 ShiftLeft = 1 ShiftRight = 2 Slash = 128 Sleep = 66 Space = 51 T = 102 Tab = 52 Tilde = 119 U = 103 Unknown = 0 Up = 45 V = 104 W = 105 WinLeft = 7 WinRight = 8 X = 106 Y = 107 Z = 108"
  },
  "api/Vintagestory.API.Client.GridRecipeAndUnnamedIngredients.html": {
    "href": "api/Vintagestory.API.Client.GridRecipeAndUnnamedIngredients.html",
    "title": "Class GridRecipeAndUnnamedIngredients | VintageStory API",
    "keywords": "Class GridRecipeAndUnnamedIngredients Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GridRecipeAndUnnamedIngredients Inheritance object GridRecipeAndUnnamedIngredients Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Recipe public GridRecipe Recipe Field Value GridRecipe unnamedIngredients public Dictionary<int, ItemStack[]> unnamedIngredients Field Value Dictionary<int, ItemStack[]>"
  },
  "api/Vintagestory.API.Client.GuiComposer.html": {
    "href": "api/Vintagestory.API.Client.GuiComposer.html",
    "title": "Class GuiComposer | VintageStory API",
    "keywords": "Class GuiComposer Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Composes a dialog which are made from a set of elements The composed dialog is cached, so to recompose you have to Recompose All elements or instantiate a new composer with doCache set to false The caching allows the dialog using the composer to not worry about performance and just call compose whenever it has to display a new composed dialog You add components by chaining the functions of the composer together for building the result. Open in GitHub public class GuiComposer : IDisposable Inheritance object GuiComposer Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) GuiComposerHelpers.AddAutoSizeHoverText(GuiComposer, string, CairoFont, int, ElementBounds, string) GuiComposerHelpers.AddButton(GuiComposer, string, ActionConsumable, ElementBounds, CairoFont, EnumButtonStyle, string) GuiComposerHelpers.AddButton(GuiComposer, string, ActionConsumable, ElementBounds, CairoFont, EnumButtonStyle, EnumTextOrientation, string) GuiComposerHelpers.AddButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, string) GuiComposerHelpers.AddButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, EnumTextOrientation, string) GuiComposerHelpers.AddCellList<T>(GuiComposer, ElementBounds, OnRequireCell<T>, IEnumerable<T>, string) GuiComposerHelpers.AddChatInput(GuiComposer, ElementBounds, Action<string>, string) GuiComposerHelpers.AddColorListPicker(GuiComposer, int[], Action<int>, ElementBounds, int, string) GuiComposerHelpers.AddCompactVerticalScrollbar(GuiComposer, Action<float>, ElementBounds, string) GuiComposerHelpers.AddConfigList(GuiComposer, List<ConfigItem>, ConfigItemClickDelegate, CairoFont, ElementBounds, string) GuiComposerHelpers.AddContainer(GuiComposer, ElementBounds, string) GuiComposerHelpers.AddCustomRender(GuiComposer, ElementBounds, RenderDelegateWithBounds) GuiComposerHelpers.AddDialogBG(GuiComposer, ElementBounds, bool, float) GuiComposerHelpers.AddDialogTitleBar(GuiComposer, string, Action, CairoFont, ElementBounds, string) GuiComposerHelpers.AddDialogTitleBarWithBg(GuiComposer, string, Action, CairoFont, ElementBounds, string) GuiComposerHelpers.AddDropDown(GuiComposer, string[], string[], int, SelectionChangedDelegate, ElementBounds, string) GuiComposerHelpers.AddDropDown(GuiComposer, string[], string[], int, SelectionChangedDelegate, ElementBounds, CairoFont, string) GuiComposerHelpers.AddDynamicCustomDraw(GuiComposer, ElementBounds, DrawDelegateWithBounds, string) GuiComposerHelpers.AddElementListPicker<T>(GuiComposer, Type, T[], Action<int>, ElementBounds, int, string) GuiComposerHelpers.AddEmbossedText(GuiComposer, string, CairoFont, ElementBounds, string) GuiComposerHelpers.AddHorizontalTabs(GuiComposer, GuiTab[], ElementBounds, Action<int>, CairoFont, CairoFont, string) GuiComposerHelpers.AddHoverText(GuiComposer, string, CairoFont, int, ElementBounds, string) GuiComposerHelpers.AddHoverText(GuiComposer, string, CairoFont, int, ElementBounds, TextBackground, string) GuiComposerHelpers.AddIconButton(GuiComposer, string, Action<bool>, ElementBounds, string) GuiComposerHelpers.AddIconButton(GuiComposer, string, CairoFont, Action<bool>, ElementBounds, string) GuiComposerHelpers.AddIconListPicker(GuiComposer, string[], Action<int>, ElementBounds, int, string) GuiComposerHelpers.AddIconToggleButtons(GuiComposer, string[], CairoFont, Action<int>, ElementBounds[], string) GuiComposerHelpers.AddInvStatbar(GuiComposer, ElementBounds, double[], string) GuiComposerHelpers.AddItemSlotGrid(GuiComposer, IInventory, Action<object>, int, int[], ElementBounds, string) GuiComposerHelpers.AddItemSlotGrid(GuiComposer, IInventory, Action<object>, int, ElementBounds, string) GuiComposerHelpers.AddItemSlotGridExcl(GuiComposer, IInventory, Action<object>, int, int[], ElementBounds, string) GuiComposerHelpers.AddMultiSelectDropDown(GuiComposer, string[], string[], int, SelectionChangedDelegate, ElementBounds, string) GuiComposerHelpers.AddNumberInput(GuiComposer, ElementBounds, Action<string>, CairoFont, string) GuiComposerHelpers.AddPassiveItemSlot(GuiComposer, ElementBounds, IInventory, ItemSlot, bool) GuiComposerHelpers.AddRichtext(GuiComposer, string, CairoFont, ElementBounds, Action<LinkTextComponent>, string) GuiComposerHelpers.AddRichtext(GuiComposer, string, CairoFont, ElementBounds, string) GuiComposerHelpers.AddRichtext(GuiComposer, RichTextComponentBase[], ElementBounds, string) GuiComposerHelpers.AddShadedDialogBG(GuiComposer, ElementBounds, bool, double, float) GuiComposerHelpers.AddSkillItemGrid(GuiComposer, List<SkillItem>, int, int, Action<int>, ElementBounds, string) GuiComposerHelpers.AddSlider(GuiComposer, ActionConsumable<int>, ElementBounds, string) GuiComposerHelpers.AddSmallButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, string) GuiComposerHelpers.AddSmallButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, EnumTextOrientation, string) GuiComposerHelpers.AddStatbar(GuiComposer, ElementBounds, double[], bool, string) GuiComposerHelpers.AddStatbar(GuiComposer, ElementBounds, double[], string) GuiComposerHelpers.AddStaticCustomDraw(GuiComposer, ElementBounds, DrawDelegateWithBounds) GuiComposerHelpers.AddStaticText(GuiComposer, string, CairoFont, ElementBounds, string) GuiComposerHelpers.AddStaticText(GuiComposer, string, CairoFont, EnumTextOrientation, ElementBounds, string) GuiComposerHelpers.AddStaticTextAutoBoxSize(GuiComposer, string, CairoFont, EnumTextOrientation, ElementBounds, string) GuiComposerHelpers.AddStaticTextAutoFontSize(GuiComposer, string, CairoFont, ElementBounds, string) GuiComposerHelpers.AddSwitch(GuiComposer, Action<bool>, ElementBounds, string, double, double) GuiComposerHelpers.AddTextArea(GuiComposer, ElementBounds, Action<string>, CairoFont, string) GuiComposerHelpers.AddTextInput(GuiComposer, ElementBounds, Action<string>, CairoFont, string) GuiComposerHelpers.AddTextToggleButtons(GuiComposer, string[], CairoFont, Action<int>, ElementBounds[], string) GuiComposerHelpers.AddToggleButton(GuiComposer, string, CairoFont, Action<bool>, ElementBounds, string) GuiComposerHelpers.AddTranspHoverText(GuiComposer, string, CairoFont, int, ElementBounds, string) GuiComposerHelpers.AddVerticalScrollbar(GuiComposer, Action<float>, ElementBounds, string) GuiComposerHelpers.AddVerticalTabs(GuiComposer, GuiTab[], ElementBounds, Action<int, GuiTab>, string) GuiComposerHelpers.AddVerticalToggleTabs(GuiComposer, GuiTab[], ElementBounds, Action<int, GuiTab>, string) GuiComposerHelpers.ColorListPickerSetValue(GuiComposer, string, int) GuiComposerHelpers.GetButton(GuiComposer, string) GuiComposerHelpers.GetCellList<T>(GuiComposer, string) GuiComposerHelpers.GetChatInput(GuiComposer, string) GuiComposerHelpers.GetColorListPicker(GuiComposer, string) GuiComposerHelpers.GetCompactScrollbar(GuiComposer, string) GuiComposerHelpers.GetConfigList(GuiComposer, string) GuiComposerHelpers.GetContainer(GuiComposer, string) GuiComposerHelpers.GetCustomDraw(GuiComposer, string) GuiComposerHelpers.GetCustomRender(GuiComposer, string) GuiComposerHelpers.GetDropDown(GuiComposer, string) GuiComposerHelpers.GetEmbossedText(GuiComposer, string) GuiComposerHelpers.GetHorizontalTabs(GuiComposer, string) GuiComposerHelpers.GetHoverText(GuiComposer, string) GuiComposerHelpers.GetIconListPicker(GuiComposer, string) GuiComposerHelpers.GetNumberInput(GuiComposer, string) GuiComposerHelpers.GetRichtext(GuiComposer, string) GuiComposerHelpers.GetScrollbar(GuiComposer, string) GuiComposerHelpers.GetSkillItemGrid(GuiComposer, string) GuiComposerHelpers.GetSlider(GuiComposer, string) GuiComposerHelpers.GetSlotGrid(GuiComposer, string) GuiComposerHelpers.GetSlotGridExcl(GuiComposer, string) GuiComposerHelpers.GetStatbar(GuiComposer, string) GuiComposerHelpers.GetStaticText(GuiComposer, string) GuiComposerHelpers.GetSwitch(GuiComposer, string) GuiComposerHelpers.GetTextArea(GuiComposer, string) GuiComposerHelpers.GetTextInput(GuiComposer, string) GuiComposerHelpers.GetTitleBar(GuiComposer, string) GuiComposerHelpers.GetToggleButton(GuiComposer, string) GuiComposerHelpers.GetVerticalTab(GuiComposer, string) GuiComposerHelpers.IconListPickerSetValue(GuiComposer, string, int) GuiComposerHelpers.ToggleButtonsSetValue(GuiComposer, string, int) GuiElementClipHelpler.BeginClip(GuiComposer, ElementBounds) GuiElementClipHelpler.EndClip(GuiComposer) GuiElementDynamicTextHelper.AddDynamicText(GuiComposer, string, CairoFont, ElementBounds, string) GuiElementDynamicTextHelper.AddDynamicText(GuiComposer, string, CairoFont, EnumTextOrientation, ElementBounds, string) GuiElementDynamicTextHelper.GetDynamicText(GuiComposer, string) GuiElementGameOverlyHelper.AddGameOverlay(GuiComposer, ElementBounds, double[]) GuiElementGrayBackgroundHelpber.AddGrayBG(GuiComposer, ElementBounds) GuiElementHelpers.AddImage(GuiComposer, ElementBounds, AssetLocation) GuiElementImageBackgroundHelper.AddImageBG(GuiComposer, ElementBounds, AssetLocation, float, float, float) GuiElementInsetHelper.AddInset(GuiComposer, ElementBounds, int, float) Fields Api public ICoreClientAPI Api Field Value ICoreClientAPI Color public Vec4f Color Field Value Vec4f Composed public bool Composed Field Value bool DialogName public string DialogName Field Value string Enabled public bool Enabled Field Value bool MouseOverCursor public string MouseOverCursor Field Value string OnFocusChanged public Action<bool> OnFocusChanged Field Value Action<bool> Outlines public static int Outlines Field Value int Tabbable Whether or not the Tab-Key down event should be used and consumed to cycle-focus individual gui elements public bool Tabbable Field Value bool bounds protected ElementBounds bounds Field Value ElementBounds conditionalAdds protected Stack<bool> conditionalAdds Field Value Stack<bool> currentElementKey protected int currentElementKey Field Value int currentFocusableElementKey protected int currentFocusableElementKey Field Value int interactiveElementsInDrawOrder protected List<GuiElement> interactiveElementsInDrawOrder Field Value List<GuiElement> lastAddedElement protected GuiElement lastAddedElement Field Value GuiElement lastAddedElementBounds protected ElementBounds lastAddedElementBounds Field Value ElementBounds parentBoundsForNextElement protected Stack<ElementBounds> parentBoundsForNextElement Field Value Stack<ElementBounds> staticElementsTexture protected LoadedTexture staticElementsTexture Field Value LoadedTexture zDepth public float zDepth Field Value float Properties Bounds public ElementBounds Bounds { get; } Property Value ElementBounds CurParentBounds public ElementBounds CurParentBounds { get; } Property Value ElementBounds CurrentElementKey A unique number assigned to each element public int CurrentElementKey { get; } Property Value int CurrentTabIndexElement Gets the currently tabbed index element, if there is one currently focused. public GuiElement CurrentTabIndexElement { get; } Property Value GuiElement FirstTabbableElement public GuiElement FirstTabbableElement { get; } Property Value GuiElement this[string] Retrieve gui element by key. Returns null if not found. public GuiElement this[string key] { get; } Parameters key string Property Value GuiElement LastAddedElement public GuiElement LastAddedElement { get; } Property Value GuiElement LastAddedElementBounds public ElementBounds LastAddedElementBounds { get; } Property Value ElementBounds MaxTabIndex Gets the maximum tab index of the components. public int MaxTabIndex { get; } Property Value int Methods AddIf(bool) Adds a condition for adding a group of items to the GUI- eg: if you have a crucible in the firepit, add those extra slots. Should always pair with an EndIf() public GuiComposer AddIf(bool condition) Parameters condition bool When the following slots should be added Returns GuiComposer AddInteractiveElement(GuiElement, string) Adds an interactive element to the composer. public GuiComposer AddInteractiveElement(GuiElement element, string key = null) Parameters element GuiElement The element to add. key string The name of the element. (default: null) Returns GuiComposer AddStaticElement(GuiElement, string) Adds a static element to the composer. public GuiComposer AddStaticElement(GuiElement element, string key = null) Parameters element GuiElement The element to add. key string The name of the element (default: null) Returns GuiComposer BeginChildElements() Starts a set of child elements. public GuiComposer BeginChildElements() Returns GuiComposer BeginChildElements(ElementBounds) Starts a set of child elements. public GuiComposer BeginChildElements(ElementBounds bounds) Parameters bounds ElementBounds The bounds for the child elements. Returns GuiComposer Clear(ElementBounds) public void Clear(ElementBounds newBounds) Parameters newBounds ElementBounds Compose(bool) Tells the composer to compose the gui. public GuiComposer Compose(bool focusFirstElement = true) Parameters focusFirstElement bool Whether or not to put the first element in focus. Returns GuiComposer CreateEmpty(ICoreClientAPI) Creates an empty GuiComposer. public static GuiComposer CreateEmpty(ICoreClientAPI api) Parameters api ICoreClientAPI The Client API Returns GuiComposer An empty GuiComposer. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() EndChildElements() End of the current set of child elements. public GuiComposer EndChildElements() Returns GuiComposer EndIf() End of the AddIf block. public GuiComposer EndIf() Returns GuiComposer Execute(Action) Runs given method public GuiComposer Execute(Action method) Parameters method Action Returns GuiComposer FocusElement(int) marks an element as in focus. public bool FocusElement(int tabIndex) Parameters tabIndex int The tab index to focus at. Returns bool Whether or not the focus could be done. GetElement(string) Gets the element by name. public GuiElement GetElement(string key) Parameters key string The name of the element to get. Returns GuiElement OnKeyDown(KeyEvent, bool) Fires the OnKeyDown events. public void OnKeyDown(KeyEvent args, bool haveFocus) Parameters args KeyEvent The keyboard information. haveFocus bool Whether or not the gui has focus. OnKeyPress(KeyEvent) Fires the OnKeyPress event. public void OnKeyPress(KeyEvent args) Parameters args KeyEvent The keyboard information OnKeyUp(KeyEvent) Fires the OnKeyDown events. public void OnKeyUp(KeyEvent args) Parameters args KeyEvent The keyboard information. OnMouseDown(MouseEvent) Fires the OnMouseDown events. public void OnMouseDown(MouseEvent mouseArgs) Parameters mouseArgs MouseEvent The mouse information. OnMouseEnterSlot(ItemSlot) public bool OnMouseEnterSlot(ItemSlot slot) Parameters slot ItemSlot Returns bool OnMouseLeaveSlot(ItemSlot) public bool OnMouseLeaveSlot(ItemSlot slot) Parameters slot ItemSlot Returns bool OnMouseMove(MouseEvent) Fires the OnMouseMove events. public void OnMouseMove(MouseEvent mouse) Parameters mouse MouseEvent The mouse information. OnMouseUp(MouseEvent) Fires the OnMouseUp events. public void OnMouseUp(MouseEvent mouse) Parameters mouse MouseEvent The mouse information. OnMouseWheel(MouseWheelEventArgs) Fires the OnMouseWheel events. public void OnMouseWheel(MouseWheelEventArgs mouse) Parameters mouse MouseWheelEventArgs The mouse wheel information. OnlyDynamic() Sets the render to Dynamic components only public GuiComposer OnlyDynamic() Returns GuiComposer PostRender(float) Fires the PostRender event. public void PostRender(float deltaTime) Parameters deltaTime float The change in time. PremultipliedAlpha(bool) On by default, is passed on to the gui elements as well. Disabling it means has a performance impact. Recommeded to leave enabled, but may need to be disabled to smoothly alpha blend text elements. Must be called before adding elements and before composing. Notice! Most gui elements even yet support non-premul alpha mode public GuiComposer PremultipliedAlpha(bool enable) Parameters enable bool Returns GuiComposer ReCompose() Rebuilds the Composed GUI. public void ReCompose() Render(float) Fires the render event. public void Render(float deltaTime) Parameters deltaTime float The change in time. UnfocusOwnElements() Unfocuses the elements within this GUI composer. public void UnfocusOwnElements() UnfocusOwnElementsExcept(GuiElement) Unfocuses all elements except one specific element. public void UnfocusOwnElementsExcept(GuiElement elem) Parameters elem GuiElement The element to remain in focus. Events OnComposed Triggered when the gui scale changed or the game window was resized public event Action OnComposed Event Type Action"
  },
  "api/Vintagestory.API.Client.GuiComposerHelpers.html": {
    "href": "api/Vintagestory.API.Client.GuiComposerHelpers.html",
    "title": "Class GuiComposerHelpers | VintageStory API",
    "keywords": "Class GuiComposerHelpers Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiComposerHelpers Inheritance object GuiComposerHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAutoSizeHoverText(GuiComposer, string, CairoFont, int, ElementBounds, string) public static GuiComposer AddAutoSizeHoverText(this GuiComposer composer, string text, CairoFont font, int width, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string font CairoFont width int bounds ElementBounds key string Returns GuiComposer AddButton(GuiComposer, string, ActionConsumable, ElementBounds, CairoFont, EnumButtonStyle, string) Adds a clickable button public static GuiComposer AddButton(this GuiComposer composer, string text, ActionConsumable onClick, ElementBounds bounds, CairoFont buttonFont, EnumButtonStyle style = EnumButtonStyle.Normal, string key = null) Parameters composer GuiComposer text string The text displayed inside the button onClick ActionConsumable Handler for when the button is clicked bounds ElementBounds buttonFont CairoFont The font to be used for the text inside the button. style EnumButtonStyle key string Returns GuiComposer AddButton(GuiComposer, string, ActionConsumable, ElementBounds, CairoFont, EnumButtonStyle, EnumTextOrientation, string) [Obsolete(\"Use Method without orientation argument\")] public static GuiComposer AddButton(this GuiComposer composer, string text, ActionConsumable onClick, ElementBounds bounds, CairoFont buttonFont, EnumButtonStyle style, EnumTextOrientation orientation, string key = null) Parameters composer GuiComposer text string onClick ActionConsumable bounds ElementBounds buttonFont CairoFont style EnumButtonStyle orientation EnumTextOrientation key string Returns GuiComposer AddButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, string) Adds a clickable button button with font CairoFont.ButtonText() public static GuiComposer AddButton(this GuiComposer composer, string text, ActionConsumable onClick, ElementBounds bounds, EnumButtonStyle style = EnumButtonStyle.Normal, string key = null) Parameters composer GuiComposer text string The text displayed inside the button onClick ActionConsumable Handler for when the button is clicked bounds ElementBounds style EnumButtonStyle key string Returns GuiComposer AddButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, EnumTextOrientation, string) [Obsolete(\"Use Method without orientation argument\")] public static GuiComposer AddButton(this GuiComposer composer, string text, ActionConsumable onClick, ElementBounds bounds, EnumButtonStyle style, EnumTextOrientation orientation, string key = null) Parameters composer GuiComposer text string onClick ActionConsumable bounds ElementBounds style EnumButtonStyle orientation EnumTextOrientation key string Returns GuiComposer AddCellList<T>(GuiComposer, ElementBounds, OnRequireCell<T>, IEnumerable<T>, string) Adds a List to the current GUI. public static GuiComposer AddCellList<T>(this GuiComposer composer, ElementBounds bounds, OnRequireCell<T> cellCreator, IEnumerable<T> cells = null, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the cell. cellCreator OnRequireCell<T> the event fired when the cell is requested by the GUI cells IEnumerable<T> The cells of the list. key string The identifier for the list. Returns GuiComposer Type Parameters T AddChatInput(GuiComposer, ElementBounds, Action<string>, string) Adds a chat input to the GUI. public static GuiComposer AddChatInput(this GuiComposer composer, ElementBounds bounds, Action<string> onTextChanged, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the text. onTextChanged Action<string> The event fired when the text is changed. key string The name of this chat component. Returns GuiComposer AddColorListPicker(GuiComposer, int[], Action<int>, ElementBounds, int, string) Adds a range of clickable colors public static GuiComposer AddColorListPicker(this GuiComposer composer, int[] colors, Action<int> onToggle, ElementBounds startBounds, int maxLineWidth, string key = null) Parameters composer GuiComposer colors int[] onToggle Action<int> startBounds ElementBounds maxLineWidth int key string Returns GuiComposer AddCompactVerticalScrollbar(GuiComposer, Action<float>, ElementBounds, string) Adds a compact vertical scrollbar to the current GUI. public static GuiComposer AddCompactVerticalScrollbar(this GuiComposer composer, Action<float> onNewScrollbarValue, ElementBounds bounds, string key = null) Parameters composer GuiComposer onNewScrollbarValue Action<float> The event fired for the change in the scrollbar. bounds ElementBounds the bounds of the scrollbar. key string the internal name of the scrollbar. Returns GuiComposer AddConfigList(GuiComposer, List<ConfigItem>, ConfigItemClickDelegate, CairoFont, ElementBounds, string) Adds a config List to the current GUI. public static GuiComposer AddConfigList(this GuiComposer composer, List<ConfigItem> items, ConfigItemClickDelegate onItemClick, CairoFont font, ElementBounds bounds, string key = null) Parameters composer GuiComposer items List<ConfigItem> The items to add. onItemClick ConfigItemClickDelegate The event fired when the item is clicked. font CairoFont The font of the Config List. bounds ElementBounds The bounds of the config list. key string The name of the config list. Returns GuiComposer AddContainer(GuiComposer, ElementBounds, string) Adds a container to the current GUI. Can be used to add any gui element within a scrollable window. public static GuiComposer AddContainer(this GuiComposer composer, ElementBounds bounds, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the cell. key string The identifier for the list. Returns GuiComposer AddCustomRender(GuiComposer, ElementBounds, RenderDelegateWithBounds) Adds a static custom draw component to the GUI. public static GuiComposer AddCustomRender(this GuiComposer composer, ElementBounds bounds, RenderDelegateWithBounds onRender) Parameters composer GuiComposer bounds ElementBounds The bounds of the component. onRender RenderDelegateWithBounds The event fired when the element is drawn. Returns GuiComposer AddDialogBG(GuiComposer, ElementBounds, bool, float) public static GuiComposer AddDialogBG(this GuiComposer composer, ElementBounds bounds, bool withTitleBar = true, float alpha = 1) Parameters composer GuiComposer bounds ElementBounds withTitleBar bool alpha float Returns GuiComposer AddDialogTitleBar(GuiComposer, string, Action, CairoFont, ElementBounds, string) Adds a dialog title bar to the GUI. public static GuiComposer AddDialogTitleBar(this GuiComposer composer, string text, Action onClose = null, CairoFont font = null, ElementBounds bounds = null, string key = null) Parameters composer GuiComposer text string The text of the title bar. onClose Action The event fired when the title bar is closed. font CairoFont The font of the title bar. bounds ElementBounds The bounds of the title bar. key string Returns GuiComposer AddDialogTitleBarWithBg(GuiComposer, string, Action, CairoFont, ElementBounds, string) Adds a dialog title bar to the GUI with a background. public static GuiComposer AddDialogTitleBarWithBg(this GuiComposer composer, string text, Action onClose = null, CairoFont font = null, ElementBounds bounds = null, string key = null) Parameters composer GuiComposer text string The text of the title bar. onClose Action The event fired when the title bar is closed. font CairoFont The font of the title bar. bounds ElementBounds The bounds of the title bar. key string Returns GuiComposer AddDropDown(GuiComposer, string[], string[], int, SelectionChangedDelegate, ElementBounds, string) Adds a dropdown to the current GUI instance. public static GuiComposer AddDropDown(this GuiComposer composer, string[] values, string[] names, int selectedIndex, SelectionChangedDelegate onSelectionChanged, ElementBounds bounds, string key = null) Parameters composer GuiComposer values string[] The values of the current drodown. names string[] The names of those values. selectedIndex int The default selected index. onSelectionChanged SelectionChangedDelegate The event fired when the index is changed. bounds ElementBounds The bounds of the index. key string The name of this dropdown. Returns GuiComposer AddDropDown(GuiComposer, string[], string[], int, SelectionChangedDelegate, ElementBounds, CairoFont, string) Adds a dropdown to the current GUI instance. public static GuiComposer AddDropDown(this GuiComposer composer, string[] values, string[] names, int selectedIndex, SelectionChangedDelegate onSelectionChanged, ElementBounds bounds, CairoFont font, string key = null) Parameters composer GuiComposer values string[] The values of the current drodown. names string[] The names of those values. selectedIndex int The default selected index. onSelectionChanged SelectionChangedDelegate The event fired when the index is changed. bounds ElementBounds The bounds of the index. font CairoFont key string The name of this dropdown. Returns GuiComposer AddDynamicCustomDraw(GuiComposer, ElementBounds, DrawDelegateWithBounds, string) Adds a dynamic custom draw component to the GUI. public static GuiComposer AddDynamicCustomDraw(this GuiComposer composer, ElementBounds bounds, DrawDelegateWithBounds onDraw, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the component. onDraw DrawDelegateWithBounds The event fired when the element is drawn. key string The name of the element. Returns GuiComposer AddElementListPicker<T>(GuiComposer, Type, T[], Action<int>, ElementBounds, int, string) Adds multiple buttons with Text. public static GuiComposer AddElementListPicker<T>(this GuiComposer composer, Type pickertype, T[] elems, Action<int> onToggle, ElementBounds startBounds, int maxLineWidth, string key) Parameters composer GuiComposer pickertype Type elems T[] onToggle Action<int> The event fired when the button is pressed. startBounds ElementBounds The bounds of the buttons. maxLineWidth int key string The key given to the bundle of buttons. Returns GuiComposer Type Parameters T AddEmbossedText(GuiComposer, string, CairoFont, ElementBounds, string) Adds an embossed text component to the GUI. public static GuiComposer AddEmbossedText(this GuiComposer composer, string text, CairoFont font, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the component. font CairoFont The font of the text. bounds ElementBounds The bounds of the component. key string The name of the component. Returns GuiComposer AddHorizontalTabs(GuiComposer, GuiTab[], ElementBounds, Action<int>, CairoFont, CairoFont, string) Adds a set of horizontal tabs to the GUI. public static GuiComposer AddHorizontalTabs(this GuiComposer composer, GuiTab[] tabs, ElementBounds bounds, Action<int> onTabClicked, CairoFont font, CairoFont selectedFont, string key = null) Parameters composer GuiComposer tabs GuiTab[] The collection of tabs. bounds ElementBounds The bounds of the horizontal tabs. onTabClicked Action<int> The event fired when the tab is clicked. font CairoFont The font of the tabs. selectedFont CairoFont key string The key for the added horizontal tabs. Returns GuiComposer AddHoverText(GuiComposer, string, CairoFont, int, ElementBounds, string) Adds a hover text to the GUI. public static GuiComposer AddHoverText(this GuiComposer composer, string text, CairoFont font, int width, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the text. font CairoFont The font of the text. width int The width of the text. bounds ElementBounds The bounds of the text. key string The name of this hover text component. Returns GuiComposer AddHoverText(GuiComposer, string, CairoFont, int, ElementBounds, TextBackground, string) Adds a hover text to the GUI. public static GuiComposer AddHoverText(this GuiComposer composer, string text, CairoFont font, int width, ElementBounds bounds, TextBackground background, string key = null) Parameters composer GuiComposer text string The text of the text. font CairoFont The font of the text. width int The width of the text. bounds ElementBounds The bounds of the text. background TextBackground key string The name of this hover text component. Returns GuiComposer AddIconButton(GuiComposer, string, Action<bool>, ElementBounds, string) Adds an icon button. public static GuiComposer AddIconButton(this GuiComposer composer, string icon, Action<bool> onToggle, ElementBounds bounds, string key = null) Parameters composer GuiComposer icon string The name of the icon. onToggle Action<bool> The event that happens once the button is toggled. bounds ElementBounds The bounding box of the button. key string The name of the button for easy access. Returns GuiComposer AddIconButton(GuiComposer, string, CairoFont, Action<bool>, ElementBounds, string) public static GuiComposer AddIconButton(this GuiComposer composer, string icon, CairoFont font, Action<bool> onToggle, ElementBounds bounds, string key = null) Parameters composer GuiComposer icon string font CairoFont onToggle Action<bool> bounds ElementBounds key string Returns GuiComposer AddIconListPicker(GuiComposer, string[], Action<int>, ElementBounds, int, string) Adds multiple clickable icons public static GuiComposer AddIconListPicker(this GuiComposer composer, string[] icons, Action<int> onToggle, ElementBounds startBounds, int maxLineWidth, string key = null) Parameters composer GuiComposer icons string[] onToggle Action<int> startBounds ElementBounds maxLineWidth int key string Returns GuiComposer AddIconToggleButtons(GuiComposer, string[], CairoFont, Action<int>, ElementBounds[], string) Adds multiple buttons with icons. public static GuiComposer AddIconToggleButtons(this GuiComposer composer, string[] icons, CairoFont font, Action<int> onToggle, ElementBounds[] bounds, string key = null) Parameters composer GuiComposer icons string[] The collection of icons for the buttons. font CairoFont The font for the buttons. onToggle Action<int> The event called when the buttons are pressed. bounds ElementBounds[] The bounds of the buttons. key string The key given to the bundle of buttons. Returns GuiComposer AddInvStatbar(GuiComposer, ElementBounds, double[], string) Adds a stat bar with filling in the opposite direction. Default values are from 0 to 100. public static GuiComposer AddInvStatbar(this GuiComposer composer, ElementBounds bounds, double[] color, string key = null) Parameters composer GuiComposer bounds ElementBounds the bounds of the stat bar. color double[] the color of the stat bar. key string The internal name of the stat bar. Returns GuiComposer AddItemSlotGrid(GuiComposer, IInventory, Action<object>, int, int[], ElementBounds, string) Adds an item slot grid to the GUI. public static GuiComposer AddItemSlotGrid(this GuiComposer composer, IInventory inventory, Action<object> sendPacket, int columns, int[] selectiveSlots, ElementBounds bounds, string key = null) Parameters composer GuiComposer inventory IInventory The inventory attached to the slot grid. sendPacket Action<object> A handler that should send supplied network packet to the server, if the inventory modifications should be synced columns int The number of columns in the slot grid. selectiveSlots int[] The slots within the inventory that are currently accessible. bounds ElementBounds the bounds of the slot grid. key string The key for this particular slot grid. Returns GuiComposer AddItemSlotGrid(GuiComposer, IInventory, Action<object>, int, ElementBounds, string) Adds an item slot grid to the GUI. public static GuiComposer AddItemSlotGrid(this GuiComposer composer, IInventory inventory, Action<object> sendPacket, int columns, ElementBounds bounds, string key = null) Parameters composer GuiComposer inventory IInventory The inventory attached to the slot grid. sendPacket Action<object> A handler that should send supplied network packet to the server, if the inventory modifications should be synced columns int The number of columns in the slot grid. bounds ElementBounds the bounds of the slot grid. key string The key for this particular slot grid. Returns GuiComposer AddItemSlotGridExcl(GuiComposer, IInventory, Action<object>, int, int[], ElementBounds, string) Adds an ItemSlotGrid with Exclusions. public static GuiComposer AddItemSlotGridExcl(this GuiComposer composer, IInventory inventory, Action<object> sendPacket, int columns, int[] excludingSlots, ElementBounds bounds, string key = null) Parameters composer GuiComposer inventory IInventory The attached inventory. sendPacket Action<object> A handler that should send supplied network packet to the server, if the inventory modifications should be synced columns int The number of columns. excludingSlots int[] The slots that have been excluded from the slot grid. bounds ElementBounds The bounds of the slot grid. key string The name of the slot grid. Returns GuiComposer AddMultiSelectDropDown(GuiComposer, string[], string[], int, SelectionChangedDelegate, ElementBounds, string) Adds a multiple select dropdown to the current GUI instance. public static GuiComposer AddMultiSelectDropDown(this GuiComposer composer, string[] values, string[] names, int selectedIndex, SelectionChangedDelegate onSelectionChanged, ElementBounds bounds, string key = null) Parameters composer GuiComposer values string[] The values of the current drodown. names string[] The names of those values. selectedIndex int The default selected index. onSelectionChanged SelectionChangedDelegate The event fired when the index is changed. bounds ElementBounds The bounds of the index. key string The name of this dropdown. Returns GuiComposer AddNumberInput(GuiComposer, ElementBounds, Action<string>, CairoFont, string) Adds a numeric input for the current GUI. public static GuiComposer AddNumberInput(this GuiComposer composer, ElementBounds bounds, Action<string> onTextChanged, CairoFont font = null, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the number input. onTextChanged Action<string> The event fired when the number is changed. font CairoFont The font for the numbers. key string The name for this GuiElementNumberInput Returns GuiComposer AddPassiveItemSlot(GuiComposer, ElementBounds, IInventory, ItemSlot, bool) Adds a passive item slot to the GUI. public static GuiComposer AddPassiveItemSlot(this GuiComposer composer, ElementBounds bounds, IInventory inventory, ItemSlot slot, bool drawBackground = true) Parameters composer GuiComposer bounds ElementBounds The bounds of the Slot inventory IInventory The inventory attached to the slot. slot ItemSlot The internal slot of the slot. drawBackground bool Do we draw the background for this slot? (Default: true) Returns GuiComposer AddRichtext(GuiComposer, string, CairoFont, ElementBounds, Action<LinkTextComponent>, string) Adds a rich text element to the GUI public static GuiComposer AddRichtext(this GuiComposer composer, string vtmlCode, CairoFont baseFont, ElementBounds bounds, Action<LinkTextComponent> didClickLink, string key = null) Parameters composer GuiComposer vtmlCode string baseFont CairoFont bounds ElementBounds didClickLink Action<LinkTextComponent> key string Returns GuiComposer AddRichtext(GuiComposer, string, CairoFont, ElementBounds, string) Adds a rich text element to the GUI public static GuiComposer AddRichtext(this GuiComposer composer, string vtmlCode, CairoFont baseFont, ElementBounds bounds, string key = null) Parameters composer GuiComposer vtmlCode string baseFont CairoFont bounds ElementBounds key string Returns GuiComposer AddRichtext(GuiComposer, RichTextComponentBase[], ElementBounds, string) Adds a rich text element to the GUI public static GuiComposer AddRichtext(this GuiComposer composer, RichTextComponentBase[] components, ElementBounds bounds, string key = null) Parameters composer GuiComposer components RichTextComponentBase[] bounds ElementBounds key string Returns GuiComposer AddShadedDialogBG(GuiComposer, ElementBounds, bool, double, float) Adds shaded, slighlty dirt textured background to the GUI. public static GuiComposer AddShadedDialogBG(this GuiComposer composer, ElementBounds bounds, bool withTitleBar = true, double strokeWidth = 5, float alpha = 0.75) Parameters composer GuiComposer bounds ElementBounds withTitleBar bool strokeWidth double alpha float Returns GuiComposer AddSkillItemGrid(GuiComposer, List<SkillItem>, int, int, Action<int>, ElementBounds, string) Adds a skill item grid to the GUI. public static GuiComposer AddSkillItemGrid(this GuiComposer composer, List<SkillItem> skillItems, int columns, int rows, Action<int> onSlotClick, ElementBounds bounds, string key = null) Parameters composer GuiComposer skillItems List<SkillItem> The items that represent skills. columns int the columns in the skill item grid. rows int The rows in the skill item grid. onSlotClick Action<int> The effect when a slot is clicked. bounds ElementBounds The bounds of the item grid. key string The name of the item grid to add. Returns GuiComposer AddSlider(GuiComposer, ActionConsumable<int>, ElementBounds, string) Adds a slider to the current GUI. public static GuiComposer AddSlider(this GuiComposer composer, ActionConsumable<int> onNewSliderValue, ElementBounds bounds, string key = null) Parameters composer GuiComposer onNewSliderValue ActionConsumable<int> The event that fires when the slider's value is changed. bounds ElementBounds The bounds of the slider. key string the internal name of the slider. Returns GuiComposer AddSmallButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, string) Adds a small clickable button with font size GuiStyle.SmallFontSize public static GuiComposer AddSmallButton(this GuiComposer composer, string text, ActionConsumable onClick, ElementBounds bounds, EnumButtonStyle style = EnumButtonStyle.Normal, string key = null) Parameters composer GuiComposer text string The text displayed inside the button onClick ActionConsumable Handler for when the button is clicked bounds ElementBounds style EnumButtonStyle key string Returns GuiComposer AddSmallButton(GuiComposer, string, ActionConsumable, ElementBounds, EnumButtonStyle, EnumTextOrientation, string) [Obsolete(\"Use Method without orientation argument\")] public static GuiComposer AddSmallButton(this GuiComposer composer, string text, ActionConsumable onClick, ElementBounds bounds, EnumButtonStyle style, EnumTextOrientation orientation, string key = null) Parameters composer GuiComposer text string onClick ActionConsumable bounds ElementBounds style EnumButtonStyle orientation EnumTextOrientation key string Returns GuiComposer AddStatbar(GuiComposer, ElementBounds, double[], bool, string) Adds a stat bar to the current GUI with a minimum of 0 and a maximum of 100. public static GuiComposer AddStatbar(this GuiComposer composer, ElementBounds bounds, double[] color, bool hideable, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the stat bar. color double[] The color of the stat bar. hideable bool If true, the element can be fully hidden without recompose. key string The internal name of the stat bar. Returns GuiComposer AddStatbar(GuiComposer, ElementBounds, double[], string) public static GuiComposer AddStatbar(this GuiComposer composer, ElementBounds bounds, double[] color, string key = null) Parameters composer GuiComposer bounds ElementBounds color double[] key string Returns GuiComposer AddStaticCustomDraw(GuiComposer, ElementBounds, DrawDelegateWithBounds) Adds a static custom draw component to the GUI. public static GuiComposer AddStaticCustomDraw(this GuiComposer composer, ElementBounds bounds, DrawDelegateWithBounds onDraw) Parameters composer GuiComposer bounds ElementBounds The bounds of the component. onDraw DrawDelegateWithBounds The event fired when the element is drawn. Returns GuiComposer AddStaticText(GuiComposer, string, CairoFont, ElementBounds, string) Adds a static text component to the GUI public static GuiComposer AddStaticText(this GuiComposer composer, string text, CairoFont font, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the text component. font CairoFont The font of the text. bounds ElementBounds The bounds of the text container. key string The name of the component. Returns GuiComposer AddStaticText(GuiComposer, string, CairoFont, EnumTextOrientation, ElementBounds, string) Adds a static text component to the GUI public static GuiComposer AddStaticText(this GuiComposer composer, string text, CairoFont font, EnumTextOrientation orientation, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the text component. font CairoFont The font of the text. orientation EnumTextOrientation The orientation of the text. bounds ElementBounds The bounds of the text container. key string The name of the component. Returns GuiComposer AddStaticTextAutoBoxSize(GuiComposer, string, CairoFont, EnumTextOrientation, ElementBounds, string) Adds a static text component to the GUI that automatically resizes as necessary. public static GuiComposer AddStaticTextAutoBoxSize(this GuiComposer composer, string text, CairoFont font, EnumTextOrientation orientation, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the text component. font CairoFont The font of the text. orientation EnumTextOrientation The orientation of the text. bounds ElementBounds The bounds of the text container. key string The name of the component. Returns GuiComposer AddStaticTextAutoFontSize(GuiComposer, string, CairoFont, ElementBounds, string) Adds a static text component to the GUI that automatically resizes as necessary. public static GuiComposer AddStaticTextAutoFontSize(this GuiComposer composer, string text, CairoFont font, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the text component. font CairoFont The font of the text. bounds ElementBounds The bounds of the text container. key string The name of the component. Returns GuiComposer AddSwitch(GuiComposer, Action<bool>, ElementBounds, string, double, double) Adds a switch to the GUI. public static GuiComposer AddSwitch(this GuiComposer composer, Action<bool> onToggle, ElementBounds bounds, string key = null, double size = 30, double padding = 4) Parameters composer GuiComposer onToggle Action<bool> The event that happens when the switch is toggled. bounds ElementBounds The bounds of the switch. key string the name of the switch. (Default: null) size double The size of the switch (Default: 30) padding double The padding around the switch (Default: 5) Returns GuiComposer AddTextArea(GuiComposer, ElementBounds, Action<string>, CairoFont, string) Adds a text area to the GUI. public static GuiComposer AddTextArea(this GuiComposer composer, ElementBounds bounds, Action<string> onTextChanged, CairoFont font = null, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the Text Area onTextChanged Action<string> The event fired when the text is changed. font CairoFont The font of the text. key string The name of the text area. Returns GuiComposer AddTextInput(GuiComposer, ElementBounds, Action<string>, CairoFont, string) Adds a text input to the current GUI. public static GuiComposer AddTextInput(this GuiComposer composer, ElementBounds bounds, Action<string> onTextChanged, CairoFont font = null, string key = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the text input. onTextChanged Action<string> The event fired when the text is changed. font CairoFont The font of the text. key string The name of this text component. Returns GuiComposer AddTextToggleButtons(GuiComposer, string[], CairoFont, Action<int>, ElementBounds[], string) Adds multiple buttons with Text. public static GuiComposer AddTextToggleButtons(this GuiComposer composer, string[] texts, CairoFont font, Action<int> onToggle, ElementBounds[] bounds, string key = null) Parameters composer GuiComposer texts string[] The texts on all the buttons. font CairoFont The font for the buttons onToggle Action<int> The event fired when the button is pressed. bounds ElementBounds[] The bounds of the buttons. key string The key given to the bundle of buttons. Returns GuiComposer AddToggleButton(GuiComposer, string, CairoFont, Action<bool>, ElementBounds, string) Creates a toggle button with the given parameters. public static GuiComposer AddToggleButton(this GuiComposer composer, string text, CairoFont font, Action<bool> onToggle, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the button. font CairoFont The font of the text. onToggle Action<bool> The event that happens once the button is toggled. bounds ElementBounds The bounding box of the button. key string The name of the button for easy access. Returns GuiComposer AddTranspHoverText(GuiComposer, string, CairoFont, int, ElementBounds, string) Adds a hover text to the GUI. public static GuiComposer AddTranspHoverText(this GuiComposer composer, string text, CairoFont font, int width, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string The text of the text. font CairoFont The font of the text. width int The width of the text. bounds ElementBounds The bounds of the text. key string The name of this hover text component. Returns GuiComposer AddVerticalScrollbar(GuiComposer, Action<float>, ElementBounds, string) Adds a vertical scrollbar to the GUI. public static GuiComposer AddVerticalScrollbar(this GuiComposer composer, Action<float> onNewScrollbarValue, ElementBounds bounds, string key = null) Parameters composer GuiComposer onNewScrollbarValue Action<float> The action when the scrollbar changes. bounds ElementBounds The bounds of the scrollbar. key string The name of the scrollbar. Returns GuiComposer AddVerticalTabs(GuiComposer, GuiTab[], ElementBounds, Action<int, GuiTab>, string) Adds multiple tabs to a group of vertical tabs. public static GuiComposer AddVerticalTabs(this GuiComposer composer, GuiTab[] tabs, ElementBounds bounds, Action<int, GuiTab> onTabClicked, string key = null) Parameters composer GuiComposer tabs GuiTab[] The tabs being added. bounds ElementBounds The boundaries of the tab group. onTabClicked Action<int, GuiTab> The event fired when any of the tabs are clicked. key string The name of this tab group. Returns GuiComposer AddVerticalToggleTabs(GuiComposer, GuiTab[], ElementBounds, Action<int, GuiTab>, string) Adds multiple tabs to a group of vertical tabs. public static GuiComposer AddVerticalToggleTabs(this GuiComposer composer, GuiTab[] tabs, ElementBounds bounds, Action<int, GuiTab> onTabClicked, string key = null) Parameters composer GuiComposer tabs GuiTab[] The tabs being added. bounds ElementBounds The boundaries of the tab group. onTabClicked Action<int, GuiTab> The event fired when any of the tabs are clicked. key string The name of this tab group. Returns GuiComposer ColorListPickerSetValue(GuiComposer, string, int) Selects one of the colors from a color list picker public static void ColorListPickerSetValue(this GuiComposer composer, string key, int selectedIndex) Parameters composer GuiComposer key string selectedIndex int GetButton(GuiComposer, string) Gets the button by name public static GuiElementTextButton GetButton(this GuiComposer composer, string key) Parameters composer GuiComposer key string Returns GuiElementTextButton GetCellList<T>(GuiComposer, string) Gets the list by name. public static GuiElementCellList<T> GetCellList<T>(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the list to get. Returns GuiElementCellList<T> Type Parameters T GetChatInput(GuiComposer, string) Gets the chat input by name. public static GuiElementChatInput GetChatInput(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the chat input component. Returns GuiElementChatInput The named component. GetColorListPicker(GuiComposer, string) Returns a previously added color list picker element public static GuiElementColorListPicker GetColorListPicker(this GuiComposer composer, string key) Parameters composer GuiComposer key string Returns GuiElementColorListPicker GetCompactScrollbar(GuiComposer, string) Gets the scrollbar from the dialogue. public static GuiElementCompactScrollbar GetCompactScrollbar(this GuiComposer composer, string key) Parameters composer GuiComposer key string the internal name of the scrollbar to be gotten Returns GuiElementCompactScrollbar The scrollbar with the given key. GetConfigList(GuiComposer, string) Gets the config list by name. public static GuiElementConfigList GetConfigList(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the config list. Returns GuiElementConfigList GetContainer(GuiComposer, string) Gets the container by key public static GuiElementContainer GetContainer(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the list to get. Returns GuiElementContainer GetCustomDraw(GuiComposer, string) public static GuiElementCustomDraw GetCustomDraw(this GuiComposer composer, string key) Parameters composer GuiComposer key string Returns GuiElementCustomDraw GetCustomRender(GuiComposer, string) public static GuiElementCustomRender GetCustomRender(this GuiComposer composer, string key) Parameters composer GuiComposer key string Returns GuiElementCustomRender GetDropDown(GuiComposer, string) Gets the Drop Down element from the GUIComposer by their key. public static GuiElementDropDown GetDropDown(this GuiComposer composer, string key) Parameters composer GuiComposer key string the name of the dropdown to fetch. Returns GuiElementDropDown GetEmbossedText(GuiComposer, string) Gets the EmbossedText component by name. public static GuiElementEmbossedText GetEmbossedText(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the component. Returns GuiElementEmbossedText the named component of the text. GetHorizontalTabs(GuiComposer, string) Gets the HorizontalTabs element from the GUI by name. public static GuiElementHorizontalTabs GetHorizontalTabs(this GuiComposer composer, string key) Parameters composer GuiComposer key string The key for the horizontal tabs you want to get. Returns GuiElementHorizontalTabs GetHoverText(GuiComposer, string) Fetches the hover text component by name. public static GuiElementHoverText GetHoverText(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the text component. Returns GuiElementHoverText GetIconListPicker(GuiComposer, string) Returns the icon list picker public static GuiElementIconListPicker GetIconListPicker(this GuiComposer composer, string key) Parameters composer GuiComposer key string Returns GuiElementIconListPicker GetNumberInput(GuiComposer, string) Gets the number input by name. public static GuiElementNumberInput GetNumberInput(this GuiComposer composer, string key) Parameters composer GuiComposer key string The internal name of the numeric input. Returns GuiElementNumberInput The named numeric input. GetRichtext(GuiComposer, string) Gets the chat input by name. public static GuiElementRichtext GetRichtext(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the chat input component. Returns GuiElementRichtext The named component. GetScrollbar(GuiComposer, string) Gets the scrollbar by name. public static GuiElementScrollbar GetScrollbar(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the scrollbar. Returns GuiElementScrollbar The scrollbar itself. GetSkillItemGrid(GuiComposer, string) Fetches the skill item grid by name public static GuiElementSkillItemGrid GetSkillItemGrid(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the skill item grid to get. Returns GuiElementSkillItemGrid The skill item grid to get. GetSlider(GuiComposer, string) Gets the slider by name from the GUI. public static GuiElementSlider GetSlider(this GuiComposer composer, string key) Parameters composer GuiComposer key string the internal name of the slider. Returns GuiElementSlider the slider. GetSlotGrid(GuiComposer, string) Gets the slot grid by name. public static GuiElementItemSlotGrid GetSlotGrid(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the slot grid to get. Returns GuiElementItemSlotGrid GetSlotGridExcl(GuiComposer, string) Gets the ItemSlotGridExcl by name. public static GuiElementItemSlotGridExcl GetSlotGridExcl(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the ItemSlotGridExcl Returns GuiElementItemSlotGridExcl GetStatbar(GuiComposer, string) Gets the stat bar by name. public static GuiElementStatbar GetStatbar(this GuiComposer composer, string key) Parameters composer GuiComposer key string The internal name of the stat bar to fetch. Returns GuiElementStatbar The named stat bar. GetStaticText(GuiComposer, string) Gets the static text component by name. public static GuiElementStaticText GetStaticText(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the component. Returns GuiElementStaticText GetSwitch(GuiComposer, string) Gets the switch by name. public static GuiElementSwitch GetSwitch(this GuiComposer composer, string key) Parameters composer GuiComposer key string The internal name of the switch. Returns GuiElementSwitch Returns the named switch. GetTextArea(GuiComposer, string) Gets the text area by name. public static GuiElementTextArea GetTextArea(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the text area. Returns GuiElementTextArea The named Text Area. GetTextInput(GuiComposer, string) Gets the text input by input name. public static GuiElementTextInput GetTextInput(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the text input to get. Returns GuiElementTextInput The named text input GetTitleBar(GuiComposer, string) public static GuiElementDialogTitleBar GetTitleBar(this GuiComposer composer, string key) Parameters composer GuiComposer key string Returns GuiElementDialogTitleBar GetToggleButton(GuiComposer, string) Gets the toggle button by name in the GUIComposer. public static GuiElementToggleButton GetToggleButton(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the button. Returns GuiElementToggleButton A button. GetVerticalTab(GuiComposer, string) Gets the vertical tab group as declared by name. public static GuiElementVerticalTabs GetVerticalTab(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the vertical tab group to get. Returns GuiElementVerticalTabs IconListPickerSetValue(GuiComposer, string, int) Selects one of the clickable icons public static void IconListPickerSetValue(this GuiComposer composer, string key, int selectedIndex) Parameters composer GuiComposer key string selectedIndex int ToggleButtonsSetValue(GuiComposer, string, int) Toggles the given button. public static void ToggleButtonsSetValue(this GuiComposer composer, string key, int selectedIndex) Parameters composer GuiComposer key string The name of the button that was set. selectedIndex int the index of the button."
  },
  "api/Vintagestory.API.Client.GuiDialog.DlgComposers.html": {
    "href": "api/Vintagestory.API.Client.GuiDialog.DlgComposers.html",
    "title": "Class GuiDialog.DlgComposers | VintageStory API",
    "keywords": "Class GuiDialog.DlgComposers Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Dialogue Composer for the GUIDialogue. public class GuiDialog.DlgComposers : IEnumerable<KeyValuePair<string, GuiComposer>>, IEnumerable Inheritance object GuiDialog.DlgComposers Implements IEnumerable<KeyValuePair<string, GuiComposer>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DlgComposers(GuiDialog) Constructor. public DlgComposers(GuiDialog dialog) Parameters dialog GuiDialog The dialogue this composer belongs to. Fields dialog protected GuiDialog dialog Field Value GuiDialog dialogComposers protected ConcurrentSmallDictionary<string, GuiComposer> dialogComposers Field Value ConcurrentSmallDictionary<string, GuiComposer> Properties this[string] Returns the composer for given composer name public GuiComposer this[string key] { get; set; } Parameters key string Property Value GuiComposer Values Returns all composers as a flat list public IEnumerable<GuiComposer> Values { get; } Property Value IEnumerable<GuiComposer> Methods ClearComposers() Cleans up and clears the composers. public void ClearComposers() ContainsKey(string) Checks to see if the key is located within the given dialogue composer. public bool ContainsKey(string key) Parameters key string The key you are searching for. Returns bool Do we have your key? Dispose() Clean disposal method. public void Dispose() Remove(string) Removes the given key and the corresponding value from the Dialogue Composer. public void Remove(string key) Parameters key string The Key to remove. ToArray() public GuiComposer[] ToArray() Returns GuiComposer[]"
  },
  "api/Vintagestory.API.Client.GuiDialog.EnumPosFlag.html": {
    "href": "api/Vintagestory.API.Client.GuiDialog.EnumPosFlag.html",
    "title": "Enum GuiDialog.EnumPosFlag | VintageStory API",
    "keywords": "Enum GuiDialog.EnumPosFlag Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll [Flags] public enum GuiDialog.EnumPosFlag Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Left2Bot = 2048 Left2Mid = 512 Left2Top = 1024 Left3Bot = 131072 Left3Mid = 32768 Left3Top = 65536 LeftBot = 32 LeftMid = 8 LeftTop = 16 Right2Bot = 256 Right2Mid = 64 Right2Top = 128 Right3Bot = 16384 Right3Mid = 4096 Right3Top = 8192 RightBot = 4 RightMid = 1 RightTop = 2"
  },
  "api/Vintagestory.API.Client.GuiDialog.html": {
    "href": "api/Vintagestory.API.Client.GuiDialog.html",
    "title": "Class GuiDialog | VintageStory API",
    "keywords": "Class GuiDialog Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class GuiDialog : IDisposable Inheritance object GuiDialog Implements IDisposable Derived GuiDialogCharacterBase GuiDialogConfirm GuiDialogGeneric HudElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiDialog(ICoreClientAPI) Constructor for the GUIDialogue. public GuiDialog(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Client API. Fields Composers The Instance of Dialogue Composer for this GUIDialogue. public GuiDialog.DlgComposers Composers Field Value GuiDialog.DlgComposers MouseOverCursor public string MouseOverCursor Field Value string capi protected ICoreClientAPI capi Field Value ICoreClientAPI focused protected bool focused Field Value bool ignoreNextKeyPress public bool ignoreNextKeyPress Field Value bool opened protected bool opened Field Value bool Properties DebugName Debug name. For debugging purposes. public virtual string DebugName { get; } Property Value string DialogType Is this dialogue a dialogue or a HUD object? public virtual EnumDialogType DialogType { get; } Property Value EnumDialogType DisableMouseGrab Gets whether ability to grab the mouse cursor is disabled while this dialog is opened. For example, the escape menu. (Default: false) public virtual bool DisableMouseGrab { get; } Property Value bool DrawOrder 0 = draw first, 1 = draw last. Used to enforce tooltips and held itemstack always drawn last to be visible. Vanilla dialogs draw order: Name tags: -0.1 Chat dialog: 0 Block Interaction help: 0.05 Worldmap HUD: 0.07 Default value for most other dialogs: 0.1 Worldmap Dialog: 0.11 Player and Chest inventories: 0.2 Various config/edit dialogs: 0.2 Handbook: 0.2 Escape menu: 0.89 public virtual double DrawOrder { get; } Property Value double Focusable Can this dialog be focused? public virtual bool Focusable { get; } Property Value bool Focused Is the dialogue currently in focus? public virtual bool Focused { get; } Property Value bool InputOrder Determines the order on which dialog receives keyboard input first when the dialog is opened. 0 = handle inputs first, 9999 = handle inputs last. Reference list: 0: Escape menu 0.5 (default): tick profiler, selection box editor, macro editor, survival&creative inventory, first launch info dialog, dead dialog, character dialog, etc. 1: hotbar 1.1: chat dialog public virtual double InputOrder { get; } Property Value double PrefersUngrabbedMouse Gets whether it is preferred for the mouse to be not grabbed while this dialog is opened. If true (default), the Alt button needs to be held to manually grab the mouse. public virtual bool PrefersUngrabbedMouse { get; } Property Value bool SingleComposer A single composer for this GUIDialogue. public GuiComposer SingleComposer { get; set; } Property Value GuiComposer ToggleKeyCombinationCode The key combination string that toggles this GUI object. public abstract string ToggleKeyCombinationCode { get; } Property Value string UnregisterOnClose Should this dialogue de-register itself once it's closed? (Defaults to no) public virtual bool UnregisterOnClose { get; } Property Value bool ZSize The amount of depth required for this dialog. Default is 150. Required for correct z-ordering of dialogs. public virtual float ZSize { get; } Property Value float Methods CaptureAllInputs() Should this dialog (e.g. textbox) capture all the keyboard events except for escape. public virtual bool CaptureAllInputs() Returns bool CaptureRawMouse() Should this dialog capture the raw mouse button clicks - useful for example for the settings menu itself (in case the user has unset them or set them to something crazy) public virtual bool CaptureRawMouse() Returns bool ClearComposers() Clears the composers. public void ClearComposers() Dispose() Disposes the Dialog. public virtual void Dispose() Focus() Focuses the dialog public virtual void Focus() FreePos(string, EnumPosFlag) public void FreePos(string code, GuiDialog.EnumPosFlag pos) Parameters code string pos GuiDialog.EnumPosFlag GetFreePos(string) public GuiDialog.EnumPosFlag GetFreePos(string code) Parameters code string Returns GuiDialog.EnumPosFlag IsInRangeOf(Vec3d) Checks if the player is in range (pickingrange) of the given position public virtual bool IsInRangeOf(Vec3d pos) Parameters pos Vec3d Returns bool In range or no? IsOpened() Is this dialogue opened? public virtual bool IsOpened() Returns bool Whether this dialogue is opened or not. IsOpened(string) Is this dialogue opened in the given context? public virtual bool IsOpened(string dialogComposerName) Parameters dialogComposerName string The composer context. Returns bool Whether this dialogue was opened or not within the given context. IsRight(EnumPosFlag) protected bool IsRight(GuiDialog.EnumPosFlag flag) Parameters flag GuiDialog.EnumPosFlag Returns bool OccupyPos(string, EnumPosFlag) public void OccupyPos(string code, GuiDialog.EnumPosFlag pos) Parameters code string pos GuiDialog.EnumPosFlag OnBeforeRenderFrame3D(float) This runs before the render. Local update method. public virtual void OnBeforeRenderFrame3D(float deltaTime) Parameters deltaTime float The time that has elapsed. OnBlockTexturesLoaded() Makes this gui pop up once a pre-set given key combination is set. public virtual void OnBlockTexturesLoaded() OnEscapePressed() Fires explicitly when the Escape key is pressed and attempts to close the dialogue. public virtual bool OnEscapePressed() Returns bool Whether the dialogue was closed. OnFinalizeFrame(float) This runs when the dialogue is finalizing and cleaning up all of the components. public virtual void OnFinalizeFrame(float dt) Parameters dt float The time that has elapsed. OnFocusChanged(bool) protected virtual void OnFocusChanged(bool on) Parameters on bool OnGuiClosed() Fires when the GUI is closed. public virtual void OnGuiClosed() OnGuiOpened() Fires when the GUI is opened. public virtual void OnGuiOpened() OnKeyDown(KeyEvent) Fires when keys are held down. public virtual void OnKeyDown(KeyEvent args) Parameters args KeyEvent The key or keys that were held down. OnKeyPress(KeyEvent) Fires when the keys are pressed. public virtual void OnKeyPress(KeyEvent args) Parameters args KeyEvent The key or keys that were pressed. OnKeyUp(KeyEvent) Fires when the keys are released. public virtual void OnKeyUp(KeyEvent args) Parameters args KeyEvent the key or keys that were released. OnLevelFinalize() public virtual void OnLevelFinalize() OnMouseClickSlot(ItemSlot) Fires when the mouse clicks within the slot. public virtual bool OnMouseClickSlot(ItemSlot itemSlot) Parameters itemSlot ItemSlot The slot that the mouse clicked in. Returns bool Whether this event was handled. OnMouseDown(MouseEvent) Fires when a mouse button is held down. public virtual void OnMouseDown(MouseEvent args) Parameters args MouseEvent The mouse button or buttons in question. OnMouseEnterSlot(ItemSlot) Fires when the mouse enters the given slot. public virtual bool OnMouseEnterSlot(ItemSlot slot) Parameters slot ItemSlot The slot the mouse entered. Returns bool Whether this event was handled. OnMouseLeaveSlot(ItemSlot) Fires when the mouse leaves the slot. public virtual bool OnMouseLeaveSlot(ItemSlot itemSlot) Parameters itemSlot ItemSlot The slot the mouse entered. Returns bool Whether this event was handled. OnMouseMove(MouseEvent) Fires when the mouse is moved. public virtual void OnMouseMove(MouseEvent args) Parameters args MouseEvent The mouse movements in question. OnMouseUp(MouseEvent) Fires when a mouse button is released. public virtual void OnMouseUp(MouseEvent args) Parameters args MouseEvent The mouse button or buttons in question. OnMouseWheel(MouseWheelEventArgs) Fires when the mouse wheel is scrolled. public virtual void OnMouseWheel(MouseWheelEventArgs args) Parameters args MouseWheelEventArgs OnOwnPlayerDataReceived() public virtual void OnOwnPlayerDataReceived() OnRenderGUI(float) This runs when the dialogue is ready to render all of the components. public virtual void OnRenderGUI(float deltaTime) Parameters deltaTime float The time that has elapsed. RequiresUngrabbedMouse() [Obsolete(\"Use PrefersUngrabbedMouse instead\")] public virtual bool RequiresUngrabbedMouse() Returns bool ShouldReceiveKeyboardEvents() A check for whether the dialogue should recieve keyboard events. public virtual bool ShouldReceiveKeyboardEvents() Returns bool Whether the dialogue is focused or not. ShouldReceiveMouseEvents() A check if the dialogue should recieve mouse events. public virtual bool ShouldReceiveMouseEvents() Returns bool Whether the mouse events should fire. ShouldReceiveRenderEvents() A check for whether the dialogue should recieve Render events. public virtual bool ShouldReceiveRenderEvents() Returns bool Whether the dialogue is opened or not. Toggle() If the dialogue is opened, this attempts to close it. If the dialogue is closed, this attempts to open it. public virtual void Toggle() TryClose() Attempts to close this dialogue- triggering the OnCloseDialogue event. public virtual bool TryClose() Returns bool Was this dialogue successfully closed? TryOpen() Attempts to open this dialogue. public virtual bool TryOpen() Returns bool Was this dialogue successfully opened? TryOpen(bool) public virtual bool TryOpen(bool withFocus) Parameters withFocus bool Returns bool UnFocus() Unfocuses the dialogue. public virtual void UnFocus() XOffsetMul(EnumPosFlag) protected float XOffsetMul(GuiDialog.EnumPosFlag flag) Parameters flag GuiDialog.EnumPosFlag Returns float YOffsetMul(EnumPosFlag) protected float YOffsetMul(GuiDialog.EnumPosFlag flag) Parameters flag GuiDialog.EnumPosFlag Returns float Events OnClosed The event fired when this dialogue is closed. public event Action OnClosed Event Type Action OnOpened The event fired when this dialogue is opened. public event Action OnOpened Event Type Action"
  },
  "api/Vintagestory.API.Client.GuiDialogBlockEntity.html": {
    "href": "api/Vintagestory.API.Client.GuiDialogBlockEntity.html",
    "title": "Class GuiDialogBlockEntity | VintageStory API",
    "keywords": "Class GuiDialogBlockEntity Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Base class for dialogs bound to block entities. Open in GitHub public abstract class GuiDialogBlockEntity : GuiDialogGeneric, IDisposable Inheritance object GuiDialog GuiDialogGeneric GuiDialogBlockEntity Implements IDisposable Derived GuiDialogBlockEntityInventory Inherited Members GuiDialogGeneric.DialogTitle GuiDialogGeneric.UnregisterOnClose GuiDialogGeneric.Attributes GuiDialogGeneric.ToggleKeyCombinationCode GuiDialogGeneric.Recompose() GuiDialogGeneric.UnfocusElements() GuiDialogGeneric.FocusElement(int) GuiDialogGeneric.IsInRangeOfBlock(BlockPos) GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.DebugName GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.DialogType GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.DrawOrder GuiDialog.InputOrder GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseDown(MouseEvent) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiDialogBlockEntity(string, InventoryBase, BlockPos, ICoreClientAPI) public GuiDialogBlockEntity(string dialogTitle, InventoryBase inventory, BlockPos blockEntityPos, ICoreClientAPI capi) Parameters dialogTitle string The title of this dialogue. Ex: \"Chest\" inventory InventoryBase The inventory associated with this block entity. blockEntityPos BlockPos The position of this block entity. capi ICoreClientAPI The Client API GuiDialogBlockEntity(string, BlockPos, ICoreClientAPI) public GuiDialogBlockEntity(string dialogTitle, BlockPos blockEntityPos, ICoreClientAPI capi) Parameters dialogTitle string The title of this dialogue. Ex: \"Chest\" blockEntityPos BlockPos The position of this block entity. capi ICoreClientAPI The Client API Properties BlockEntityPosition public BlockPos BlockEntityPosition { get; } Property Value BlockPos CloseSound Gets the opening sound for the dialog being opened, or null if none. public virtual AssetLocation CloseSound { get; set; } Property Value AssetLocation FloatyDialogAlign Gets the Y align of the dialog if floaty GUIs is turned on. 0.5 means the dialog is centered on FloatyDialogPosition. 0 is top-aligned while 1 is bottom-aligned. protected virtual double FloatyDialogAlign { get; } Property Value double FloatyDialogPosition Gets the Y offset of the dialog in-world if floaty GUIs is turned on. 0.5 is the center of the block and larger means it will float higher up. protected virtual double FloatyDialogPosition { get; } Property Value double Inventory public InventoryBase Inventory { get; } Property Value InventoryBase IsDuplicate public bool IsDuplicate { get; } Property Value bool OpenSound Gets the opening sound for the dialog being opened, or null if none. public virtual AssetLocation OpenSound { get; set; } Property Value AssetLocation PrefersUngrabbedMouse Gets whether it is preferred for the mouse to be not grabbed while this dialog is opened. If true (default), the Alt button needs to be held to manually grab the mouse. public override bool PrefersUngrabbedMouse { get; } Property Value bool Methods CloseIconPressed() Occurs whenever the X icon in the top right corner of the GUI (not the window) is pressed. protected void CloseIconPressed() DoSendPacket(object) We tunnel our packet through a block entity packet so the block entity can handle all the network stuff protected void DoSendPacket(object p) Parameters p object OnFinalizeFrame(float) This occurs right before the frame is pushed to the screen. public override void OnFinalizeFrame(float dt) Parameters dt float The time elapsed. OnGuiClosed() Called when the GUI is closed. public override void OnGuiClosed() OnGuiOpened() Called whenver the GUI is opened. public override void OnGuiOpened() OnNewScrollbarvalue(float) Called whenever the scrollbar or mouse wheel is used. protected void OnNewScrollbarvalue(float value) Parameters value float The new value of the scrollbar. OnRenderGUI(float) Render's the object in Orthographic mode. public override void OnRenderGUI(float deltaTime) Parameters deltaTime float The time elapsed. ReloadValues() Reloads the values of the GUI. public void ReloadValues() TryOpen() Attempts to open this gui. public override bool TryOpen() Returns bool Whether the attempt was successful."
  },
  "api/Vintagestory.API.Client.GuiDialogBlockEntityInventory.html": {
    "href": "api/Vintagestory.API.Client.GuiDialogBlockEntityInventory.html",
    "title": "Class GuiDialogBlockEntityInventory | VintageStory API",
    "keywords": "Class GuiDialogBlockEntityInventory Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A block entity inventory system for things like a campfire, or other things like that. Open in GitHub public class GuiDialogBlockEntityInventory : GuiDialogBlockEntity, IDisposable Inheritance object GuiDialog GuiDialogGeneric GuiDialogBlockEntity GuiDialogBlockEntityInventory Implements IDisposable Inherited Members GuiDialogBlockEntity.IsDuplicate GuiDialogBlockEntity.Inventory GuiDialogBlockEntity.BlockEntityPosition GuiDialogBlockEntity.OpenSound GuiDialogBlockEntity.CloseSound GuiDialogBlockEntity.FloatyDialogPosition GuiDialogBlockEntity.FloatyDialogAlign GuiDialogBlockEntity.OnFinalizeFrame(float) GuiDialogBlockEntity.OnRenderGUI(float) GuiDialogBlockEntity.DoSendPacket(object) GuiDialogBlockEntity.OnNewScrollbarvalue(float) GuiDialogBlockEntity.CloseIconPressed() GuiDialogBlockEntity.TryOpen() GuiDialogBlockEntity.PrefersUngrabbedMouse GuiDialogBlockEntity.ReloadValues() GuiDialogGeneric.DialogTitle GuiDialogGeneric.UnregisterOnClose GuiDialogGeneric.Attributes GuiDialogGeneric.ToggleKeyCombinationCode GuiDialogGeneric.Recompose() GuiDialogGeneric.UnfocusElements() GuiDialogGeneric.FocusElement(int) GuiDialogGeneric.IsInRangeOfBlock(BlockPos) GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.DebugName GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.DialogType GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.InputOrder GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseDown(MouseEvent) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiDialogBlockEntityInventory(string, InventoryBase, BlockPos, int, ICoreClientAPI) public GuiDialogBlockEntityInventory(string dialogTitle, InventoryBase inventory, BlockPos blockEntityPos, int cols, ICoreClientAPI capi) Parameters dialogTitle string inventory InventoryBase blockEntityPos BlockPos cols int capi ICoreClientAPI Properties DrawOrder 0 = draw first, 1 = draw last. Used to enforce tooltips and held itemstack always drawn last to be visible. Vanilla dialogs draw order: Name tags: -0.1 Chat dialog: 0 Block Interaction help: 0.05 Worldmap HUD: 0.07 Default value for most other dialogs: 0.1 Worldmap Dialog: 0.11 Player and Chest inventories: 0.2 Various config/edit dialogs: 0.2 Handbook: 0.2 Escape menu: 0.89 public override double DrawOrder { get; } Property Value double Methods OnGuiClosed() Called when the GUI is closed. public override void OnGuiClosed() OnGuiOpened() Called whenver the GUI is opened. public override void OnGuiOpened()"
  },
  "api/Vintagestory.API.Client.GuiDialogCharacterBase.html": {
    "href": "api/Vintagestory.API.Client.GuiDialogCharacterBase.html",
    "title": "Class GuiDialogCharacterBase | VintageStory API",
    "keywords": "Class GuiDialogCharacterBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class GuiDialogCharacterBase : GuiDialog, IDisposable Inheritance object GuiDialog GuiDialogCharacterBase Implements IDisposable Inherited Members GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.DebugName GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.DialogType GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.DrawOrder GuiDialog.InputOrder GuiDialog.UnregisterOnClose GuiDialog.OnGuiOpened() GuiDialog.OnGuiClosed() GuiDialog.TryOpen() GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnRenderGUI(float) GuiDialog.OnFinalizeFrame(float) GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseDown(MouseEvent) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.PrefersUngrabbedMouse GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.ToggleKeyCombinationCode GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiDialogCharacterBase(ICoreClientAPI) public GuiDialogCharacterBase(ICoreClientAPI capi) Parameters capi ICoreClientAPI Properties RenderTabHandlers public abstract List<Action<GuiComposer>> RenderTabHandlers { get; } Property Value List<Action<GuiComposer>> Tabs public abstract List<GuiTab> Tabs { get; } Property Value List<GuiTab> Methods OnTitleBarClose() public virtual void OnTitleBarClose() Events ComposeExtraGuis public abstract event Action ComposeExtraGuis Event Type Action TabClicked public abstract event Action<int> TabClicked Event Type Action<int>"
  },
  "api/Vintagestory.API.Client.GuiDialogConfirm.html": {
    "href": "api/Vintagestory.API.Client.GuiDialogConfirm.html",
    "title": "Class GuiDialogConfirm | VintageStory API",
    "keywords": "Class GuiDialogConfirm Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiDialogConfirm : GuiDialog, IDisposable Inheritance object GuiDialog GuiDialogConfirm Implements IDisposable Inherited Members GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.DebugName GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.DialogType GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.InputOrder GuiDialog.UnregisterOnClose GuiDialog.OnGuiClosed() GuiDialog.TryOpen() GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnRenderGUI(float) GuiDialog.OnFinalizeFrame(float) GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseDown(MouseEvent) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.PrefersUngrabbedMouse GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiDialogConfirm(ICoreClientAPI, string, Action<bool>) public GuiDialogConfirm(ICoreClientAPI capi, string text, Action<bool> DidPressButton) Parameters capi ICoreClientAPI text string DidPressButton Action<bool> Properties DrawOrder 0 = draw first, 1 = draw last. Used to enforce tooltips and held itemstack always drawn last to be visible. Vanilla dialogs draw order: Name tags: -0.1 Chat dialog: 0 Block Interaction help: 0.05 Worldmap HUD: 0.07 Default value for most other dialogs: 0.1 Worldmap Dialog: 0.11 Player and Chest inventories: 0.2 Various config/edit dialogs: 0.2 Handbook: 0.2 Escape menu: 0.89 public override double DrawOrder { get; } Property Value double ToggleKeyCombinationCode The key combination string that toggles this GUI object. public override string ToggleKeyCombinationCode { get; } Property Value string Methods OnGuiOpened() Fires when the GUI is opened. public override void OnGuiOpened()"
  },
  "api/Vintagestory.API.Client.GuiDialogGeneric.html": {
    "href": "api/Vintagestory.API.Client.GuiDialogGeneric.html",
    "title": "Class GuiDialogGeneric | VintageStory API",
    "keywords": "Class GuiDialogGeneric Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Mainly used for block entity based guis Open in GitHub public abstract class GuiDialogGeneric : GuiDialog, IDisposable Inheritance object GuiDialog GuiDialogGeneric Implements IDisposable Derived GuiDialogBlockEntity GuiJsonDialog Inherited Members GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.DebugName GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.DialogType GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.DrawOrder GuiDialog.InputOrder GuiDialog.OnGuiOpened() GuiDialog.OnGuiClosed() GuiDialog.TryOpen() GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnRenderGUI(float) GuiDialog.OnFinalizeFrame(float) GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseDown(MouseEvent) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.PrefersUngrabbedMouse GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiDialogGeneric(string, ICoreClientAPI) Constructor for a generic Dialog. public GuiDialogGeneric(string DialogTitle, ICoreClientAPI capi) Parameters DialogTitle string The title of the dialog. capi ICoreClientAPI The Client API Fields DialogTitle The title of the Dialog. public string DialogTitle Field Value string Properties Attributes The tree attributes for this dialog. public virtual ITreeAttribute Attributes { get; protected set; } Property Value ITreeAttribute ToggleKeyCombinationCode The key combination string that toggles this GUI object. public override string ToggleKeyCombinationCode { get; } Property Value string UnregisterOnClose Should this Dialog de-register itself once closed? public override bool UnregisterOnClose { get; } Property Value bool Methods FocusElement(int) Focuses a specific element in the single composer. public virtual void FocusElement(int index) Parameters index int Index of the element. IsInRangeOfBlock(BlockPos) Checks if the player is in range of the block. public virtual bool IsInRangeOfBlock(BlockPos blockEntityPos) Parameters blockEntityPos BlockPos The block's position. Returns bool In range or no? Recompose() Recomposes the dialog with it's set of elements. public virtual void Recompose() UnfocusElements() Unfocuses the elements in each composer. public virtual void UnfocusElements()"
  },
  "api/Vintagestory.API.Client.GuiElement.html": {
    "href": "api/Vintagestory.API.Client.GuiElement.html",
    "title": "Class GuiElement | VintageStory API",
    "keywords": "Class GuiElement Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class GuiElement : IDisposable Inheritance object GuiElement Implements IDisposable Derived GuiElementCellList<T> GuiElementContainer GuiElementControl GuiElementCustomDraw GuiElementCustomRender GuiElementDialogBackground GuiElementGameOverlay GuiElementGrayBackground GuiElementItemSlotGridBase GuiElementParent GuiElementPassiveItemSlot GuiElementRichtext GuiElementSkillItemGrid GuiElementSliderOld Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElement(ICoreClientAPI, ElementBounds) Adds a new GUIElement to the GUI. public GuiElement(ICoreClientAPI capi, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API bounds ElementBounds The bounds of the element. Fields Bounds The bounds of the element. public ElementBounds Bounds Field Value ElementBounds TabIndex The tab index of the element. public int TabIndex Field Value int api The Client API. protected ICoreClientAPI api Field Value ICoreClientAPI dirtTextureName public static AssetLocation dirtTextureName Field Value AssetLocation hasFocus Whether or not the element has focus. protected bool hasFocus Field Value bool noisyMetalTextureName public static AssetLocation noisyMetalTextureName Field Value AssetLocation paperTextureName public static AssetLocation paperTextureName Field Value AssetLocation stoneTextureName public static AssetLocation stoneTextureName Field Value AssetLocation waterTextureName public static AssetLocation waterTextureName Field Value AssetLocation woodTextureName public static AssetLocation woodTextureName Field Value AssetLocation Properties DrawOrder 0 = draw first, 1 = draw last. Only for interactive elements. public virtual double DrawOrder { get; } Property Value double Focusable Whether or not the element can be focused. public virtual bool Focusable { get; } Property Value bool HasFocus Whether or not the element has focus or not. public bool HasFocus { get; } Property Value bool InsideClipBounds If the element is inside a clip or not. public virtual ElementBounds InsideClipBounds { get; set; } Property Value ElementBounds MouseOverCursor public virtual string MouseOverCursor { get; protected set; } Property Value string RenderAsPremultipliedAlpha public bool RenderAsPremultipliedAlpha { get; set; } Property Value bool Scale The scale of the element. public virtual double Scale { get; set; } Property Value double Methods BeforeCalcBounds() public virtual void BeforeCalcBounds() ComposeElements(Context, ImageSurface) Composes the elements. public virtual void ComposeElements(Context ctxStatic, ImageSurface surface) Parameters ctxStatic Context The context of the components. surface ImageSurface The surface of the GUI. DialogRoundRectangle(Context, ElementBounds) Creates a rounded rectangle. public void DialogRoundRectangle(Context ctx, ElementBounds bounds) Parameters ctx Context The GUI context bounds ElementBounds The bounds of the rectangle. DiscardPattern(AssetLocation) Discards a pattern based off the the filename. public static void DiscardPattern(AssetLocation textureLoc) Parameters textureLoc AssetLocation The pattern to discard. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public virtual void Dispose() ElementRoundRectangle(Context, ElementBounds, bool, double) Creates a rounded rectangle element. public void ElementRoundRectangle(Context ctx, ElementBounds bounds, bool isBackground = false, double radius = -1) Parameters ctx Context The context for the rectangle. bounds ElementBounds The bounds of the rectangle. isBackground bool Is the rectangle part of a background GUI object (Default: false) radius double The radius of the corner of the rectangle (default: -1) EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) Adds an embossed rounded rectangle to the dialog. protected void EmbossRoundRectangle(Context ctx, double x, double y, double width, double height, double radius, int depth = 3, float intensity = 0.4, float lightDarkBalance = 1, bool inverse = false, float alphaOffset = 0) Parameters ctx Context The context of the rectangle. x double The X position of the rectangle y double The Y position of the rectangle width double The width of the rectangle height double The height of the rectangle. radius double The radius of the corner of the rectangle. depth int The thickness of the emboss. (Default: 3) intensity float The intensity of the emboss. (Default: 0.4f) lightDarkBalance float How skewed is the light/dark balance (Default: 1) inverse bool Whether or not it goes in or out. (Default: false) alphaOffset float The offset for the alpha part of the emboss. (Default: 0) EmbossRoundRectangleDialog(Context, double, double, double, double, bool) Adds an embossed rounded rectangle to the dialog. public void EmbossRoundRectangleDialog(Context ctx, double x, double y, double width, double height, bool inverse = false) Parameters ctx Context The context of the rectangle. x double The X position of the rectangle y double The Y position of the rectangle width double The width of the rectangle height double The height of the rectangle. inverse bool Whether or not it goes in or out. EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) Adds an embossed rounded rectangle to the dialog. public void EmbossRoundRectangleElement(Context ctx, double x, double y, double width, double height, bool inverse = false, int depth = 2, int radius = -1) Parameters ctx Context The context of the rectangle. x double The X position of the rectangle y double The Y position of the rectangle width double The width of the rectangle height double The height of the rectangle. inverse bool Whether or not it goes in or out. depth int The depth of the emboss. radius int The radius of the corner of the rectangle. EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) Adds an embossed rounded rectangle to the dialog. public void EmbossRoundRectangleElement(Context ctx, ElementBounds bounds, bool inverse = false, int depth = 2, int radius = -1) Parameters ctx Context The context of the rectangle. bounds ElementBounds The position and size of the rectangle. inverse bool Whether or not it goes in or out. (Default: false) depth int The depth of the emboss. (Default: 2) radius int The radius of the corner of the rectangle. (default: -1) IsPositionInside(int, int) Whether or not the point on screen is inside the Element's area. public virtual bool IsPositionInside(int posX, int posY) Parameters posX int The X Position of the point. posY int The Y Position of the point. Returns bool Lamp(Context, double, double, float[]) protected void Lamp(Context ctx, double x, double y, float[] color) Parameters ctx Context x double y double color float[] OnFocusGained() The event fired when the element gains focus. public virtual void OnFocusGained() OnFocusLost() The event fired when the element looses focus. public virtual void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public virtual void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnKeyPress(ICoreClientAPI, KeyEvent) The event fired the moment a key is pressed. public virtual void OnKeyPress(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The Client API. args KeyEvent The keyboard state when the key was pressed. OnKeyUp(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public virtual void OnKeyUp(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDown(ICoreClientAPI, MouseEvent) The event fired when the mouse is down the element is around. Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function. public virtual void OnMouseDown(ICoreClientAPI api, MouseEvent mouse) Parameters api ICoreClientAPI The Client API mouse MouseEvent The mouse event args. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public virtual void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseEnterSlot(ICoreClientAPI, ItemSlot) public virtual bool OnMouseEnterSlot(ICoreClientAPI api, ItemSlot slot) Parameters api ICoreClientAPI slot ItemSlot Returns bool OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) public virtual bool OnMouseLeaveSlot(ICoreClientAPI api, ItemSlot slot) Parameters api ICoreClientAPI slot ItemSlot Returns bool OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public virtual void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public virtual void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseUpOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is released on the element. Called after OnMouseUp. public virtual void OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public virtual void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. OutlineColor() The compressed version of the debug outline color as a single int value. public virtual int OutlineColor() Returns int PostRenderInteractiveElements(float) The post render of the interactive element. public virtual void PostRenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. Rectangle(Context, double, double, double, double) Makes a rectangle with specified parameters. public static void Rectangle(Context ctx, double x, double y, double width, double height) Parameters ctx Context Context of the rectangle x double The X position of the rectangle y double The Y position of the rectangle width double The width of the rectangle height double The height of the rectangle. Rectangle(Context, ElementBounds) Makes a rectangle with the provided context and bounds. public static void Rectangle(Context ctx, ElementBounds bounds) Parameters ctx Context The context for the rectangle. bounds ElementBounds The bounds of the rectangle. Render2DTexture(int, double, double, double, double, float, Vec4f) protected void Render2DTexture(int textureid, double posX, double posY, double width, double height, float z = 50, Vec4f color = null) Parameters textureid int posX double posY double width double height double z float color Vec4f Render2DTexture(int, float, float, float, float, float, Vec4f) protected void Render2DTexture(int textureid, float posX, float posY, float width, float height, float z = 50, Vec4f color = null) Parameters textureid int posX float posY float width float height float z float color Vec4f Render2DTexture(int, ElementBounds, float, Vec4f) protected void Render2DTexture(int textureid, ElementBounds bounds, float z = 50, Vec4f color = null) Parameters textureid int bounds ElementBounds z float color Vec4f RenderBoundsDebug() public virtual void RenderBoundsDebug() RenderFocusOverlay(float) Renders the focus overlay. public void RenderFocusOverlay(float deltaTime) Parameters deltaTime float The change in time. RenderInteractiveElements(float) Renders the element as an interactive element. public virtual void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. RoundRectangle(Context, double, double, double, double, double) Creates a rounded rectangle public static void RoundRectangle(Context ctx, double x, double y, double width, double height, double radius) Parameters ctx Context The context for the rectangle. x double The X position of the rectangle y double The Y position of the rectangle width double The width of the rectangle height double The height of the rectangle. radius double The radius of the corner of the rectangle. ShadePath(Context, double) Shades a path with the given context. public void ShadePath(Context ctx, double thickness = 2) Parameters ctx Context The context of the shading. thickness double The thickness of the line to shade. fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) Fills an area with a pattern. public static SurfacePattern fillWithPattern(ICoreClientAPI capi, Context ctx, AssetLocation textureLoc, bool nearestScalingFiler = false, bool preserve = false, int mulAlpha = 255, float scale = 1) Parameters capi ICoreClientAPI The Client API ctx Context The context of the fill. textureLoc AssetLocation The name of the texture file. nearestScalingFiler bool preserve bool Whether or not to preserve the aspect ratio of the texture. mulAlpha int scale float Returns SurfacePattern The surface pattern filled with the given texture. genContext(ImageSurface) Generates context based off the image surface. protected Context genContext(ImageSurface surface) Parameters surface ImageSurface The surface where the context is based. Returns Context The context based off the provided surface. generateTexture(ImageSurface, ref int, bool) Generates a texture with an ID. protected void generateTexture(ImageSurface surface, ref int textureId, bool linearMag = true) Parameters surface ImageSurface The image surface supplied. textureId int The previous texture id. linearMag bool Whether or not the texture will have linear magnification. generateTexture(ImageSurface, ref LoadedTexture, bool) Generates a new texture. protected void generateTexture(ImageSurface surface, ref LoadedTexture intoTexture, bool linearMag = true) Parameters surface ImageSurface The surface provided. intoTexture LoadedTexture The texture to be loaded into. linearMag bool Whether or not the texture will have linear magnification. getImageSurfaceFromAsset(SKBitmap) Gets an image surface based off the bitmap. [Obsolete(\"Use getImageSurfaceFromAsset(BitmapExternal bitmap) for easier update to .NET7.0\")] public static ImageSurface getImageSurfaceFromAsset(SKBitmap bitmap) Parameters bitmap SKBitmap The provided bitmap. Returns ImageSurface The image surface built from the bitmap. getImageSurfaceFromAsset(SKBitmap, int, int) Gets an image surface based off the bitmap. [Obsolete(\"Use getImageSurfaceFromAsset(BitmapExternal bitmap, int width, int height) for easier update to .NET7.0\")] public static ImageSurface getImageSurfaceFromAsset(SKBitmap bitmap, int width, int height) Parameters bitmap SKBitmap The provided bitmap. width int The width requested. height int The height requested. Returns ImageSurface The image surface built from the bitmap and data. getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) Fetches an image surface from a named file. public static ImageSurface getImageSurfaceFromAsset(ICoreClientAPI capi, AssetLocation textureLoc, int mulAlpha = 255) Parameters capi ICoreClientAPI The Client API textureLoc AssetLocation The name of the text file. mulAlpha int Returns ImageSurface getImageSurfaceFromAsset(BitmapExternal) Gets an image surface based off the bitmap. public static ImageSurface getImageSurfaceFromAsset(BitmapExternal bitmap) Parameters bitmap BitmapExternal The provided bitmap. Returns ImageSurface The image surface built from the bitmap. getImageSurfaceFromAsset(BitmapExternal, int, int) Gets an image surface based off the bitmap. public static ImageSurface getImageSurfaceFromAsset(BitmapExternal bitmap, int width, int height) Parameters bitmap BitmapExternal The provided bitmap. width int The width requested. height int The height requested. Returns ImageSurface The image surface built from the bitmap and data. getPattern(SKBitmap) Gets a surface pattern based off the bitmap. [Obsolete(\"Use getPattern(BitmapExternal bitmap) for easier update to .NET7.0\")] public static SurfacePattern getPattern(SKBitmap bitmap) Parameters bitmap SKBitmap The provided bitmap. Returns SurfacePattern The resulting surface pattern. getPattern(ICoreClientAPI, AssetLocation, bool, int, float) Gets a surface pattern from a named file. public static SurfacePattern getPattern(ICoreClientAPI capi, AssetLocation textureLoc, bool doCache = true, int mulAlpha = 255, float scale = 1) Parameters capi ICoreClientAPI The Client API textureLoc AssetLocation The name of the file. doCache bool Do we cache the file? mulAlpha int scale float Returns SurfacePattern The resulting surface pattern. getPattern(BitmapExternal) Gets a surface pattern based off the bitmap. [Obsolete(\"Use getPattern(BitmapExternal bitmap) for easier update to .NET7.0\")] public static SurfacePattern getPattern(BitmapExternal bitmap) Parameters bitmap BitmapExternal The provided bitmap. Returns SurfacePattern The resulting surface pattern. scaled(double) Changes the scale of given value by the GUIScale factor. public static double scaled(double value) Parameters value double Returns double The scaled value based scaledi(double) Changes the scale of given value by the GUIScale factor public static int scaledi(double value) Parameters value double Returns int Scaled value type cast to int"
  },
  "api/Vintagestory.API.Client.GuiElementCellList-1.html": {
    "href": "api/Vintagestory.API.Client.GuiElementCellList-1.html",
    "title": "Class GuiElementCellList<T> | VintageStory API",
    "keywords": "Class GuiElementCellList<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public class GuiElementCellList<T> : GuiElement, IDisposable Type Parameters T Inheritance object GuiElement GuiElementCellList<T> Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementCellList(ICoreClientAPI, ElementBounds, OnRequireCell<T>, IEnumerable<T>) Creates a new list in the current GUI. public GuiElementCellList(ICoreClientAPI capi, ElementBounds bounds, OnRequireCell<T> cellCreator, IEnumerable<T> cells = null) Parameters capi ICoreClientAPI The Client API. bounds ElementBounds The bounds of the list. cellCreator OnRequireCell<T> The event fired when a cell is requested by the gui cells IEnumerable<T> The array of cells initialized with the list. Fields UnscaledCellHorPadding The padding on the horizontal axis of the cell. Default: 7 public int UnscaledCellHorPadding Field Value int UnscaledCellVerPadding The padding on the vertical axis of the cell. Default: 2 public int UnscaledCellVerPadding Field Value int elementCells The cells in the list. See IGuiElementCell for how it's supposed to function. public List<IGuiElementCell> elementCells Field Value List<IGuiElementCell> unscaledCellSpacing the space between the cells. Default: 10 public int unscaledCellSpacing Field Value int Properties InsideClipBounds If the element is inside a clip or not. public override ElementBounds InsideClipBounds { get; set; } Property Value ElementBounds Methods AddCell(T, int) Adds a cell to the list. protected void AddCell(T cell, int afterPosition = -1) Parameters cell T The cell to add. afterPosition int The position of the cell to add after. (Default: -1) BeforeCalcBounds() public override void BeforeCalcBounds() CalcTotalHeight() Calculates the total height for the list. public void CalcTotalHeight() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUpOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is released on the element. Called after OnMouseUp. public override void OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. ReloadCells(IEnumerable<T>) public void ReloadCells(IEnumerable<T> cells) Parameters cells IEnumerable<T> RemoveCell(int) Removes a cell at a specified position. protected void RemoveCell(int position) Parameters position int The position of the cell to remove. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementChatInput.html": {
    "href": "api/Vintagestory.API.Client.GuiElementChatInput.html",
    "title": "Class GuiElementChatInput | VintageStory API",
    "keywords": "Class GuiElementChatInput Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementChatInput : GuiElementEditableTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementEditableTextBase GuiElementChatInput Implements IDisposable Inherited Members GuiElementEditableTextBase.OnCaretPositionChanged GuiElementEditableTextBase.OnTextChanged GuiElementEditableTextBase.OnTryTextChangeText GuiElementEditableTextBase.OnCursorMoved GuiElementEditableTextBase.OnKeyPressed GuiElementEditableTextBase.lines GuiElementEditableTextBase.linesStaging GuiElementEditableTextBase.WordWrap GuiElementEditableTextBase.GetLines() GuiElementEditableTextBase.TextLengthWithoutLineBreaks GuiElementEditableTextBase.CaretPosWithoutLineBreaks GuiElementEditableTextBase.pcaretPosLine GuiElementEditableTextBase.pcaretPosInLine GuiElementEditableTextBase.CaretPosLine GuiElementEditableTextBase.CaretPosInLine GuiElementEditableTextBase.Focusable GuiElementEditableTextBase.OnFocusGained() GuiElementEditableTextBase.OnFocusLost() GuiElementEditableTextBase.SetCaretPos(double, double) GuiElementEditableTextBase.SetCaretPos(int, int) GuiElementEditableTextBase.SetValue(float) GuiElementEditableTextBase.SetValue(double) GuiElementEditableTextBase.SetValue(string, bool) GuiElementEditableTextBase.LoadValue(List<string>) GuiElementEditableTextBase.Lineize(string) GuiElementEditableTextBase.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.GetText() GuiElementEditableTextBase.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.RenderTextSelection() GuiElementEditableTextBase.MoveCursor(int, bool, bool) GuiElementEditableTextBase.SetMaxLines(int) GuiElementEditableTextBase.SetMaxHeight(int) GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementChatInput(ICoreClientAPI, ElementBounds, Action<string>) Adds a chat input element to the UI. public GuiElementChatInput(ICoreClientAPI capi, ElementBounds bounds, Action<string> OnTextChanged) Parameters capi ICoreClientAPI The client API bounds ElementBounds The bounds of the chat input. OnTextChanged Action<string> The event fired when the text is altered. Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementClipHelpler.html": {
    "href": "api/Vintagestory.API.Client.GuiElementClipHelpler.html",
    "title": "Class GuiElementClipHelpler | VintageStory API",
    "keywords": "Class GuiElementClipHelpler Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementClipHelpler Inheritance object GuiElementClipHelpler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BeginClip(GuiComposer, ElementBounds) Add a clip area. Thhis select an area to be rendered, where anything outside will be invisible. Useful for scrollable content. Can be called multiple times, to reduce the render area further, but needs an equal amount of calls to EndClip() public static GuiComposer BeginClip(this GuiComposer composer, ElementBounds bounds) Parameters composer GuiComposer bounds ElementBounds The bounds of the object. Returns GuiComposer EndClip(GuiComposer) Remove a previously added clip area. public static GuiComposer EndClip(this GuiComposer composer) Parameters composer GuiComposer Returns GuiComposer"
  },
  "api/Vintagestory.API.Client.GuiElementColorListPicker.html": {
    "href": "api/Vintagestory.API.Client.GuiElementColorListPicker.html",
    "title": "Class GuiElementColorListPicker | VintageStory API",
    "keywords": "Class GuiElementColorListPicker Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Creates a toggle button for the GUI. Open in GitHub public class GuiElementColorListPicker : GuiElementElementListPickerBase<int>, IDisposable Inheritance object GuiElement GuiElementControl GuiElementElementListPickerBase<int> GuiElementColorListPicker Implements IDisposable Inherited Members GuiElementElementListPickerBase<int>.handler GuiElementElementListPickerBase<int>.On GuiElementElementListPickerBase<int>.ShowToolTip GuiElementElementListPickerBase<int>.TooltipText GuiElementElementListPickerBase<int>.Focusable GuiElementElementListPickerBase<int>.ComposeElements(Context, ImageSurface) GuiElementElementListPickerBase<int>.RenderInteractiveElements(float) GuiElementElementListPickerBase<int>.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementElementListPickerBase<int>.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElementElementListPickerBase<int>.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementElementListPickerBase<int>.SetValue(bool) GuiElementElementListPickerBase<int>.Dispose() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementColorListPicker(ICoreClientAPI, int, ElementBounds) public GuiElementColorListPicker(ICoreClientAPI capi, int elem, ElementBounds bounds) Parameters capi ICoreClientAPI elem int bounds ElementBounds Methods DrawElement(int, Context, ImageSurface) public override void DrawElement(int color, Context ctx, ImageSurface surface) Parameters color int ctx Context surface ImageSurface"
  },
  "api/Vintagestory.API.Client.GuiElementCompactScrollbar.html": {
    "href": "api/Vintagestory.API.Client.GuiElementCompactScrollbar.html",
    "title": "Class GuiElementCompactScrollbar | VintageStory API",
    "keywords": "Class GuiElementCompactScrollbar Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementCompactScrollbar : GuiElementScrollbar, IDisposable Inheritance object GuiElement GuiElementControl GuiElementScrollbar GuiElementCompactScrollbar Implements IDisposable Inherited Members GuiElementScrollbar.DefaultScrollbarWidth GuiElementScrollbar.DeafultScrollbarPadding GuiElementScrollbar.onNewScrollbarValue GuiElementScrollbar.mouseDownOnScrollbarHandle GuiElementScrollbar.mouseDownStartY GuiElementScrollbar.visibleHeight GuiElementScrollbar.totalHeight GuiElementScrollbar.currentHandlePosition GuiElementScrollbar.currentHandleHeight GuiElementScrollbar.zOffset GuiElementScrollbar.handleTexture GuiElementScrollbar.ScrollConversionFactor GuiElementScrollbar.CurrentYPosition GuiElementScrollbar.SetHeights(float, float) GuiElementScrollbar.SetNewTotalHeight(float) GuiElementScrollbar.SetScrollbarPosition(int) GuiElementScrollbar.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElementScrollbar.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementScrollbar.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementScrollbar.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementScrollbar.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElementScrollbar.TriggerChanged() GuiElementScrollbar.ScrollToBottom() GuiElementScrollbar.EnsureVisible(double, double) GuiElementScrollbar.Dispose() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementCompactScrollbar(ICoreClientAPI, Action<float>, ElementBounds) Scrollbar constructor. public GuiElementCompactScrollbar(ICoreClientAPI capi, Action<float> onNewScrollbarValue, ElementBounds bounds) Parameters capi ICoreClientAPI Client API onNewScrollbarValue Action<float> Event for the changing of the scrollbar or scrolling of the mousewheel. bounds ElementBounds the bounding box of the scrollbar. Fields scrollbarPadding The padding around the scrollbar. public static int scrollbarPadding Field Value int Properties Focusable Can this GUIElement be focusable? (default: true). public override bool Focusable { get; } Property Value bool Methods ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctxStatic, ImageSurface surface) Parameters ctxStatic Context The context of the element surface ImageSurface The surface of the image for the element (Not used, can be null.) RecomposeHandle() public override void RecomposeHandle() RenderInteractiveElements(float) Renders the element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The amount of time that has passed."
  },
  "api/Vintagestory.API.Client.GuiElementConfigList.html": {
    "href": "api/Vintagestory.API.Client.GuiElementConfigList.html",
    "title": "Class GuiElementConfigList | VintageStory API",
    "keywords": "Class GuiElementConfigList Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A configurable list of items. An example of this is the controls in the settings menu. Open in GitHub public class GuiElementConfigList : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementConfigList Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementConfigList(ICoreClientAPI, List<ConfigItem>, ConfigItemClickDelegate, CairoFont, ElementBounds) Creates a new dropdown configuration list. public GuiElementConfigList(ICoreClientAPI capi, List<ConfigItem> items, ConfigItemClickDelegate OnItemClick, CairoFont font, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API items List<ConfigItem> The list of items in the configuration. OnItemClick ConfigItemClickDelegate The event fired when the particular item is clicked. font CairoFont The font of the text. bounds ElementBounds the bounds of the element. Fields errorFont public CairoFont errorFont Field Value CairoFont innerBounds public ElementBounds innerBounds Field Value ElementBounds items public List<ConfigItem> items Field Value List<ConfigItem> leftWidthRel public double leftWidthRel Field Value double rightWidthRel public double rightWidthRel Field Value double stdFont public CairoFont stdFont Field Value CairoFont titleFont public CairoFont titleFont Field Value CairoFont unscaledPadding public static double unscaledPadding Field Value double Methods Autoheight() Automatically adjusts the height of the element. public void Autoheight() ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctxs, ImageSurface surfaces) Parameters ctxs Context surfaces ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. Refresh() Refreshes the Config List. public void Refresh() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementContainer.html": {
    "href": "api/Vintagestory.API.Client.GuiElementContainer.html",
    "title": "Class GuiElementContainer | VintageStory API",
    "keywords": "Class GuiElementContainer Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementContainer : GuiElement, IDisposable Inheritance object GuiElement GuiElementContainer Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementContainer(ICoreClientAPI, ElementBounds) Creates a new list in the current GUI. public GuiElementContainer(ICoreClientAPI capi, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API. bounds ElementBounds The bounds of the list. Fields Elements The cells in the list. See IGuiElementCell for how it's supposed to function. public List<GuiElement> Elements Field Value List<GuiElement> Tabbable public bool Tabbable Field Value bool UnscaledCellHorPadding The padding on the horizontal axis of the cell. Default: 7 public int UnscaledCellHorPadding Field Value int UnscaledCellVerPadding The padding on the vertical axis of the cell. Default: 2 public int UnscaledCellVerPadding Field Value int currentFocusableElementKey protected int currentFocusableElementKey Field Value int unscaledCellSpacing the space between the cells. Default: 10 public int unscaledCellSpacing Field Value int Properties CurrentTabIndexElement Gets the currently tabbed index element, if there is one currently focused. public GuiElement CurrentTabIndexElement { get; } Property Value GuiElement FirstTabbableElement public GuiElement FirstTabbableElement { get; } Property Value GuiElement Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool MaxTabIndex Gets the maximum tab index of the components. public int MaxTabIndex { get; } Property Value int Methods Add(GuiElement, int) Adds a cell to the list. public void Add(GuiElement elem, int afterPosition = -1) Parameters elem GuiElement The cell to add. afterPosition int The position of the cell to add after. (Default: -1) BeforeCalcBounds() public override void BeforeCalcBounds() CalcTotalHeight() Calculates the total height for the list. public void CalcTotalHeight() Clear() public void Clear() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() FocusElement(int) marks an element as in focus. public bool FocusElement(int tabIndex) Parameters tabIndex int The tab index to focus at. Returns bool Whether or not the focus could be done. OnFocusGained() The event fired when the element gains focus. public override void OnFocusGained() OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnKeyPress(ICoreClientAPI, KeyEvent) The event fired the moment a key is pressed. public override void OnKeyPress(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The Client API. args KeyEvent The keyboard state when the key was pressed. OnKeyUp(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyUp(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDown(ICoreClientAPI, MouseEvent) The event fired when the mouse is down the element is around. Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function. public override void OnMouseDown(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. RemoveCell(int) Removes a cell at a specified position. public void RemoveCell(int position) Parameters position int The position of the cell to remove. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. UnfocusOwnElements() public void UnfocusOwnElements() UnfocusOwnElementsExcept(GuiElement) Unfocuses all elements except one specific element. public void UnfocusOwnElementsExcept(GuiElement elem) Parameters elem GuiElement The element to remain in focus."
  },
  "api/Vintagestory.API.Client.GuiElementControl.html": {
    "href": "api/Vintagestory.API.Client.GuiElementControl.html",
    "title": "Class GuiElementControl | VintageStory API",
    "keywords": "Class GuiElementControl Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll An element that allows input and can be disabled Open in GitHub public abstract class GuiElementControl : GuiElement, IDisposable Inheritance object GuiElement GuiElementControl Implements IDisposable Derived GuiElementElementListPickerBase<T> GuiElementScrollbar GuiElementSlider GuiElementSwitch GuiElementTextBase GuiElementTextButton Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.ComposeElements(Context, ImageSurface) GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementControl(ICoreClientAPI, ElementBounds) Constructor for the element. public GuiElementControl(ICoreClientAPI capi, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API. bounds ElementBounds the bounds of the element. Fields enabled protected bool enabled Field Value bool Properties Enabled Enables/disables the given element (default is enabled) public virtual bool Enabled { get; set; } Property Value bool"
  },
  "api/Vintagestory.API.Client.GuiElementCustomDraw.html": {
    "href": "api/Vintagestory.API.Client.GuiElementCustomDraw.html",
    "title": "Class GuiElementCustomDraw | VintageStory API",
    "keywords": "Class GuiElementCustomDraw Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementCustomDraw : GuiElement, IDisposable Inheritance object GuiElement GuiElementCustomDraw Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementCustomDraw(ICoreClientAPI, ElementBounds, DrawDelegateWithBounds, bool) Adds a custom drawing element to the GUI public GuiElementCustomDraw(ICoreClientAPI capi, ElementBounds bounds, DrawDelegateWithBounds OnDraw, bool interactive = false) Parameters capi ICoreClientAPI The Client API bounds ElementBounds The bounds of the Element OnDraw DrawDelegateWithBounds The event fired when the object is drawn. interactive bool Whether or not the element is able to be interacted with (Default: false) Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context The context of the components. surfaceStatic ImageSurface OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. Redraw() Redraws the element. public void Redraw() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementCustomRender.html": {
    "href": "api/Vintagestory.API.Client.GuiElementCustomRender.html",
    "title": "Class GuiElementCustomRender | VintageStory API",
    "keywords": "Class GuiElementCustomRender Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementCustomRender : GuiElement, IDisposable Inheritance object GuiElement GuiElementCustomRender Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementCustomRender(ICoreClientAPI, ElementBounds, RenderDelegateWithBounds) Adds a custom drawing element to the GUI public GuiElementCustomRender(ICoreClientAPI capi, ElementBounds bounds, RenderDelegateWithBounds onRender) Parameters capi ICoreClientAPI The Client API bounds ElementBounds The bounds of the Element onRender RenderDelegateWithBounds The event fired when the object is drawn. Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context The context of the components. surfaceStatic ImageSurface OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementDialogBackground.html": {
    "href": "api/Vintagestory.API.Client.GuiElementDialogBackground.html",
    "title": "Class GuiElementDialogBackground | VintageStory API",
    "keywords": "Class GuiElementDialogBackground Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementDialogBackground : GuiElement, IDisposable Inheritance object GuiElement GuiElementDialogBackground Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementDialogBackground(ICoreClientAPI, ElementBounds, bool, double, float) Adds a Background to the Dialog. public GuiElementDialogBackground(ICoreClientAPI capi, ElementBounds bounds, bool withTitlebar, double strokeWidth = 0, float alpha = 1) Parameters capi ICoreClientAPI The Client API bounds ElementBounds The bounds of the element. withTitlebar bool Minor style adjustments to accomodate title bar strokeWidth double The top padding area of the GUI alpha float Fields Alpha public float Alpha Field Value float FullBlur public bool FullBlur Field Value bool Shade public bool Shade Field Value bool Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI."
  },
  "api/Vintagestory.API.Client.GuiElementDialogTitleBar.html": {
    "href": "api/Vintagestory.API.Client.GuiElementDialogTitleBar.html",
    "title": "Class GuiElementDialogTitleBar | VintageStory API",
    "keywords": "Class GuiElementDialogTitleBar Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A title bar for your GUI. Open in GitHub public class GuiElementDialogTitleBar : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementDialogTitleBar Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementDialogTitleBar(ICoreClientAPI, string, GuiComposer, Action, CairoFont, ElementBounds) Creates a new title bar. public GuiElementDialogTitleBar(ICoreClientAPI capi, string text, GuiComposer composer, Action OnClose = null, CairoFont font = null, ElementBounds bounds = null) Parameters capi ICoreClientAPI The Client API. text string The text on the title bar. composer GuiComposer The GuiComposer for the title bar. OnClose Action The event fired when the title bar is closed. font CairoFont The font of the title bar. bounds ElementBounds The bounds of the title bar. Fields drawBg public bool drawBg Field Value bool unscaledCloseIconSize The size of the close icon in the top right corner of the GUI. public static int unscaledCloseIconSize Field Value int Properties Movable public bool Movable { get; } Property Value bool Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDown(ICoreClientAPI, MouseEvent) The event fired when the mouse is down the element is around. Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function. public override void OnMouseDown(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseUpOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is released on the element. Called after OnMouseUp. public override void OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementDropDown.html": {
    "href": "api/Vintagestory.API.Client.GuiElementDropDown.html",
    "title": "Class GuiElementDropDown | VintageStory API",
    "keywords": "Class GuiElementDropDown Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Creates a drop-down list of items. Open in GitHub public class GuiElementDropDown : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementDropDown Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementDropDown(ICoreClientAPI, string[], string[], int, SelectionChangedDelegate, ElementBounds, CairoFont, bool) Constructor. public GuiElementDropDown(ICoreClientAPI capi, string[] values, string[] names, int selectedIndex, SelectionChangedDelegate onSelectionChanged, ElementBounds bounds, CairoFont font, bool multiSelect) Parameters capi ICoreClientAPI The client API values string[] The values of the strings. names string[] The names of the strings. selectedIndex int The default selected index. onSelectionChanged SelectionChangedDelegate The event that occurs when the selection is changed. bounds ElementBounds The bounds of the drop down. font CairoFont multiSelect bool Fields PluralMoreNameCode public string PluralMoreNameCode Field Value string PluralNameCode public string PluralNameCode Field Value string SingularMoreNameCode public string SingularMoreNameCode Field Value string SingularNameCode public string SingularNameCode Field Value string arrowDownButtonPressed protected LoadedTexture arrowDownButtonPressed Field Value LoadedTexture arrowDownButtonReleased protected LoadedTexture arrowDownButtonReleased Field Value LoadedTexture currentValueTexture protected LoadedTexture currentValueTexture Field Value LoadedTexture highlightBounds protected ElementBounds highlightBounds Field Value ElementBounds highlightTexture protected LoadedTexture highlightTexture Field Value LoadedTexture listMenu public GuiElementListMenu listMenu Field Value GuiElementListMenu onSelectionChanged protected SelectionChangedDelegate onSelectionChanged Field Value SelectionChangedDelegate richTextElem public GuiElementRichtext richTextElem Field Value GuiElementRichtext Properties DrawOrder The draw order of this GUI Element. public override double DrawOrder { get; } Property Value double Enabled Enables/disables the given element (default is enabled) public override bool Enabled { get; set; } Property Value bool Focusable Can this element be put into focus? public override bool Focusable { get; } Property Value bool Scale The scale of this GUI element. public override double Scale { get; set; } Property Value double SelectedIndices public int[] SelectedIndices { get; } Property Value int[] SelectedValue public string SelectedValue { get; } Property Value string SelectedValues public string[] SelectedValues { get; } Property Value string[] Methods ComposeElements(Context, ImageSurface) Composes the element based on the context. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context The context of the element. surface ImageSurface The surface of the image. (Not used) Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() IsPositionInside(int, int) Whether or not the point on screen is inside the Element's area. public override bool IsPositionInside(int posX, int posY) Parameters posX int The X Position of the point. posY int The Y Position of the point. Returns bool OnFocusGained() The event fired when the element gains focus. public override void OnFocusGained() OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDown(ICoreClientAPI, MouseEvent) The event fired when the mouse is down the element is around. Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function. public override void OnMouseDown(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. RenderInteractiveElements(float) Renders the dropdown's interactive elements. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetList(string[], string[]) Sets the values of the list with their corresponding names. public void SetList(string[] values, string[] names) Parameters values string[] The values of the list. names string[] The names of the list. SetSelectedIndex(int) Sets the current index to a newly selected index. public void SetSelectedIndex(int selectedIndex) Parameters selectedIndex int the index that is to be selected. SetSelectedValue(params string[]) Sets the current index to the value of the selected string. public void SetSelectedValue(params string[] value) Parameters value string[] the string contained in the drop down."
  },
  "api/Vintagestory.API.Client.GuiElementDynamicText.html": {
    "href": "api/Vintagestory.API.Client.GuiElementDynamicText.html",
    "title": "Class GuiElementDynamicText | VintageStory API",
    "keywords": "Class GuiElementDynamicText Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Text that can be changed after being composed Open in GitHub public class GuiElementDynamicText : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementDynamicText Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementDynamicText(ICoreClientAPI, string, CairoFont, ElementBounds) Adds a new element that renders text dynamically. public GuiElementDynamicText(ICoreClientAPI capi, string text, CairoFont font, ElementBounds bounds) Parameters capi ICoreClientAPI The client API. text string The starting text on the component. font CairoFont The font of the text. bounds ElementBounds the bounds of the text. Fields OnClick public Action OnClick Field Value Action autoHeight public bool autoHeight Field Value bool Properties QuantityTextLines public int QuantityTextLines { get; } Property Value int Methods AutoHeight() Automatically adjusts the height of the dynamic text. public void AutoHeight() ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RecomposeText(bool) Recomposes the element for lines. public void RecomposeText(bool async = false) Parameters async bool RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetNewText(string, bool, bool, bool) Sets the text value of the element. public void SetNewText(string text, bool autoHeight = false, bool forceRedraw = false, bool async = false) Parameters text string The text of the component. autoHeight bool Whether the height of the component should be modified. forceRedraw bool Whether the element should be redrawn. async bool SetNewTextAsync(string, bool, bool) public void SetNewTextAsync(string text, bool autoHeight = false, bool forceRedraw = false) Parameters text string autoHeight bool forceRedraw bool"
  },
  "api/Vintagestory.API.Client.GuiElementDynamicTextHelper.html": {
    "href": "api/Vintagestory.API.Client.GuiElementDynamicTextHelper.html",
    "title": "Class GuiElementDynamicTextHelper | VintageStory API",
    "keywords": "Class GuiElementDynamicTextHelper Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementDynamicTextHelper Inheritance object GuiElementDynamicTextHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDynamicText(GuiComposer, string, CairoFont, ElementBounds, string) Adds dynamic text to the GUI. public static GuiComposer AddDynamicText(this GuiComposer composer, string text, CairoFont font, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string font CairoFont bounds ElementBounds key string Returns GuiComposer AddDynamicText(GuiComposer, string, CairoFont, EnumTextOrientation, ElementBounds, string) [Obsolete(\"Use AddDymiacText without orientation attribute, that can be configured through the font\")] public static GuiComposer AddDynamicText(this GuiComposer composer, string text, CairoFont font, EnumTextOrientation orientation, ElementBounds bounds, string key = null) Parameters composer GuiComposer text string font CairoFont orientation EnumTextOrientation bounds ElementBounds key string Returns GuiComposer GetDynamicText(GuiComposer, string) Gets the Dynamic Text by name from the GUI. public static GuiElementDynamicText GetDynamicText(this GuiComposer composer, string key) Parameters composer GuiComposer key string The name of the element. Returns GuiElementDynamicText"
  },
  "api/Vintagestory.API.Client.GuiElementEditableTextBase.OnTryTextChangeDelegate.html": {
    "href": "api/Vintagestory.API.Client.GuiElementEditableTextBase.OnTryTextChangeDelegate.html",
    "title": "Delegate GuiElementEditableTextBase.OnTryTextChangeDelegate | VintageStory API",
    "keywords": "Delegate GuiElementEditableTextBase.OnTryTextChangeDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate bool GuiElementEditableTextBase.OnTryTextChangeDelegate(List<string> lines) Parameters lines List<string> Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.GuiElementEditableTextBase.html": {
    "href": "api/Vintagestory.API.Client.GuiElementEditableTextBase.html",
    "title": "Class GuiElementEditableTextBase | VintageStory API",
    "keywords": "Class GuiElementEditableTextBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class GuiElementEditableTextBase : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementEditableTextBase Implements IDisposable Derived GuiElementChatInput GuiElementTextArea GuiElementTextInput Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementEditableTextBase(ICoreClientAPI, CairoFont, ElementBounds) Initializes the text component. public GuiElementEditableTextBase(ICoreClientAPI capi, CairoFont font, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API font CairoFont The font of the text. bounds ElementBounds The bounds of the component. Fields OnCaretPositionChanged public Action<int, int> OnCaretPositionChanged Field Value Action<int, int> OnCursorMoved public Action<double, double> OnCursorMoved Field Value Action<double, double> OnKeyPressed Called when a keyboard key was pressed, received and handled public Action OnKeyPressed Field Value Action OnTextChanged public Action<string> OnTextChanged Field Value Action<string> OnTryTextChangeText public GuiElementEditableTextBase.OnTryTextChangeDelegate OnTryTextChangeText Field Value GuiElementEditableTextBase.OnTryTextChangeDelegate WordWrap public bool WordWrap Field Value bool lines protected List<string> lines Field Value List<string> linesStaging Contains the same as Lines, but may momentarily have different values when an edit is being made protected List<string> linesStaging Field Value List<string> pcaretPosInLine protected int pcaretPosInLine Field Value int pcaretPosLine protected int pcaretPosLine Field Value int Properties CaretPosInLine public int CaretPosInLine { get; set; } Property Value int CaretPosLine public int CaretPosLine { get; set; } Property Value int CaretPosWithoutLineBreaks public int CaretPosWithoutLineBreaks { get; set; } Property Value int Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool TextLengthWithoutLineBreaks public int TextLengthWithoutLineBreaks { get; } Property Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() GetLines() public List<string> GetLines() Returns List<string> GetText() Gets the text on the element. public override string GetText() Returns string The text of the element. Lineize(string) public List<string> Lineize(string text) Parameters text string Returns List<string> LoadValue(List<string>) Sets given texts, leaves cursor position unchanged public virtual void LoadValue(List<string> newLines) Parameters newLines List<string> MoveCursor(int, bool, bool) Moves the cursor forward and backward by an amount. public void MoveCursor(int dir, bool wholeWord = false, bool wholeWordWithWhitespace = false) Parameters dir int The direction to move the cursor. wholeWord bool Whether or not we skip entire words moving it. wholeWordWithWhitespace bool Force the cursor to skip whitespace after a word. OnFocusGained() The event fired when the element gains focus. public override void OnFocusGained() OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnKeyPress(ICoreClientAPI, KeyEvent) The event fired the moment a key is pressed. public override void OnKeyPress(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The Client API. args KeyEvent The keyboard state when the key was pressed. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. RenderTextSelection() protected void RenderTextSelection() SetCaretPos(double, double) Sets the position of the cursor at a given point. public void SetCaretPos(double x, double y) Parameters x double X position of the cursor. y double Y position of the cursor. SetCaretPos(int, int) Sets the position of the cursor to a specific character. public void SetCaretPos(int posInLine, int posLine = 0) Parameters posInLine int The position in the line. posLine int The line of the text. SetMaxHeight(int) public void SetMaxHeight(int maxheight) Parameters maxheight int SetMaxLines(int) Sets the number of lines in the Text Area. public void SetMaxLines(int maxlines) Parameters maxlines int The maximum number of lines. SetValue(double) Sets a numerical value to the text, appending it to the end of the text. public void SetValue(double value) Parameters value double The value to add to the text. SetValue(float) Sets a numerical value to the text, appending it to the end of the text. public void SetValue(float value) Parameters value float The value to add to the text. SetValue(string, bool) Sets given text, sets the cursor to the end of the text public void SetValue(string text, bool setCaretPosToEnd = true) Parameters text string setCaretPosToEnd bool"
  },
  "api/Vintagestory.API.Client.GuiElementElementListPickerBase-1.html": {
    "href": "api/Vintagestory.API.Client.GuiElementElementListPickerBase-1.html",
    "title": "Class GuiElementElementListPickerBase<T> | VintageStory API",
    "keywords": "Class GuiElementElementListPickerBase<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Creates a toggle button for the GUI. public abstract class GuiElementElementListPickerBase<T> : GuiElementControl, IDisposable Type Parameters T Inheritance object GuiElement GuiElementControl GuiElementElementListPickerBase<T> Implements IDisposable Derived GuiElementColorListPicker GuiElementIconListPicker Inherited Members GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementElementListPickerBase(ICoreClientAPI, T, ElementBounds) Constructor for the button public GuiElementElementListPickerBase(ICoreClientAPI capi, T elem, ElementBounds bounds) Parameters capi ICoreClientAPI The core client API. elem T bounds ElementBounds The bounding box of the button. Fields On Is this button on? public bool On Field Value bool ShowToolTip public bool ShowToolTip Field Value bool handler public Action<bool> handler Field Value Action<bool> Properties Focusable Is this element capable of being in the focus? public override bool Focusable { get; } Property Value bool TooltipText public string TooltipText { set; } Property Value string Methods ComposeElements(Context, ImageSurface) Composes the element in both the pressed, and released states. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context The context of the element. surface ImageSurface The surface of the element. Remarks Neither the context, nor the surface is used in this function. Dispose() Disposes of the button. public override void Dispose() DrawElement(T, Context, ImageSurface) public abstract void DrawElement(T elem, Context ctx, ImageSurface surface) Parameters elem T ctx Context surface ImageSurface OnMouseDownOnElement(ICoreClientAPI, MouseEvent) Handles the mouse button press while the mouse is on this button. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The client API args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) Handles the event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The client API args MouseEvent Mouse event arguments OnMouseUpOnElement(ICoreClientAPI, MouseEvent) Handles the mouse button release while the mouse is on this button. public override void OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The client API args MouseEvent The mouse event arguments RenderInteractiveElements(float) Renders the button. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The time elapsed. SetValue(bool) Sets the value of the button. public void SetValue(bool on) Parameters on bool Am I on or off?"
  },
  "api/Vintagestory.API.Client.GuiElementEmbossedText.html": {
    "href": "api/Vintagestory.API.Client.GuiElementEmbossedText.html",
    "title": "Class GuiElementEmbossedText | VintageStory API",
    "keywords": "Class GuiElementEmbossedText Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementEmbossedText : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementEmbossedText Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementEmbossedText(ICoreClientAPI, string, CairoFont, ElementBounds) Creates a new embossed text element. public GuiElementEmbossedText(ICoreClientAPI capi, string text, CairoFont font, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API text string The text of the component. font CairoFont The font of the text. bounds ElementBounds The bounds of the component. Fields Padding public static int Padding Field Value int Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context surfaceStatic ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() IsEnabled() Whether or not the component is enabled. public bool IsEnabled() Returns bool RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetEnabled(bool) Sets whether or not the component is enabled. public void SetEnabled(bool enabled) Parameters enabled bool"
  },
  "api/Vintagestory.API.Client.GuiElementGameOverlay.html": {
    "href": "api/Vintagestory.API.Client.GuiElementGameOverlay.html",
    "title": "Class GuiElementGameOverlay | VintageStory API",
    "keywords": "Class GuiElementGameOverlay Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementGameOverlay : GuiElement, IDisposable Inheritance object GuiElement GuiElementGameOverlay Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementGameOverlay(ICoreClientAPI, ElementBounds, double[]) Creates a new overlay element. public GuiElementGameOverlay(ICoreClientAPI capi, ElementBounds bounds, double[] bgcolor) Parameters capi ICoreClientAPI The client API. bounds ElementBounds The bounds of the element. bgcolor double[] The background color of the element. Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI."
  },
  "api/Vintagestory.API.Client.GuiElementGameOverlyHelper.html": {
    "href": "api/Vintagestory.API.Client.GuiElementGameOverlyHelper.html",
    "title": "Class GuiElementGameOverlyHelper | VintageStory API",
    "keywords": "Class GuiElementGameOverlyHelper Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementGameOverlyHelper Inheritance object GuiElementGameOverlyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddGameOverlay(GuiComposer, ElementBounds, double[]) Adds an overlay to the current GUI. public static GuiComposer AddGameOverlay(this GuiComposer composer, ElementBounds bounds, double[] backgroundColor = null) Parameters composer GuiComposer bounds ElementBounds The bounds of the overlay. backgroundColor double[] The background color of the overlay. Returns GuiComposer"
  },
  "api/Vintagestory.API.Client.GuiElementGrayBackground.html": {
    "href": "api/Vintagestory.API.Client.GuiElementGrayBackground.html",
    "title": "Class GuiElementGrayBackground | VintageStory API",
    "keywords": "Class GuiElementGrayBackground Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementGrayBackground : GuiElement, IDisposable Inheritance object GuiElement GuiElementGrayBackground Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementGrayBackground(ICoreClientAPI, ElementBounds) Creates a new gray background. public GuiElementGrayBackground(ICoreClientAPI capi, ElementBounds bounds) Parameters capi ICoreClientAPI The client API bounds ElementBounds The bouds of the GUI Element. Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI."
  },
  "api/Vintagestory.API.Client.GuiElementGrayBackgroundHelpber.html": {
    "href": "api/Vintagestory.API.Client.GuiElementGrayBackgroundHelpber.html",
    "title": "Class GuiElementGrayBackgroundHelpber | VintageStory API",
    "keywords": "Class GuiElementGrayBackgroundHelpber Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementGrayBackgroundHelpber Inheritance object GuiElementGrayBackgroundHelpber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddGrayBG(GuiComposer, ElementBounds) Adds a gray background to the current GUI. public static GuiComposer AddGrayBG(this GuiComposer composer, ElementBounds bounds) Parameters composer GuiComposer bounds ElementBounds The bounds of the backgrounds. Returns GuiComposer"
  },
  "api/Vintagestory.API.Client.GuiElementHelpers.html": {
    "href": "api/Vintagestory.API.Client.GuiElementHelpers.html",
    "title": "Class GuiElementHelpers | VintageStory API",
    "keywords": "Class GuiElementHelpers Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementHelpers Inheritance object GuiElementHelpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddImage(GuiComposer, ElementBounds, AssetLocation) public static GuiComposer AddImage(this GuiComposer composer, ElementBounds bounds, AssetLocation imageAsset) Parameters composer GuiComposer bounds ElementBounds imageAsset AssetLocation Returns GuiComposer"
  },
  "api/Vintagestory.API.Client.GuiElementHorizontalTabs.html": {
    "href": "api/Vintagestory.API.Client.GuiElementHorizontalTabs.html",
    "title": "Class GuiElementHorizontalTabs | VintageStory API",
    "keywords": "Class GuiElementHorizontalTabs Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementHorizontalTabs : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementHorizontalTabs Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementHorizontalTabs(ICoreClientAPI, GuiTab[], CairoFont, CairoFont, ElementBounds, Action<int>) Creates a collection of horizontal tabs. public GuiElementHorizontalTabs(ICoreClientAPI capi, GuiTab[] tabs, CairoFont font, CairoFont selectedFont, ElementBounds bounds, Action<int> onTabClicked) Parameters capi ICoreClientAPI The client API tabs GuiTab[] A collection of GUI tabs. font CairoFont The font for the name of each tab. selectedFont CairoFont bounds ElementBounds The bounds of each tab. onTabClicked Action<int> The event fired whenever the tab is clicked. Fields AlarmTabs public bool AlarmTabs Field Value bool activeElement public int activeElement Field Value int unscaledTabPadding public double unscaledTabPadding Field Value double unscaledTabSpacing public double unscaledTabSpacing Field Value double Properties Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool TabHasAlarm public bool[] TabHasAlarm { get; set; } Property Value bool[] Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context surfaceStatic ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetAlarmTab(int) [Obsolete(\"Use TabHasAlarm[] property instead. Used by the chat window to mark a tab/chat as unread\")] public void SetAlarmTab(int tabIndex) Parameters tabIndex int SetValue(int, bool) Sets the current tab to the given index. public void SetValue(int selectedIndex, bool callhandler = true) Parameters selectedIndex int The current index of the tab. callhandler bool WithAlarmTabs(CairoFont) public void WithAlarmTabs(CairoFont notifyFont) Parameters notifyFont CairoFont"
  },
  "api/Vintagestory.API.Client.GuiElementHoverText.html": {
    "href": "api/Vintagestory.API.Client.GuiElementHoverText.html",
    "title": "Class GuiElementHoverText | VintageStory API",
    "keywords": "Class GuiElementHoverText Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementHoverText : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementHoverText Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementHoverText(ICoreClientAPI, string, CairoFont, int, ElementBounds, TextBackground) Creates a new instance of hover text. public GuiElementHoverText(ICoreClientAPI capi, string text, CairoFont font, int maxWidth, ElementBounds bounds, TextBackground background = null) Parameters capi ICoreClientAPI The client API. text string The text of the text. font CairoFont The font of the text. maxWidth int The width of the text. bounds ElementBounds the bounds of the text. background TextBackground Remarks For the text and the text. Fields Background public TextBackground Background Field Value TextBackground DefaultBackground public static TextBackground DefaultBackground Field Value TextBackground fillBounds public bool fillBounds Field Value bool Properties DrawOrder 0 = draw first, 1 = draw last. Only for interactive elements. public override double DrawOrder { get; } Property Value double IsNowShown public bool IsNowShown { get; } Property Value bool IsVisible public bool IsVisible { get; } Property Value bool RenderColor public Vec4f RenderColor { get; set; } Property Value Vec4f ZPosition public float ZPosition { get; set; } Property Value float Methods BeforeCalcBounds() public override void BeforeCalcBounds() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OutlineColor() The compressed version of the debug outline color as a single int value. public override int OutlineColor() Returns int RenderBoundsDebug() public override void RenderBoundsDebug() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetAutoDisplay(bool) Sets whether the text automatically displays or not. public void SetAutoDisplay(bool on) Parameters on bool Whether the text is displayed. SetAutoWidth(bool) Sets whether or not the width of the component should automatiocally adjust. public void SetAutoWidth(bool on) Parameters on bool SetFollowMouse(bool) public void SetFollowMouse(bool on) Parameters on bool SetNewText(string) Sets the text of the component and changes it. public void SetNewText(string text) Parameters text string The text to change. SetVisible(bool) Sets the visibility to the public void SetVisible(bool on) Parameters on bool"
  },
  "api/Vintagestory.API.Client.GuiElementIconListPicker.html": {
    "href": "api/Vintagestory.API.Client.GuiElementIconListPicker.html",
    "title": "Class GuiElementIconListPicker | VintageStory API",
    "keywords": "Class GuiElementIconListPicker Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Creates a toggle button for the GUI. Open in GitHub public class GuiElementIconListPicker : GuiElementElementListPickerBase<string>, IDisposable Inheritance object GuiElement GuiElementControl GuiElementElementListPickerBase<string> GuiElementIconListPicker Implements IDisposable Inherited Members GuiElementElementListPickerBase<string>.handler GuiElementElementListPickerBase<string>.On GuiElementElementListPickerBase<string>.ShowToolTip GuiElementElementListPickerBase<string>.TooltipText GuiElementElementListPickerBase<string>.Focusable GuiElementElementListPickerBase<string>.ComposeElements(Context, ImageSurface) GuiElementElementListPickerBase<string>.RenderInteractiveElements(float) GuiElementElementListPickerBase<string>.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementElementListPickerBase<string>.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElementElementListPickerBase<string>.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementElementListPickerBase<string>.SetValue(bool) GuiElementElementListPickerBase<string>.Dispose() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementIconListPicker(ICoreClientAPI, string, ElementBounds) public GuiElementIconListPicker(ICoreClientAPI capi, string elem, ElementBounds bounds) Parameters capi ICoreClientAPI elem string bounds ElementBounds Methods DrawElement(string, Context, ImageSurface) public override void DrawElement(string icon, Context ctx, ImageSurface surface) Parameters icon string ctx Context surface ImageSurface"
  },
  "api/Vintagestory.API.Client.GuiElementImage.html": {
    "href": "api/Vintagestory.API.Client.GuiElementImage.html",
    "title": "Class GuiElementImage | VintageStory API",
    "keywords": "Class GuiElementImage Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementImage : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementImage Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementImage(ICoreClientAPI, ElementBounds, AssetLocation) public GuiElementImage(ICoreClientAPI capi, ElementBounds bounds, AssetLocation imageAsset) Parameters capi ICoreClientAPI bounds ElementBounds imageAsset AssetLocation Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context context, ImageSurface surface) Parameters context Context surface ImageSurface The surface of the GUI."
  },
  "api/Vintagestory.API.Client.GuiElementImageBackgroundHelper.html": {
    "href": "api/Vintagestory.API.Client.GuiElementImageBackgroundHelper.html",
    "title": "Class GuiElementImageBackgroundHelper | VintageStory API",
    "keywords": "Class GuiElementImageBackgroundHelper Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementImageBackgroundHelper Inheritance object GuiElementImageBackgroundHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddImageBG(GuiComposer, ElementBounds, AssetLocation, float, float, float) Adds a background to the current GUI public static GuiComposer AddImageBG(this GuiComposer composer, ElementBounds bounds, AssetLocation textureLoc, float brightness = 1, float alpha = 1, float scale = 1) Parameters composer GuiComposer bounds ElementBounds The bounds of the background textureLoc AssetLocation The name of the background texture. brightness float The brightness of the texture (default: 1f) alpha float scale float Returns GuiComposer"
  },
  "api/Vintagestory.API.Client.GuiElementInsetHelper.html": {
    "href": "api/Vintagestory.API.Client.GuiElementInsetHelper.html",
    "title": "Class GuiElementInsetHelper | VintageStory API",
    "keywords": "Class GuiElementInsetHelper Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class GuiElementInsetHelper Inheritance object GuiElementInsetHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInset(GuiComposer, ElementBounds, int, float) Adds an inset to the current GUI. public static GuiComposer AddInset(this GuiComposer composer, ElementBounds bounds, int depth = 4, float brightness = 0.85) Parameters composer GuiComposer bounds ElementBounds The bounds of the inset. depth int The depth of the inset. brightness float The brightness of the inset. Returns GuiComposer"
  },
  "api/Vintagestory.API.Client.GuiElementItemSlotGrid.html": {
    "href": "api/Vintagestory.API.Client.GuiElementItemSlotGrid.html",
    "title": "Class GuiElementItemSlotGrid | VintageStory API",
    "keywords": "Class GuiElementItemSlotGrid Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Displays the slots of an inventory in the form of a slot grid Open in GitHub public class GuiElementItemSlotGrid : GuiElementItemSlotGridBase, IDisposable Inheritance object GuiElement GuiElementItemSlotGridBase GuiElementItemSlotGrid Implements IDisposable Inherited Members GuiElementItemSlotGridBase.unscaledSlotPadding GuiElementItemSlotGridBase.inventory GuiElementItemSlotGridBase.cols GuiElementItemSlotGridBase.rows GuiElementItemSlotGridBase.prevSlotQuantity GuiElementItemSlotGridBase.SlotBounds GuiElementItemSlotGridBase.scissorBounds GuiElementItemSlotGridBase.HighlightSlotTexture GuiElementItemSlotGridBase.slotTexture GuiElementItemSlotGridBase.highlightSlotTexture GuiElementItemSlotGridBase.crossedOutTexture GuiElementItemSlotGridBase.slotQuantityTextures GuiElementItemSlotGridBase.textComposer GuiElementItemSlotGridBase.highlightSlotId GuiElementItemSlotGridBase.hoverSlotId GuiElementItemSlotGridBase.searchText GuiElementItemSlotGridBase.SendPacketHandler GuiElementItemSlotGridBase.CanClickSlot GuiElementItemSlotGridBase.DrawIconHandler GuiElementItemSlotGridBase.AlwaysRenderIcon GuiElementItemSlotGridBase.Focusable GuiElementItemSlotGridBase.ComposeElements(Context, ImageSurface) GuiElementItemSlotGridBase.PostRenderInteractiveElements(float) GuiElementItemSlotGridBase.RenderInteractiveElements(float) GuiElementItemSlotGridBase.OnGuiClosed(ICoreClientAPI) GuiElementItemSlotGridBase.OutlineColor() GuiElementItemSlotGridBase.FilterItemsBySearchText(string, Dictionary<int, string>, Dictionary<int, string>) GuiElementItemSlotGridBase.KeyboardControlEnabled GuiElementItemSlotGridBase.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElementItemSlotGridBase.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElementItemSlotGridBase.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElementItemSlotGridBase.SlotClick(ICoreClientAPI, int, EnumMouseButton, bool, bool, bool) GuiElementItemSlotGridBase.HighlightSlot(int) GuiElementItemSlotGridBase.RemoveSlotHighlight() GuiElementItemSlotGridBase.Dispose() GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementItemSlotGrid(ICoreClientAPI, IInventory, Action<object>, int, int[], ElementBounds) public GuiElementItemSlotGrid(ICoreClientAPI capi, IInventory inventory, Action<object> SendPacketHandler, int cols, int[] visibleSlots, ElementBounds bounds) Parameters capi ICoreClientAPI inventory IInventory SendPacketHandler Action<object> cols int visibleSlots int[] bounds ElementBounds Methods DetermineAvailableSlots(int[]) Determines the available slots for the slot grid. public void DetermineAvailableSlots(int[] visibleSlots = null) Parameters visibleSlots int[]"
  },
  "api/Vintagestory.API.Client.GuiElementItemSlotGridBase.html": {
    "href": "api/Vintagestory.API.Client.GuiElementItemSlotGridBase.html",
    "title": "Class GuiElementItemSlotGridBase | VintageStory API",
    "keywords": "Class GuiElementItemSlotGridBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A base class for the slot grid. For all your slot grid needs. Open in GitHub public abstract class GuiElementItemSlotGridBase : GuiElement, IDisposable Inheritance object GuiElement GuiElementItemSlotGridBase Implements IDisposable Derived GuiElementItemSlotGrid GuiElementItemSlotGridExcl Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementItemSlotGridBase(ICoreClientAPI, IInventory, Action<object>, int, ElementBounds) Creates a new instance of this class. public GuiElementItemSlotGridBase(ICoreClientAPI capi, IInventory inventory, Action<object> sendPacket, int columns, ElementBounds bounds) Parameters capi ICoreClientAPI The client API inventory IInventory The attached inventory sendPacket Action<object> A handler that should send supplied network packet to the server, if the inventory modifications should be synced columns int The number of columns in the GUI. bounds ElementBounds The bounds of the slot grid. Fields CanClickSlot public CanClickSlotDelegate CanClickSlot Field Value CanClickSlotDelegate DrawIconHandler public DrawIconDelegate DrawIconHandler Field Value DrawIconDelegate KeyboardControlEnabled public bool KeyboardControlEnabled Field Value bool SendPacketHandler protected Action<object> SendPacketHandler Field Value Action<object> SlotBounds public ElementBounds[] SlotBounds Field Value ElementBounds[] cols protected int cols Field Value int crossedOutTexture protected LoadedTexture crossedOutTexture Field Value LoadedTexture highlightSlotId protected int highlightSlotId Field Value int highlightSlotTexture protected LoadedTexture highlightSlotTexture Field Value LoadedTexture hoverSlotId protected int hoverSlotId Field Value int inventory protected IInventory inventory Field Value IInventory prevSlotQuantity protected int prevSlotQuantity Field Value int rows protected int rows Field Value int scissorBounds protected ElementBounds[] scissorBounds Field Value ElementBounds[] searchText protected string searchText Field Value string slotQuantityTextures protected LoadedTexture[] slotQuantityTextures Field Value LoadedTexture[] slotTexture protected LoadedTexture slotTexture Field Value LoadedTexture textComposer protected GuiElementStaticText textComposer Field Value GuiElementStaticText unscaledSlotPadding public static double unscaledSlotPadding Field Value double Properties AlwaysRenderIcon public bool AlwaysRenderIcon { get; set; } Property Value bool Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool HighlightSlotTexture public LoadedTexture HighlightSlotTexture { get; } Property Value LoadedTexture Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context unusedCtx, ImageSurface unusedSurface) Parameters unusedCtx Context unusedSurface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() FilterItemsBySearchText(string, Dictionary<int, string>, Dictionary<int, string>) Renders only a subset of all available slots filtered by searching given text on the item name/description public void FilterItemsBySearchText(string text, Dictionary<int, string> searchCache = null, Dictionary<int, string> searchCacheNames = null) Parameters text string searchCache Dictionary<int, string> Can be set to increase search performance, otherwise a slow search is performed searchCacheNames Dictionary<int, string> HighlightSlot(int) Highlights a specific slot. public void HighlightSlot(int slotId) Parameters slotId int The slot to highlight. OnGuiClosed(ICoreClientAPI) public void OnGuiClosed(ICoreClientAPI api) Parameters api ICoreClientAPI OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDown(ICoreClientAPI, MouseEvent) The event fired when the mouse is down the element is around. Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function. public override void OnMouseDown(ICoreClientAPI api, MouseEvent mouse) Parameters api ICoreClientAPI The Client API mouse MouseEvent The mouse event args. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) public override bool OnMouseLeaveSlot(ICoreClientAPI api, ItemSlot slot) Parameters api ICoreClientAPI slot ItemSlot Returns bool OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. OutlineColor() The compressed version of the debug outline color as a single int value. public override int OutlineColor() Returns int PostRenderInteractiveElements(float) The post render of the interactive element. public override void PostRenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. RemoveSlotHighlight() Removes the active slot highlight. public void RemoveSlotHighlight() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SlotClick(ICoreClientAPI, int, EnumMouseButton, bool, bool, bool) public virtual void SlotClick(ICoreClientAPI api, int slotId, EnumMouseButton mouseButton, bool shiftPressed, bool ctrlPressed, bool altPressed) Parameters api ICoreClientAPI slotId int mouseButton EnumMouseButton shiftPressed bool ctrlPressed bool altPressed bool"
  },
  "api/Vintagestory.API.Client.GuiElementItemSlotGridExcl.html": {
    "href": "api/Vintagestory.API.Client.GuiElementItemSlotGridExcl.html",
    "title": "Class GuiElementItemSlotGridExcl | VintageStory API",
    "keywords": "Class GuiElementItemSlotGridExcl Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Builds slot grid with exclusions to the grid. Open in GitHub public class GuiElementItemSlotGridExcl : GuiElementItemSlotGridBase, IDisposable Inheritance object GuiElement GuiElementItemSlotGridBase GuiElementItemSlotGridExcl Implements IDisposable Inherited Members GuiElementItemSlotGridBase.unscaledSlotPadding GuiElementItemSlotGridBase.inventory GuiElementItemSlotGridBase.cols GuiElementItemSlotGridBase.rows GuiElementItemSlotGridBase.prevSlotQuantity GuiElementItemSlotGridBase.SlotBounds GuiElementItemSlotGridBase.scissorBounds GuiElementItemSlotGridBase.HighlightSlotTexture GuiElementItemSlotGridBase.slotTexture GuiElementItemSlotGridBase.highlightSlotTexture GuiElementItemSlotGridBase.crossedOutTexture GuiElementItemSlotGridBase.slotQuantityTextures GuiElementItemSlotGridBase.textComposer GuiElementItemSlotGridBase.highlightSlotId GuiElementItemSlotGridBase.hoverSlotId GuiElementItemSlotGridBase.searchText GuiElementItemSlotGridBase.SendPacketHandler GuiElementItemSlotGridBase.CanClickSlot GuiElementItemSlotGridBase.DrawIconHandler GuiElementItemSlotGridBase.AlwaysRenderIcon GuiElementItemSlotGridBase.Focusable GuiElementItemSlotGridBase.RenderInteractiveElements(float) GuiElementItemSlotGridBase.OnGuiClosed(ICoreClientAPI) GuiElementItemSlotGridBase.OutlineColor() GuiElementItemSlotGridBase.FilterItemsBySearchText(string, Dictionary<int, string>, Dictionary<int, string>) GuiElementItemSlotGridBase.KeyboardControlEnabled GuiElementItemSlotGridBase.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElementItemSlotGridBase.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElementItemSlotGridBase.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementItemSlotGridBase.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElementItemSlotGridBase.SlotClick(ICoreClientAPI, int, EnumMouseButton, bool, bool, bool) GuiElementItemSlotGridBase.HighlightSlot(int) GuiElementItemSlotGridBase.RemoveSlotHighlight() GuiElementItemSlotGridBase.Dispose() GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementItemSlotGridExcl(ICoreClientAPI, IInventory, Action<object>, int, int[], ElementBounds) Creates a new slot grid with exclusions. public GuiElementItemSlotGridExcl(ICoreClientAPI capi, IInventory inventory, Action<object> sendPacketHandler, int columns, int[] excludingSlots, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API inventory IInventory The attached inventory. sendPacketHandler Action<object> A handler that should send supplied network packet to the server, if the inventory modifications should be synced columns int The number of columns in the slot grid. excludingSlots int[] The slots that have been excluded. bounds ElementBounds The bounds of the slot grid. Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. PostRenderInteractiveElements(float) The post render of the interactive element. public override void PostRenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementItemstackInfo.html": {
    "href": "api/Vintagestory.API.Client.GuiElementItemstackInfo.html",
    "title": "Class GuiElementItemstackInfo | VintageStory API",
    "keywords": "Class GuiElementItemstackInfo Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementItemstackInfo : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementItemstackInfo Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementItemstackInfo(ICoreClientAPI, ElementBounds, InfoTextDelegate) Creates an ItemStackInfo element. public GuiElementItemstackInfo(ICoreClientAPI capi, ElementBounds bounds, InfoTextDelegate OnRequireInfoText) Parameters capi ICoreClientAPI The client API bounds ElementBounds The bounds of the object. OnRequireInfoText InfoTextDelegate The function that is called when an item information is called. Fields BoxWidth public static int BoxWidth Field Value int Dirty public bool Dirty Field Value bool ItemStackSize public static double ItemStackSize Field Value double MarginTop public static int MarginTop Field Value int MinBoxHeight public static int MinBoxHeight Field Value int RecompCheckIgnoredStackAttributes public string[] RecompCheckIgnoredStackAttributes Field Value string[] Render public bool Render Field Value bool curSlot public ItemSlot curSlot Field Value ItemSlot descriptionElement public GuiElementRichtext descriptionElement Field Value GuiElementRichtext onRenderStack public Action onRenderStack Field Value Action texture public LoadedTexture texture Field Value LoadedTexture titleElement public GuiElementRichtext titleElement Field Value GuiElementRichtext Methods AsyncRecompose() public void AsyncRecompose() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() GetSlot() Gets the item slot for this stack info. public ItemSlot GetSlot() Returns ItemSlot RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetSourceSlot(ItemSlot, bool) Sets the source slot for stacks. public bool SetSourceSlot(ItemSlot nowSlot, bool forceRecompose = false) Parameters nowSlot ItemSlot forceRecompose bool Returns bool True if recomposed"
  },
  "api/Vintagestory.API.Client.GuiElementListMenu.html": {
    "href": "api/Vintagestory.API.Client.GuiElementListMenu.html",
    "title": "Class GuiElementListMenu | VintageStory API",
    "keywords": "Class GuiElementListMenu Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementListMenu : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementListMenu Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.Scale GuiElement.OnFocusGained() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementListMenu(ICoreClientAPI, string[], string[], int, SelectionChangedDelegate, ElementBounds, CairoFont, bool) Creates a new GUI Element List Menu public GuiElementListMenu(ICoreClientAPI capi, string[] values, string[] names, int selectedIndex, SelectionChangedDelegate onSelectionChanged, ElementBounds bounds, CairoFont font, bool multiSelect) Parameters capi ICoreClientAPI The Client API. values string[] The values of the list. names string[] The names for each of the values. selectedIndex int The default selected index. onSelectionChanged SelectionChangedDelegate The event fired when the selection is changed. bounds ElementBounds The bounds of the GUI element. font CairoFont multiSelect bool Fields MaxHeight Max height of the expanded list public int MaxHeight Field Value int dropDownTexture protected LoadedTexture dropDownTexture Field Value LoadedTexture expanded protected bool expanded Field Value bool expandedBoxHeight protected double expandedBoxHeight Field Value double expandedBoxWidth protected double expandedBoxWidth Field Value double hoverTexture protected LoadedTexture hoverTexture Field Value LoadedTexture multiSelect protected bool multiSelect Field Value bool onSelectionChanged protected SelectionChangedDelegate onSelectionChanged Field Value SelectionChangedDelegate richtTextElem protected GuiElementRichtext[] richtTextElem Field Value GuiElementRichtext[] scrollOffY protected double scrollOffY Field Value double scrollbar protected GuiElementCompactScrollbar scrollbar Field Value GuiElementCompactScrollbar scrollbarTexture protected LoadedTexture scrollbarTexture Field Value LoadedTexture unscaledLineHeight protected double unscaledLineHeight Field Value double visibleBounds protected ElementBounds visibleBounds Field Value ElementBounds Properties DrawOrder 0 = draw first, 1 = draw last. Only for interactive elements. public override double DrawOrder { get; } Property Value double Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool HoveredIndex The element the user currently has the mouse over public int HoveredIndex { get; set; } Property Value int IsOpened Is the current menu opened? public bool IsOpened { get; } Property Value bool Names public string[] Names { get; set; } Property Value string[] SelectedIndex The (first) currently selected element public int SelectedIndex { get; set; } Property Value int SelectedIndices On multi select mode, the list of all selected elements public int[] SelectedIndices { get; set; } Property Value int[] Values public string[] Values { get; set; } Property Value string[] Methods ComposeDynamicElements() Composes the list of elements dynamically. public void ComposeDynamicElements() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() IsPositionInside(int, int) Whether or not the point on screen is inside the Element's area. public override bool IsPositionInside(int posX, int posY) Parameters posX int The X Position of the point. posY int The Y Position of the point. Returns bool OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDown(ICoreClientAPI, MouseEvent) The event fired when the mouse is down the element is around. Fires before OnMouseDownOnElement, however OnMouseDownOnElement is called within the base function. public override void OnMouseDown(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. Open() Opens the menu. public void Open() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetList(string[], string[]) Sets the list for the GUI Element list value. public void SetList(string[] values, string[] names) Parameters values string[] The values of the list. names string[] The names of the values. SetSelectedIndex(int) Sets the selected index. public void SetSelectedIndex(int selectedIndex) Parameters selectedIndex int The index to be set to. SetSelectedValue(params string[]) Sets the selected index to the given value. public void SetSelectedValue(params string[] value) Parameters value string[] The value to be set to."
  },
  "api/Vintagestory.API.Client.GuiElementMainMenuCell.html": {
    "href": "api/Vintagestory.API.Client.GuiElementMainMenuCell.html",
    "title": "Class GuiElementMainMenuCell | VintageStory API",
    "keywords": "Class GuiElementMainMenuCell Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementMainMenuCell : GuiElementTextBase, IGuiElementCell, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementMainMenuCell Implements IGuiElementCell IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementMainMenuCell(ICoreClientAPI, SavegameCellEntry, ElementBounds) Creates a new Element Cell. A container for TableCells. public GuiElementMainMenuCell(ICoreClientAPI capi, SavegameCellEntry cell, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API cell SavegameCellEntry The base cell bounds ElementBounds The bounds of the TableCell Fields FixedHeight public double? FixedHeight Field Value double? MainTextWidthSub public double MainTextWidthSub Field Value double OnMouseDownOnCellLeft public Action<int> OnMouseDownOnCellLeft Field Value Action<int> OnMouseDownOnCellRight public Action<int> OnMouseDownOnCellRight Field Value Action<int> ShowModifyIcons public bool ShowModifyIcons Field Value bool cellEntry The table cell information. public SavegameCellEntry cellEntry Field Value SavegameCellEntry unscaledRightBoxWidth public static double unscaledRightBoxWidth Field Value double Methods Compose() public void Compose() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(MouseEvent, int) public void OnMouseDownOnElement(MouseEvent args, int elementIndex) Parameters args MouseEvent elementIndex int OnMouseMoveOnElement(MouseEvent, int) public void OnMouseMoveOnElement(MouseEvent args, int elementIndex) Parameters args MouseEvent elementIndex int OnMouseUpOnElement(MouseEvent, int) public void OnMouseUpOnElement(MouseEvent args, int elementIndex) Parameters args MouseEvent elementIndex int OnRenderInteractiveElements(ICoreClientAPI, float) Renders the main menu cell public void OnRenderInteractiveElements(ICoreClientAPI api, float deltaTime) Parameters api ICoreClientAPI deltaTime float UpdateCellHeight() Updates the height of the cell based off the contents. public void UpdateCellHeight()"
  },
  "api/Vintagestory.API.Client.GuiElementNumberInput.html": {
    "href": "api/Vintagestory.API.Client.GuiElementNumberInput.html",
    "title": "Class GuiElementNumberInput | VintageStory API",
    "keywords": "Class GuiElementNumberInput Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A numerical input field for inputting numbers. Open in GitHub public class GuiElementNumberInput : GuiElementTextInput, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementEditableTextBase GuiElementTextInput GuiElementNumberInput Implements IDisposable Inherited Members GuiElementTextInput.highlightTexture GuiElementTextInput.highlightBounds GuiElementTextInput.refocusStage GuiElementTextInput.Enabled GuiElementTextInput.HideCharacters() GuiElementTextInput.SetPlaceHolderText(string) GuiElementTextInput.OnFocusGained() GuiElementTextInput.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.OnCaretPositionChanged GuiElementEditableTextBase.OnTextChanged GuiElementEditableTextBase.OnTryTextChangeText GuiElementEditableTextBase.OnCursorMoved GuiElementEditableTextBase.OnKeyPressed GuiElementEditableTextBase.lines GuiElementEditableTextBase.linesStaging GuiElementEditableTextBase.WordWrap GuiElementEditableTextBase.GetLines() GuiElementEditableTextBase.TextLengthWithoutLineBreaks GuiElementEditableTextBase.CaretPosWithoutLineBreaks GuiElementEditableTextBase.pcaretPosLine GuiElementEditableTextBase.pcaretPosInLine GuiElementEditableTextBase.CaretPosLine GuiElementEditableTextBase.CaretPosInLine GuiElementEditableTextBase.SetCaretPos(double, double) GuiElementEditableTextBase.SetCaretPos(int, int) GuiElementEditableTextBase.SetValue(float) GuiElementEditableTextBase.SetValue(double) GuiElementEditableTextBase.SetValue(string, bool) GuiElementEditableTextBase.Lineize(string) GuiElementEditableTextBase.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.GetText() GuiElementEditableTextBase.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.RenderTextSelection() GuiElementEditableTextBase.MoveCursor(int, bool, bool) GuiElementEditableTextBase.SetMaxLines(int) GuiElementEditableTextBase.SetMaxHeight(int) GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementControl.enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementNumberInput(ICoreClientAPI, ElementBounds, Action<string>, CairoFont) Creates a numerical input field. public GuiElementNumberInput(ICoreClientAPI capi, ElementBounds bounds, Action<string> OnTextChanged, CairoFont font) Parameters capi ICoreClientAPI The Client API bounds ElementBounds The bounds of the GUI. OnTextChanged Action<string> The event fired when the number is changed. font CairoFont The font of the numbers. Fields DisableButtonFocus When enabled and a button is clicked it wont focus on it, leaving your focus on the game to move around public bool DisableButtonFocus Field Value bool Interval public float Interval Field Value float buttonHighlightTexture public LoadedTexture buttonHighlightTexture Field Value LoadedTexture Properties Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool IntMode public bool IntMode { get; set; } Property Value bool Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() GetValue() Gets the current value of the number. public float GetValue() Returns float A float representing the value. LoadValue(List<string>) Sets given texts, leaves cursor position unchanged public override void LoadValue(List<string> newLines) Parameters newLines List<string> OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementParent.html": {
    "href": "api/Vintagestory.API.Client.GuiElementParent.html",
    "title": "Class GuiElementParent | VintageStory API",
    "keywords": "Class GuiElementParent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementParent : GuiElement, IDisposable Inheritance object GuiElement GuiElementParent Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementParent(ICoreClientAPI, ElementBounds) public GuiElementParent(ICoreClientAPI capi, ElementBounds bounds) Parameters capi ICoreClientAPI bounds ElementBounds Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surface) Parameters ctxStatic Context The context of the components. surface ImageSurface The surface of the GUI."
  },
  "api/Vintagestory.API.Client.GuiElementPassiveItemSlot.html": {
    "href": "api/Vintagestory.API.Client.GuiElementPassiveItemSlot.html",
    "title": "Class GuiElementPassiveItemSlot | VintageStory API",
    "keywords": "Class GuiElementPassiveItemSlot Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Displays a single slot from given inventory, cannot be directly interacted with. Currently used for the mouse slot Open in GitHub public class GuiElementPassiveItemSlot : GuiElement, IDisposable Inheritance object GuiElement GuiElementPassiveItemSlot Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementPassiveItemSlot(ICoreClientAPI, ElementBounds, IInventory, ItemSlot, bool) Creates a new passive item slot. public GuiElementPassiveItemSlot(ICoreClientAPI capi, ElementBounds bounds, IInventory inventory, ItemSlot slot, bool drawBackground = true) Parameters capi ICoreClientAPI The client API bounds ElementBounds the bounds of the Slot. inventory IInventory the attached inventory for the slot. slot ItemSlot The slot of the slot. drawBackground bool Do we draw the background for this slot? (Default: true) Fields unscaledItemSize public static double unscaledItemSize Field Value double unscaledSlotSize public static double unscaledSlotSize Field Value double Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementRichtext.html": {
    "href": "api/Vintagestory.API.Client.GuiElementRichtext.html",
    "title": "Class GuiElementRichtext | VintageStory API",
    "keywords": "Class GuiElementRichtext Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementRichtext : GuiElement, IDisposable Inheritance object GuiElement GuiElementRichtext Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementRichtext(ICoreClientAPI, RichTextComponentBase[], ElementBounds) public GuiElementRichtext(ICoreClientAPI capi, RichTextComponentBase[] components, ElementBounds bounds) Parameters capi ICoreClientAPI components RichTextComponentBase[] bounds ElementBounds Fields Components public RichTextComponentBase[] Components Field Value RichTextComponentBase[] Debug public bool Debug Field Value bool DebugLogging public static bool DebugLogging Field Value bool HalfComposed public bool HalfComposed Field Value bool RenderColor public Vec4f RenderColor Field Value Vec4f flowPath protected TextFlowPath[] flowPath Field Value TextFlowPath[] richtTextTexture public LoadedTexture richtTextTexture Field Value LoadedTexture zPos public float zPos Field Value float Properties MaxHeight public int MaxHeight { get; set; } Property Value int MaxLineWidth public double MaxLineWidth { get; } Property Value double TotalHeight public double TotalHeight { get; } Property Value double Methods AppendText(RichTextComponentBase[]) public void AppendText(RichTextComponentBase[] comps) Parameters comps RichTextComponentBase[] AppendText(RichTextComponent[]) [Obsolete(\"Use AppendText(RichTextComponentBase[] comps) instead\")] public void AppendText(RichTextComponent[] comps) Parameters comps RichTextComponent[] BeforeCalcBounds() public override void BeforeCalcBounds() CalcHeightAndPositions() public void CalcHeightAndPositions() Compose(bool) public void Compose(bool genTextureLater = false) Parameters genTextureLater bool ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context The context of the components. surfaceStatic ImageSurface ComposeFor(ElementBounds, Context, ImageSurface) public virtual void ComposeFor(ElementBounds bounds, Context ctx, ImageSurface surface) Parameters bounds ElementBounds ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. RecomposeInto(ImageSurface, Context) public void RecomposeInto(ImageSurface surface, Context ctx) Parameters surface ImageSurface ctx Context RecomposeText() Recomposes the element for lines. public void RecomposeText() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetNewText(string, CairoFont, Action<LinkTextComponent>) public void SetNewText(string vtmlCode, CairoFont baseFont, Action<LinkTextComponent> didClickLink = null) Parameters vtmlCode string baseFont CairoFont didClickLink Action<LinkTextComponent> SetNewText(RichTextComponentBase[]) public void SetNewText(RichTextComponentBase[] comps) Parameters comps RichTextComponentBase[] SetNewTextWithoutRecompose(string, CairoFont, Action<LinkTextComponent>, bool) public void SetNewTextWithoutRecompose(string vtmlCode, CairoFont baseFont, Action<LinkTextComponent> didClickLink = null, bool recalcBounds = false) Parameters vtmlCode string baseFont CairoFont didClickLink Action<LinkTextComponent> recalcBounds bool genTexture() public void genTexture()"
  },
  "api/Vintagestory.API.Client.GuiElementScrollbar.html": {
    "href": "api/Vintagestory.API.Client.GuiElementScrollbar.html",
    "title": "Class GuiElementScrollbar | VintageStory API",
    "keywords": "Class GuiElementScrollbar Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementScrollbar : GuiElementControl, IDisposable Inheritance object GuiElement GuiElementControl GuiElementScrollbar Implements IDisposable Derived GuiElementCompactScrollbar Inherited Members GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementScrollbar(ICoreClientAPI, Action<float>, ElementBounds) Creates a new Scrollbar. public GuiElementScrollbar(ICoreClientAPI capi, Action<float> onNewScrollbarValue, ElementBounds bounds) Parameters capi ICoreClientAPI The client API. onNewScrollbarValue Action<float> The event that fires when the scrollbar is changed. bounds ElementBounds The bounds of the scrollbar. Fields DeafultScrollbarPadding public static int DeafultScrollbarPadding Field Value int DefaultScrollbarWidth public static int DefaultScrollbarWidth Field Value int currentHandleHeight protected float currentHandleHeight Field Value float currentHandlePosition protected float currentHandlePosition Field Value float handleTexture protected LoadedTexture handleTexture Field Value LoadedTexture mouseDownOnScrollbarHandle public bool mouseDownOnScrollbarHandle Field Value bool mouseDownStartY public int mouseDownStartY Field Value int onNewScrollbarValue protected Action<float> onNewScrollbarValue Field Value Action<float> totalHeight protected float totalHeight Field Value float visibleHeight protected float visibleHeight Field Value float zOffset public float zOffset Field Value float Properties CurrentYPosition The current Y position of the inner element public float CurrentYPosition { get; set; } Property Value float Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool ScrollConversionFactor Moving 1 pixel of the scrollbar moves the content by ScrollConversionFactor of pixels public float ScrollConversionFactor { get; } Property Value float Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surface) Parameters ctxStatic Context The context of the components. surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() EnsureVisible(double, double) public void EnsureVisible(double posX, double posY) Parameters posX double posY double OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. RecomposeHandle() public virtual void RecomposeHandle() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. ScrollToBottom() Puts the scrollblock to the very bottom of the scrollbar. public void ScrollToBottom() SetHeights(float, float) Sets the height of the scrollbar. public void SetHeights(float visibleHeight, float totalHeight) Parameters visibleHeight float The visible height of the scrollbar totalHeight float The total height of the scrollbar. SetNewTotalHeight(float) Sets the total height, recalculating things for the new height. public void SetNewTotalHeight(float totalHeight) Parameters totalHeight float The total height of the scrollbar. SetScrollbarPosition(int) public void SetScrollbarPosition(int pos) Parameters pos int TriggerChanged() Triggers the change to the new value of the scrollbar. public void TriggerChanged()"
  },
  "api/Vintagestory.API.Client.GuiElementSkillItemGrid.html": {
    "href": "api/Vintagestory.API.Client.GuiElementSkillItemGrid.html",
    "title": "Class GuiElementSkillItemGrid | VintageStory API",
    "keywords": "Class GuiElementSkillItemGrid Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A slot for item skills. Open in GitHub public class GuiElementSkillItemGrid : GuiElement, IDisposable Inheritance object GuiElement GuiElementSkillItemGrid Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementSkillItemGrid(ICoreClientAPI, List<SkillItem>, int, int, Action<int>, ElementBounds) Creates a Skill Item Grid. public GuiElementSkillItemGrid(ICoreClientAPI capi, List<SkillItem> skillItems, int columns, int rows, Action<int> OnSlotClick, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API skillItems List<SkillItem> The items with skills. columns int The columns of the Item Grid rows int The Rows of the Item Grid. OnSlotClick Action<int> The event fired when the slot is clicked. bounds ElementBounds The bounds of the Item Grid. Fields OnSlotClick public Action<int> OnSlotClick Field Value Action<int> OnSlotOver public Action<int> OnSlotOver Field Value Action<int> selectedIndex public int selectedIndex Field Value int Properties Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementSlider.html": {
    "href": "api/Vintagestory.API.Client.GuiElementSlider.html",
    "title": "Class GuiElementSlider | VintageStory API",
    "keywords": "Class GuiElementSlider Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementSlider : GuiElementControl, IDisposable Inheritance object GuiElement GuiElementControl GuiElementSlider Implements IDisposable Inherited Members GuiElementControl.enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementSlider(ICoreClientAPI, ActionConsumable<int>, ElementBounds) Builds a slider. A horizontal customizeable slider. public GuiElementSlider(ICoreClientAPI capi, ActionConsumable<int> onNewSliderValue, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API onNewSliderValue ActionConsumable<int> The event that's fired when the slider changed. bounds ElementBounds the bounds of the object. Fields OnSliderRestingText public SliderTooltipDelegate OnSliderRestingText Field Value SliderTooltipDelegate OnSliderTooltip public SliderTooltipDelegate OnSliderTooltip Field Value SliderTooltipDelegate Properties Enabled Enables/disables the given element (default is enabled) public override bool Enabled { get; set; } Property Value bool Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool ShowTextWhenResting public bool ShowTextWhenResting { get; set; } Property Value bool TooltipExceedClipBounds public bool TooltipExceedClipBounds { get; set; } Property Value bool Methods AddSkipValue(int) public void AddSkipValue(int skipValue) Parameters skipValue int ClearSkipValues() public void ClearSkipValues() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context The context of the components. surfaceStatic ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() GetValue() Gets the current value of the slider. public int GetValue() Returns int OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) The event fired when the mouse wheel is scrolled. public override void OnMouseWheel(ICoreClientAPI api, MouseWheelEventArgs args) Parameters api ICoreClientAPI The Client API args MouseWheelEventArgs The mouse wheel arguments. RemoveSkipValue(int) public void RemoveSkipValue(int skipValue) Parameters skipValue int RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetAlarmValue(int) Sets a value to warn the player that going over this is not a good idea. public void SetAlarmValue(int value) Parameters value int The maximum limit before things break down. SetSkipValues(HashSet<int>) public void SetSkipValues(HashSet<int> skipValues) Parameters skipValues HashSet<int> SetValue(int) public void SetValue(int currentValue) Parameters currentValue int SetValues(int, int, int, int, string) Sets the values of the slider. public void SetValues(int currentValue, int minValue, int maxValue, int step, string unit = \"\") Parameters currentValue int The value the slider is now. minValue int The lowest value. maxValue int The highest value. step int Each step between values. unit string The units of the value. %, chunks, ect."
  },
  "api/Vintagestory.API.Client.GuiElementSliderOld.html": {
    "href": "api/Vintagestory.API.Client.GuiElementSliderOld.html",
    "title": "Class GuiElementSliderOld | VintageStory API",
    "keywords": "Class GuiElementSliderOld Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementSliderOld : GuiElement, IDisposable Inheritance object GuiElement GuiElementSliderOld Implements IDisposable Inherited Members GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementSliderOld(ICoreClientAPI, ActionConsumable<int>, ElementBounds) public GuiElementSliderOld(ICoreClientAPI capi, ActionConsumable<int> onNewSliderValue, ElementBounds bounds) Parameters capi ICoreClientAPI onNewSliderValue ActionConsumable<int> bounds ElementBounds Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context The context of the components. surfaceStatic ImageSurface GetValue() public int GetValue() Returns int OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetAlarmValue(int) public void SetAlarmValue(int value) Parameters value int setValues(int, int, int, int, string) public void setValues(int currentValue, int minValue, int maxValue, int step, string unit = \"\") Parameters currentValue int minValue int maxValue int step int unit string"
  },
  "api/Vintagestory.API.Client.GuiElementStatbar.html": {
    "href": "api/Vintagestory.API.Client.GuiElementStatbar.html",
    "title": "Class GuiElementStatbar | VintageStory API",
    "keywords": "Class GuiElementStatbar Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A stat bar to the GUI for keeping track of progress and numbers. Open in GitHub public class GuiElementStatbar : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementStatbar Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementStatbar(ICoreClientAPI, ElementBounds, double[], bool, bool) Creates a new stat bar for the GUI. public GuiElementStatbar(ICoreClientAPI capi, ElementBounds bounds, double[] color, bool rightToLeft, bool hideable) Parameters capi ICoreClientAPI The client API bounds ElementBounds The bounds of the stat bar. color double[] The color of the stat bar. rightToLeft bool Determines the direction that the bar fills. hideable bool Fields DefaultHeight public static double DefaultHeight Field Value double FlashTime public float FlashTime Field Value float ShouldFlash public bool ShouldFlash Field Value bool ShowValueOnHover public bool ShowValueOnHover Field Value bool onGetStatbarValue public StatbarValueDelegate onGetStatbarValue Field Value StatbarValueDelegate valueFont public CairoFont valueFont Field Value CairoFont Properties HideWhenFull public bool HideWhenFull { get; set; } Property Value bool PrevValueBeingDisplayed public bool PrevValueBeingDisplayed { get; } Property Value bool PreviousValueDisplayTime public float PreviousValueDisplayTime { get; set; } Property Value float Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() GetValue() public float GetValue() Returns float RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetFutureValues(float?, float) public void SetFutureValues(float? futureValue, float velocity) Parameters futureValue float? velocity float SetLineInterval(float) Sets the line interval for the Status Bar. public void SetLineInterval(float value) Parameters value float The value to set for the line interval/ SetMinMax(float, float) Sets the minimum and maximum values of the status bar. public void SetMinMax(float min, float max) Parameters min float The minimum value of the status bar. max float The maximum value of the status bar. SetPrevValue(float?, long, Func<long>) public void SetPrevValue(float? previousValue, long visibleSinceMs, Func<long> getMs) Parameters previousValue float? visibleSinceMs long getMs Func<long> SetValue(float) Sets the value for the status bar and updates the bar. public void SetValue(float value) Parameters value float The new value of the status bar. SetValues(float, float, float) Sets the value for the status bar as well as the minimum and maximum values. public void SetValues(float value, float min, float max) Parameters value float The new value of the status bar. min float The minimum value of the status bar. max float The maximum value of the status bar."
  },
  "api/Vintagestory.API.Client.GuiElementStaticText.html": {
    "href": "api/Vintagestory.API.Client.GuiElementStaticText.html",
    "title": "Class GuiElementStaticText | VintageStory API",
    "keywords": "Class GuiElementStaticText Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementStaticText : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementStaticText Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementStaticText(ICoreClientAPI, string, EnumTextOrientation, ElementBounds, CairoFont) Creates a new GUIElementStaticText. public GuiElementStaticText(ICoreClientAPI capi, string text, EnumTextOrientation orientation, ElementBounds bounds, CairoFont font) Parameters capi ICoreClientAPI The Client API text string The text of the Element orientation EnumTextOrientation The orientation of the text. bounds ElementBounds The bounds of the element. font CairoFont The font of the text. Fields offsetX public double offsetX Field Value double offsetY public double offsetY Field Value double Methods AutoBoxSize(bool) Resize element bounds so that the text fits in one line public void AutoBoxSize(bool onlyGrow = false) Parameters onlyGrow bool AutoFontSize(bool) Resize the font so that the text fits in one line public void AutoFontSize(bool onlyShrink = true) Parameters onlyShrink bool ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface GetTextHeight() public double GetTextHeight() Returns double SetValue(string) public void SetValue(string text) Parameters text string"
  },
  "api/Vintagestory.API.Client.GuiElementSwitch.html": {
    "href": "api/Vintagestory.API.Client.GuiElementSwitch.html",
    "title": "Class GuiElementSwitch | VintageStory API",
    "keywords": "Class GuiElementSwitch Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementSwitch : GuiElementControl, IDisposable Inheritance object GuiElement GuiElementControl GuiElementSwitch Implements IDisposable Inherited Members GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementSwitch(ICoreClientAPI, Action<bool>, ElementBounds, double, double) Creates a switch which can be toggled. public GuiElementSwitch(ICoreClientAPI capi, Action<bool> OnToggled, ElementBounds bounds, double size = 30, double padding = 4) Parameters capi ICoreClientAPI The Client API OnToggled Action<bool> The event that happens when the switch is flipped. bounds ElementBounds The bounds of the element. size double The size of the switch. (Default: 30) padding double The padding on the outside of the switch (Default: 5) Fields On Wether the switch has been toggled to On public bool On Field Value bool Properties Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surface) Parameters ctxStatic Context The context of the components. surface ImageSurface The surface of the GUI. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetValue(bool) Sets the value of the switch on or off. public void SetValue(bool on) Parameters on bool on == true."
  },
  "api/Vintagestory.API.Client.GuiElementSwitchOld.html": {
    "href": "api/Vintagestory.API.Client.GuiElementSwitchOld.html",
    "title": "Class GuiElementSwitchOld | VintageStory API",
    "keywords": "Class GuiElementSwitchOld Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementSwitchOld : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementSwitchOld Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementSwitchOld(ICoreClientAPI, Action<bool>, ElementBounds) public GuiElementSwitchOld(ICoreClientAPI capi, Action<bool> OnToggled, ElementBounds bounds) Parameters capi ICoreClientAPI OnToggled Action<bool> bounds ElementBounds Fields On public bool On Field Value bool Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surface) Parameters ctxStatic Context The context of the components. surface ImageSurface The surface of the GUI. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time."
  },
  "api/Vintagestory.API.Client.GuiElementTextArea.html": {
    "href": "api/Vintagestory.API.Client.GuiElementTextArea.html",
    "title": "Class GuiElementTextArea | VintageStory API",
    "keywords": "Class GuiElementTextArea Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementTextArea : GuiElementEditableTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementEditableTextBase GuiElementTextArea Implements IDisposable Inherited Members GuiElementEditableTextBase.OnCaretPositionChanged GuiElementEditableTextBase.OnTextChanged GuiElementEditableTextBase.OnTryTextChangeText GuiElementEditableTextBase.OnCursorMoved GuiElementEditableTextBase.OnKeyPressed GuiElementEditableTextBase.lines GuiElementEditableTextBase.linesStaging GuiElementEditableTextBase.WordWrap GuiElementEditableTextBase.GetLines() GuiElementEditableTextBase.TextLengthWithoutLineBreaks GuiElementEditableTextBase.CaretPosWithoutLineBreaks GuiElementEditableTextBase.pcaretPosLine GuiElementEditableTextBase.pcaretPosInLine GuiElementEditableTextBase.CaretPosLine GuiElementEditableTextBase.CaretPosInLine GuiElementEditableTextBase.Focusable GuiElementEditableTextBase.OnFocusGained() GuiElementEditableTextBase.OnFocusLost() GuiElementEditableTextBase.SetCaretPos(double, double) GuiElementEditableTextBase.SetCaretPos(int, int) GuiElementEditableTextBase.SetValue(float) GuiElementEditableTextBase.SetValue(double) GuiElementEditableTextBase.SetValue(string, bool) GuiElementEditableTextBase.LoadValue(List<string>) GuiElementEditableTextBase.Lineize(string) GuiElementEditableTextBase.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.GetText() GuiElementEditableTextBase.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.RenderTextSelection() GuiElementEditableTextBase.MoveCursor(int, bool, bool) GuiElementEditableTextBase.SetMaxLines(int) GuiElementEditableTextBase.SetMaxHeight(int) GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementTextArea(ICoreClientAPI, ElementBounds, Action<string>, CairoFont) Creates a new text area. public GuiElementTextArea(ICoreClientAPI capi, ElementBounds bounds, Action<string> OnTextChanged, CairoFont font) Parameters capi ICoreClientAPI The client API bounds ElementBounds The bounds of the text area. OnTextChanged Action<string> The event fired when the text is changed. font CairoFont The font of the text. Fields Autoheight public bool Autoheight Field Value bool Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetFont(CairoFont) public void SetFont(CairoFont cairoFont) Parameters cairoFont CairoFont"
  },
  "api/Vintagestory.API.Client.GuiElementTextBase.html": {
    "href": "api/Vintagestory.API.Client.GuiElementTextBase.html",
    "title": "Class GuiElementTextBase | VintageStory API",
    "keywords": "Class GuiElementTextBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementTextBase : GuiElementControl, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase Implements IDisposable Derived GuiElementConfigList GuiElementDialogTitleBar GuiElementDropDown GuiElementDynamicText GuiElementEditableTextBase GuiElementEmbossedText GuiElementHorizontalTabs GuiElementHoverText GuiElementImage GuiElementItemstackInfo GuiElementListMenu GuiElementMainMenuCell GuiElementStatbar GuiElementStaticText GuiElementSwitchOld GuiElementToggleButton GuiElementVerticalTabs Inherited Members GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Focusable GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.RenderInteractiveElements(float) GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyDown(ICoreClientAPI, KeyEvent) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) GuiElement.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementTextBase(ICoreClientAPI, string, CairoFont, ElementBounds) Creates a new text based element. public GuiElementTextBase(ICoreClientAPI capi, string text, CairoFont font, ElementBounds bounds) Parameters capi ICoreClientAPI The Client API text string The text of this element. font CairoFont The font of the text. bounds ElementBounds The bounds of the element. Fields Font The font of the Text Element. public CairoFont Font Field Value CairoFont RightPadding protected float RightPadding Field Value float text protected string text Field Value string textPathMode Whether or not the text path mode is active. public bool textPathMode Field Value bool textUtil public TextDrawUtil textUtil Field Value TextDrawUtil Properties Text public string Text { get; set; } Property Value string Methods ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface The surface of the GUI. ComposeTextElements(Context, ImageSurface) public virtual void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface DrawMultilineTextAt(Context, double, double, EnumTextOrientation) public double DrawMultilineTextAt(Context ctx, double posX, double posY, EnumTextOrientation orientation = EnumTextOrientation.Left) Parameters ctx Context posX double posY double orientation EnumTextOrientation Returns double DrawTextLineAt(Context, string, double, double, bool) Draws the line of text on a component. public void DrawTextLineAt(Context ctx, string text, double posX, double posY, bool textPathMode = false) Parameters ctx Context The context of the text text string The text of the text. posX double The X Position of the text. posY double The Y position of the text. textPathMode bool The pathing mode. GetMultilineTextHeight() public double GetMultilineTextHeight() Returns double GetText() Gets the text on the element. public virtual string GetText() Returns string The text of the element."
  },
  "api/Vintagestory.API.Client.GuiElementTextButton.html": {
    "href": "api/Vintagestory.API.Client.GuiElementTextButton.html",
    "title": "Class GuiElementTextButton | VintageStory API",
    "keywords": "Class GuiElementTextButton Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementTextButton : GuiElementControl, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextButton Implements IDisposable Inherited Members GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementTextButton(ICoreClientAPI, string, CairoFont, CairoFont, ActionConsumable, ElementBounds, EnumButtonStyle) Creates a button with text. public GuiElementTextButton(ICoreClientAPI capi, string text, CairoFont font, CairoFont hoverFont, ActionConsumable onClick, ElementBounds bounds, EnumButtonStyle style = EnumButtonStyle.Normal) Parameters capi ICoreClientAPI The Client API text string The text of the button. font CairoFont The font of the text. hoverFont CairoFont The font of the text when the player is hovering over the button. onClick ActionConsumable The event fired when the button is clicked. bounds ElementBounds The bounds of the button. style EnumButtonStyle The style of the button. Fields Padding public static double Padding Field Value double PlaySound public bool PlaySound Field Value bool Visible public bool Visible Field Value bool Properties Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool Text public string Text { get; set; } Property Value string Methods BeforeCalcBounds() public override void BeforeCalcBounds() ComposeElements(Context, ImageSurface) Composes the elements. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context The context of the components. surfaceStatic ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. OnMouseMove(ICoreClientAPI, MouseEvent) The event fired when the mouse is moved. public override void OnMouseMove(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) The event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API. args MouseEvent The arguments for the mouse event. OnMouseUpOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is released on the element. Called after OnMouseUp. public override void OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetActive(bool) Sets the button as active or inactive. public void SetActive(bool active) Parameters active bool Active == clickable SetOrientation(EnumTextOrientation) Sets the orientation of the text both when clicked and when idle. public void SetOrientation(EnumTextOrientation orientation) Parameters orientation EnumTextOrientation The orientation of the text. setIsOver() protected void setIsOver()"
  },
  "api/Vintagestory.API.Client.GuiElementTextInput.html": {
    "href": "api/Vintagestory.API.Client.GuiElementTextInput.html",
    "title": "Class GuiElementTextInput | VintageStory API",
    "keywords": "Class GuiElementTextInput Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementTextInput : GuiElementEditableTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementEditableTextBase GuiElementTextInput Implements IDisposable Derived GuiElementNumberInput Inherited Members GuiElementEditableTextBase.OnCaretPositionChanged GuiElementEditableTextBase.OnTextChanged GuiElementEditableTextBase.OnTryTextChangeText GuiElementEditableTextBase.OnCursorMoved GuiElementEditableTextBase.OnKeyPressed GuiElementEditableTextBase.lines GuiElementEditableTextBase.linesStaging GuiElementEditableTextBase.WordWrap GuiElementEditableTextBase.GetLines() GuiElementEditableTextBase.TextLengthWithoutLineBreaks GuiElementEditableTextBase.CaretPosWithoutLineBreaks GuiElementEditableTextBase.pcaretPosLine GuiElementEditableTextBase.pcaretPosInLine GuiElementEditableTextBase.CaretPosLine GuiElementEditableTextBase.CaretPosInLine GuiElementEditableTextBase.Focusable GuiElementEditableTextBase.SetCaretPos(double, double) GuiElementEditableTextBase.SetCaretPos(int, int) GuiElementEditableTextBase.SetValue(float) GuiElementEditableTextBase.SetValue(double) GuiElementEditableTextBase.SetValue(string, bool) GuiElementEditableTextBase.LoadValue(List<string>) GuiElementEditableTextBase.Lineize(string) GuiElementEditableTextBase.OnMouseDownOnElement(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElementEditableTextBase.GetText() GuiElementEditableTextBase.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElementEditableTextBase.RenderTextSelection() GuiElementEditableTextBase.MoveCursor(int, bool, bool) GuiElementEditableTextBase.SetMaxLines(int) GuiElementEditableTextBase.SetMaxHeight(int) GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementControl.enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementTextInput(ICoreClientAPI, ElementBounds, Action<string>, CairoFont) Adds a text input to the GUI public GuiElementTextInput(ICoreClientAPI capi, ElementBounds bounds, Action<string> onTextChanged, CairoFont font) Parameters capi ICoreClientAPI The Client API bounds ElementBounds The bounds of the text input. onTextChanged Action<string> The event fired when the text is changed. font CairoFont The font of the text. Fields highlightBounds protected ElementBounds highlightBounds Field Value ElementBounds highlightTexture protected LoadedTexture highlightTexture Field Value LoadedTexture refocusStage protected int refocusStage Field Value int Properties Enabled Enables/disables the given element (default is enabled) public override bool Enabled { get; set; } Property Value bool Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() HideCharacters() Tells the text component to hide the characters in the text. public void HideCharacters() OnFocusGained() The event fired when the element gains focus. public override void OnFocusGained() OnFocusLost() The event fired when the element looses focus. public override void OnFocusLost() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetPlaceHolderText(string) public void SetPlaceHolderText(string text) Parameters text string"
  },
  "api/Vintagestory.API.Client.GuiElementToggleButton.html": {
    "href": "api/Vintagestory.API.Client.GuiElementToggleButton.html",
    "title": "Class GuiElementToggleButton | VintageStory API",
    "keywords": "Class GuiElementToggleButton Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Creates a toggle button for the GUI. Open in GitHub public class GuiElementToggleButton : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementToggleButton Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeTextElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementToggleButton(ICoreClientAPI, string, string, CairoFont, Action<bool>, ElementBounds, bool) Constructor for the button public GuiElementToggleButton(ICoreClientAPI capi, string icon, string text, CairoFont font, Action<bool> OnToggled, ElementBounds bounds, bool toggleable = false) Parameters capi ICoreClientAPI The core client API. icon string The icon name text string The text for the button. font CairoFont The font of the text. OnToggled Action<bool> The action that happens when the button is toggled. bounds ElementBounds The bounding box of the button. toggleable bool Can the button be toggled on or off? Fields On Is this button on? public bool On Field Value bool Toggleable Is this button toggleable? public bool Toggleable Field Value bool Properties Focusable Is this element capable of being in the focus? public override bool Focusable { get; } Property Value bool Methods ComposeElements(Context, ImageSurface) Composes the element in both the pressed, and released states. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context The context of the element. surface ImageSurface The surface of the element. Remarks Neither the context, nor the surface is used in this function. Dispose() Disposes of the button. public override void Dispose() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) Handles the mouse button press while the mouse is on this button. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The client API args MouseEvent The mouse event arguments. OnMouseUp(ICoreClientAPI, MouseEvent) Handles the event fired when the mouse is released. public override void OnMouseUp(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The client API args MouseEvent Mouse event arguments OnMouseUpOnElement(ICoreClientAPI, MouseEvent) Handles the mouse button release while the mouse is on this button. public override void OnMouseUpOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The client API args MouseEvent The mouse event arguments RenderInteractiveElements(float) Renders the button. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The time elapsed. SetValue(bool) Sets the value of the button. public void SetValue(bool on) Parameters on bool Am I on or off?"
  },
  "api/Vintagestory.API.Client.GuiElementVerticalTabs.html": {
    "href": "api/Vintagestory.API.Client.GuiElementVerticalTabs.html",
    "title": "Class GuiElementVerticalTabs | VintageStory API",
    "keywords": "Class GuiElementVerticalTabs Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiElementVerticalTabs : GuiElementTextBase, IDisposable Inheritance object GuiElement GuiElementControl GuiElementTextBase GuiElementVerticalTabs Implements IDisposable Inherited Members GuiElementTextBase.textUtil GuiElementTextBase.text GuiElementTextBase.Text GuiElementTextBase.textPathMode GuiElementTextBase.Font GuiElementTextBase.RightPadding GuiElementTextBase.ComposeElements(Context, ImageSurface) GuiElementTextBase.GetMultilineTextHeight() GuiElementTextBase.DrawMultilineTextAt(Context, double, double, EnumTextOrientation) GuiElementTextBase.DrawTextLineAt(Context, string, double, double, bool) GuiElementTextBase.GetText() GuiElementControl.enabled GuiElementControl.Enabled GuiElement.dirtTextureName GuiElement.noisyMetalTextureName GuiElement.woodTextureName GuiElement.stoneTextureName GuiElement.waterTextureName GuiElement.paperTextureName GuiElement.Bounds GuiElement.TabIndex GuiElement.hasFocus GuiElement.InsideClipBounds GuiElement.api GuiElement.RenderAsPremultipliedAlpha GuiElement.HasFocus GuiElement.DrawOrder GuiElement.Scale GuiElement.OnFocusGained() GuiElement.OnFocusLost() GuiElement.PostRenderInteractiveElements(float) GuiElement.RenderFocusOverlay(float) GuiElement.generateTexture(ImageSurface, ref int, bool) GuiElement.generateTexture(ImageSurface, ref LoadedTexture, bool) GuiElement.scaled(double) GuiElement.scaledi(double) GuiElement.genContext(ImageSurface) GuiElement.getPattern(SKBitmap) GuiElement.getPattern(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap) GuiElement.getImageSurfaceFromAsset(BitmapExternal) GuiElement.getImageSurfaceFromAsset(SKBitmap, int, int) GuiElement.getImageSurfaceFromAsset(BitmapExternal, int, int) GuiElement.BeforeCalcBounds() GuiElement.getPattern(ICoreClientAPI, AssetLocation, bool, int, float) GuiElement.getImageSurfaceFromAsset(ICoreClientAPI, AssetLocation, int) GuiElement.fillWithPattern(ICoreClientAPI, Context, AssetLocation, bool, bool, int, float) GuiElement.DiscardPattern(AssetLocation) GuiElement.Lamp(Context, double, double, float[]) GuiElement.Rectangle(Context, ElementBounds) GuiElement.Rectangle(Context, double, double, double, double) GuiElement.DialogRoundRectangle(Context, ElementBounds) GuiElement.ElementRoundRectangle(Context, ElementBounds, bool, double) GuiElement.RoundRectangle(Context, double, double, double, double, double) GuiElement.ShadePath(Context, double) GuiElement.EmbossRoundRectangleDialog(Context, double, double, double, double, bool) GuiElement.EmbossRoundRectangleElement(Context, double, double, double, double, bool, int, int) GuiElement.EmbossRoundRectangleElement(Context, ElementBounds, bool, int, int) GuiElement.EmbossRoundRectangle(Context, double, double, double, double, double, int, float, float, bool, float) GuiElement.RenderBoundsDebug() GuiElement.OnMouseDown(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUpOnElement(ICoreClientAPI, MouseEvent) GuiElement.OnMouseUp(ICoreClientAPI, MouseEvent) GuiElement.OnMouseEnterSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseLeaveSlot(ICoreClientAPI, ItemSlot) GuiElement.OnMouseMove(ICoreClientAPI, MouseEvent) GuiElement.OnMouseWheel(ICoreClientAPI, MouseWheelEventArgs) GuiElement.OnKeyUp(ICoreClientAPI, KeyEvent) GuiElement.OnKeyPress(ICoreClientAPI, KeyEvent) GuiElement.IsPositionInside(int, int) GuiElement.MouseOverCursor GuiElement.OutlineColor() GuiElement.Render2DTexture(int, float, float, float, float, float, Vec4f) GuiElement.Render2DTexture(int, double, double, double, double, float, Vec4f) GuiElement.Render2DTexture(int, ElementBounds, float, Vec4f) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GuiElementVerticalTabs(ICoreClientAPI, GuiTab[], CairoFont, CairoFont, ElementBounds, Action<int, GuiTab>) Creates a new vertical tab group. public GuiElementVerticalTabs(ICoreClientAPI capi, GuiTab[] tabs, CairoFont font, CairoFont selectedFont, ElementBounds bounds, Action<int, GuiTab> onTabClicked) Parameters capi ICoreClientAPI The Client API tabs GuiTab[] The collection of individual tabs. font CairoFont The font for the group of them all. selectedFont CairoFont bounds ElementBounds The bounds of the tabs. onTabClicked Action<int, GuiTab> The event fired when the tab is clicked. Fields ActiveElement public int ActiveElement Field Value int Right public bool Right Field Value bool ToggleTabs If true, more than one tab can be active public bool ToggleTabs Field Value bool baseTexture protected LoadedTexture baseTexture Field Value LoadedTexture handler protected Action<int, GuiTab> handler Field Value Action<int, GuiTab> hoverTextures protected LoadedTexture[] hoverTextures Field Value LoadedTexture[] selectedFont protected CairoFont selectedFont Field Value CairoFont tabHeight protected double tabHeight Field Value double tabWidths protected int[] tabWidths Field Value int[] tabs protected GuiTab[] tabs Field Value GuiTab[] textOffsetY protected double textOffsetY Field Value double unscaledTabHeight protected double unscaledTabHeight Field Value double unscaledTabPadding protected double unscaledTabPadding Field Value double unscaledTabSpacing protected double unscaledTabSpacing Field Value double Properties Focusable Whether or not the element can be focused. public override bool Focusable { get; } Property Value bool Methods ComposeTextElements(Context, ImageSurface) public override void ComposeTextElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context surfaceStatic ImageSurface Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() OnKeyDown(ICoreClientAPI, KeyEvent) The event fired when a key is held down. public override void OnKeyDown(ICoreClientAPI api, KeyEvent args) Parameters api ICoreClientAPI The client API args KeyEvent The key event arguments. OnMouseDownOnElement(ICoreClientAPI, MouseEvent) The event fired when the mouse is pressed while on the element. Called after OnMouseDown and tells the engine that the event is handled. public override void OnMouseDownOnElement(ICoreClientAPI api, MouseEvent args) Parameters api ICoreClientAPI The Client API args MouseEvent The mouse event args. RenderInteractiveElements(float) Renders the element as an interactive element. public override void RenderInteractiveElements(float deltaTime) Parameters deltaTime float The change in time. SetValue(int) Switches to a different tab. public void SetValue(int index) Parameters index int The tab to switch to. SetValue(int, bool) Switches to a different tab. public void SetValue(int index, bool triggerHandler) Parameters index int The tab to switch to. triggerHandler bool Whether or not the handler triggers."
  },
  "api/Vintagestory.API.Client.GuiJsonDialog.html": {
    "href": "api/Vintagestory.API.Client.GuiJsonDialog.html",
    "title": "Class GuiJsonDialog | VintageStory API",
    "keywords": "Class GuiJsonDialog Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll This is a dialogue built from JSON files. Open in GitHub public class GuiJsonDialog : GuiDialogGeneric, IDisposable Inheritance object GuiDialog GuiDialogGeneric GuiJsonDialog Implements IDisposable Inherited Members GuiDialogGeneric.DialogTitle GuiDialogGeneric.UnregisterOnClose GuiDialogGeneric.Attributes GuiDialogGeneric.UnfocusElements() GuiDialogGeneric.FocusElement(int) GuiDialogGeneric.IsInRangeOfBlock(BlockPos) GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.DialogType GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.DrawOrder GuiDialog.InputOrder GuiDialog.OnGuiOpened() GuiDialog.OnGuiClosed() GuiDialog.TryOpen() GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnRenderGUI(float) GuiDialog.OnFinalizeFrame(float) GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Remarks JSON made this gui. Thanks JSON. Constructors GuiJsonDialog(JsonDialogSettings, ICoreClientAPI) Builds the dialog using the dialog settings from JSON. public GuiJsonDialog(JsonDialogSettings settings, ICoreClientAPI capi) Parameters settings JsonDialogSettings The dialog settings. capi ICoreClientAPI The Client API GuiJsonDialog(JsonDialogSettings, ICoreClientAPI, bool) Builds the dialog using the dialog settings from JSON. public GuiJsonDialog(JsonDialogSettings settings, ICoreClientAPI capi, bool focusFirstElement) Parameters settings JsonDialogSettings The dialog settings. capi ICoreClientAPI The Client API focusFirstElement bool Should the first element be focused, after building the dialog? Properties DebugName The debug name of the GUI public override string DebugName { get; } Property Value string PrefersUngrabbedMouse Gets whether it is preferred for the mouse to be not grabbed while this dialog is opened. If true (default), the Alt button needs to be held to manually grab the mouse. public override bool PrefersUngrabbedMouse { get; } Property Value bool ToggleKeyCombinationCode Key Combination for the GUI public override string ToggleKeyCombinationCode { get; } Property Value string Methods ComposeDialog(bool) Composes the dialogue with specifications dictated by JSON. public void ComposeDialog(bool focusFirstElement = false) Parameters focusFirstElement bool OnMouseDown(MouseEvent) Fires an event when the mouse is held down. public override void OnMouseDown(MouseEvent args) Parameters args MouseEvent The mouse events. Recompose() Recomposes the GUI. public override void Recompose() ReloadValues() Reloads the values in the GUI. public void ReloadValues()"
  },
  "api/Vintagestory.API.Client.GuiStyle.html": {
    "href": "api/Vintagestory.API.Client.GuiStyle.html",
    "title": "Class GuiStyle | VintageStory API",
    "keywords": "Class GuiStyle Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A class containing common values for elements before scaling is applied. Open in GitHub public static class GuiStyle Inheritance object GuiStyle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActiveButtonTextColor A hover color for the light brown text. public static double[] ActiveButtonTextColor Field Value double[] ActiveSlotColor The color of the actively selected slot overlay public static double[] ActiveSlotColor Field Value double[] ButtonTextColor A light brown text color. public static double[] ButtonTextColor Field Value double[] ColorParchment public static double[] ColorParchment Field Value double[] ColorRot1 public static double[] ColorRot1 Field Value double[] ColorRot2 public static double[] ColorRot2 Field Value double[] ColorRot3 public static double[] ColorRot3 Field Value double[] ColorRot4 public static double[] ColorRot4 Field Value double[] ColorRot5 public static double[] ColorRot5 Field Value double[] ColorRust1 public static double[] ColorRust1 Field Value double[] ColorRust2 public static double[] ColorRust2 Field Value double[] ColorRust3 public static double[] ColorRust3 Field Value double[] ColorSchematic public static double[] ColorSchematic Field Value double[] ColorTime1 public static double[] ColorTime1 Field Value double[] ColorTime2 public static double[] ColorTime2 Field Value double[] ColorWood public static double[] ColorWood Field Value double[] DamageColorGradient A 100 step gradient from green to red, to be used to show durability, damage or any state other of decay public static int[] DamageColorGradient Field Value int[] DarkBrownColor A color for a darker brown. public static double[] DarkBrownColor Field Value double[] DecorativeFontName The decorative font type. \"Lora\". public static string DecorativeFontName Field Value string DetailFontSize The font size used for specific details like Item Stack size info. 14. public static double DetailFontSize Field Value double DialogAlternateBgColor The alternate background color for dialogs. public static double[] DialogAlternateBgColor Field Value double[] DialogBGRadius The radius of the dialogue background. 1. public static double DialogBGRadius Field Value double DialogBorderColor The default dialog border color public static double[] DialogBorderColor Field Value double[] DialogDefaultBgColor The default background color for dialogs. public static double[] DialogDefaultBgColor Field Value double[] DialogDefaultTextColor The default text color for any given dialog. public static double[] DialogDefaultTextColor Field Value double[] DialogHighlightColor The Highlight color for dialogs. public static double[] DialogHighlightColor Field Value double[] DialogLightBgColor The light background color for dialogs. public static double[] DialogLightBgColor Field Value double[] DialogSlotBackColor public static double[] DialogSlotBackColor Field Value double[] DialogSlotFrontColor public static double[] DialogSlotFrontColor Field Value double[] DialogStrongBgColor The strong background color for dialogs. public static double[] DialogStrongBgColor Field Value double[] DialogToScreenPadding The padding between the dialogue and the screen. 10f. public static double DialogToScreenPadding Field Value double DisabledTextColor The text color for a disabled object. public static double[] DisabledTextColor Field Value double[] DiscoveryTextColor public static double[] DiscoveryTextColor Field Value double[] ElementBGRadius The radius of the element background. 1. public static double ElementBGRadius Field Value double ElementToDialogPadding The padding between the element and the dialogue. 20f. public static double ElementToDialogPadding Field Value double ErrorTextColor The color of the error text. public static double[] ErrorTextColor Field Value double[] ErrorTextColorHex public static string ErrorTextColorHex Field Value string FoodBarColor The color of the food bar. public static double[] FoodBarColor Field Value double[] HalfPadding The padding between other things. 5f. public static double HalfPadding Field Value double HealthBarColor The color of the health bar. public static double[] HealthBarColor Field Value double[] HotbarNumberTextColor The color of the 1..9 numbers on the hotbar slots public static double[] HotbarNumberTextColor Field Value double[] LargeFontSize The size of the large font. 40. public static double LargeFontSize Field Value double LeftDialogMargin Set by the client, loaded from the clientsettings.json. Used by ElementBounds to add a margin for left/right aligned dialogs public static int LeftDialogMargin Field Value int LinkTextColor The color of the the link text. public static double[] LinkTextColor Field Value double[] MacroIconColor The color of the macro icon. public static double[] MacroIconColor Field Value double[] NormalFontSize The size of the normal fonts. Used for text boxes. 30. public static double NormalFontSize Field Value double OxygenBarColor The color of the oxygen bar public static double[] OxygenBarColor Field Value double[] RightDialogMargin Set by the client, loaded from the clientsettings.json. Used by ElementBounds to add a margin for left/right aligned dialogs public static int RightDialogMargin Field Value int SmallFontSize The smallest font size used in the game that isn't used with itemstacks. 16. public static double SmallFontSize Field Value double SmallishFontSize The smaller fonts. 20. public static double SmallishFontSize Field Value double StandardFontName The standard font \"Montserrat\". public static string StandardFontName Field Value string SubNormalFontSize The fonts that are slightly smaller than normal fonts. 24. public static double SubNormalFontSize Field Value double SuccessTextColor public static double[] SuccessTextColor Field Value double[] SuccessTextColorHex public static string SuccessTextColorHex Field Value string TitleBarColor The color of the title bar. public static double[] TitleBarColor Field Value double[] TitleBarHeight The height of the title bar. 30. public static double TitleBarHeight Field Value double WarningTextColor The color of the error text. public static double[] WarningTextColor Field Value double[] XPBarColor The color of the XP bar. public static double[] XPBarColor Field Value double[]"
  },
  "api/Vintagestory.API.Client.GuiTab.html": {
    "href": "api/Vintagestory.API.Client.GuiTab.html",
    "title": "Class GuiTab | VintageStory API",
    "keywords": "Class GuiTab Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class GuiTab Inheritance object GuiTab Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Active public bool Active Field Value bool DataInt public int DataInt Field Value int Name public string Name Field Value string PaddingTop public double PaddingTop Field Value double"
  },
  "api/Vintagestory.API.Client.HotKey.html": {
    "href": "api/Vintagestory.API.Client.HotKey.html",
    "title": "Class HotKey | VintageStory API",
    "keywords": "Class HotKey Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class HotKey Inheritance object HotKey Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code The code of the Hotkey. public string Code Field Value string CurrentMapping The current key combination for this hotkey public KeyCombination CurrentMapping Field Value KeyCombination DefaultMapping The default key combination for this hotkey public KeyCombination DefaultMapping Field Value KeyCombination Handler This is the action that happens when the hotkey is used. public ActionConsumable<KeyCombination> Handler Field Value ActionConsumable<KeyCombination> IsGlobalHotkey For global hotkeys that shall not be blocked by anything (e.g. F11 for fullscreen, F12 for screenshot) public bool IsGlobalHotkey Field Value bool IsIngameHotkey For hotkeys that only available during a game session. When the game session ends, the handler to this hotkey is removed (or we have a dead reference to runninggame) public bool IsIngameHotkey Field Value bool KeyCombinationType The type of the key combination. This defaults to HotkeyType.CharacterControls. public HotkeyType KeyCombinationType Field Value HotkeyType Name The name of the Hotkey public string Name Field Value string TriggerOnUpAlso If true, the handler will be called twice, once on the key or button down event, and once on the up event public bool TriggerOnUpAlso Field Value bool Methods Clone() Clones the hotkey. public HotKey Clone() Returns HotKey the cloned hotkey. DidPress(KeyEvent, IWorldAccessor, IPlayer, bool) Was this hotkey pressed? public virtual bool DidPress(KeyEvent keyEventargs, IWorldAccessor world, IPlayer player, bool allowCharacterControls) Parameters keyEventargs KeyEvent Event arguments for the given key. world IWorldAccessor The current world for the key. player IPlayer The player that pressed the buttons. allowCharacterControls bool Do we allow character control functions. Returns bool If the hotkey was pressed or not. FallbackDidPress(KeyEvent, IWorldAccessor, IPlayer, bool) Fallback version of the DidPress event. public virtual bool FallbackDidPress(KeyEvent keyEventargs, IWorldAccessor world, IPlayer player, bool allowCharacterControls) Parameters keyEventargs KeyEvent Event arguments for the given key. world IWorldAccessor The current world for the key. player IPlayer The player that pressed the buttons. allowCharacterControls bool Do we allow character control functions. Returns bool If the hotkey was pressed or not. SetDefaultMapping() Sets the default keymap for this hotkey. public void SetDefaultMapping()"
  },
  "api/Vintagestory.API.Client.HotkeyComponent.html": {
    "href": "api/Vintagestory.API.Client.HotkeyComponent.html",
    "title": "Class HotkeyComponent | VintageStory API",
    "keywords": "Class HotkeyComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class HotkeyComponent : RichTextComponent Inheritance object RichTextComponentBase RichTextComponent HotkeyComponent Inherited Members RichTextComponent.textUtil RichTextComponent.linebreak RichTextComponent.DisplayText RichTextComponent.Font RichTextComponent.Lines RichTextComponent.init() RichTextComponent.GetFontOrientOffsetX() RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseDown(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors HotkeyComponent(ICoreClientAPI, string, CairoFont) public HotkeyComponent(ICoreClientAPI api, string hotkeycode, CairoFont font) Parameters api ICoreClientAPI hotkeycode string font CairoFont Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult True when longer than 1 line ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surfaceUnused) Parameters ctx Context Context of the text component. surfaceUnused ImageSurface Dispose() public override void Dispose() DrawHotkey(ICoreClientAPI, string, double, double, Context, CairoFont, double, double, double, double, double, double[]) public static double DrawHotkey(ICoreClientAPI capi, string keycode, double x, double y, Context ctx, CairoFont font, double lineheight, double textHeight, double pluswdith, double symbolspacing, double leftRightPadding, double[] color) Parameters capi ICoreClientAPI keycode string x double y double ctx Context font CairoFont lineheight double textHeight double pluswdith double symbolspacing double leftRightPadding double color double[] Returns double GenHotkeyTexture() public void GenHotkeyTexture() RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double"
  },
  "api/Vintagestory.API.Client.HotkeyType.html": {
    "href": "api/Vintagestory.API.Client.HotkeyType.html",
    "title": "Enum HotkeyType | VintageStory API",
    "keywords": "Enum HotkeyType Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public enum HotkeyType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CharacterControls = 4 Controls that control the players actions. Only triggered when the player not currently inside a dialog. CreativeOrSpectatorTool = 7 Controls that are only available in creative or spectator mode CreativeTool = 6 Controls that are only available in creative mode DevTool = 8 Developer tools GUIOrOtherControls = 2 Controls that are always available (survival and creative mode) HelpAndOverlays = 0 Help and overlays that are always available (survival and creative mode) InventoryHotkeys = 5 Shortcuts for inventory actions. MouseControls = 9 Primary mouse controls MouseModifiers = 1 Mouse modifiers (i.e. for Shift- and Ctrl- click) MovementControls = 3 Controls that control the players movement. Only available when the player not currently inside a dialog."
  },
  "api/Vintagestory.API.Client.HudElement.html": {
    "href": "api/Vintagestory.API.Client.HudElement.html",
    "title": "Class HudElement | VintageStory API",
    "keywords": "Class HudElement Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Base class for Hud Elements. Open in GitHub public abstract class HudElement : GuiDialog, IDisposable Inheritance object GuiDialog HudElement Implements IDisposable Inherited Members GuiDialog.Composers GuiDialog.SingleComposer GuiDialog.DebugName GuiDialog.ZSize GuiDialog.ignoreNextKeyPress GuiDialog.opened GuiDialog.focused GuiDialog.Focused GuiDialog.Focusable GuiDialog.OnOpened GuiDialog.OnClosed GuiDialog.capi GuiDialog.OnFocusChanged(bool) GuiDialog.OnBlockTexturesLoaded() GuiDialog.OnLevelFinalize() GuiDialog.OnOwnPlayerDataReceived() GuiDialog.DrawOrder GuiDialog.InputOrder GuiDialog.UnregisterOnClose GuiDialog.OnGuiOpened() GuiDialog.OnGuiClosed() GuiDialog.TryOpen() GuiDialog.TryOpen(bool) GuiDialog.TryClose() GuiDialog.UnFocus() GuiDialog.Focus() GuiDialog.Toggle() GuiDialog.IsOpened() GuiDialog.IsOpened(string) GuiDialog.OnBeforeRenderFrame3D(float) GuiDialog.MouseOverCursor GuiDialog.OnFinalizeFrame(float) GuiDialog.OnKeyDown(KeyEvent) GuiDialog.OnKeyPress(KeyEvent) GuiDialog.OnKeyUp(KeyEvent) GuiDialog.OnEscapePressed() GuiDialog.OnMouseEnterSlot(ItemSlot) GuiDialog.OnMouseLeaveSlot(ItemSlot) GuiDialog.OnMouseClickSlot(ItemSlot) GuiDialog.OnMouseDown(MouseEvent) GuiDialog.OnMouseUp(MouseEvent) GuiDialog.OnMouseMove(MouseEvent) GuiDialog.OnMouseWheel(MouseWheelEventArgs) GuiDialog.ShouldReceiveRenderEvents() GuiDialog.ShouldReceiveKeyboardEvents() GuiDialog.ShouldReceiveMouseEvents() GuiDialog.RequiresUngrabbedMouse() GuiDialog.DisableMouseGrab GuiDialog.CaptureAllInputs() GuiDialog.CaptureRawMouse() GuiDialog.Dispose() GuiDialog.ClearComposers() GuiDialog.IsInRangeOf(Vec3d) GuiDialog.GetFreePos(string) GuiDialog.OccupyPos(string, GuiDialog.EnumPosFlag) GuiDialog.FreePos(string, GuiDialog.EnumPosFlag) GuiDialog.IsRight(GuiDialog.EnumPosFlag) GuiDialog.YOffsetMul(GuiDialog.EnumPosFlag) GuiDialog.XOffsetMul(GuiDialog.EnumPosFlag) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors HudElement(ICoreClientAPI) Creates a new Hud Element. public HudElement(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Client API Properties DialogType Is this dialogue a dialogue or a HUD object? public override EnumDialogType DialogType { get; } Property Value EnumDialogType PrefersUngrabbedMouse Gets whether it is preferred for the mouse to be not grabbed while this dialog is opened. If true (default), the Alt button needs to be held to manually grab the mouse. public override bool PrefersUngrabbedMouse { get; } Property Value bool ToggleKeyCombinationCode The key combination string that toggles this GUI object. public override string ToggleKeyCombinationCode { get; } Property Value string Methods OnRenderGUI(float) This runs when the dialogue is ready to render all of the components. public override void OnRenderGUI(float deltaTime) Parameters deltaTime float The time that has elapsed."
  },
  "api/Vintagestory.API.Client.IAsyncParticleManager.html": {
    "href": "api/Vintagestory.API.Client.IAsyncParticleManager.html",
    "title": "Interface IAsyncParticleManager | VintageStory API",
    "keywords": "Interface IAsyncParticleManager Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IAsyncParticleManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties BlockAccess IBlockAccessor BlockAccess { get; } Property Value IBlockAccessor Methods ParticlesAlive(EnumParticleModel) int ParticlesAlive(EnumParticleModel model) Parameters model EnumParticleModel Returns int Spawn(IParticlePropertiesProvider) int Spawn(IParticlePropertiesProvider particleProperties) Parameters particleProperties IParticlePropertiesProvider Returns int"
  },
  "api/Vintagestory.API.Client.IAviWriter.html": {
    "href": "api/Vintagestory.API.Client.IAviWriter.html",
    "title": "Interface IAviWriter | VintageStory API",
    "keywords": "Interface IAviWriter Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IAviWriter Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AddFrame() void AddFrame() Close() void Close() Open(string, int, int) void Open(string filename, int width, int height) Parameters filename string width int height int"
  },
  "api/Vintagestory.API.Client.IBlockTextureAtlasAPI.html": {
    "href": "api/Vintagestory.API.Client.IBlockTextureAtlasAPI.html",
    "title": "Interface IBlockTextureAtlasAPI | VintageStory API",
    "keywords": "Interface IBlockTextureAtlasAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Block texture Atlas public interface IBlockTextureAtlasAPI : ITextureAtlasAPI Inherited Members ITextureAtlasAPI.this[AssetLocation] ITextureAtlasAPI.UnknownTexturePosition ITextureAtlasAPI.Size ITextureAtlasAPI.SubPixelPaddingX ITextureAtlasAPI.SubPixelPaddingY ITextureAtlasAPI.Positions ITextureAtlasAPI.AtlasTextures ITextureAtlasAPI.AllocateTextureSpace(int, int, out int, out TextureAtlasPosition, AssetLocationAndSource) ITextureAtlasAPI.InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) ITextureAtlasAPI.InsertTexture(byte[], out int, out TextureAtlasPosition, float) ITextureAtlasAPI.LoadCompositeBitmap(AssetLocationAndSource) ITextureAtlasAPI.GetOrInsertTexture(AssetLocationAndSource, out int, out TextureAtlasPosition, CreateTextureDelegate, float) ITextureAtlasAPI.GetOrInsertTexture(AssetLocation, out int, out TextureAtlasPosition, CreateTextureDelegate, float) ITextureAtlasAPI.InsertTextureCached(AssetLocation, IBitmap, out int, out TextureAtlasPosition, float) ITextureAtlasAPI.InsertTextureCached(AssetLocation, byte[], out int, out TextureAtlasPosition, float) ITextureAtlasAPI.GetOrInsertTexture(CompositeTexture, out int, out TextureAtlasPosition, float) ITextureAtlasAPI.FreeTextureSpace(int) ITextureAtlasAPI.GetRandomColor(int) ITextureAtlasAPI.RegenMipMaps(int) ITextureAtlasAPI.GetRandomColor(int, int) ITextureAtlasAPI.GetRandomColor(TextureAtlasPosition, int) ITextureAtlasAPI.GetRandomColors(TextureAtlasPosition) ITextureAtlasAPI.GetAverageColor(int) ITextureAtlasAPI.RenderTextureIntoAtlas(int, LoadedTexture, float, float, float, float, float, float, float) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetPosition(Block, string, bool) Returns the position in the block texture atlas of given block. TextureAtlasPosition GetPosition(Block block, string textureName, bool returnNullWhenMissing = false) Parameters block Block textureName string returnNullWhenMissing bool Returns TextureAtlasPosition"
  },
  "api/Vintagestory.API.Client.IClientEventAPI.html": {
    "href": "api/Vintagestory.API.Client.IClientEventAPI.html",
    "title": "Interface IClientEventAPI | VintageStory API",
    "keywords": "Interface IClientEventAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Contains some client specific events you can hook into public interface IClientEventAPI : IEventAPI Inherited Members IEventAPI.EntityMounted IEventAPI.EntityUnmounted IEventAPI.PlayerDimensionChanged IEventAPI.OnTestBlockAccess IEventAPI.OnTestBlockAccessClaim IEventAPI.OnEntitySpawn IEventAPI.OnEntityLoaded IEventAPI.OnEntityDeath IEventAPI.OnEntityDespawn IEventAPI.ChunkDirty IEventAPI.MapRegionLoaded IEventAPI.MapRegionUnloaded IEventAPI.OnGetClimate IEventAPI.OnGetWindSpeed IEventAPI.MatchesGridRecipe IEventAPI.PushEvent(string, IAttribute) IEventAPI.RegisterEventBusListener(EventBusListenerDelegate, double, string) IEventAPI.RegisterGameTickListener(Action<float>, int, int) IEventAPI.RegisterGameTickListener(Action<float>, Action<Exception>, int, int) IEventAPI.RegisterGameTickListener(Action<IWorldAccessor, BlockPos, float>, BlockPos, int, int) IEventAPI.RegisterCallback(Action<float>, int) IEventAPI.RegisterCallback(Action<float>, int, bool) IEventAPI.RegisterCallback(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) IEventAPI.UnregisterCallback(long) IEventAPI.UnregisterGameTickListener(long) IEventAPI.EnqueueMainThreadTask(Action, string) IEventAPI.TriggerPlayerDimensionChanged(IPlayer) IEventAPI.TriggerEntityDeath(Entity, DamageSource) IEventAPI.TriggerMatchesRecipe(IPlayer, GridRecipe, ItemSlot[], int) IEventAPI.TriggerEntityMounted(EntityAgent, IMountableSeat) IEventAPI.TriggerEntityUnmounted(EntityAgent, IMountableSeat) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods RegisterAsyncParticleSpawner(ContinousParticleSpawnTaskDelegate) Set up an asynchronous particle spawner. The async particle simulation does most of the work in a seperate thread and thus runs a lot faster, with the down side of not being exaclty in sync with player interactions. This method of spawning particles is best suited for ambient particles, such as rain fall. void RegisterAsyncParticleSpawner(ContinousParticleSpawnTaskDelegate handler) Parameters handler ContinousParticleSpawnTaskDelegate RegisterItemstackRenderer(CollectibleObject, ItemRenderDelegate, EnumItemRenderTarget) Registers a custom itemstack renderer for given collectible object. If none is registered, the default renderer is used. For render target gui, the gui shader and its uniforms are already fully prepared, you may only call RenderMesh() and ignore the modelMat, position and size values - stack sizes however, are not covered by this. void RegisterItemstackRenderer(CollectibleObject forObj, ItemRenderDelegate rendererDelegate, EnumItemRenderTarget target) Parameters forObj CollectibleObject rendererDelegate ItemRenderDelegate target EnumItemRenderTarget RegisterRenderer(IRenderer, EnumRenderStage, string) Registers a rendering handler to be called during every render frame void RegisterRenderer(IRenderer renderer, EnumRenderStage renderStage, string profilingName = null) Parameters renderer IRenderer renderStage EnumRenderStage profilingName string If set, the frame profile will record the frame cost for this renderer UnregisterItemstackRenderer(CollectibleObject, EnumItemRenderTarget) Removes a previously registered itemstack renderer void UnregisterItemstackRenderer(CollectibleObject forObj, EnumItemRenderTarget target) Parameters forObj CollectibleObject target EnumItemRenderTarget UnregisterRenderer(IRenderer, EnumRenderStage) Removes a previously registered rendering handler. void UnregisterRenderer(IRenderer renderer, EnumRenderStage renderStage) Parameters renderer IRenderer renderStage EnumRenderStage Events AfterActiveSlotChanged Fired after a player changes their active slot (such as selected hotbar slot). event Action<ActiveSlotChangeEventArgs> AfterActiveSlotChanged Event Type Action<ActiveSlotChangeEventArgs> BeforeActiveSlotChanged Fired before a player changes their active slot (such as selected hotbar slot). Allows for the event to be cancelled depending on the return value. Note: Not called when the server forcefully changes active slot. event Func<ActiveSlotChangeEventArgs, EnumHandling> BeforeActiveSlotChanged Event Type Func<ActiveSlotChangeEventArgs, EnumHandling> BlockChanged When a player block has been modified. OldBlock param may be null! event BlockChangedDelegate BlockChanged Event Type BlockChangedDelegate BlockTexturesLoaded Fired when server assets were received and all texture atlases have been created, also all sounds loaded event Action BlockTexturesLoaded Event Type Action ChatMessage Called when a chat message was received event ChatLineDelegate ChatMessage Event Type ChatLineDelegate ColorsPresetChanged Fired when the GuiColorsPreset client setting is changed, since meshes may need to be redrawn event Action ColorsPresetChanged Event Type Action FileDrop Fired when the user drags&drops a file into the game window event FileDropDelegate FileDrop Event Type FileDropDelegate HotkeysChanged Called when the hotkeys are changed event Action HotkeysChanged Event Type Action InGameDiscovery Fired when something triggers a discovery event, such as the lore system event IngameDiscoveryDelegate InGameDiscovery Event Type IngameDiscoveryDelegate InGameError Fired when something fires an ingame error event IngameErrorDelegate InGameError Event Type IngameErrorDelegate IsPlayerReady Fired when a player is ready to join but awaits any potential mod-user interaction, such as a character selection screen event IsPlayerReadyDelegate IsPlayerReady Event Type IsPlayerReadyDelegate KeyDown Provides low level access to the key down event. If e.Handled is set to true, the event will not be handled by the game event KeyEventDelegate KeyDown Event Type KeyEventDelegate KeyUp Provides low level access to the key up event. If e.Handled is set to true, the event will not be handled by the game event KeyEventDelegate KeyUp Event Type KeyEventDelegate LeaveWorld When the player wants to leave the world to go back to the main menu event Action LeaveWorld Event Type Action LeftWorld When the player left the world to go back to the main menu event Action LeftWorld Event Type Action LevelFinalize Called when the client received the level finalize packet from the server event Action LevelFinalize Event Type Action MouseDown Provides low level access to the mouse down event. If e.Handled is set to true, the event will not be handled by the game event MouseEventDelegate MouseDown Event Type MouseEventDelegate MouseMove Provides low level access to the mouse move event. If e.Handled is set to true, the event will not be handled by the game event MouseEventDelegate MouseMove Event Type MouseEventDelegate MouseUp Provides low level access to the mouse up event. If e.Handled is set to true, the event will not be handled by the game event MouseEventDelegate MouseUp Event Type MouseEventDelegate OnSendChatMessage Called before a chat message is sent to the server event ClientChatLineDelegate OnSendChatMessage Event Type ClientChatLineDelegate PauseResume When the game was paused/resumed (only in single player) event OnGamePauseResume PauseResume Event Type OnGamePauseResume PlayerDeath Called when the player dies event PlayerEventDelegate PlayerDeath Event Type PlayerEventDelegate PlayerEntityDespawn Called whenever a players got out of range event PlayerEventDelegate PlayerEntityDespawn Event Type PlayerEventDelegate PlayerEntitySpawn Called when a players entity got in range event PlayerEventDelegate PlayerEntitySpawn Event Type PlayerEventDelegate PlayerJoin Called when a player joins. The Entity of the player might be null if out of range! event PlayerEventDelegate PlayerJoin Event Type PlayerEventDelegate PlayerLeave Called whenever a player disconnects (timeout, leave, disconnect, kick, etc.). The Entity of the player might be null if out of range! event PlayerEventDelegate PlayerLeave Event Type PlayerEventDelegate ReloadShader Fired when the player tries to reload the shaders (happens when graphics settings are changed) event ActionBoolReturn ReloadShader Event Type ActionBoolReturn ReloadShapes Called when shapes got reloaded event Action ReloadShapes Event Type Action ReloadTextures Called when textures got reloaded event Action ReloadTextures Event Type Action TestBlockAccess When player tries to modify a block event TestBlockAccessDelegate TestBlockAccess Event Type TestBlockAccessDelegate"
  },
  "api/Vintagestory.API.Client.IClientNetworkAPI.html": {
    "href": "api/Vintagestory.API.Client.IClientNetworkAPI.html",
    "title": "Interface IClientNetworkAPI | VintageStory API",
    "keywords": "Interface IClientNetworkAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll API Features to set up a network channel for custom server<->client data exchange. Client side. public interface IClientNetworkAPI : INetworkAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetChannel(string) Returns a previously registered channel, null otherwise IClientNetworkChannel GetChannel(string channelName) Parameters channelName string Returns IClientNetworkChannel GetChannelState(string) Check in what state a channel currently is in EnumChannelState GetChannelState(string channelName) Parameters channelName string Returns EnumChannelState GetUdpChannel(string) Returns a previously registered channel, null otherwise IClientNetworkChannel GetUdpChannel(string channelName) Parameters channelName string Returns IClientNetworkChannel RegisterChannel(string) Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up. IClientNetworkChannel RegisterChannel(string channelName) Parameters channelName string Unique channel identifier Returns IClientNetworkChannel RegisterUdpChannel(string) Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up. Do not send larger messages then 508 bytes since some clients may be behind NAT/firwalls that may drop your packets if they get fragmented IClientNetworkChannel RegisterUdpChannel(string channelName) Parameters channelName string Unique channel identifier Returns IClientNetworkChannel SendArbitraryPacket(byte[]) Sends given packet data to the server. This let's you mess with the raw network communication and fiddle with internal engine packets if you know the protocol. For normal network communication you probably want to register your own network channel. void SendArbitraryPacket(byte[] data) Parameters data byte[] SendBlockEntityPacket(int, int, int, int, byte[]) Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first. [Obsolete(\"Not dimension aware, use BlockPos overload instead, otherwise thie BlockEntity will probably not work correctly in other dimensions\")] void SendBlockEntityPacket(int x, int y, int z, int packetId, byte[] data = null) Parameters x int y int z int packetId int data byte[] SendBlockEntityPacket(int, int, int, object) Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first. void SendBlockEntityPacket(int x, int y, int z, object internalPacket) Parameters x int y int z int internalPacket object SendBlockEntityPacket(BlockPos, int, byte[]) Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first. void SendBlockEntityPacket(BlockPos pos, int packetId, byte[] data = null) Parameters pos BlockPos packetId int data byte[] SendBlockEntityPacket<T>(BlockPos, int, T) Sends a blockentity interaction packet to the server. For quick an easy blockentity network communication without setting up a channel first. Uses Protobuf.net to serialize your data void SendBlockEntityPacket<T>(BlockPos pos, int packetId, T data = default) Parameters pos BlockPos packetId int data T Type Parameters T SendEntityPacket(long, int, byte[]) Sends a entity interaction packet to the server. For quick an easy entity network communication without setting up a channel first. void SendEntityPacket(long entityid, int packetId, byte[] data = null) Parameters entityid long packetId int data byte[] SendEntityPacket(long, object) Sends a entity interaction packet to the server. For quick an easy entity network communication without setting up a channel first. void SendEntityPacket(long entityid, object internalPacket) Parameters entityid long internalPacket object SendEntityPacketWithOffset(long, int, object) Sends a entity interaction packet to the server. For quick an easy entity network communication without setting up a channel first. void SendEntityPacketWithOffset(long entityid, int packetIdOffset, object internalPacket) Parameters entityid long packetIdOffset int internalPacket object SendHandInteraction(int, BlockSelection, EntitySelection, EnumHandInteract, int, bool, EnumItemUseCancelReason) Sends the current hand interaction. void SendHandInteraction(int mouseButton, BlockSelection blockSelection, EntitySelection entitySelection, EnumHandInteract beforeUseType, int state, bool firstEvent, EnumItemUseCancelReason cancelReason) Parameters mouseButton int the current mouse button press blockSelection BlockSelection the currently selected Block (if there is one) entitySelection EntitySelection the currently selected Entity (if there is one) beforeUseType EnumHandInteract state int The state of the hand. firstEvent bool Is it the first of this events for this block? (by default the client calls the interaction every second while the player holds down the right mouse button) cancelReason EnumItemUseCancelReason The reason we cancelled the use of an item (if there is one) SendPacketClient(object) Sends given packet to server. For use with inventory supplied network packets only, since the packet format is not exposed to the api void SendPacketClient(object packetClient) Parameters packetClient object The network packet to send. SendPlayerMountPositionPacket(Entity) Sends a mount position via UDP (if possible) to the server void SendPlayerMountPositionPacket(Entity mount) Parameters mount Entity SendPlayerNowReady() If any mod denies the client event IsPlayerReady, then it has to call this method once to indicate that the player is now ready to play (which switches the server side client state from Connected to Playing) void SendPlayerNowReady() SendPlayerPositionPacket() Sends the players entity position (and Mount position) via UDP (if possible) to the server void SendPlayerPositionPacket()"
  },
  "api/Vintagestory.API.Client.IClientNetworkChannel.html": {
    "href": "api/Vintagestory.API.Client.IClientNetworkChannel.html",
    "title": "Interface IClientNetworkChannel | VintageStory API",
    "keywords": "Interface IClientNetworkChannel Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Represent a custom network channel for sending messages between client and server public interface IClientNetworkChannel : INetworkChannel Inherited Members INetworkChannel.ChannelName Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Connected True if the server is listening on this channel bool Connected { get; } Property Value bool Methods RegisterMessageType(Type) Registers a handler for when you send a packet with given messageId. Must be registered in the same order as on the server. IClientNetworkChannel RegisterMessageType(Type type) Parameters type Type Returns IClientNetworkChannel RegisterMessageType<T>() Registers a handler for when you send a packet with given messageId. Must be registered in the same order as on the server. IClientNetworkChannel RegisterMessageType<T>() Returns IClientNetworkChannel Type Parameters T SendPacket<T>(T) Sends a packet to the server void SendPacket<T>(T message) Parameters message T Type Parameters T SetMessageHandler<T>(NetworkServerMessageHandler<T>) Registers a handler for when you send a packet with given messageId IClientNetworkChannel SetMessageHandler<T>(NetworkServerMessageHandler<T> handler) Parameters handler NetworkServerMessageHandler<T> Returns IClientNetworkChannel Type Parameters T"
  },
  "api/Vintagestory.API.Client.IClientPlayer.html": {
    "href": "api/Vintagestory.API.Client.IClientPlayer.html",
    "title": "Interface IClientPlayer | VintageStory API",
    "keywords": "Interface IClientPlayer Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A client side player public interface IClientPlayer : IPlayer Inherited Members IPlayer.Role IPlayer.Groups IPlayer.GetGroups() IPlayer.GetGroup(int) IPlayer.Entitlements IPlayer.CurrentBlockSelection IPlayer.CurrentEntitySelection IPlayer.PlayerName IPlayer.PlayerUID IPlayer.ClientId IPlayer.Entity IPlayer.WorldData IPlayer.InventoryManager IPlayer.Privileges IPlayer.ImmersiveFpMode IPlayer.HasPrivilege(string) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties CameraMode The players current camera mode EnumCameraMode CameraMode { get; } Property Value EnumCameraMode CameraPitch The cameras current pitch float CameraPitch { get; set; } Property Value float CameraRoll float CameraRoll { get; set; } Property Value float CameraYaw float CameraYaw { get; set; } Property Value float Methods ShowChatNotification(string) Writes given message to the players current chat group but doesn't send it to the server void ShowChatNotification(string message) Parameters message string TriggerFpAnimation(EnumHandInteract) Tells the engine to run a first person animtion void TriggerFpAnimation(EnumHandInteract anim) Parameters anim EnumHandInteract"
  },
  "api/Vintagestory.API.Client.IClientWorldAccessor.html": {
    "href": "api/Vintagestory.API.Client.IClientWorldAccessor.html",
    "title": "Interface IClientWorldAccessor | VintageStory API",
    "keywords": "Interface IClientWorldAccessor Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The world accessor implemented by the client, offers some extra features only available on the client public interface IClientWorldAccessor : IWorldAccessor Inherited Members IWorldAccessor.Config IWorldAccessor.DefaultSpawnPosition IWorldAccessor.FrameProfiler IWorldAccessor.Api IWorldAccessor.ChunkProvider IWorldAccessor.Claims IWorldAccessor.LoadedChunkIndices IWorldAccessor.LoadedMapChunkIndices IWorldAccessor.BlockLightLevels IWorldAccessor.SunLightLevels IWorldAccessor.SeaLevel IWorldAccessor.Seed IWorldAccessor.SavegameIdentifier IWorldAccessor.SunBrightness IWorldAccessor.EntityDebugMode IWorldAccessor.AssetManager IWorldAccessor.Logger IWorldAccessor.Side IWorldAccessor.BlockAccessor IWorldAccessor.BulkBlockAccessor IWorldAccessor.ClassRegistry IWorldAccessor.CollisionTester IWorldAccessor.Rand IWorldAccessor.ElapsedMilliseconds IWorldAccessor.Collectibles IWorldAccessor.Blocks IWorldAccessor.Items IWorldAccessor.EntityTypes IWorldAccessor.EntityTypeCodes IWorldAccessor.GridRecipes IWorldAccessor.GetRecipeRegistry(string) IWorldAccessor.DefaultEntityTrackingRange IWorldAccessor.GetItem(int) IWorldAccessor.GetBlock(int) IWorldAccessor.SearchBlocks(AssetLocation) IWorldAccessor.SearchItems(AssetLocation) IWorldAccessor.GetItem(AssetLocation) IWorldAccessor.GetBlock(AssetLocation) IWorldAccessor.GetEntityType(AssetLocation) IWorldAccessor.SpawnItemEntity(ItemStack, Vec3d, Vec3d) IWorldAccessor.SpawnItemEntity(ItemStack, BlockPos, Vec3d) IWorldAccessor.SpawnEntity(Entity) IWorldAccessor.SpawnPriorityEntity(Entity) IWorldAccessor.LoadEntity(Entity, long) IWorldAccessor.UpdateEntityChunk(Entity, long) IWorldAccessor.GetEntitiesAround(Vec3d, float, float, ActionConsumable<Entity>) IWorldAccessor.GetEntitiesInsideCuboid(BlockPos, BlockPos, ActionConsumable<Entity>) IWorldAccessor.GetPlayersAround(Vec3d, float, float, ActionConsumable<IPlayer>) IWorldAccessor.GetNearestEntity(Vec3d, float, float, ActionConsumable<Entity>) IWorldAccessor.GetEntityById(long) IWorldAccessor.GetIntersectingEntities(BlockPos, Cuboidf[], ActionConsumable<Entity>) IWorldAccessor.NearestPlayer(double, double, double) IWorldAccessor.AllOnlinePlayers IWorldAccessor.AllPlayers IWorldAccessor.PlayerByUid(string) IWorldAccessor.PlaySoundAt(AssetLocation, double, double, double, IPlayer, bool, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, BlockPos, double, IPlayer, bool, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, Entity, IPlayer, bool, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, Entity, IPlayer, float, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, double, double, double, IPlayer, float, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, double, double, double, IPlayer, EnumSoundType, float, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, IPlayer, IPlayer, bool, float, float) IWorldAccessor.PlaySoundFor(AssetLocation, IPlayer, bool, float, float) IWorldAccessor.PlaySoundFor(AssetLocation, IPlayer, float, float, float) IWorldAccessor.SpawnParticles(float, int, Vec3d, Vec3d, Vec3f, Vec3f, float, float, float, EnumParticleModel, IPlayer) IWorldAccessor.SpawnParticles(IParticlePropertiesProvider, IPlayer) IWorldAccessor.SpawnCubeParticles(BlockPos, Vec3d, float, int, float, IPlayer, Vec3f) IWorldAccessor.SpawnCubeParticles(Vec3d, ItemStack, float, int, float, IPlayer, Vec3f) IWorldAccessor.RayTraceForSelection(Vec3d, Vec3d, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RayTraceForSelection(IWorldIntersectionSupplier, Vec3d, Vec3d, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RayTraceForSelection(Vec3d, float, float, float, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RayTraceForSelection(Ray, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RegisterGameTickListener(Action<float>, int, int) IWorldAccessor.UnregisterGameTickListener(long) IWorldAccessor.RegisterCallback(Action<float>, int) IWorldAccessor.RegisterCallbackUnique(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) IWorldAccessor.RegisterCallback(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) IWorldAccessor.PlayerHasPrivilege(int, string) IWorldAccessor.UnregisterCallback(long) IWorldAccessor.InteresectionTester IWorldAccessor.HighlightBlocks(IPlayer, int, List<BlockPos>, List<int>, EnumHighlightBlocksMode, EnumHighlightShape, float) IWorldAccessor.HighlightBlocks(IPlayer, int, List<BlockPos>, EnumHighlightBlocksMode, EnumHighlightShape) IWorldAccessor.GetBlockAccessor(bool, bool, bool, bool) IWorldAccessor.GetBlockAccessorBulkUpdate(bool, bool, bool) IWorldAccessor.GetBlockAccessorBulkMinimalUpdate(bool, bool) IWorldAccessor.GetBlockAccessorMapChunkLoading(bool, bool) IWorldAccessor.GetBlockAccessorRevertable(bool, bool, bool) IWorldAccessor.GetBlockAccessorPrefetch(bool, bool) IWorldAccessor.GetCachingBlockAccessor(bool, bool) IWorldAccessor.GetLockFreeBlockAccessor() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AmbientParticles Whether to spawn ambient particles bool AmbientParticles { get; set; } Property Value bool Calendar Interface to access the game calendar IClientGameCalendar Calendar { get; } Property Value IClientGameCalendar ForceLiquidSelectable Whether the player can select liquids bool ForceLiquidSelectable { get; set; } Property Value bool LoadedEntities The internal cache of all currently loaded entities. Warning: You should not set or remove anything from this dic unless you really know what you're doing. Use SpawnEntity/DespawnEntity instead. Dictionary<long, Entity> LoadedEntities { get; } Property Value Dictionary<long, Entity> MapSizeY Gets the MapSizeY on the client, for chunk column enumeration, without this this is surprisingly hard to get... int MapSizeY { get; } Property Value int MiniDimensions Dictionary<int, IMiniDimension> MiniDimensions { get; } Property Value Dictionary<int, IMiniDimension> Player Returns the player running this client instance IClientPlayer Player { get; } Property Value IClientPlayer Methods AddCameraShake(float) Shakes the camera view by given strength void AddCameraShake(float strengh) Parameters strengh float ApplyColorMapOnRgba(string, string, int, int, int, bool) Loads the rgb climate and season color map value for given rain and temp value and multiplies it byte-wise with supplied color int ApplyColorMapOnRgba(string climateColorMap, string seasonColorMap, int color, int rain, int temp, bool flipRb = true) Parameters climateColorMap string seasonColorMap string color int rain int temp int flipRb bool Returns int ApplyColorMapOnRgba(string, string, int, int, int, int, bool) Loads the rgb climate and season color map value at given position and multiplies it byte-wise with supplied color int ApplyColorMapOnRgba(string climateColorMap, string seasonColorMap, int color, int posX, int posY, int posZ, bool flipRb = true) Parameters climateColorMap string seasonColorMap string color int posX int posY int posZ int flipRb bool Returns int ApplyColorMapOnRgba(ColorMap, ColorMap, int, int, int, int, bool) int ApplyColorMapOnRgba(ColorMap climateColorMap, ColorMap seasonColorMap, int color, int posX, int posY, int posZ, bool flipRb = true) Parameters climateColorMap ColorMap seasonColorMap ColorMap color int posX int posY int posZ int flipRb bool Returns int CloneBlockDamage(BlockPos, BlockPos) Applies the same damage overlay effect on the target as the source has void CloneBlockDamage(BlockPos sourcePos, BlockPos targetPos) Parameters sourcePos BlockPos targetPos BlockPos GetColorMapData(Block, int, int, int) ColorMapData GetColorMapData(Block block, int posX, int posY, int posZ) Parameters block Block posX int posY int posZ int Returns ColorMapData GetOrCreateDimension(int, Vec3d) IMiniDimension GetOrCreateDimension(int dimId, Vec3d pos) Parameters dimId int pos Vec3d Returns IMiniDimension IncurBlockDamage(BlockSelection, EnumTool?, float) Same effect as when player left-click breaks a block, but will not cause actual breakage of the block void IncurBlockDamage(BlockSelection blockSelection, EnumTool? withTool, float damage) Parameters blockSelection BlockSelection withTool EnumTool? damage float LoadSound(SoundParams) Loads a sounds without playing it. Use to individually control when to play/stop. Might want to set DisposeOnFinish to false but then you have to dispose it yourself. ILoadedSound LoadSound(SoundParams param) Parameters param SoundParams Returns ILoadedSound PlaySoundAtAndGetDuration(AssetLocation, double, double, double, IPlayer, bool, float, float) Exactly like PlaySoundAt except that it returns the duration of the played sound. (We don't want to change the method signature of PlaySoundAt for API mod breakage reasons) int PlaySoundAtAndGetDuration(AssetLocation sound, double x, double y, double z, IPlayer ignorePlayerUid = null, bool randomizePitch = true, float range = 32, float volume = 1) Parameters sound AssetLocation x double y double z double ignorePlayerUid IPlayer randomizePitch bool range float volume float Returns int ReduceCameraShake(float) void ReduceCameraShake(float amount) Parameters amount float SetBlocksPreviewDimension(int) void SetBlocksPreviewDimension(int dimId) Parameters dimId int SetCameraShake(float) void SetCameraShake(float strengh) Parameters strengh float SetChunkColumnVisible(int, int, int) Does exactly what it says on the tin! void SetChunkColumnVisible(int cx, int cz, int dimension) Parameters cx int cz int dimension int TryAttackEntity(EntitySelection) Makes an attempt to attack a particular entity. void TryAttackEntity(EntitySelection sele) Parameters sele EntitySelection TryGetMiniDimension(Vec3i, out IMiniDimension) bool TryGetMiniDimension(Vec3i origin, out IMiniDimension dimension) Parameters origin Vec3i dimension IMiniDimension Returns bool"
  },
  "api/Vintagestory.API.Client.IColorPresets.html": {
    "href": "api/Vintagestory.API.Client.IColorPresets.html",
    "title": "Interface IColorPresets | VintageStory API",
    "keywords": "Interface IColorPresets Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Facilitates the Accessibility tab wireframe colors setting. Offers three preset color options, \"Default\", \"Preset2\" and \"Preset3\". The selection between these three options is chosen by the ClientSettings int value \"guiColorsPreset\". Within these presets, individual color values are stored by string key. public interface IColorPresets Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetColor(string) Called to fetch a color value from the currently selected preset colors int GetColor(string key) Parameters key string Returns int Initialize(IAsset) Mods (e.g. VSSurvivalMod) can call this to insert into the presets their configured color keys and values, which will be specific to mod content void Initialize(IAsset asset) Parameters asset IAsset OnUpdateSetting() To be called when the ClientSetting \"guiColorsPreset\" is changed void OnUpdateSetting()"
  },
  "api/Vintagestory.API.Client.ICoreClientAPI.html": {
    "href": "api/Vintagestory.API.Client.ICoreClientAPI.html",
    "title": "Interface ICoreClientAPI | VintageStory API",
    "keywords": "Interface ICoreClientAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The core api implemented by the client. The main interface for accessing the client. Contains all sub components and some miscellaneous methods. public interface ICoreClientAPI : ICoreAPI, ICoreAPICommon Inherited Members ICoreAPI.Logger ICoreAPI.CmdlArguments ICoreAPI.ChatCommands ICoreAPI.Side ICoreAPI.ClassRegistry ICoreAPI.Assets ICoreAPI.ModLoader ICoreAPI.TagRegistry ICoreAPI.RegisterEntityClass(string, EntityProperties) ICoreAPICommon.RegisterRecipeRegistry<T>(string) ICoreAPICommon.RegisterColorMap(ColorMap) ICoreAPICommon.RegisterEntity(string, Type) ICoreAPICommon.RegisterEntityBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockClass(string, Type) ICoreAPICommon.RegisterCropBehavior(string, Type) ICoreAPICommon.RegisterBlockEntityClass(string, Type) ICoreAPICommon.RegisterItemClass(string, Type) ICoreAPICommon.RegisterCollectibleBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockEntityBehaviorClass(string, Type) ICoreAPICommon.RegisterMountable(string, GetMountableDelegate) ICoreAPICommon.ObjectCache ICoreAPICommon.DataBasePath ICoreAPICommon.GetOrCreateDataPath(string) ICoreAPICommon.StoreModConfig<T>(T, string) ICoreAPICommon.StoreModConfig(JsonObject, string) ICoreAPICommon.LoadModConfig<T>(string) ICoreAPICommon.LoadModConfig(string) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) VtmlUtilApiAdditions.RegisterVtmlTagConverter(ICoreAPI, string, Tag2RichTextDelegate) Properties Ambient API Component to control the clients ambient values IAmbientManager Ambient { get; } Property Value IAmbientManager BlockTextureAtlas API for the Block Texture Atlas IBlockTextureAtlasAPI BlockTextureAtlas { get; } Property Value IBlockTextureAtlasAPI ColorPreset Fetch color configs, used for accessibility e.g. for knapping wireframe gridlines IColorPresets ColorPreset { get; } Property Value IColorPresets CurrentMusicTrack Returns the currently playing music track, if any is playing IMusicTrack CurrentMusicTrack { get; } Property Value IMusicTrack ElapsedMilliseconds Amount of milliseconds ellapsed since client startup long ElapsedMilliseconds { get; } Property Value long EntityTextureAtlas API for the Entity Texture Atlas ITextureAtlasAPI EntityTextureAtlas { get; } Property Value ITextureAtlasAPI Event API Component for registering to various Events IClientEventAPI Event { get; } Property Value IClientEventAPI Forms Platform independent ui methods and features. IXPlatformInterface Forms { get; } Property Value IXPlatformInterface Gui API for GUI Related methods IGuiAPI Gui { get; } Property Value IGuiAPI HideGuis If true, the player is in gui-less mode (through the F4 key) bool HideGuis { get; } Property Value bool InWorldEllapsedMilliseconds Amount of milliseconds ellapsed while in a running game that is not paused long InWorldEllapsedMilliseconds { get; } Property Value long Input API for Mouse / Keyboard input related things IInputAPI Input { get; } Property Value IInputAPI IsGamePaused True if the game is currently paused (only available in singleplayer) bool IsGamePaused { get; } Property Value bool IsShuttingDown True if the client is currently in the process of exiting bool IsShuttingDown { get; } Property Value bool IsSinglePlayer True if this is a singleplayer session bool IsSinglePlayer { get; } Property Value bool ItemTextureAtlas API for the Item Texture Atlas IItemTextureAtlasAPI ItemTextureAtlas { get; } Property Value IItemTextureAtlasAPI LinkProtocols Add your own link protocol here if you want to implement a custom protocol. E.g. image://url-to-picture Dictionary<string, Action<LinkTextComponent>> LinkProtocols { get; } Property Value Dictionary<string, Action<LinkTextComponent>> MacroManager Api to the client side macros system IMacroManager MacroManager { get; } Property Value IMacroManager Network API for doing sending/receiving network packets IClientNetworkAPI Network { get; } Property Value IClientNetworkAPI OpenedGuis Active GUI objects. IEnumerable<object> OpenedGuis { get; } Property Value IEnumerable<object> OpenedToLan bool OpenedToLan { get; } Property Value bool PlayerReadyFired True if all SendPlayerNowReady() was sent, signalling the player is now ready (called by the character selector upon submit) bool PlayerReadyFired { get; } Property Value bool Render API for Rendering stuff onto the screen using OpenGL IRenderAPI Render { get; } Property Value IRenderAPI Settings The clients game settings as stored in the clientsettings.json ISettings Settings { get; } Property Value ISettings Shader API for Rendering stuff onto the screen using OpenGL IShaderAPI Shader { get; } Property Value IShaderAPI TagConverters Add your own rich text elements here. Your will need to convert a VTML tag into a RichTextComponentBase element. Dictionary<string, Tag2RichTextDelegate> TagConverters { get; } Property Value Dictionary<string, Tag2RichTextDelegate> Tesselator API for Meshing in the Mainthread. Thread safe. ITesselatorAPI Tesselator { get; } Property Value ITesselatorAPI TesselatorManager Holds the default meshes of all blocks ITesselatorManager TesselatorManager { get; } Property Value ITesselatorManager World API for accessing anything in the game world IClientWorldAccessor World { get; } Property Value IClientWorldAccessor Methods PauseGame(bool) void PauseGame(bool paused) Parameters paused bool RegisterCommand(string, string, string, ClientChatCommandDelegate) Registers a chat command [Obsolete(\"Use ChatCommand subapi instead\")] bool RegisterCommand(string command, string descriptionMsg, string syntaxMsg, ClientChatCommandDelegate handler) Parameters command string descriptionMsg string syntaxMsg string handler ClientChatCommandDelegate Returns bool RegisterCommand(ClientChatCommand) Registers a chat command [Obsolete(\"Use ChatCommand subapi instead\")] bool RegisterCommand(ClientChatCommand chatcommand) Parameters chatcommand ClientChatCommand Returns bool RegisterEntityRendererClass(string, Type) Registers an entity renderer for given entity void RegisterEntityRendererClass(string className, Type rendererType) Parameters className string rendererType Type RegisterLinkProtocol(string, Action<LinkTextComponent>) Register a link protocol handler void RegisterLinkProtocol(string protocolname, Action<LinkTextComponent> onLinkClicked) Parameters protocolname string onLinkClicked Action<LinkTextComponent> SendChatMessage(string, int, string) Sends a chat message to the server void SendChatMessage(string message, int groupId, string data = null) Parameters message string groupId int data string SendChatMessage(string, string) Sends a chat message to the server in the players currently active channel void SendChatMessage(string message, string data = null) Parameters message string data string ShowChatMessage(string) Shows a client side only chat message in the current chat channel. Uses the same code paths a server => client message takes. Does not execute client commands. void ShowChatMessage(string message) Parameters message string StartTrack(MusicTrack, float, EnumSoundType, bool) void StartTrack(MusicTrack track, float priority, EnumSoundType soundType, bool playnow = true) Parameters track MusicTrack priority float soundType EnumSoundType playnow bool StartTrack(AssetLocation, float, EnumSoundType, Action<ILoadedSound>) Tells the music engine to load and immediately start given track once loaded, if the priority is higher than the currently playing track. May also be stopped while playing if another track with a higher priority is started. If you supply an onLoaded method the track is not started immediately and you can manually start it at any given time by calling sound.Start() MusicTrack StartTrack(AssetLocation soundLocation, float priority, EnumSoundType soundType, Action<ILoadedSound> onLoaded = null) Parameters soundLocation AssetLocation priority float soundType EnumSoundType onLoaded Action<ILoadedSound> Returns MusicTrack TriggerChatMessage(string) Same as ShowChatMessage(string) but will also execute client commands if they are prefixed with a dot. void TriggerChatMessage(string message) Parameters message string TriggerIngameDiscovery(object, string, string) Triggers a discovery event. HudDiscoveryMessage registers to this event and fades in/out a \"discovery message\" on the players screen void TriggerIngameDiscovery(object sender, string errorCode, string text) Parameters sender object errorCode string text string TriggerIngameError(object, string, string) Triggers an in-game-error event. HudIngameError registers to this event and shows a vibrating red text on the players screen void TriggerIngameError(object sender, string errorCode, string text) Parameters sender object errorCode string text string"
  },
  "api/Vintagestory.API.Client.ICustomInteractionHelpPositioning.html": {
    "href": "api/Vintagestory.API.Client.ICustomInteractionHelpPositioning.html",
    "title": "Interface ICustomInteractionHelpPositioning | VintageStory API",
    "keywords": "Interface ICustomInteractionHelpPositioning Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface ICustomInteractionHelpPositioning Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties TransparentCenter bool TransparentCenter { get; } Property Value bool Methods GetInteractionHelpPosition() Vec3d GetInteractionHelpPosition() Returns Vec3d"
  },
  "api/Vintagestory.API.Client.IGuiAPI.html": {
    "href": "api/Vintagestory.API.Client.IGuiAPI.html",
    "title": "Interface IGuiAPI | VintageStory API",
    "keywords": "Interface IGuiAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IGuiAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Icons A utility class that contains a bunch of hardcoded icons IconUtil Icons { get; } Property Value IconUtil LoadedGuis List of all registered guis List<GuiDialog> LoadedGuis { get; } Property Value List<GuiDialog> OpenedGuis List of all currently opened guis List<GuiDialog> OpenedGuis { get; } Property Value List<GuiDialog> QuadMeshRef Just a default gpu-uploaded quad for 2d texture rendering, for your convenience MeshRef QuadMeshRef { get; } Property Value MeshRef Text A utlity class that helps draw text TextDrawUtil Text { get; } Property Value TextDrawUtil TextTexture A utility class that does text texture generation for you TextTextureUtil TextTexture { get; } Property Value TextTextureUtil WindowBounds Returns a ElementBounds that is always the size of the game window ElementBounds WindowBounds { get; } Property Value ElementBounds Methods CreateCompo(string, ElementBounds) Creates a new gui composition GuiComposer CreateCompo(string dialogName, ElementBounds bounds) Parameters dialogName string bounds ElementBounds Returns GuiComposer DeleteTexture(int) Removes given texture from graphics card memory void DeleteTexture(int textureid) Parameters textureid int DrawSvg(IAsset, ImageSurface, Matrix, int, int, int, int, int?) void DrawSvg(IAsset svgAsset, ImageSurface intoSurface, Matrix transform, int posx, int posy, int width = 0, int height = 0, int? color = 0) Parameters svgAsset IAsset intoSurface ImageSurface transform Matrix posx int posy int width int height int color int? DrawSvg(IAsset, ImageSurface, int, int, int, int, int?) void DrawSvg(IAsset svgAsset, ImageSurface intoSurface, int posx, int posy, int width = 0, int height = 0, int? color = 0) Parameters svgAsset IAsset intoSurface ImageSurface posx int posy int width int height int color int? GetDialogBoundsInArea(EnumDialogArea) If there is a currenly opened dialog or hud element, the method will return the bounds occuppying that area, otherwise null List<ElementBounds> GetDialogBoundsInArea(EnumDialogArea area) Parameters area EnumDialogArea Returns List<ElementBounds> GetDialogPosition(string) Retrieve the saved dialog position from settings Vec2i GetDialogPosition(string key) Parameters key string Returns Vec2i LoadCairoTexture(ImageSurface, bool) Load the contents of a cairo surface into a opengl texture. Returns the texture id int LoadCairoTexture(ImageSurface surface, bool linearMag) Parameters surface ImageSurface linearMag bool Returns int LoadOrUpdateCairoTexture(ImageSurface, bool, ref LoadedTexture) Load the contents of a cairo surface into a opengl texture. Re-uses the supplied texture exists and the size is correct. Otherwise deletes the texture and regenerates it. void LoadOrUpdateCairoTexture(ImageSurface surface, bool linearMag, ref LoadedTexture intoTexture) Parameters surface ImageSurface linearMag bool intoTexture LoadedTexture LoadSvg(AssetLocation, int, int, int, int, int?) Loads an external .svg file into a texture. Will return null if the file is not found LoadedTexture LoadSvg(AssetLocation loc, int textureWidth, int textureHeight, int width = 0, int height = 0, int? color = 0) Parameters loc AssetLocation textureWidth int textureHeight int width int height int color int? Returns LoadedTexture LoadSvgWithPadding(AssetLocation, int, int, int, int?) Loads an external .svg file into a texture. Will return null if the file is not found LoadedTexture LoadSvgWithPadding(AssetLocation loc, int textureWidth, int textureHeight, int padding = 0, int? color = 0) Parameters loc AssetLocation textureWidth int textureHeight int padding int color int? Returns LoadedTexture OpenLink(string) Opens up a confirm dialog asking the player if he wants to open an external link void OpenLink(string href) Parameters href string PlaySound(string, bool, float) Plays a sound, non location specific void PlaySound(string soundname, bool randomizePitch = false, float volume = 1) Parameters soundname string The name of the sound randomizePitch bool If true, the pitch is slightly randomized each time volume float PlaySound(AssetLocation, bool, float) Plays a sound, non location specific. void PlaySound(AssetLocation soundname, bool randomizePitch = false, float volume = 1) Parameters soundname AssetLocation The name of the sound randomizePitch bool If true, the pitch is slightly randomized each time volume float RegisterDialog(params GuiDialog[]) Register given dialog(s) to the gui/input event listening chain. You only need to call this if your dialog has to listen to events even while closed. The method GuiDialog.TryOpen() also does the register if not registered already. void RegisterDialog(params GuiDialog[] dialogs) Parameters dialogs GuiDialog[] RequestFocus(GuiDialog) Requests the given GUI to be given focus. void RequestFocus(GuiDialog guiDialog) Parameters guiDialog GuiDialog The dialogue wanting attention. SetDialogPosition(string, Vec2i) Remember the dialog position for given dialog key void SetDialogPosition(string key, Vec2i pos) Parameters key string pos Vec2i TriggerDialogClosed(GuiDialog) Triggers the closing of a dialogue. void TriggerDialogClosed(GuiDialog guiDialog) Parameters guiDialog GuiDialog The dialogue to be closed. TriggerDialogOpened(GuiDialog) Triggers the opening of a dialogue. void TriggerDialogOpened(GuiDialog guiDialog) Parameters guiDialog GuiDialog The dialogue to be opened."
  },
  "api/Vintagestory.API.Client.IGuiComposerManager.html": {
    "href": "api/Vintagestory.API.Client.IGuiComposerManager.html",
    "title": "Interface IGuiComposerManager | VintageStory API",
    "keywords": "Interface IGuiComposerManager Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IGuiComposerManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Composers Dictionary<string, GuiComposer> Composers { get; } Property Value Dictionary<string, GuiComposer> Methods UnfocusElements() void UnfocusElements()"
  },
  "api/Vintagestory.API.Client.IGuiElementCell.html": {
    "href": "api/Vintagestory.API.Client.IGuiElementCell.html",
    "title": "Interface IGuiElementCell | VintageStory API",
    "keywords": "Interface IGuiElementCell Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IGuiElementCell : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Bounds The bounds of the cell. ElementBounds Bounds { get; } Property Value ElementBounds InsideClipBounds ElementBounds InsideClipBounds { get; set; } Property Value ElementBounds MouseOverCursor string MouseOverCursor { get; } Property Value string Methods OnMouseDownOnElement(MouseEvent, int) void OnMouseDownOnElement(MouseEvent args, int elementIndex) Parameters args MouseEvent elementIndex int OnMouseMoveOnElement(MouseEvent, int) void OnMouseMoveOnElement(MouseEvent args, int elementIndex) Parameters args MouseEvent elementIndex int OnMouseUpOnElement(MouseEvent, int) void OnMouseUpOnElement(MouseEvent args, int elementIndex) Parameters args MouseEvent elementIndex int OnRenderInteractiveElements(ICoreClientAPI, float) The event fired when the cell is rendered. void OnRenderInteractiveElements(ICoreClientAPI api, float deltaTime) Parameters api ICoreClientAPI The Client API deltaTime float The change in time. UpdateCellHeight() Called when the cell is modified and needs to be updated. void UpdateCellHeight()"
  },
  "api/Vintagestory.API.Client.IInputAPI.html": {
    "href": "api/Vintagestory.API.Client.IInputAPI.html",
    "title": "Interface IInputAPI | VintageStory API",
    "keywords": "Interface IInputAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll This interface manages the inputs of the player and is used mostly on the client side. public interface IInputAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ClipboardText Get set clipboard text string ClipboardText { get; set; } Property Value string HotKeys Returns a list of all currently registered hotkeys. OrderedDictionary<string, HotKey> HotKeys { get; } Property Value OrderedDictionary<string, HotKey> InWorldMouseButton The current mouse button state outside of dialogs / clicked inside the game world MouseButtonState InWorldMouseButton { get; } Property Value MouseButtonState KeyboardKeyState The current keyboard key states that were not handled by a dialog or other client systems (exception: hotkeys), use the GlKeys enum to get the array index of a key. bool[] KeyboardKeyState { get; } Property Value bool[] KeyboardKeyStateRaw The current keyboard key states, use the GlKeys enum to get the index of an array key. bool[] KeyboardKeyStateRaw { get; } Property Value bool[] MouseButton The current mouse button state MouseButtonState MouseButton { get; } Property Value MouseButtonState MouseGrabbed True if the mouse cursor is currently grabbed and not visible. (Such as while controlling the character's view in first person.) bool MouseGrabbed { get; } Property Value bool MousePitch When controlling the camera, this is the camera pitch determined by the game engine float MousePitch { get; set; } Property Value float MouseWorldInteractAnyway Gives the player the ability to still interact with the world even if a gui dialog is opened bool MouseWorldInteractAnyway { get; set; } Property Value bool MouseX The current x-position of the mouse, relative to the upper left corner of the game window int MouseX { get; } Property Value int MouseY The current y-position of the mouse, relative to the upper left corner of the game window int MouseY { get; } Property Value int MouseYaw When controlling the camera, this is the camera yaw determined by the game engine float MouseYaw { get; set; } Property Value float Methods AddHotkeyListener(OnHotKeyDelegate) void AddHotkeyListener(OnHotKeyDelegate handler) Parameters handler OnHotKeyDelegate GetHotKeyByCode(string) Gets the hotkey by the given hotkey code. HotKey GetHotKeyByCode(string toggleKeyCombinationCode) Parameters toggleKeyCombinationCode string the key combination code. Returns HotKey The registered hotkey. IsHotKeyPressed(string) bool IsHotKeyPressed(string hotKeyCode) Parameters hotKeyCode string Returns bool IsHotKeyPressed(HotKey) bool IsHotKeyPressed(HotKey hotKey) Parameters hotKey HotKey Returns bool RegisterHotKey(string, string, GlKeys, HotkeyType, bool, bool, bool) Registers a hot key with given default key combination, the player will be able change these in the controls. Supplied hotkeyCode can than be used to register a hotkey handler. void RegisterHotKey(string hotkeyCode, string name, GlKeys key, HotkeyType type = HotkeyType.CharacterControls, bool altPressed = false, bool ctrlPressed = false, bool shiftPressed = false) Parameters hotkeyCode string name string key GlKeys type HotkeyType altPressed bool ctrlPressed bool shiftPressed bool RegisterHotKeyFirst(string, string, GlKeys, HotkeyType, bool, bool, bool) Same as RegisterHotKey except it inserts it at the start of the list void RegisterHotKeyFirst(string hotkeyCode, string name, GlKeys key, HotkeyType type = HotkeyType.CharacterControls, bool altPressed = false, bool ctrlPressed = false, bool shiftPressed = false) Parameters hotkeyCode string name string key GlKeys type HotkeyType altPressed bool ctrlPressed bool shiftPressed bool SetHotKeyHandler(string, ActionConsumable<KeyCombination>) Will call the handler if given hotkey has been pressed. Removes the previously assigned handler. void SetHotKeyHandler(string hotkeyCode, ActionConsumable<KeyCombination> handler) Parameters hotkeyCode string handler ActionConsumable<KeyCombination> TriggerOnMouseClickSlot(ItemSlot) Handles the event when the mouse clicks on a given item slot. void TriggerOnMouseClickSlot(ItemSlot itemSlot) Parameters itemSlot ItemSlot The slot of the item Remarks Part of a group of things that will be moved to an event bus at some point. TriggerOnMouseEnterSlot(ItemSlot) Handles the event when the mouse enters the bounding box of the given item slot. void TriggerOnMouseEnterSlot(ItemSlot slot) Parameters slot ItemSlot The slot of the item. Remarks Part of a group of things that will be moved to an event bus at some point. TriggerOnMouseLeaveSlot(ItemSlot) Handles the event when the mouse leaves the bounding box of the given item slot. void TriggerOnMouseLeaveSlot(ItemSlot itemSlot) Parameters itemSlot ItemSlot The slot of the item Remarks Part of a group of things that will be moved to an event bus at some point. Events InWorldAction Triggered when the player attempts to trigger an action, such as walking forward or sprinting event OnEntityAction InWorldAction Event Type OnEntityAction"
  },
  "api/Vintagestory.API.Client.IItemTextureAtlasAPI.html": {
    "href": "api/Vintagestory.API.Client.IItemTextureAtlasAPI.html",
    "title": "Interface IItemTextureAtlasAPI | VintageStory API",
    "keywords": "Interface IItemTextureAtlasAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Item texture Atlas. public interface IItemTextureAtlasAPI : ITextureAtlasAPI Inherited Members ITextureAtlasAPI.this[AssetLocation] ITextureAtlasAPI.UnknownTexturePosition ITextureAtlasAPI.Size ITextureAtlasAPI.SubPixelPaddingX ITextureAtlasAPI.SubPixelPaddingY ITextureAtlasAPI.Positions ITextureAtlasAPI.AtlasTextures ITextureAtlasAPI.AllocateTextureSpace(int, int, out int, out TextureAtlasPosition, AssetLocationAndSource) ITextureAtlasAPI.InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) ITextureAtlasAPI.InsertTexture(byte[], out int, out TextureAtlasPosition, float) ITextureAtlasAPI.LoadCompositeBitmap(AssetLocationAndSource) ITextureAtlasAPI.GetOrInsertTexture(AssetLocationAndSource, out int, out TextureAtlasPosition, CreateTextureDelegate, float) ITextureAtlasAPI.GetOrInsertTexture(AssetLocation, out int, out TextureAtlasPosition, CreateTextureDelegate, float) ITextureAtlasAPI.InsertTextureCached(AssetLocation, IBitmap, out int, out TextureAtlasPosition, float) ITextureAtlasAPI.InsertTextureCached(AssetLocation, byte[], out int, out TextureAtlasPosition, float) ITextureAtlasAPI.GetOrInsertTexture(CompositeTexture, out int, out TextureAtlasPosition, float) ITextureAtlasAPI.FreeTextureSpace(int) ITextureAtlasAPI.GetRandomColor(int) ITextureAtlasAPI.RegenMipMaps(int) ITextureAtlasAPI.GetRandomColor(int, int) ITextureAtlasAPI.GetRandomColor(TextureAtlasPosition, int) ITextureAtlasAPI.GetRandomColors(TextureAtlasPosition) ITextureAtlasAPI.GetAverageColor(int) ITextureAtlasAPI.RenderTextureIntoAtlas(int, LoadedTexture, float, float, float, float, float, float, float) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetPosition(Item, string, bool) Returns the position in the item texture atlas of given item. For items that don't use custom shapes you don't have to supply the textureName TextureAtlasPosition GetPosition(Item item, string textureName = null, bool returnNullWhenMissing = false) Parameters item Item textureName string returnNullWhenMissing bool Returns TextureAtlasPosition"
  },
  "api/Vintagestory.API.Client.ILoadedSound.html": {
    "href": "api/Vintagestory.API.Client.ILoadedSound.html",
    "title": "Interface ILoadedSound | VintageStory API",
    "keywords": "Interface ILoadedSound Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Represents a loaded game sound public interface ILoadedSound : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Channels Amount of audio channels this sound has int Channels { get; } Property Value int HasStopped Is the sound finished with playing? (false when only paused) bool HasStopped { get; } Property Value bool IsDisposed Is the sound disposed of? bool IsDisposed { get; } Property Value bool IsFadingIn True if the track is fading to a higher volume bool IsFadingIn { get; } Property Value bool IsFadingOut True if the track is fading to a lower volume bool IsFadingOut { get; } Property Value bool IsPaused bool IsPaused { get; } Property Value bool IsPlaying Is sound currently playing bool IsPlaying { get; } Property Value bool IsReady bool IsReady { get; } Property Value bool Params The params the sound was created with. SoundParams Params { get; } Property Value SoundParams PlaybackPosition Get the current playback position or set it (in seconds) float PlaybackPosition { get; set; } Property Value float SoundLengthSeconds Length of the sound in seconds float SoundLengthSeconds { get; } Property Value float Methods FadeIn(float, Action<ILoadedSound>) Causes the sound to fade in void FadeIn(float seconds, Action<ILoadedSound> onFadedIn) Parameters seconds float onFadedIn Action<ILoadedSound> Called when the fade in has completed. If in the meantime another FadeXXX call has been made, the method is not called FadeOut(float, Action<ILoadedSound>) Causes the sound to fade out void FadeOut(float seconds, Action<ILoadedSound> onFadedOut) Parameters seconds float onFadedOut Action<ILoadedSound> Called when the fade out has completed. If in the meantime another FadeXXX call has been made, the method is not called FadeOutAndStop(float) Causes the sound to fade out and stop the track void FadeOutAndStop(float seconds) Parameters seconds float FadeTo(double, float, Action<ILoadedSound>) Fades the sounds volumne to given value void FadeTo(double newVolume, float duration, Action<ILoadedSound> onFaded) Parameters newVolume double duration float onFaded Action<ILoadedSound> Called when the fade has completed. If in the meantime another FadeXXX call has been made, the method is not called HasReverbStopped(long) bool HasReverbStopped(long elapsedMilliseconds) Parameters elapsedMilliseconds long Returns bool Pause() Pauses the sound void Pause() SetLooping(bool) void SetLooping(bool on) Parameters on bool SetLowPassfiltering(float) void SetLowPassfiltering(float value) Parameters value float SetPitch(float) Allows you to modify the pitch of the sound. May also be called while the sound is currently playing. void SetPitch(float val) Parameters val float SetPitchOffset(float) Allows you to modify the pitch of the sound. May also be called while the sound is currently playing. This value is added together with the normal pitch level. This method is currently used to distort sound during low temporal stability void SetPitchOffset(float val) Parameters val float SetPosition(float, float, float) void SetPosition(float x, float y, float z) Parameters x float y float z float SetPosition(Vec3f) Sets the position from where the sound is originating from void SetPosition(Vec3f position) Parameters position Vec3f SetReverb(float) void SetReverb(float reverbDecayTime) Parameters reverbDecayTime float SetVolume() Sets the current volumne again. Use this to update the sounds volumne after the global sound level has changed void SetVolume() SetVolume(float) Allows you to modify the volumne of the sound. May also be called while the sound is currently playing. void SetVolume(float val) Parameters val float Start() Starts the sound void Start() Stop() Stops the sound void Stop() Toggle(bool) True for Starting, False for Stopping the sound void Toggle(bool on) Parameters on bool"
  },
  "api/Vintagestory.API.Client.IMacroBase.html": {
    "href": "api/Vintagestory.API.Client.IMacroBase.html",
    "title": "Interface IMacroBase | VintageStory API",
    "keywords": "Interface IMacroBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IMacroBase Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Code string Code { get; set; } Property Value string Commands string[] Commands { get; set; } Property Value string[] Index int Index { get; set; } Property Value int KeyCombination KeyCombination KeyCombination { get; set; } Property Value KeyCombination Name string Name { get; set; } Property Value string iconTexture LoadedTexture iconTexture { get; set; } Property Value LoadedTexture Methods GenTexture(ICoreClientAPI, int) void GenTexture(ICoreClientAPI capi, int size) Parameters capi ICoreClientAPI size int"
  },
  "api/Vintagestory.API.Client.IMacroManager.html": {
    "href": "api/Vintagestory.API.Client.IMacroManager.html",
    "title": "Interface IMacroManager | VintageStory API",
    "keywords": "Interface IMacroManager Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IMacroManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties MacrosByIndex SortedDictionary<int, IMacroBase> MacrosByIndex { get; set; } Property Value SortedDictionary<int, IMacroBase> Methods DeleteMacro(int) void DeleteMacro(int macroIndex) Parameters macroIndex int LoadMacros() void LoadMacros() RunMacro(int, IClientWorldAccessor) bool RunMacro(int macroIndex, IClientWorldAccessor world) Parameters macroIndex int world IClientWorldAccessor Returns bool SaveMacro(int) bool SaveMacro(int macroIndex) Parameters macroIndex int Returns bool SetMacro(int, IMacroBase) void SetMacro(int macroIndex, IMacroBase macro) Parameters macroIndex int macro IMacroBase"
  },
  "api/Vintagestory.API.Client.IMeshPoolSupplier.html": {
    "href": "api/Vintagestory.API.Client.IMeshPoolSupplier.html",
    "title": "Interface IMeshPoolSupplier | VintageStory API",
    "keywords": "Interface IMeshPoolSupplier Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IMeshPoolSupplier Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetMeshPoolForPass(int, EnumChunkRenderPass, int) Gets a mesh pool supplier for the given render pass. MeshData GetMeshPoolForPass(int textureid, EnumChunkRenderPass forRenderPass, int lodLevel) Parameters textureid int forRenderPass EnumChunkRenderPass The given render pass. lodLevel int Returns MeshData The mesh data for the render pass."
  },
  "api/Vintagestory.API.Client.IMetaBlock.html": {
    "href": "api/Vintagestory.API.Client.IMetaBlock.html",
    "title": "Interface IMetaBlock | VintageStory API",
    "keywords": "Interface IMetaBlock Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IMetaBlock Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods IsSelectable(BlockPos) bool IsSelectable(BlockPos pos) Parameters pos BlockPos Returns bool"
  },
  "api/Vintagestory.API.Client.IMusicEngine.html": {
    "href": "api/Vintagestory.API.Client.IMusicEngine.html",
    "title": "Interface IMusicEngine | VintageStory API",
    "keywords": "Interface IMusicEngine Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IMusicEngine Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties CurrentTrack The currently playing track IMusicTrack CurrentTrack { get; } Property Value IMusicTrack LastPlayedTrack The track that played before IMusicTrack LastPlayedTrack { get; } Property Value IMusicTrack MillisecondsSinceLastTrack The total passed milliseconds since game start at the point where the last track stopped playing long MillisecondsSinceLastTrack { get; } Property Value long Methods LoadTrack(AssetLocation, Action<ILoadedSound>, float, float) Loads the sound into memory and plays the track. Slow call. Encapsulate it into ThreadPool.QueueUserWorkItem() to not block the main thread void LoadTrack(AssetLocation location, Action<ILoadedSound> onLoaded, float volume = 1, float pitch = 1) Parameters location AssetLocation onLoaded Action<ILoadedSound> volume float pitch float StopTrack(IMusicTrack) void StopTrack(IMusicTrack musicTrack) Parameters musicTrack IMusicTrack"
  },
  "api/Vintagestory.API.Client.IMusicTrack.html": {
    "href": "api/Vintagestory.API.Client.IMusicTrack.html",
    "title": "Interface IMusicTrack | VintageStory API",
    "keywords": "Interface IMusicTrack Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IMusicTrack Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties IsActive Is the track active? bool IsActive { get; } Property Value bool Name The name of the track string Name { get; } Property Value string PositionString string PositionString { get; } Property Value string Priority The priority of the track. A higher priority will cancel active tracks. float Priority { get; } Property Value float StartPriority The start priority of the track. A higher priority will leave active tracks playing. float StartPriority { get; } Property Value float Methods BeginPlay(TrackedPlayerProperties) Begin playing the current track. void BeginPlay(TrackedPlayerProperties props) Parameters props TrackedPlayerProperties Player Properties BeginSort() Called before sorting by start priority happens void BeginSort() ContinuePlay(float, TrackedPlayerProperties) Is it cool for the current track to continue playing? bool ContinuePlay(float dt, TrackedPlayerProperties props) Parameters dt float Delta Time/Change in time. props TrackedPlayerProperties Track properties. Returns bool Cool or not cool? FadeOut(float, Action) Called when the track to interupted or when Update() returned false. So called every time the tracked ended or has to end void FadeOut(float seconds, Action onFadedOut = null) Parameters seconds float onFadedOut Action FastForward(float) void FastForward(float seconds) Parameters seconds float Initialize(IAssetManager, ICoreClientAPI, IMusicEngine) Initialization of the Music Track. void Initialize(IAssetManager assetManager, ICoreClientAPI capi, IMusicEngine musicEngine) Parameters assetManager IAssetManager the global Asset Manager capi ICoreClientAPI The Core Client API musicEngine IMusicEngine ShouldPlay(TrackedPlayerProperties, ClimateCondition, BlockPos) Should this current track play? bool ShouldPlay(TrackedPlayerProperties props, ClimateCondition conds, BlockPos pos) Parameters props TrackedPlayerProperties Player Properties conds ClimateCondition pos BlockPos Returns bool Should we play the current track? UpdateVolume() Updates the volume on the current track. void UpdateVolume()"
  },
  "api/Vintagestory.API.Client.INetworkChannel.html": {
    "href": "api/Vintagestory.API.Client.INetworkChannel.html",
    "title": "Interface INetworkChannel | VintageStory API",
    "keywords": "Interface INetworkChannel Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface INetworkChannel Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ChannelName The channel name this channel was registered with string ChannelName { get; } Property Value string Methods RegisterMessageType(Type) Registers a handler for when you send a packet with given messageId INetworkChannel RegisterMessageType(Type type) Parameters type Type Returns INetworkChannel RegisterMessageType<T>() Registers a handler for when you send a packet with given messageId INetworkChannel RegisterMessageType<T>() Returns INetworkChannel Type Parameters T"
  },
  "api/Vintagestory.API.Client.IPointLight.html": {
    "href": "api/Vintagestory.API.Client.IPointLight.html",
    "title": "Interface IPointLight | VintageStory API",
    "keywords": "Interface IPointLight Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IPointLight Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Color Vec3f Color { get; } Property Value Vec3f Pos Vec3d Pos { get; } Property Value Vec3d"
  },
  "api/Vintagestory.API.Client.IRenderAPI.html": {
    "href": "api/Vintagestory.API.Client.IRenderAPI.html",
    "title": "Interface IRenderAPI | VintageStory API",
    "keywords": "Interface IRenderAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The main api component to assist you in rendering pretty stuff onto the screen public interface IRenderAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AmbientColor The current ambient color (e.g. will return a blue tint when player is under water) Vec3f AmbientColor { get; } Property Value Vec3f CameraMatrixOrigin Player camera matrix with player positioned at 0,0,0. You can use this matrix instead of CurrentModelviewMatrix for high precision rendering. double[] CameraMatrixOrigin { get; } Property Value double[] CameraMatrixOriginf Player camera matrix with player positioned at 0,0,0. You can use this matrix instead of CurrentModelviewMatrix for high precision rendering. float[] CameraMatrixOriginf { get; } Property Value float[] CameraOffset Can be used to offset the position of the player camera ModelTransform CameraOffset { get; } Property Value ModelTransform CameraStuck True if when in IFP mode the camera would end up inside blocks bool CameraStuck { get; } Property Value bool CameraType The camera type. EnumCameraMode CameraType { get; } Property Value EnumCameraMode CurrentActiveShader Gives you a reference to the currently active shader, or null if none is active right now IShaderProgram CurrentActiveShader { get; } Property Value IShaderProgram CurrentModelviewMatrix The current top most matrix in the model view matrix stack. float[] CurrentModelviewMatrix { get; } Property Value float[] CurrentProjectionMatrix The current top most matrix in the projection matrix stack float[] CurrentProjectionMatrix { get; } Property Value float[] CurrentRenderStage The render stage the engine is currently at EnumRenderStage CurrentRenderStage { get; } Property Value EnumRenderStage CurrentShadowProjectionMatrix The current projection matrix for shadow rendering (renders the scene from the viewpoint of the sun) float[] CurrentShadowProjectionMatrix { get; } Property Value float[] DecorativeFontName The name of the font used during this render (if it exists). [Obsolete(\"Please use ElementGeometrics.DecorativeFontName instead\")] string DecorativeFontName { get; } Property Value string DefaultFrustumCuller FrustumCulling DefaultFrustumCuller { get; } Property Value FrustumCulling FogColor The current fog color (e.g. will return a blue tint when player is under water) Vec4f FogColor { get; } Property Value Vec4f FogDensity Density of the current fog. Fog is calculated as followed in the shaders: clamp(fogMin + 1 - 1 / exp(gl_FragDepth * fogDensity), 0, 1) float FogDensity { get; } Property Value float FogMin Current minimum fog value float FogMin { get; } Property Value float FrameBuffer Set the current framebuffer FrameBufferRef FrameBuffer { set; } Property Value FrameBufferRef FrameBuffers List of all loaded frame buffers. To get the god rays frame buffer for exampple, do Framebuffers[(int)EnumFrameBuffer.GodRays] List<FrameBufferRef> FrameBuffers { get; } Property Value List<FrameBufferRef> FrameHeight Height of the primary render framebuffer int FrameHeight { get; } Property Value int FrameWidth Width of the primary render framebuffer int FrameWidth { get; } Property Value int LineWidth float LineWidth { set; } Property Value float MvMatrix The current modelview matrix stack StackMatrix4 MvMatrix { get; } Property Value StackMatrix4 PMatrix The current projection matrix stack StackMatrix4 PMatrix { get; } Property Value StackMatrix4 PerceptionEffects PerceptionEffects PerceptionEffects { get; } Property Value PerceptionEffects PerspectiveProjectionMat The default projection matrix used during perspective rendering. Is refreshed before EnumRenderStage.Opaque. Useful for doing projections in the Ortho stage via MatrixToolsd.Project() double[] PerspectiveProjectionMat { get; } Property Value double[] PerspectiveViewMat The default view matrix used during perspective rendering. Is refreshed before EnumRenderStage.Opaque. Useful for doing projections in the Ortho stage via MatrixToolsd.Project() double[] PerspectiveViewMat { get; } Property Value double[] ScissorStack Stack<ElementBounds> ScissorStack { get; } Property Value Stack<ElementBounds> ShaderUniforms A number of default shader uniforms DefaultShaderUniforms ShaderUniforms { get; } Property Value DefaultShaderUniforms StandardFontName The standard font used during this render (if it exists). [Obsolete(\"Please use ElementGeometrics.StandardFontName instead.\")] string StandardFontName { get; } Property Value string StandardShader Gives you a reference to the \"standard\" shader, a general purpose shader for normal shading work IStandardShaderProgram StandardShader { get; } Property Value IStandardShaderProgram TextureSize int TextureSize { get; } Property Value int UseSSBOs If true, chunk rendering will use SSBOs - a OpenGL 4.30+ feature - for higher performance in game version 1.21+ bool UseSSBOs { get; } Property Value bool WireframeDebugRender WireframeModes WireframeDebugRender { get; } Property Value WireframeModes Methods AddPointLight(IPointLight) Adds a dynamic light source to the scene. Will not be rendered if the current point light count exceeds max dynamic lights in the graphics settings void AddPointLight(IPointLight pointlight) Parameters pointlight IPointLight AllocateEmptyMesh(int, int, int, int, int, int, CustomMeshDataPartFloat, CustomMeshDataPartShort, CustomMeshDataPartByte, CustomMeshDataPartInt, EnumDrawMode, bool) Allocates memory on the graphics card. Can use UpdateMesh() to populate it with data. The custom mesh data parts may be null. Sizes are in bytes. MeshRef AllocateEmptyMesh(int xyzSize, int normalSize, int uvSize, int rgbaSize, int flagsSize, int indicesSize, CustomMeshDataPartFloat customFloats, CustomMeshDataPartShort customShorts, CustomMeshDataPartByte customBytes, CustomMeshDataPartInt customInts, EnumDrawMode drawMode = EnumDrawMode.Triangles, bool staticDraw = true) Parameters xyzSize int the squared size of the texture. normalSize int the size of the normals uvSize int the size of the UV map. rgbaSize int size of the RGBA colors. flagsSize int Size of the render flags. indicesSize int Size of the indices customFloats CustomMeshDataPartFloat Float values of the mesh customShorts CustomMeshDataPartShort customBytes CustomMeshDataPartByte Byte values of the mesh customInts CustomMeshDataPartInt Float values of the mesh drawMode EnumDrawMode The current draw mode staticDraw bool whether the draw should be static or dynamic. Returns MeshRef the reference to the mesh BindTexture2d(int) Binds given texture. For use with shaders - you should assign the texture directly though shader uniforms. void BindTexture2d(int textureid) Parameters textureid int The OpenGL Identifier ID for the target texture to bind. BitmapCreateFromPng(byte[]) Creates a bitmap from a given PNG. BitmapExternal BitmapCreateFromPng(byte[] pngdata) Parameters pngdata byte[] the PNG data passed in. Returns BitmapExternal A bitmap object. CheckGlError(string) If opengl debug mode is enabled and an opengl error is found this method will throw an exception. It is recommended to use this methods in a few spots during render code to track down rendering issues in time. void CheckGlError(string message = \"\") Parameters message string CreateFrameBuffer(LoadedTexture) FrameBufferRef CreateFrameBuffer(LoadedTexture intoTexture) Parameters intoTexture LoadedTexture Returns FrameBufferRef CreateUBO(IShaderProgram, int, string, int) UBORef CreateUBO(IShaderProgram shaderProgram, int bindingPoint, string blockName, int size) Parameters shaderProgram IShaderProgram bindingPoint int blockName string size int Returns UBORef DeleteMesh(MeshRef) Frees up the memory on the graphics card. Should always be called at the end of a meshes lifetime to prevent memory leaks. Equivalent to calling Dispose on the meshref itself void DeleteMesh(MeshRef vao) Parameters vao MeshRef DestroyFrameBuffer(FrameBufferRef) void DestroyFrameBuffer(FrameBufferRef fb) Parameters fb FrameBufferRef GLDeleteTexture(int) Deletes given texture void GLDeleteTexture(int textureId) Parameters textureId int the OpenGL Identifier for the target Texture. GLDepthMask(bool) Toggle writing to the depth buffer void GLDepthMask(bool on) Parameters on bool GLDisableDepthTest() Disables the Depth Test. void GLDisableDepthTest() GLEnableDepthTest() Enables the Depth Test. void GLEnableDepthTest() GetEngineShader(EnumShaderProgram) Gives you access to all of the vanilla shaders IShaderProgram GetEngineShader(EnumShaderProgram program) Parameters program EnumShaderProgram Returns IShaderProgram GetItemStackRenderInfo(ItemSlot, EnumItemRenderTarget, float) Returns you a render info object of given item stack. Can be used to render held items onto a creature. ItemRenderInfo GetItemStackRenderInfo(ItemSlot inSlot, EnumItemRenderTarget ground, float dt) Parameters inSlot ItemSlot ground EnumItemRenderTarget dt float Returns ItemRenderInfo GetOrLoadTexture(AssetLocation) Loads given texture through the assets managers and loads it onto the graphics card. Will return a cached version on every subsequent call to this method. int GetOrLoadTexture(AssetLocation name) Parameters name AssetLocation the location of the texture as it exists within the game or mod directory. Returns int The texture id GetOrLoadTexture(AssetLocation, ref LoadedTexture) Loads given texture through the assets managers and loads it onto the graphics card. Will return a cached version on every subsequent call to this method. void GetOrLoadTexture(AssetLocation name, ref LoadedTexture intoTexture) Parameters name AssetLocation the location of the texture as it exists within the game or mod directory. intoTexture LoadedTexture the texture object to be populated. If it already is populated it will be disposed first GetOrLoadTexture(AssetLocation, BitmapRef, ref LoadedTexture) Loads the texture supplied by the bitmap, uploads it to the graphics card and keeps a cached version under given name. Will return that cached version on every subsequent call to this method. void GetOrLoadTexture(AssetLocation name, BitmapRef bmp, ref LoadedTexture intoTexture) Parameters name AssetLocation the location of the texture as it exists within the game or mod directory. bmp BitmapRef The referenced bitmap intoTexture LoadedTexture the texture object to be populated. If it already is populated it will be disposed first GetShader(int) Gives you access to all currently registered shaders identified by their number IShaderProgram GetShader(int shaderProgramNumber) Parameters shaderProgramNumber int Returns IShaderProgram GetTextureAtlasPosition(ItemStack) Returns the first TextureAtlasPosition it can find for given block or item texture in itemstack. TextureAtlasPosition GetTextureAtlasPosition(ItemStack itemstack) Parameters itemstack ItemStack Returns TextureAtlasPosition GetUniformLocation(int, string) Gets you the uniform location of given uniform for given shader int GetUniformLocation(int shaderProgramNumber, string name) Parameters shaderProgramNumber int name string Returns int GlDisableCullFace() Disables the culling faces. void GlDisableCullFace() GlEnableCullFace() Enables the Culling faces. void GlEnableCullFace() GlGenerateTex2DMipmaps() Regenerates the mip maps for the currently bound texture void GlGenerateTex2DMipmaps() GlGetError() Returns null if no OpenGL Error happened, otherwise one of the official opengl error codes string GlGetError() Returns string GlGetMaxTextureSize() Max size a texture can have on the current graphics card int GlGetMaxTextureSize() Returns int The maximum size a texture can have on the current graphics card in Pixels. GlLoadMatrix(double[]) Replaces the top most matrix with given one void GlLoadMatrix(double[] matrix) Parameters matrix double[] GlMatrixModeModelView() The current model view. void GlMatrixModeModelView() GlPopMatrix() Pops the top most matrix from the games matrix stack void GlPopMatrix() GlPushMatrix() Pushes a copy of the current matrix onto the games matrix stack void GlPushMatrix() GlRotate(float, float, float, float) Rotates top most matrix in the games matrix stack void GlRotate(float angle, float x, float y, float z) Parameters angle float x float y float z float GlScale(float, float, float) Scales top most matrix in the games matrix stack void GlScale(float x, float y, float z) Parameters x float y float z float GlScissor(int, int, int, int) Tells the graphics card to not render anything outside supplied bounds. Only sets the boundaries. Can be turned on/off with GlScissorFlag(true/false) void GlScissor(int x, int y, int width, int height) Parameters x int y int width int height int GlScissorFlag(bool) Whether scissor mode should be active or not void GlScissorFlag(bool enable) Parameters enable bool GlToggleBlend(bool, EnumBlendMode) To enable/disable various blending modes void GlToggleBlend(bool blend, EnumBlendMode blendMode = EnumBlendMode.Standard) Parameters blend bool blendMode EnumBlendMode GlTranslate(double, double, double) Translates top most matrix in the games matrix stack void GlTranslate(double x, double y, double z) Parameters x double y double z double GlTranslate(float, float, float) Translates top most matrix in the games matrix stack void GlTranslate(float x, float y, float z) Parameters x float y float z float GlViewport(int, int, int, int) void GlViewport(int x, int y, int width, int height) Parameters x int y int width int height int LoadOrUpdateTextureFromBgra(int[], bool, int, ref LoadedTexture) Loads texture from Pixels in BGRA format. void LoadOrUpdateTextureFromBgra(int[] bgraPixels, bool linearMag, int clampMode, ref LoadedTexture intoTexture) Parameters bgraPixels int[] The pixel array linearMag bool Enable/Disable Linear rendering or use Nearest rendering. clampMode int The current clamp mode intoTexture LoadedTexture The target texture space it should load the pixels into. Must have width/height set accordingly. Will set the opengl textureid upon successful load LoadOrUpdateTextureFromRgba(int[], bool, int, ref LoadedTexture) Loads texture from Pixels in RGBA format. void LoadOrUpdateTextureFromRgba(int[] rgbaPixels, bool linearMag, int clampMode, ref LoadedTexture intoTexture) Parameters rgbaPixels int[] The pixel array linearMag bool Enable/Disable Linear rendering or use Nearest rendering. clampMode int The current clamp mode intoTexture LoadedTexture The target texture space it should load the pixels into. Must have width/height set accordingly. Will set the opengl textureid upon successful load. LoadTexture(IBitmap, ref LoadedTexture, bool, int, bool) void LoadTexture(IBitmap bmp, ref LoadedTexture intoTexture, bool linearMag = false, int clampMode = 0, bool generateMipmaps = false) Parameters bmp IBitmap intoTexture LoadedTexture linearMag bool clampMode int generateMipmaps bool LoadTextureFromBgra(int[], int, int, bool, int) Loads texture from Pixels in BGRA format. [Obsolete(\"Use LoadOrUpdateTextureFromBgra(int[] bgraPixels, bool linearMag, int clampMode, ref LoadedTexture intoTexture); instead. This method cannot warn you of memory leaks when the texture is not properly disposed.\")] int LoadTextureFromBgra(int[] bgraPixels, int width, int height, bool linearMag, int clampMode) Parameters bgraPixels int[] The pixel array width int the width of the final texture height int the height of the final texture linearMag bool Enable/Disable Linear rendering or use Nearest rendering. clampMode int The current clamp mode Returns int The GLID for the resulting texture. LoadTextureFromRgba(int[], int, int, bool, int) Loads texture from Pixels in RGBA format. [Obsolete(\"Use LoadOrUpdateTextureFromRgba(int[] bgraPixels, bool linearMag, int clampMode, ref LoadedTexture intoTexture); instead. This method cannot warn you of memory leaks when the texture is not properly disposed.\")] int LoadTextureFromRgba(int[] rgbaPixels, int width, int height, bool linearMag, int clampMode) Parameters rgbaPixels int[] The pixel array width int the width of the final texture height int the height of the final texture linearMag bool Enable/Disable Linear rendering or use Nearest rendering. clampMode int The current clamp mode Returns int The OpenGL Identifier for the resulting texture. PopScissor() End scissor mode. Disable any previously set render constraints void PopScissor() PreparedStandardShader(int, int, int, Vec4f) Populates the uniforms and light values for given positions and calls shader.Use(). IStandardShaderProgram PreparedStandardShader(int posX, int posY, int posZ, Vec4f colorMul = null) Parameters posX int The position for light level reading posY int The position for light level reading posZ int The position for light level reading colorMul Vec4f Returns IStandardShaderProgram PushScissor(ElementBounds, bool) Convenience method for GlScissor(). Tells the graphics card to not render anything outside supplied bounds. Can be turned of again with PopScissor(). Any previously applied scissor will be restored after calling PopScissor(). void PushScissor(ElementBounds bounds, bool stacking = false) Parameters bounds ElementBounds stacking bool If true, also applies scissoring from the previous call to PushScissor, otherwise replaces the scissor bounds RemovePointLight(IPointLight) Removes a dynamic light source from the scene void RemovePointLight(IPointLight pointlight) Parameters pointlight IPointLight RemoveTexture(AssetLocation) Removes given texture from the cache and from graphics card memory bool RemoveTexture(AssetLocation name) Parameters name AssetLocation the location of the texture as it exists within the game or mod directory. Returns bool whether the operation was successful or not. Render2DLoadedTexture(LoadedTexture, float, float, float) Renders given texture onto the screen, uses a simple quad for rendering (gui mode) void Render2DLoadedTexture(LoadedTexture textTexture, float posX, float posY, float z = 50) Parameters textTexture LoadedTexture posX float posY float z float Render2DTexture(int, float, float, float, float, float, Vec4f) Renders given texture onto the screen, uses a simple quad for rendering (gui mode) void Render2DTexture(int textureid, float posX, float posY, float width, float height, float z = 50, Vec4f color = null) Parameters textureid int posX float posY float width float height float z float color Vec4f Render2DTexture(int, ElementBounds, float, Vec4f) Renders given texture onto the screen, uses a simple quad for rendering (gui mode) void Render2DTexture(int textureid, ElementBounds bounds, float z = 50, Vec4f color = null) Parameters textureid int bounds ElementBounds z float color Vec4f Render2DTexture(MeshRef, int, float, float, float, float, float) Renders given texture onto the screen, uses supplied quad for rendering (gui mode) void Render2DTexture(MeshRef quadModel, int textureid, float posX, float posY, float width, float height, float z = 50) Parameters quadModel MeshRef textureid int posX float posY float width float height float z float Render2DTexture(MultiTextureMeshRef, float, float, float, float, float) Renders given texture onto the screen, uses supplied quad for rendering (gui mode) void Render2DTexture(MultiTextureMeshRef quadModel, float posX, float posY, float width, float height, float z = 50) Parameters quadModel MultiTextureMeshRef posX float posY float width float height float z float Render2DTexturePremultipliedAlpha(int, double, double, double, double, float, Vec4f) Renders given texture onto the screen, uses a simple quad for rendering (gui mode). Assumes the texture to use a premultiplied alpha channel void Render2DTexturePremultipliedAlpha(int textureid, double posX, double posY, double width, double height, float z = 50, Vec4f color = null) Parameters textureid int posX double posY double width double height double z float color Vec4f Render2DTexturePremultipliedAlpha(int, float, float, float, float, float, Vec4f) Renders given texture onto the screen, uses a simple quad for rendering (gui mode). Assumes the texture to use a premultiplied alpha channel void Render2DTexturePremultipliedAlpha(int textureid, float posX, float posY, float width, float height, float z = 50, Vec4f color = null) Parameters textureid int posX float posY float width float height float z float color Vec4f Render2DTexturePremultipliedAlpha(int, ElementBounds, float, Vec4f) Renders given texture onto the screen, uses a simple quad for rendering (gui mode). Assumes the texture to use a premultiplied alpha channel void Render2DTexturePremultipliedAlpha(int textureid, ElementBounds bounds, float z = 50, Vec4f color = null) Parameters textureid int bounds ElementBounds z float color Vec4f RenderEntityToGui(float, Entity, double, double, double, float, float, int) Renders given entity at given position (gui/orthographic mode) void RenderEntityToGui(float dt, Entity entity, double posX, double posY, double posZ, float yawDelta, float size, int color) Parameters dt float entity Entity posX double posY double posZ double yawDelta float For rotating the entity around its y-axis size float color int RenderItemStackToAtlas(ItemStack, ITextureAtlasAPI, int, Action<int>, int, float, float) Renders given itemstack into supplied texture atlas. This is a rather costly operation. Also be sure to cache the results, as each call to this method consumes more space in your texture atlas. If you call this method outside the ortho render stage, it will enqueue a render task for next frame. Rather exceptionally, this method is also thread safe. If called from another thread, the render task always gets enqueued. The call back will always be run on the main thread. bool RenderItemStackToAtlas(ItemStack stack, ITextureAtlasAPI atlas, int size, Action<int> onComplete, int color = -1, float sepiaLevel = 0, float scale = 1) Parameters stack ItemStack atlas ITextureAtlasAPI size int onComplete Action<int> Once rendered, this returns a texture subid, which you can use to retrieve the textureAtlasPosition from the atlas color int sepiaLevel float scale float Returns bool True if the render could complete immediatly, false if it has to wait until the next ortho render stage RenderItemstackToGui(ItemSlot, double, double, double, float, int, bool, bool, bool) Renders given itemstack in slot at given position (gui/orthographic mode) void RenderItemstackToGui(ItemSlot inSlot, double posX, double posY, double posZ, float size, int color, bool shading = true, bool rotate = false, bool showStackSize = true) Parameters inSlot ItemSlot posX double posY double posZ double size float color int shading bool rotate bool showStackSize bool RenderItemstackToGui(ItemSlot, double, double, double, float, int, float, bool, bool, bool) Renders given itemstack in slot at given position (gui/orthographic mode) void RenderItemstackToGui(ItemSlot inSlot, double posX, double posY, double posZ, float size, int color, float dt, bool shading = true, bool rotate = false, bool showStackSize = true) Parameters inSlot ItemSlot posX double posY double posZ double size float color int dt float shading bool rotate bool showStackSize bool RenderItemstackToGui(ItemStack, double, double, double, float, int, bool, bool, bool) Renders given itemstack at given position (gui/orthographic mode) [Obsolete(\"Use RenderItemstackToGui(inSlot, ....) instead\")] void RenderItemstackToGui(ItemStack itemstack, double posX, double posY, double posZ, float size, int color, bool shading = true, bool rotate = false, bool showStackSize = true) Parameters itemstack ItemStack posX double posY double posZ double size float color int Set to WhiteArgb for normal rendering shading bool Unused. rotate bool If true, will slowly rotate the itemstack around the Y-Axis showStackSize bool If true, will render a number depicting how many blocks/item are in the stack RenderLine(BlockPos, float, float, float, float, float, float, int) Inefficiently renders a line between 2 points void RenderLine(BlockPos origin, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, int color) Parameters origin BlockPos posX1 float posY1 float posZ1 float posX2 float posY2 float posZ2 float color int RenderMesh(MeshRef) Renders given mesh onto the screen void RenderMesh(MeshRef meshRef) Parameters meshRef MeshRef RenderMesh(MeshRef, int[], int[], int) Draws only a part of the mesh void RenderMesh(MeshRef meshRef, int[] indicesStarts, int[] indicesSizes, int groupCount) Parameters meshRef MeshRef indicesStarts int[] indicesSizes int[] groupCount int RenderMeshInstanced(MeshRef, int) Uses the graphics instanced rendering methods to efficiently render the same mesh multiple times. Use the custom mesh data parts with instanced flag on to supply custom data to each mesh. void RenderMeshInstanced(MeshRef meshRef, int quantity = 1) Parameters meshRef MeshRef quantity int RenderMultiTextureMesh(MultiTextureMeshRef, string, int) Renders given mesh onto the screen, with the mesh requiring multiple render calls for each texture, asigns the associated texture each call void RenderMultiTextureMesh(MultiTextureMeshRef mmr, string textureSampleName, int textureNumber = 0) Parameters mmr MultiTextureMeshRef textureSampleName string textureNumber int RenderRectangle(float, float, float, float, float, int) Renders a rectangle outline at given position void RenderRectangle(float posX, float posY, float posZ, float width, float height, int color) Parameters posX float posY float posZ float width float height float color int RenderTexture(int, double, double, double, double, float, Vec4f) Renders given texture onto the screen, uses a simple quad for rendering (gui mode) void RenderTexture(int textureid, double posX, double posY, double width, double height, float z = 50, Vec4f color = null) Parameters textureid int posX double posY double width double height double z float color Vec4f RenderTextureIntoFrameBuffer(int, LoadedTexture, float, float, float, float, FrameBufferRef, float, float, float) void RenderTextureIntoFrameBuffer(int atlasTextureId, LoadedTexture fromTexture, float sourceX, float sourceY, float sourceWidth, float sourceHeight, FrameBufferRef fb, float targetX, float targetY, float alphaTest = 0.005) Parameters atlasTextureId int fromTexture LoadedTexture sourceX float sourceY float sourceWidth float sourceHeight float fb FrameBufferRef targetX float targetY float alphaTest float RenderTextureIntoTexture(LoadedTexture, float, float, float, float, LoadedTexture, float, float, float) Renders given texture into another texture. If you use the resulting texture for in-world rendering, remember to recreate the mipmaps via GlGenerateTex2DMipmaps() void RenderTextureIntoTexture(LoadedTexture fromTexture, float sourceX, float sourceY, float sourceWidth, float sourceHeight, LoadedTexture intoTexture, float targetX, float targetY, float alphaTest = 0.005) Parameters fromTexture LoadedTexture sourceX float sourceY float sourceWidth float sourceHeight float intoTexture LoadedTexture targetX float targetY float alphaTest float If below given threshold, the pixel is not drawn into the target texture. (Default: 0.05) Reset3DProjection() void Reset3DProjection() Set3DProjection(float, float) void Set3DProjection(float zfar, float fov) Parameters zfar float fov float UpdateChunkMesh(MeshRef, MeshData) Updates the existing mesh. Updates any non null data from updatedata. Version for chunks only (also decals, as they use chunk MeshDataPool system) void UpdateChunkMesh(MeshRef meshRef, MeshData updatedata) Parameters meshRef MeshRef updatedata MeshData UpdateMesh(MeshRef, MeshData) Updates the existing mesh. Updates any non null data from updatedata void UpdateMesh(MeshRef meshRef, MeshData updatedata) Parameters meshRef MeshRef updatedata MeshData UploadMesh(MeshData) Uploads your mesh onto the graphics card for rendering (= load into a VAO). If you use a custom shader, these are the VBO locations: xyz=0, uv=1, rgba=2, rgba2=3, flags=4, customFloats=5, customInts=6, customBytes=7 (indices do not get their own data location) If any of them are null, the vbo location is not consumed and all used location numbers shift by -1 MeshRef UploadMesh(MeshData data) Parameters data MeshData Returns MeshRef UploadMultiTextureMesh(MeshData) Same as UploadMesh(MeshData) but splits it into multiple MeshRefs, one for each texture MultiTextureMeshRef UploadMultiTextureMesh(MeshData data) Parameters data MeshData Returns MultiTextureMeshRef"
  },
  "api/Vintagestory.API.Client.IRenderer.html": {
    "href": "api/Vintagestory.API.Client.IRenderer.html",
    "title": "Interface IRenderer | VintageStory API",
    "keywords": "Interface IRenderer Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Interface to render something on to the clients screens. Used for block entitites. public interface IRenderer : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties RenderOrder 0 = drawn first, 1 = drawn last Default render orders by render stage: Before: 0 = Ambient Manager 0 = Camera Opaque: 0.1 = Blue sky (Icosahedron) 0.2 = Night skybox 0.3 = Sun and moon 0.37 = Terrain opaque 0.4 = Enitities 0.5 = Decals 0.5 = Debug wireframe 0.6 = particles 0.7 = Cinematic camera line preview 0.8 = fp held item 0.9 = held item opaque custom renderer OIT: 0.2 = Frame buffer debug screen 0.35 = Clouds 0.37 = Terrain oit 0.4 = Enitities 0.6 = particles 0.9 = held item oit custom renderer Shadow far: 0 = shadow map init 0.37 = Terrain shadow far 0.4 = Enitities Shadow far done: 1 = shadow map finish Shadow near: 0 = shadow map init 0.37 = Terrain shadow near 0.4 = Enitities Shadow near done: 1 = shadow map finish Ortho: 0.2 = Frame buffer debug screen 0.4 = Enitities 0.9 = held item ortho custom renderer 0.95 = sleeping overlay 0.98 = bow/spear aiming reticle 1 = Gui manager 1.02 = crosshair and mouse cursor AfterFinalComposition: 2 = screenshot Done: 0.1 = gui manager 2 = screenshot 0.98 = Cinematic camera camera advancing and frame capture when recording 0.99 = Chunk Tesselator Manager (uploads new/modified chunk meshes) 0.999 = Compress chunks scan 1 = video recorder double RenderOrder { get; } Property Value double RenderRange Within what range to the player OnRenderFrame() should be called (currently not used!) int RenderRange { get; } Property Value int Methods OnRenderFrame(float, EnumRenderStage) Called every frame for rendering whatever you need to render void OnRenderFrame(float deltaTime, EnumRenderStage stage) Parameters deltaTime float stage EnumRenderStage"
  },
  "api/Vintagestory.API.Client.ISettings.html": {
    "href": "api/Vintagestory.API.Client.ISettings.html",
    "title": "Interface ISettings | VintageStory API",
    "keywords": "Interface ISettings Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Setting interface for multiple settings. public interface ISettings Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Bool Setting collection for boolean values. ISettingsClass<bool> Bool { get; } Property Value ISettingsClass<bool> Float Setting collection for float values. ISettingsClass<float> Float { get; } Property Value ISettingsClass<float> Int Setting collection for integer values. ISettingsClass<int> Int { get; } Property Value ISettingsClass<int> String Setting collection for string values. ISettingsClass<string> String { get; } Property Value ISettingsClass<string> Strings Setting collection for string list values. ISettingsClass<List<string>> Strings { get; } Property Value ISettingsClass<List<string>> Methods AddWatcher<T>(string, OnSettingsChanged<T>) Setting watcher for changes in values for a given setting. void AddWatcher<T>(string key, OnSettingsChanged<T> OnValueChanged) Parameters key string Key to the setting OnValueChanged OnSettingsChanged<T> the OnValueChanged event fired. Type Parameters T The type of the value that was changed."
  },
  "api/Vintagestory.API.Client.ISettingsClass-1.html": {
    "href": "api/Vintagestory.API.Client.ISettingsClass-1.html",
    "title": "Interface ISettingsClass<T> | VintageStory API",
    "keywords": "Interface ISettingsClass<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Setting interface. public interface ISettingsClass<T> Type Parameters T The type of the given setting. Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties this[string] Gets and sets the setting with the provided key. T this[string key] { get; set; } Parameters key string The key to the setting. Property Value T The current value of the given key. Methods AddWatcher(string, OnSettingsChanged<T>) Setting watcher for changes in values for a given setting. void AddWatcher(string key, OnSettingsChanged<T> OnValueChanged) Parameters key string Key to the setting OnValueChanged OnSettingsChanged<T> the OnValueChanged event fired. Exists(string) Does this setting exist? bool Exists(string key) Parameters key string The key to check on a setting. Returns bool Whether the setting exists or not. Get(string, T) Gets the setting with the provided key T Get(string key, T defaultValue = default) Parameters key string defaultValue T Returns T RemoveWatcher(string, OnSettingsChanged<T>) Removes a previously assigned watcher bool RemoveWatcher(string key, OnSettingsChanged<T> handler) Parameters key string handler OnSettingsChanged<T> Returns bool True if successfully removed Set(string, T, bool) Sets the setting with key to the provided value: if shouldTriggerWatchers is false, the watchers will not be triggered void Set(string key, T value, bool shouldTriggerWatchers) Parameters key string value T shouldTriggerWatchers bool"
  },
  "api/Vintagestory.API.Client.IShader.html": {
    "href": "api/Vintagestory.API.Client.IShader.html",
    "title": "Interface IShader | VintageStory API",
    "keywords": "Interface IShader Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IShader Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Code Source code of the shader string Code { get; set; } Property Value string PrefixCode If set, the shader registry will attach this bit of code to the beginning of the fragment shader file. Useful for setting stuff at runtime when using file shaders, e.g. via #define string PrefixCode { get; set; } Property Value string Type EnumShaderType Type { get; } Property Value EnumShaderType"
  },
  "api/Vintagestory.API.Client.IShaderAPI.html": {
    "href": "api/Vintagestory.API.Client.IShaderAPI.html",
    "title": "Interface IShaderAPI | VintageStory API",
    "keywords": "Interface IShaderAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll API for configuring and loading GLSL Shaders public interface IShaderAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetProgram(int) Returns the loaded shader for use in rendering IShaderProgram GetProgram(int renderPass) Parameters renderPass int Returns IShaderProgram GetProgramByName(string) Returns the loaded shader for use in rendering IShaderProgram GetProgramByName(string name) Parameters name string Returns IShaderProgram IsGLSLVersionSupported(string) Returns true if given GLSL Version is available on this machine bool IsGLSLVersionSupported(string minVersion) Parameters minVersion string Returns bool NewShader(EnumShaderType) Returns an empty instance of an IShader for you to configure as vertex, fragment or geometry shader IShader NewShader(EnumShaderType shaderType) Parameters shaderType EnumShaderType Returns IShader NewShaderProgram() Returns an empty instance of an IShaderProgram for you to configure. Once configured, call RegisterShaderProgram IShaderProgram NewShaderProgram() Returns IShaderProgram RegisterFileShaderProgram(string, IShaderProgram) Registers a configured IShaderProgram. The name must correspond to the .vsh and .fsh filenames (without ending). Returns a program number to be used in UseShaderProgram() int RegisterFileShaderProgram(string name, IShaderProgram program) Parameters name string program IShaderProgram Returns int RegisterMemoryShaderProgram(string, IShaderProgram) Registers a configured IShaderProgram. Will not load anything from the shaders folder. Returns a program number to be used in UseShaderProgram() int RegisterMemoryShaderProgram(string name, IShaderProgram program) Parameters name string program IShaderProgram Returns int ReloadShaders() Discards all currently compiled shaders and recompiles them. Returns true if all shaders compiled without errors. bool ReloadShaders() Returns bool"
  },
  "api/Vintagestory.API.Client.IShaderProgram.html": {
    "href": "api/Vintagestory.API.Client.IShaderProgram.html",
    "title": "Interface IShaderProgram | VintageStory API",
    "keywords": "Interface IShaderProgram Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IShaderProgram : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AssetDomain When loading from file this is the asset domain to load from string AssetDomain { get; set; } Property Value string ClampTexturesToEdge If true, it well configure the textures to clamp to the edge (CLAMP_TO_EDGE). Requires the textureid to be defined using SetTextureIds bool ClampTexturesToEdge { get; set; } Property Value bool Disposed True if this shader has been disposed bool Disposed { get; } Property Value bool FragmentShader The fragment shader of this shader program IShader FragmentShader { get; set; } Property Value IShader GeometryShader The geometry shader of this shader program IShader GeometryShader { get; set; } Property Value IShader LoadError bool LoadError { get; } Property Value bool PassId A uniqe shader pass number assigned to each shader program int PassId { get; } Property Value int PassName The name it was registered with. If you want to load this shader from a file, make sure the use the filename here string PassName { get; } Property Value string ProgramId int ProgramId { get; } Property Value int UBOs OrderedDictionary<string, UBORef> UBOs { get; } Property Value OrderedDictionary<string, UBORef> VertexShader The vertex shader of this shader program IShader VertexShader { get; set; } Property Value IShader Methods BindTexture2D(string, int, int) void BindTexture2D(string samplerName, int textureId, int textureNumber) Parameters samplerName string textureId int textureNumber int BindTextureCube(string, int, int) void BindTextureCube(string samplerName, int textureId, int textureNumber) Parameters samplerName string textureId int textureNumber int Compile() bool Compile() Returns bool HasUniform(string) bool HasUniform(string uniformName) Parameters uniformName string Returns bool Stop() void Stop() Uniform(string, int) void Uniform(string uniformName, int value) Parameters uniformName string value int Uniform(string, float) void Uniform(string uniformName, float value) Parameters uniformName string value float Uniform(string, Vec2f) void Uniform(string uniformName, Vec2f value) Parameters uniformName string value Vec2f Uniform(string, Vec3f) void Uniform(string uniformName, Vec3f value) Parameters uniformName string value Vec3f Uniform(string, Vec4f) void Uniform(string uniformName, Vec4f value) Parameters uniformName string value Vec4f UniformMatrices(string, int, float[]) void UniformMatrices(string uniformName, int count, float[] matrix) Parameters uniformName string count int matrix float[] UniformMatrices4x3(string, int, float[]) void UniformMatrices4x3(string uniformName, int count, float[] matrix) Parameters uniformName string count int matrix float[] UniformMatrix(string, float[]) void UniformMatrix(string uniformName, float[] matrix) Parameters uniformName string matrix float[] Uniforms4(string, int, float[]) void Uniforms4(string uniformName, int count, float[] values) Parameters uniformName string count int values float[] Use() void Use()"
  },
  "api/Vintagestory.API.Client.IStandardShaderProgram.html": {
    "href": "api/Vintagestory.API.Client.IStandardShaderProgram.html",
    "title": "Interface IStandardShaderProgram | VintageStory API",
    "keywords": "Interface IStandardShaderProgram Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface IStandardShaderProgram : IShaderProgram, IDisposable Inherited Members IShaderProgram.ProgramId IShaderProgram.AssetDomain IShaderProgram.PassId IShaderProgram.PassName IShaderProgram.ClampTexturesToEdge IShaderProgram.VertexShader IShaderProgram.FragmentShader IShaderProgram.GeometryShader IShaderProgram.Use() IShaderProgram.Stop() IShaderProgram.Compile() IShaderProgram.Uniform(string, float) IShaderProgram.Uniform(string, int) IShaderProgram.Uniform(string, Vec2f) IShaderProgram.Uniform(string, Vec3f) IShaderProgram.Uniform(string, Vec4f) IShaderProgram.Uniforms4(string, int, float[]) IShaderProgram.UniformMatrix(string, float[]) IShaderProgram.BindTexture2D(string, int, int) IShaderProgram.BindTextureCube(string, int, int) IShaderProgram.UniformMatrices(string, int, float[]) IShaderProgram.UniformMatrices4x3(string, int, float[]) IShaderProgram.HasUniform(string) IShaderProgram.Disposed IShaderProgram.LoadError IShaderProgram.UBOs IDisposable.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AddRenderFlags int AddRenderFlags { set; } Property Value int AlphaTest The shader will discard things below this threshold. float AlphaTest { set; } Property Value float AverageColor When TempGlowMode==1 this color is used as a reference Vec4f AverageColor { set; } Property Value Vec4f BaseTextureSize Vec2f BaseTextureSize { set; } Property Value Vec2f BaseUvOrigin Vec2f BaseUvOrigin { set; } Property Value Vec2f DamageEffect float DamageEffect { set; } Property Value float DontWarpVertices The position of the player. int DontWarpVertices { set; } Property Value int ExtraGlow int ExtraGlow { set; } Property Value int ExtraGodray float ExtraGodray { set; } Property Value float ExtraZOffset float ExtraZOffset { set; } Property Value float FogDensityIn The density level of the fog. float FogDensityIn { set; } Property Value float FogMinIn The minimum distance for fog. float FogMinIn { set; } Property Value float ModelMatrix The model Matrix. float[] ModelMatrix { set; } Property Value float[] NormalShaded int NormalShaded { set; } Property Value int OverlayOpacity float OverlayOpacity { set; } Property Value float OverlayTextureSize Vec2f OverlayTextureSize { set; } Property Value Vec2f ProjectionMatrix The projection matrix. float[] ProjectionMatrix { set; } Property Value float[] RgbaAmbientIn The color of the ambient light source. Vec3f RgbaAmbientIn { set; } Property Value Vec3f RgbaFogIn The color of the fog. Vec4f RgbaFogIn { set; } Property Value Vec4f RgbaGlowIn The color of the glow light. Vec4f RgbaGlowIn { set; } Property Value Vec4f RgbaLightIn The color of the general light. Vec4f RgbaLightIn { set; } Property Value Vec4f RgbaTint The color of the tint. Vec4f RgbaTint { set; } Property Value Vec4f ShadowMapFar2D The shadowmap ID for far away shadows. int ShadowMapFar2D { set; } Property Value int ShadowMapNear2D The shadowmap ID for nearby shadows. int ShadowMapNear2D { set; } Property Value int SsaoAttn float SsaoAttn { set; } Property Value float TempGlowMode int TempGlowMode { set; } Property Value int Tex2D The texture 2D for this mesh. int Tex2D { set; } Property Value int Tex2dOverlay2D int Tex2dOverlay2D { set; } Property Value int ToShadowMapSpaceMatrixFar The matrix for converting the vertex position from world space to far shadow space as supplied by IRenderAPI.CurrentShadowProjectionMatrix. float[] ToShadowMapSpaceMatrixFar { set; } Property Value float[] ToShadowMapSpaceMatrixNear The matrix for converting the vertex position from world space to near shadow space as supplied by IRenderAPI.CurrentShadowProjectionMatrix. float[] ToShadowMapSpaceMatrixNear { set; } Property Value float[] ViewMatrix The view matrix. float[] ViewMatrix { set; } Property Value float[] WaterWaveCounter Required for water waving meshes. Supplied the water counter as supplied as IRenderAPI.WaterWaveCounter. float WaterWaveCounter { set; } Property Value float ZFar The far plane distance. float ZFar { set; } Property Value float ZNear The Near plane distance. float ZNear { set; } Property Value float"
  },
  "api/Vintagestory.API.Client.ITerrainMeshPool.html": {
    "href": "api/Vintagestory.API.Client.ITerrainMeshPool.html",
    "title": "Interface ITerrainMeshPool | VintageStory API",
    "keywords": "Interface ITerrainMeshPool Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public interface ITerrainMeshPool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AddMeshData(MeshData, int) Requires xyz, uv, rgba, indices, flags and xyzFaces to be set void AddMeshData(MeshData data, int lodLevel = 1) Parameters data MeshData lodLevel int AddMeshData(MeshData, float[], int) Add mesh data, but first transformed with tfMatrix void AddMeshData(MeshData data, float[] tfMatrix, int lodLevel = 1) Parameters data MeshData tfMatrix float[] lodLevel int AddMeshData(MeshData, ColorMapData, int) Requires xyz, uv, rgba, indices, flags and xyzFaces to be set void AddMeshData(MeshData data, ColorMapData colorMapData, int lodLevel = 1) Parameters data MeshData colorMapData ColorMapData lodLevel int"
  },
  "api/Vintagestory.API.Client.ITesselatorAPI.html": {
    "href": "api/Vintagestory.API.Client.ITesselatorAPI.html",
    "title": "Interface ITesselatorAPI | VintageStory API",
    "keywords": "Interface ITesselatorAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Interface that allows custom model model meshing for items, blocks and entities Texturing crash course: Block, Item and Entity textures are loaded from json files in the form of a CompositeTexture instance After connecting to a game server, the client inserts all of these textures into their type-respective texture atlasses After insertion a \"texture sub-id\" is left behind in the CompositeTexture.Baked Property You can now find the position of the texture inside the atlas through the Block/Item/Entity-TextureAtlasPositions arrays (teturesubid is the array key) Shape Tesselation crash course: Block and Item shapes are loaded from json files in the form of a CompositeShape instance A CompositeShape instance hold some block/item specific information as well as an identifier to a Shape instance After connecting to a game server, the client loads all shapes from the shape folder then finds each blocks/items shape by its shape identifier Result is a MeshData instance that holds all vertices, UV coords, colors and etc. for each block That meshdata instance is a) Held as-is in memory for using during chunk tesselation (you can get a reference to it through getDefaultBlockMesh()) b) \"Compiled\" to a Model for use during rendering in the gui. Model Compilation means all it's mesh data is uploaded onto the graphcis through a VAO and a ModelRef instance is left behind which can be used by the RenderAPI to render it. public interface ITesselatorAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetTexSource(Block, int, bool) [Obsolete(\"Use GetTextureSource instead\")] ITexPositionSource GetTexSource(Block block, int altTextureNumber = 0, bool returnNullWhenMissing = false) Parameters block Block altTextureNumber int returnNullWhenMissing bool Returns ITexPositionSource GetTextureSource(Block, int, bool) Returns the texture source from given block. This can be used to obtain the positions of the textures in the block texture atlas. ITexPositionSource GetTextureSource(Block block, int altTextureNumber = 0, bool returnNullWhenMissing = false) Parameters block Block altTextureNumber int returnNullWhenMissing bool Returns ITexPositionSource GetTextureSource(Entity, Dictionary<string, CompositeTexture>, int, bool) Returns the texture source from given entity. This can be used to obtain the positions of the textures in the entity texture atlas. ITexPositionSource GetTextureSource(Entity entity, Dictionary<string, CompositeTexture> extraTextures = null, int altTextureNumber = 0, bool returnNullWhenMissing = false) Parameters entity Entity extraTextures Dictionary<string, CompositeTexture> altTextureNumber int returnNullWhenMissing bool Returns ITexPositionSource GetTextureSource(Item, bool) Returns the texture source from given item. This can be used to obtain the positions of the textures in the item texture atlas. ITexPositionSource GetTextureSource(Item item, bool returnNullWhenMissing = false) Parameters item Item returnNullWhenMissing bool Returns ITexPositionSource TesselateBlock(Block, out MeshData) Tesselates a block for you using given blocks shape and texture configuration void TesselateBlock(Block block, out MeshData modeldata) Parameters block Block modeldata MeshData TesselateItem(Item, out MeshData) Tesselates an item for you using given items shape and texture configuration void TesselateItem(Item item, out MeshData modeldata) Parameters item Item modeldata MeshData TesselateItem(Item, out MeshData, ITexPositionSource) Tesselates an item for you using the items shape and your own defined texture configuration. You need to implement the ITextureSource yourself. void TesselateItem(Item item, out MeshData modeldata, ITexPositionSource texSource) Parameters item Item modeldata MeshData texSource ITexPositionSource TesselateItem(Item, CompositeShape, out MeshData) Tesselates an item for you using given items shape and texture configuration void TesselateItem(Item item, CompositeShape forShape, out MeshData modeldata) Parameters item Item forShape CompositeShape modeldata MeshData TesselateShape(string, AssetLocation, CompositeShape, out MeshData, ITexPositionSource, int, byte, byte, int?, string[]) Tesselate a shape based on its composite shape file void TesselateShape(string type, AssetLocation name, CompositeShape compositeShape, out MeshData modeldata, ITexPositionSource texSource, int generalGlowLevel = 0, byte climateColorMapIndex = 0, byte seasonColorMapIndex = 0, int? quantityElements = null, string[] selectiveElements = null) Parameters type string name AssetLocation compositeShape CompositeShape modeldata MeshData texSource ITexPositionSource generalGlowLevel int climateColorMapIndex byte seasonColorMapIndex byte quantityElements int? selectiveElements string[] TesselateShape(string, Shape, out MeshData, ITexPositionSource, Vec3f, int, byte, byte, int?, string[]) Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. void TesselateShape(string typeForLogging, Shape shapeBase, out MeshData modeldata, ITexPositionSource texSource, Vec3f meshRotationDeg = null, int generalGlowLevel = 0, byte climateColorMapId = 0, byte seasonColorMapId = 0, int? quantityElements = null, string[] selectiveElements = null) Parameters typeForLogging string shapeBase Shape modeldata MeshData texSource ITexPositionSource meshRotationDeg Vec3f generalGlowLevel int climateColorMapId byte seasonColorMapId byte quantityElements int? selectiveElements string[] TesselateShape(TesselationMetaData, Shape, out MeshData) Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. Will add a customints array to the meshdata that holds each elements JointId for all its vertices (you will have to manually set the jointid for each element though) void TesselateShape(TesselationMetaData meta, Shape shapeBase, out MeshData modeldata) Parameters meta TesselationMetaData shapeBase Shape modeldata MeshData TesselateShape(CollectibleObject, Shape, out MeshData, Vec3f, int?, string[]) Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Uses the given collectible texture configuration as texture source. void TesselateShape(CollectibleObject textureSourceCollectible, Shape shape, out MeshData modeldata, Vec3f meshRotationDeg = null, int? quantityElements = null, string[] selectiveElements = null) Parameters textureSourceCollectible CollectibleObject shape Shape modeldata MeshData meshRotationDeg Vec3f quantityElements int? selectiveElements string[] TesselateShapeWithJointIds(string, Shape, out MeshData, ITexPositionSource, Vec3f, int?, string[]) Turns a shape into a mesh data object that you can feed into the chunk tesselator or upload to the graphics card for rendering. Can be used to supply a custom texture source. Will add a customints array to the meshdata that holds each elements JointId for all its vertices (you will have to manually set the jointid for each element though) void TesselateShapeWithJointIds(string typeForLogging, Shape shapeBase, out MeshData modeldata, ITexPositionSource texSource, Vec3f rotation, int? quantityElements = null, string[] selectiveElements = null) Parameters typeForLogging string shapeBase Shape modeldata MeshData texSource ITexPositionSource rotation Vec3f quantityElements int? selectiveElements string[] VoxelizeTexture(int[], int, int, Size2i, TextureAtlasPosition) A helper method that turns a flat texture into its 1-voxel thick voxelized form MeshData VoxelizeTexture(int[] texturePixels, int width, int height, Size2i atlasSize, TextureAtlasPosition pos) Parameters texturePixels int[] width int height int atlasSize Size2i pos TextureAtlasPosition Returns MeshData VoxelizeTexture(CompositeTexture, Size2i, TextureAtlasPosition) A helper method that turns a flat texture into its 1-voxel thick voxelized form MeshData VoxelizeTexture(CompositeTexture texture, Size2i atlasSize, TextureAtlasPosition atlasPos) Parameters texture CompositeTexture atlasSize Size2i atlasPos TextureAtlasPosition Returns MeshData"
  },
  "api/Vintagestory.API.Client.ITesselatorManager.html": {
    "href": "api/Vintagestory.API.Client.ITesselatorManager.html",
    "title": "Interface ITesselatorManager | VintageStory API",
    "keywords": "Interface ITesselatorManager Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Manager interface for Tesselators. public interface ITesselatorManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods CreateMesh(string, CompositeShape, TextureSourceBuilder, ITexPositionSource) MeshData CreateMesh(string typeForLogging, CompositeShape cshape, TextureSourceBuilder texgen, ITexPositionSource texSource = null) Parameters typeForLogging string cshape CompositeShape texgen TextureSourceBuilder texSource ITexPositionSource Returns MeshData GetCachedShape(AssetLocation) Shape GetCachedShape(AssetLocation location) Parameters location AssetLocation Returns Shape GetDefaultBlockMesh(Block) Returns the default block mesh that being used by the engine when tesselating a chunk. The alternate and inventory versions are seperate. MeshData GetDefaultBlockMesh(Block block) Parameters block Block Returns MeshData GetDefaultBlockMeshRef(Block) Returns the default block mesh ref that being used by the engine when rendering a block in the inventory. The alternate and inventory versions are seperate. MultiTextureMeshRef GetDefaultBlockMeshRef(Block block) Parameters block Block Returns MultiTextureMeshRef GetDefaultItemMeshRef(Item) Returns the default block mesh ref that being used by the engine when rendering an item in the inventory. The alternate and inventory versions are seperate. MultiTextureMeshRef GetDefaultItemMeshRef(Item block) Parameters block Item Returns MultiTextureMeshRef ThreadDispose() void ThreadDispose()"
  },
  "api/Vintagestory.API.Client.ITexPositionSource.html": {
    "href": "api/Vintagestory.API.Client.ITexPositionSource.html",
    "title": "Interface ITexPositionSource | VintageStory API",
    "keywords": "Interface ITexPositionSource Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll An interface that can supply texture atlas positions public interface ITexPositionSource Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AtlasSize This returns the size of the atlas this texture resides in. Size2i AtlasSize { get; } Property Value Size2i this[string] TextureAtlasPosition this[string textureCode] { get; } Parameters textureCode string Property Value TextureAtlasPosition"
  },
  "api/Vintagestory.API.Client.ITextureAtlasAPI.html": {
    "href": "api/Vintagestory.API.Client.ITextureAtlasAPI.html",
    "title": "Interface ITextureAtlasAPI | VintageStory API",
    "keywords": "Interface ITextureAtlasAPI Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Entity texture Atlas. public interface ITextureAtlasAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AtlasTextures Returns the list of currently loaded texture atlas ids List<LoadedTexture> AtlasTextures { get; } Property Value List<LoadedTexture> this[AssetLocation] TextureAtlasPosition this[AssetLocation textureLocation] { get; } Parameters textureLocation AssetLocation Property Value TextureAtlasPosition Positions Returns the default texture atlas position for all blocks, referenced by the texturesubid TextureAtlasPosition[] Positions { get; } Property Value TextureAtlasPosition[] Size Size of one block texture atlas Size2i Size { get; } Property Value Size2i SubPixelPaddingX As configured in the clientsettings.json divided by the texture atlas size float SubPixelPaddingX { get; } Property Value float SubPixelPaddingY float SubPixelPaddingY { get; } Property Value float UnknownTexturePosition The texture atlas position of the \"unknown.png\" texture TextureAtlasPosition UnknownTexturePosition { get; } Property Value TextureAtlasPosition Methods AllocateTextureSpace(int, int, out int, out TextureAtlasPosition, AssetLocationAndSource) Reserves a spot on the texture atlas. Returns true if allocation was successful. Can be used to render onto it through the Render API bool AllocateTextureSpace(int width, int height, out int textureSubId, out TextureAtlasPosition texPos, AssetLocationAndSource loc = null) Parameters width int height int textureSubId int texPos TextureAtlasPosition loc AssetLocationAndSource If set, said texture space can be looked up by the tesselated element faces during shape tesselation Returns bool FreeTextureSpace(int) Deallocates a previously allocated texture space void FreeTextureSpace(int textureSubId) Parameters textureSubId int GetAverageColor(int) Returns you an average rgba value picked inside the texture subid int GetAverageColor(int textureSubId) Parameters textureSubId int Returns int GetOrInsertTexture(CompositeTexture, out int, out TextureAtlasPosition, float) bool GetOrInsertTexture(CompositeTexture ct, out int textureSubId, out TextureAtlasPosition texPos, float alphaTest = 0) Parameters ct CompositeTexture textureSubId int texPos TextureAtlasPosition alphaTest float Returns bool GetOrInsertTexture(AssetLocation, out int, out TextureAtlasPosition, CreateTextureDelegate, float) Same as InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) but this method remembers the inserted texure, which you can access using capi.TextureAtlas[path] A subsequent call to this method will update the texture, but retain the same texPos. Also a run-time texture reload will reload this texture automatically. bool GetOrInsertTexture(AssetLocation path, out int textureSubId, out TextureAtlasPosition texPos, CreateTextureDelegate onCreate = null, float alphaTest = 0) Parameters path AssetLocation Used as reference for caching textureSubId int texPos TextureAtlasPosition onCreate CreateTextureDelegate The method that should load the bitmap, if required. Can be left null to simply attempt to load the bmp from path using method LoadCompositeBitmap(AssetLocationAndSource) alphaTest float Returns bool False if the file was not found or the insert failed GetOrInsertTexture(AssetLocationAndSource, out int, out TextureAtlasPosition, CreateTextureDelegate, float) Same as InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) but this method remembers the inserted texure, which you can access using capi.TextureAtlas[path] A subsequent call to this method will update the texture, but retain the same texPos. Also a run-time texture reload will reload this texture automatically. bool GetOrInsertTexture(AssetLocationAndSource path, out int textureSubId, out TextureAtlasPosition texPos, CreateTextureDelegate onCreate = null, float alphaTest = 0) Parameters path AssetLocationAndSource Used as reference for caching textureSubId int texPos TextureAtlasPosition onCreate CreateTextureDelegate The method that should load the bitmap, if required. Can be left null to simply attempt to load the bmp from path using method LoadCompositeBitmap(AssetLocationAndSource) alphaTest float Returns bool False if the file was not found or the insert failed GetRandomColor(int) Returns an rgba value picked randomly inside the given texture (defined by its sub-id) int GetRandomColor(int textureSubId) Parameters textureSubId int Returns int GetRandomColor(int, int) Returns one of 30 random rgba values inside the given texture (defined by its sub-id) int GetRandomColor(int textureSubId, int rndIndex) Parameters textureSubId int rndIndex int 0..29 for a specific random pixel, or -1 to randomize, which is the same as calling GetRandomColor without the rndIndex argument Returns int GetRandomColor(TextureAtlasPosition, int) Returns one of 30 random rgba values inside the given texture (defined by its sub-id) int GetRandomColor(TextureAtlasPosition texPos, int rndIndex) Parameters texPos TextureAtlasPosition rndIndex int 0..29 for a specific random pixel, or -1 to randomize, which is the same as calling GetRandomColor without the rndIndex argument Returns int GetRandomColors(TextureAtlasPosition) Get the random colors array for the specified TextureAtlasPosition, creating it if necessary int[] GetRandomColors(TextureAtlasPosition texPos) Parameters texPos TextureAtlasPosition Returns int[] InsertTexture(byte[], out int, out TextureAtlasPosition, float) Inserts a texture into the texture atlas after the atlas has been generated. Updates the in-ram texture atlas as well as the in-gpu-ram texture atlas. The textureSubId can be used to find the TextureAtlasPosition again in case you loose it ;-) bool InsertTexture(byte[] pngBytes, out int textureSubId, out TextureAtlasPosition texPos, float alphaTest = 0) Parameters pngBytes byte[] textureSubId int texPos TextureAtlasPosition alphaTest float Returns bool InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) Inserts a texture into the texture atlas after the atlas has been generated. Updates the in-ram texture atlas as well as the in-gpu-ram texture atlas. The textureSubId can be used to find the TextureAtlasPosition again in case you loose it ;-) bool InsertTexture(IBitmap bmp, out int textureSubId, out TextureAtlasPosition texPos, float alphaTest = 0) Parameters bmp IBitmap textureSubId int texPos TextureAtlasPosition alphaTest float Returns bool InsertTextureCached(AssetLocation, byte[], out int, out TextureAtlasPosition, float) Same as InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) but this method remembers the inserted texure, which you can access using capi.TextureAtlas[path] A subsequent call to this method will update the texture, but retain the same texPos. Also a run-time texture reload will reload this texture automatically. bool InsertTextureCached(AssetLocation path, byte[] pngBytes, out int textureSubId, out TextureAtlasPosition texPos, float alphaTest = 0) Parameters path AssetLocation pngBytes byte[] textureSubId int texPos TextureAtlasPosition alphaTest float Returns bool InsertTextureCached(AssetLocation, IBitmap, out int, out TextureAtlasPosition, float) Same as InsertTexture(IBitmap, out int, out TextureAtlasPosition, float) but this method remembers the inserted texure, which you can access using capi.TextureAtlas[path] A subsequent call to this method will update the texture, but retain the same texPos. Also a run-time texture reload will reload this texture automatically. [Obsolete(\"Use GetOrInsertTexture() instead. It's more efficient to load the bmp only if the texture was not found in the cache\")] bool InsertTextureCached(AssetLocation path, IBitmap bmp, out int textureSubId, out TextureAtlasPosition texPos, float alphaTest = 0) Parameters path AssetLocation bmp IBitmap textureSubId int texPos TextureAtlasPosition alphaTest float Returns bool LoadCompositeBitmap(AssetLocationAndSource) Loads a bitmap from given asset. Can use ++ syntax for texture overlay and @[int] for texture rotation IBitmap LoadCompositeBitmap(AssetLocationAndSource path) Parameters path AssetLocationAndSource Returns IBitmap RegenMipMaps(int) Regenerates the mipmaps for one of the atlas textures, given by its array index void RegenMipMaps(int atlasIndex) Parameters atlasIndex int RenderTextureIntoAtlas(int, LoadedTexture, float, float, float, float, float, float, float) Renders given texture into the texture atlas at given location void RenderTextureIntoAtlas(int intoAtlasTextureId, LoadedTexture fromTexture, float sourceX, float sourceY, float sourceWidth, float sourceHeight, float targetX, float targetY, float alphaTest = 0.005) Parameters intoAtlasTextureId int fromTexture LoadedTexture sourceX float sourceY float sourceWidth float sourceHeight float targetX float targetY float alphaTest float"
  },
  "api/Vintagestory.API.Client.IconComponent.html": {
    "href": "api/Vintagestory.API.Client.IconComponent.html",
    "title": "Class IconComponent | VintageStory API",
    "keywords": "Class IconComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draws an icon Open in GitHub public class IconComponent : RichTextComponentBase Inheritance object RichTextComponentBase IconComponent Inherited Members RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseDown(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IconComponent(ICoreClientAPI, string, string, CairoFont) public IconComponent(ICoreClientAPI capi, string iconName, string iconPath, CairoFont font) Parameters capi ICoreClientAPI iconName string iconPath string font CairoFont Fields capi protected ICoreClientAPI capi Field Value ICoreClientAPI font protected CairoFont font Field Value CairoFont iconName protected string iconName Field Value string iconPath protected string iconPath Field Value string offY public double offY Field Value double parentBounds protected ElementBounds parentBounds Field Value ElementBounds sizeMulSvg public double sizeMulSvg Field Value double Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult A ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() public override void Dispose() RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double"
  },
  "api/Vintagestory.API.Client.IconRendererDelegate.html": {
    "href": "api/Vintagestory.API.Client.IconRendererDelegate.html",
    "title": "Delegate IconRendererDelegate | VintageStory API",
    "keywords": "Delegate IconRendererDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void IconRendererDelegate(Context ctx, int x, int y, float w, float h, double[] rgba) Parameters ctx Context x int y int w float h float rgba double[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.IconUtil.html": {
    "href": "api/Vintagestory.API.Client.IconUtil.html",
    "title": "Class IconUtil | VintageStory API",
    "keywords": "Class IconUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class IconUtil Inheritance object IconUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IconUtil(ICoreClientAPI) Creates a new IconUtil instance. public IconUtil(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Client API. Fields CustomIcons public Dictionary<string, IconRendererDelegate> CustomIcons Field Value Dictionary<string, IconRendererDelegate> Methods DrawArrowRight(Context, double, bool, bool) public void DrawArrowRight(Context cr, double lineWidth = 5, bool strokeOrFill = true, bool defaultPattern = true) Parameters cr Context lineWidth double strokeOrFill bool defaultPattern bool DrawConnectionQuality(Context, double, double, int, double) Draws 5 vertical bars of increasing size and Quality amount of them green public void DrawConnectionQuality(Context ctx, double x, double y, int quality, double size) Parameters ctx Context x double y double quality int size double DrawCross(Context, double, double, double, double, bool) public void DrawCross(Context ctx, double x, double y, double lineWidth, double size, bool preserverePath = false) Parameters ctx Context x double y double lineWidth double size double preserverePath bool DrawFlame(Context, double, bool, bool) public void DrawFlame(Context cr, double lineWidth = 3, bool strokeOrFill = true, bool defaultPattern = true) Parameters cr Context lineWidth double strokeOrFill bool defaultPattern bool DrawIcon(Context, string, double, double, double, double, double[]) Draws the icon. public void DrawIcon(Context cr, string type, double x, double y, double width, double height, double[] rgba) Parameters cr Context The context. type string The type to draw x double X position of the Icon. y double Y position of the Icon. width double Width of the Icon. height double Height of the Icon. rgba double[] The color of the icon. DrawIconInt(Context, string, int, int, float, float, double[]) Draws the icon. public void DrawIconInt(Context cr, string type, int x, int y, float width, float height, double[] rgba) Parameters cr Context The context. type string The type of icon to draw x int X position of the Icon. y int Y position of the Icon. width float Width of the Icon. height float Height of the Icon. rgba double[] The color of the icon. DrawLeftMouseButton(Context, int, int, float, float, double[]) public void DrawLeftMouseButton(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawMapMarker(Context, int, int, float, float, double[]) public void DrawMapMarker(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawMapPlayer(Context, int, int, float, float, double[], double[]) public void DrawMapPlayer(Context cr, int x, int y, float width, float height, double[] strokeRgba, double[] fillRgba) Parameters cr Context x int y int width float height float strokeRgba double[] fillRgba double[] DrawPen(Context, double, double, double, double) public void DrawPen(Context ctx, double x, double y, double lineWidth, double size) Parameters ctx Context x double y double lineWidth double size double DrawPlus(Context, int, int, float, float, double[], double) public void DrawPlus(Context ctx, int x, int y, float width, float height, double[] strokeRgba, double lineWidth) Parameters ctx Context x int y int width float height float strokeRgba double[] lineWidth double DrawRandomSymbol(Context, double, double, double, double[], double, int, int) public void DrawRandomSymbol(Context ctx, double x, double y, double size, double[] color, double lineWidth, int seed, int addLines = 0) Parameters ctx Context x double y double size double color double[] lineWidth double seed int addLines int DrawRightMouseButton(Context, int, int, float, float, double[]) public void DrawRightMouseButton(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawVSGear(Context, ImageSurface, int, int, float, float, double[]) public void DrawVSGear(Context cr, ImageSurface surface, int x, int y, float width, float height, double[] rgba) Parameters cr Context surface ImageSurface x int y int width float height float rgba double[] DrawWayointBee(Context, int, int, float, float, double[]) public void DrawWayointBee(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointCave(Context, int, int, float, float, double[]) public void DrawWaypointCave(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointCircle(Context, int, int, float, float, double[]) public void DrawWaypointCircle(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointHome(Context, int, int, float, float, double[]) public void DrawWaypointHome(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointLadder(Context, int, int, float, float, double[]) public void DrawWaypointLadder(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointPick(Context, int, int, float, float, double[]) public void DrawWaypointPick(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointPlayer(Context, int, int, float, float, double[]) public void DrawWaypointPlayer(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointRocks(Context, int, int, float, float, double[]) public void DrawWaypointRocks(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointRuins(Context, int, int, float, float, double[]) public void DrawWaypointRuins(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointSpiral(Context, int, int, float, float, double[]) public void DrawWaypointSpiral(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointStar1(Context, int, int, float, float, double[]) public void DrawWaypointStar1(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointStar2(Context, int, int, float, float, double[]) public void DrawWaypointStar2(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointTrader(Context, int, int, float, float, double[]) public void DrawWaypointTrader(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] DrawWaypointVessel(Context, int, int, float, float, double[]) public void DrawWaypointVessel(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawairbrush_svg(Context, int, int, float, float, double[]) public void Drawairbrush_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawapple_svg(Context, int, int, float, float, double[]) public void Drawapple_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawbasket_svg(Context, int, int, float, float, double[]) public void Drawbasket_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawbelt_svg(Context, int, int, float, float, double[]) public void Drawbelt_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawboots_svg(Context, int, int, float, float, double[]) public void Drawboots_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawbracers_svg(Context, int, int, float, float, double[]) public void Drawbracers_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawbrush_svg(Context, int, int, float, float, double[]) public void Drawbrush_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawcape_svg(Context, int, int, float, float, double[]) public void Drawcape_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawcursor_svg(Context, int, int, float, float, double[]) public void Drawcursor_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawdice_svg(Context, int, int, float, float, double[]) public void Drawdice_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Draweraser_svg(Context, int, int, float, float, double[]) public void Draweraser_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawerode_svg(Context, int, int, float, float, double[]) public void Drawerode_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawfloodfill_svg(Context, int, int, float, float, double[]) public void Drawfloodfill_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawgloves_svg(Context, int, int, float, float, double[]) public void Drawgloves_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawgrowshrink_svg(Context, int, int, float, float, double[]) public void Drawgrowshrink_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawhandheld_svg(Context, int, int, float, float, double[]) public void Drawhandheld_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawhat_svg(Context, int, int, float, float, double[]) public void Drawhat_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawhealth_svg(Context, int, int, float, float, double[]) public void Drawhealth_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawimport_svg(Context, int, int, float, float, double[]) public void Drawimport_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawlake_svg(Context, int, int, float, float, double[]) public void Drawlake_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawleft_svg(Context, int, int, float, float, double[]) public void Drawleft_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawline_svg(Context, int, int, float, float, double[]) public void Drawline_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawmask_svg(Context, int, int, float, float, double[]) public void Drawmask_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawmedal_svg(Context, int, int, float, float, double[]) public void Drawmedal_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawmenuicon_svg(Context, double, double, float, float, double[]) public void Drawmenuicon_svg(Context cr, double x, double y, float width, float height, double[] rgba) Parameters cr Context x double y double width float height float rgba double[] Drawnecklace_svg(Context, int, int, float, float, double[]) public void Drawnecklace_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawnone_svg(Context, int, int, float, float, double[]) public void Drawnone_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawoffhand_svg(Context, int, int, float, float, double[]) public void Drawoffhand_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawpullover_svg(Context, int, int, float, float, double[]) public void Drawpullover_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawraiselower_svg(Context, int, int, float, float, double[]) public void Drawraiselower_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawredo_svg(Context, int, int, float, float, double[]) public void Drawredo_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawrepeat_svg(Context, int, int, float, float, double[]) public void Drawrepeat_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawright_svg(Context, int, int, float, float, double[]) public void Drawright_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawring_svg(Context, int, int, float, float, double[]) public void Drawring_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawselect_svg(Context, int, int, float, float, double[]) public void Drawselect_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawshirt_svg(Context, int, int, float, float, double[]) public void Drawshirt_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawtree_svg(Context, int, int, float, float, double[]) public void Drawtree_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawtrousers_svg(Context, int, int, float, float, double[]) public void Drawtrousers_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] Drawundo_svg(Context, int, int, float, float, double[]) public void Drawundo_svg(Context cr, int x, int y, float width, float height, double[] rgba) Parameters cr Context x int y int width float height float rgba double[] GenTexture(int, int, DrawDelegate) Generates the texture. public LoadedTexture GenTexture(int width, int height, DrawDelegate drawHandler) Parameters width int The width of the drawing height int The height of the drawing. drawHandler DrawDelegate A delegate which handles the drawing. Returns LoadedTexture The resulting built texture. GenTexture(int, int, IAsset, double[]) public LoadedTexture GenTexture(int width, int height, IAsset asset, double[] rgba = null) Parameters width int height int asset IAsset rgba double[] Returns LoadedTexture SvgIconSource(AssetLocation) public IconRendererDelegate SvgIconSource(AssetLocation loc) Parameters loc AssetLocation Returns IconRendererDelegate SvgIconSource(IAsset) public IconRendererDelegate SvgIconSource(IAsset asset) Parameters asset IAsset Returns IconRendererDelegate"
  },
  "api/Vintagestory.API.Client.InfoTextDelegate.html": {
    "href": "api/Vintagestory.API.Client.InfoTextDelegate.html",
    "title": "Delegate InfoTextDelegate | VintageStory API",
    "keywords": "Delegate InfoTextDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate string InfoTextDelegate(ItemSlot slot) Parameters slot ItemSlot Returns string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.IngameDiscoveryDelegate.html": {
    "href": "api/Vintagestory.API.Client.IngameDiscoveryDelegate.html",
    "title": "Delegate IngameDiscoveryDelegate | VintageStory API",
    "keywords": "Delegate IngameDiscoveryDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void IngameDiscoveryDelegate(object sender, string discoveryCode, string text) Parameters sender object discoveryCode string text string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.IngameErrorDelegate.html": {
    "href": "api/Vintagestory.API.Client.IngameErrorDelegate.html",
    "title": "Delegate IngameErrorDelegate | VintageStory API",
    "keywords": "Delegate IngameErrorDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void IngameErrorDelegate(object sender, string errorCode, string text) Parameters sender object errorCode string text string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.InteractionMatcherDelegate.html": {
    "href": "api/Vintagestory.API.Client.InteractionMatcherDelegate.html",
    "title": "Delegate InteractionMatcherDelegate | VintageStory API",
    "keywords": "Delegate InteractionMatcherDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate bool InteractionMatcherDelegate(WorldInteraction wi, BlockSelection blockSelection, EntitySelection entitySelection) Parameters wi WorldInteraction blockSelection BlockSelection entitySelection EntitySelection Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.InteractionStacksDelegate.html": {
    "href": "api/Vintagestory.API.Client.InteractionStacksDelegate.html",
    "title": "Delegate InteractionStacksDelegate | VintageStory API",
    "keywords": "Delegate InteractionStacksDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate ItemStack[] InteractionStacksDelegate(WorldInteraction wi, BlockSelection blockSelection, EntitySelection entitySelection) Parameters wi WorldInteraction blockSelection BlockSelection entitySelection EntitySelection Returns ItemStack[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.IsPlayerReadyDelegate.html": {
    "href": "api/Vintagestory.API.Client.IsPlayerReadyDelegate.html",
    "title": "Delegate IsPlayerReadyDelegate | VintageStory API",
    "keywords": "Delegate IsPlayerReadyDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate bool IsPlayerReadyDelegate(ref EnumHandling handling) Parameters handling EnumHandling Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ItemRenderDelegate.html": {
    "href": "api/Vintagestory.API.Client.ItemRenderDelegate.html",
    "title": "Delegate ItemRenderDelegate | VintageStory API",
    "keywords": "Delegate ItemRenderDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A custom itemstack render handler. This method is called after Collectible.OnBeforeRender(). For render target gui, the gui shader and its uniforms are already fully prepared, you may only call RenderMesh() and ignore the modelMat, position and size values - stack sizes however, are not covered by this. public delegate void ItemRenderDelegate(ItemSlot inSlot, ItemRenderInfo renderInfo, Matrixf modelMat, double posX, double posY, double posZ, float size, int color, bool rotate = false, bool showStackSize = true) Parameters inSlot ItemSlot The slot in which the itemstack resides in renderInfo ItemRenderInfo The render info for this stack, you can choose to ignore these values modelMat Matrixf The model transformation matrix with position and size already preapplied, you can choose to ignore this value posX double The center x-position where the stack has to be rendered posY double The center y-position where the stack has to be rendered posZ double The depth position. Higher values might be required for very large models, which can cause them to poke through dialogs in front of them, however size float The size of the stack that has to be rendered color int The requested color, usually always white rotate bool Whether or not to rotate it (some parts of the game have this on or off) showStackSize bool Whether or not to show the stack size (some parts of the game have this on or off) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ItemRenderInfo.html": {
    "href": "api/Vintagestory.API.Client.ItemRenderInfo.html",
    "title": "Class ItemRenderInfo | VintageStory API",
    "keywords": "Class ItemRenderInfo Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds information on how a collectible should be rendered in hands, on the ground or in gui. In collectible.OnBeforeRender() the values are prefilled with the default ones. Open in GitHub public class ItemRenderInfo Inheritance object ItemRenderInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AlphaTest For discarding fragments with alpha value below this threshold public float AlphaTest Field Value float ApplyColor public bool ApplyColor Field Value bool CullFaces Wether or not to cull back faces public bool CullFaces Field Value bool DamageEffect public float DamageEffect Field Value float HalfTransparent (Currently) not used. public bool HalfTransparent Field Value bool InSlot The slot the stack is currently in public ItemSlot InSlot Field Value ItemSlot ModelRef The model to be rendered public MultiTextureMeshRef ModelRef Field Value MultiTextureMeshRef NormalShaded public bool NormalShaded Field Value bool OverlayOpacity public float OverlayOpacity Field Value float OverlayTexture public LoadedTexture OverlayTexture Field Value LoadedTexture TextureId The texture to be used when rendering. Should probalby be the texture id of the block or item texture atlas public int TextureId Field Value int TextureSize public Size2i TextureSize Field Value Size2i Transform The transform to be applied when rendered public ModelTransform Transform Field Value ModelTransform dt public float dt Field Value float Methods SetRotOverlay(ICoreClientAPI, float) public void SetRotOverlay(ICoreClientAPI capi, float opacity) Parameters capi ICoreClientAPI opacity float"
  },
  "api/Vintagestory.API.Client.ItemstackComponentBase.html": {
    "href": "api/Vintagestory.API.Client.ItemstackComponentBase.html",
    "title": "Class ItemstackComponentBase | VintageStory API",
    "keywords": "Class ItemstackComponentBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draws an itemstack Open in GitHub public class ItemstackComponentBase : RichTextComponentBase Inheritance object RichTextComponentBase ItemstackComponentBase Derived ItemstackTextComponent SlideshowGridRecipeTextComponent SlideshowItemstackTextComponent Inherited Members RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.ComposeElements(Context, ImageSurface) RichTextComponentBase.RenderInteractiveElements(float, double, double, double) RichTextComponentBase.CalcBounds(TextFlowPath[], double, double, double, out double) RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseDown(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemstackComponentBase(ICoreClientAPI) public ItemstackComponentBase(ICoreClientAPI capi) Parameters capi ICoreClientAPI Fields capi protected ICoreClientAPI capi Field Value ICoreClientAPI dummyInv protected DummyInventory dummyInv Field Value DummyInventory offX public double offX Field Value double offY public double offY Field Value double parentBounds protected ElementBounds parentBounds Field Value ElementBounds renderedTooltipSlot protected ItemSlot renderedTooltipSlot Field Value ItemSlot stackInfo protected GuiElementItemstackInfo stackInfo Field Value GuiElementItemstackInfo stackInfoBounds protected ElementBounds stackInfoBounds Field Value ElementBounds Methods Dispose() public override void Dispose() OnRequireInfoText(ItemSlot) protected virtual string OnRequireInfoText(ItemSlot slot) Parameters slot ItemSlot Returns string RenderItemstackTooltip(ItemSlot, double, double, float) public void RenderItemstackTooltip(ItemSlot slot, double renderX, double renderY, float dt) Parameters slot ItemSlot renderX double renderY double dt float"
  },
  "api/Vintagestory.API.Client.ItemstackTextComponent.html": {
    "href": "api/Vintagestory.API.Client.ItemstackTextComponent.html",
    "title": "Class ItemstackTextComponent | VintageStory API",
    "keywords": "Class ItemstackTextComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draws an itemstack Open in GitHub public class ItemstackTextComponent : ItemstackComponentBase Inheritance object RichTextComponentBase ItemstackComponentBase ItemstackTextComponent Inherited Members ItemstackComponentBase.renderedTooltipSlot ItemstackComponentBase.stackInfo ItemstackComponentBase.capi ItemstackComponentBase.stackInfoBounds ItemstackComponentBase.parentBounds ItemstackComponentBase.offY ItemstackComponentBase.offX ItemstackComponentBase.dummyInv ItemstackComponentBase.OnRequireInfoText(ItemSlot) ItemstackComponentBase.RenderItemstackTooltip(ItemSlot, double, double, float) ItemstackComponentBase.Dispose() RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemstackTextComponent(ICoreClientAPI, ItemStack, double, double, EnumFloat, Action<ItemStack>) public ItemstackTextComponent(ICoreClientAPI capi, ItemStack itemstack, double size, double rightSidePadding = 0, EnumFloat floatType = EnumFloat.Left, Action<ItemStack> onStackClicked = null) Parameters capi ICoreClientAPI itemstack ItemStack size double rightSidePadding double floatType EnumFloat onStackClicked Action<ItemStack> Fields ShowStacksize public bool ShowStacksize Field Value bool Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult A ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface OnMouseDown(MouseEvent) public override void OnMouseDown(MouseEvent args) Parameters args MouseEvent RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double"
  },
  "api/Vintagestory.API.Client.JsonDialogSettings.html": {
    "href": "api/Vintagestory.API.Client.JsonDialogSettings.html",
    "title": "Class JsonDialogSettings | VintageStory API",
    "keywords": "Class JsonDialogSettings Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class JsonDialogSettings Inheritance object JsonDialogSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Alignment public EnumDialogArea Alignment Field Value EnumDialogArea Code public string Code Field Value string DisableWorldInteract public bool DisableWorldInteract Field Value bool OnGet Called when the dialog is opened the first time or when dialog.ReloadValues() is called. Should return the values the input fields should be set to public OnValueGetDelegate OnGet Field Value OnValueGetDelegate OnSet Called whenever the value of a input field has changed public OnValueSetDelegate OnSet Field Value OnValueSetDelegate Padding public double Padding Field Value double PosX public float PosX Field Value float PosY public float PosY Field Value float Rows public DialogRow[] Rows Field Value DialogRow[] SizeMultiplier public double SizeMultiplier Field Value double Methods FromBytes(BinaryReader) Reads the content to the dialog. public void FromBytes(BinaryReader reader) Parameters reader BinaryReader The reader to read from. ToBytes(BinaryWriter) Writes the content to the writer. public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter The writer to fill with data."
  },
  "api/Vintagestory.API.Client.KeyCombination.html": {
    "href": "api/Vintagestory.API.Client.KeyCombination.html",
    "title": "Class KeyCombination | VintageStory API",
    "keywords": "Class KeyCombination Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Mapping of an input key combination. Note: the \"key\" might also be a mouse button if a hotkey has been configured to be activated by a mouse button Open in GitHub public class KeyCombination Inheritance object KeyCombination Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Alt Alt pressed condition. public bool Alt Field Value bool Ctrl Ctrl pressed condition. public bool Ctrl Field Value bool KeyCode The KeyCode (from 1.19.4, the keycodes map to either keys or mouse buttons) public int KeyCode Field Value int MouseStart The first keycode representing a mouse button public const int MouseStart = 240 Field Value int OnKeyUp public bool OnKeyUp Field Value bool SecondKeyCode The second key code (if it exists). public int? SecondKeyCode Field Value int? Shift Shift pressed condition. public bool Shift Field Value bool Methods Clone() Clones the current key combination. public KeyCombination Clone() Returns KeyCombination The cloned key combination. IsMouseButton(int) public bool IsMouseButton(int KeyCode) Parameters KeyCode int Returns bool PrimaryAsString() public string PrimaryAsString() Returns string SecondaryAsString() public string SecondaryAsString() Returns string ToString() Converts this key combination into a string. public override string ToString() Returns string The string code for this Key Combination."
  },
  "api/Vintagestory.API.Client.KeyConverter.html": {
    "href": "api/Vintagestory.API.Client.KeyConverter.html",
    "title": "Class KeyConverter | VintageStory API",
    "keywords": "Class KeyConverter Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Converts key code from OpenTK 4 to GlKeys Open in GitHub public static class KeyConverter Inheritance object KeyConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GlKeysToNew public static readonly int[] GlKeysToNew Field Value int[] NewKeysToGlKeys public static readonly int[] NewKeysToGlKeys Field Value int[]"
  },
  "api/Vintagestory.API.Client.KeyEvent.html": {
    "href": "api/Vintagestory.API.Client.KeyEvent.html",
    "title": "Class KeyEvent | VintageStory API",
    "keywords": "Class KeyEvent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class KeyEvent Inheritance object KeyEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AltPressed Is Alt being held down? public bool AltPressed { get; set; } Property Value bool CommandPressed Is mac os command key being held down? public bool CommandPressed { get; set; } Property Value bool CtrlPressed Is control/Ctrl being held down? public bool CtrlPressed { get; set; } Property Value bool Handled Is this keypress/key combination handled? public bool Handled { get; set; } Property Value bool KeyChar the character for the given key. public char KeyChar { get; set; } Property Value char KeyCode The keycode value. public int KeyCode { get; set; } Property Value int KeyCode2 If a player taps in quick succession, this is the second key public int? KeyCode2 { get; set; } Property Value int? ShiftPressed Is Shift being held down? public bool ShiftPressed { get; set; } Property Value bool"
  },
  "api/Vintagestory.API.Client.KeyEventDelegate.html": {
    "href": "api/Vintagestory.API.Client.KeyEventDelegate.html",
    "title": "Delegate KeyEventDelegate | VintageStory API",
    "keywords": "Delegate KeyEventDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void KeyEventDelegate(KeyEvent e) Parameters e KeyEvent Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.LineMeshUtil.html": {
    "href": "api/Vintagestory.API.Client.LineMeshUtil.html",
    "title": "Class LineMeshUtil | VintageStory API",
    "keywords": "Class LineMeshUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class LineMeshUtil Inheritance object LineMeshUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AddLine2D(MeshData, float, float, float, float, int) Adds a 2D line to the mesh data. public static void AddLine2D(MeshData m, float x1, float y1, float x2, float y2, int color) Parameters m MeshData The current mesh data. x1 float X position of the first point. y1 float Y position of the first point. x2 float X position of the second point. y2 float Y position of the second point. color int The converted base color. AddLineLoop(MeshData, Vec3f, Vec3f, Vec3f, Vec3f, int) Adds a collection of lines to the given mesh. public static void AddLineLoop(MeshData m, Vec3f p0, Vec3f p1, Vec3f p2, Vec3f p3, int color) Parameters m MeshData The current mesh data. p0 Vec3f The first point. p1 Vec3f The second point. p2 Vec3f The third point. p3 Vec3f The fourth point. color int The color of the resulting lines. AddVertex(MeshData, float, float, float, int) Adds a vertex to the mesh data. public static void AddVertex(MeshData model, float x, float y, float z, int color) Parameters model MeshData The mesh data. x float X position of the vertex. y float Y position of the vertex. z float Z position of the vertex. color int The color of the vertex. GetCube(int) Gets the cube of this line. public static MeshData GetCube(int color = 0) Parameters color int The converted base color. Returns MeshData The mesh data for the cube. GetRectangle(int) Gets the current rectangle for the line. public static MeshData GetRectangle(int color = 0) Parameters color int the converted base color. Returns MeshData The mesh data for the rectangle.."
  },
  "api/Vintagestory.API.Client.LineRectangled.html": {
    "href": "api/Vintagestory.API.Client.LineRectangled.html",
    "title": "Class LineRectangled | VintageStory API",
    "keywords": "Class LineRectangled Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class LineRectangled : Rectangled Inheritance object Rectangled LineRectangled Inherited Members Rectangled.X Rectangled.Y Rectangled.Width Rectangled.Height Rectangled.Bottom() Rectangled.PointInside(double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LineRectangled() public LineRectangled() LineRectangled(double, double, double, double) public LineRectangled(double X, double Y, double width, double height) Parameters X double Y double width double height double Fields Ascent public double Ascent Field Value double Properties AscentOrHeight public double AscentOrHeight { get; } Property Value double"
  },
  "api/Vintagestory.API.Client.LinkTextComponent.html": {
    "href": "api/Vintagestory.API.Client.LinkTextComponent.html",
    "title": "Class LinkTextComponent | VintageStory API",
    "keywords": "Class LinkTextComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class LinkTextComponent : RichTextComponent Inheritance object RichTextComponentBase RichTextComponent LinkTextComponent Inherited Members RichTextComponent.textUtil RichTextComponent.linebreak RichTextComponent.DisplayText RichTextComponent.Font RichTextComponent.Lines RichTextComponent.init() RichTextComponent.GetFontOrientOffsetX() RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LinkTextComponent(string) Create a dummy link text component for use with triggering link protocols through code. Not usable for anything gui related (it'll crash if you try) public LinkTextComponent(string href) Parameters href string LinkTextComponent(ICoreClientAPI, string, CairoFont, Action<LinkTextComponent>) A text component with an embedded link. public LinkTextComponent(ICoreClientAPI api, string displayText, CairoFont font, Action<LinkTextComponent> onLinkClicked) Parameters api ICoreClientAPI displayText string The text of the Text. font CairoFont onLinkClicked Action<LinkTextComponent> Fields Href public string Href Field Value string Properties Clickable public bool Clickable { get; set; } Property Value bool Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult True when longer than 1 line ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctxStatic, ImageSurface surfaceStatic) Parameters ctxStatic Context surfaceStatic ImageSurface Dispose() public override void Dispose() HandleLink() public void HandleLink() OnMouseDown(MouseEvent) public override void OnMouseDown(MouseEvent args) Parameters args MouseEvent OnMouseUp(MouseEvent) public override void OnMouseUp(MouseEvent args) Parameters args MouseEvent RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double SetHref(string) public LinkTextComponent SetHref(string href) Parameters href string Returns LinkTextComponent Trigger() public void Trigger() UseMouseOverCursor(ElementBounds) public override bool UseMouseOverCursor(ElementBounds richtextBounds) Parameters richtextBounds ElementBounds Returns bool"
  },
  "api/Vintagestory.API.Client.LoadedTexture.html": {
    "href": "api/Vintagestory.API.Client.LoadedTexture.html",
    "title": "Class LoadedTexture | VintageStory API",
    "keywords": "Class LoadedTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A reference to a texture that has been uploaded onto the graphics cards, if TextureId is not zero Open in GitHub public class LoadedTexture : IDisposable Inheritance object LoadedTexture Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LoadedTexture(ICoreClientAPI) Creates an empty loaded texture context with the Client API. public LoadedTexture(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Client API LoadedTexture(ICoreClientAPI, int, int, int) Creates a loaded texture context with pre-set texture information. public LoadedTexture(ICoreClientAPI capi, int textureId, int width, int height) Parameters capi ICoreClientAPI The Client API textureId int The ID of the texture. width int The width of the texture. height int The height of the texture. Fields Height Height of the texture. public int Height Field Value int TextureId The OpenGL Texture Id public int TextureId Field Value int Width Width of the texture. public int Width Field Value int capi protected ICoreClientAPI capi Field Value ICoreClientAPI disposed protected bool disposed Field Value bool trace protected string trace Field Value string Properties Disposed public bool Disposed { get; } Property Value bool IgnoreUndisposed Set this only you really know what you're doing public bool IgnoreUndisposed { get; set; } Property Value bool Methods Dispose() Disposes of the loaded texture safely. public virtual void Dispose() ~LoadedTexture() protected ~LoadedTexture()"
  },
  "api/Vintagestory.API.Client.MatrixToolsd.html": {
    "href": "api/Vintagestory.API.Client.MatrixToolsd.html",
    "title": "Class MatrixToolsd | VintageStory API",
    "keywords": "Class MatrixToolsd Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class MatrixToolsd Inheritance object MatrixToolsd Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods LoadPlayerFacingMatrix(double[]) public static void LoadPlayerFacingMatrix(double[] m) Parameters m double[] MatFacePlayer(double[]) public static void MatFacePlayer(double[] m) Parameters m double[] MatFollowPlayer(double[]) public static void MatFollowPlayer(double[] m) Parameters m double[] Project(Vec3d, double[], double[], int, int) public static Vec3d Project(Vec3d pos, double[] projection, double[] view, int viewportWidth, int viewportHeight) Parameters pos Vec3d projection double[] view double[] viewportWidth int viewportHeight int Returns Vec3d"
  },
  "api/Vintagestory.API.Client.Matrixf.html": {
    "href": "api/Vintagestory.API.Client.Matrixf.html",
    "title": "Class Matrixf | VintageStory API",
    "keywords": "Class Matrixf Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class Matrixf Inheritance object Matrixf Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Matrixf() public Matrixf() Matrixf(float[]) public Matrixf(float[] values) Parameters values float[] Fields Values public float[] Values Field Value float[] Properties ValuesAsDouble public double[] ValuesAsDouble { get; } Property Value double[] Methods Clone() public Matrixf Clone() Returns Matrixf Create() public static Matrixf Create() Returns Matrixf FollowPlayer() public Matrixf FollowPlayer() Returns Matrixf FollowPlayerXZ() public Matrixf FollowPlayerXZ() Returns Matrixf Identity() public Matrixf Identity() Returns Matrixf Invert() public Matrixf Invert() Returns Matrixf Mul(float[]) public Matrixf Mul(float[] matrix) Parameters matrix float[] Returns Matrixf Mul(Matrixf) public Matrixf Mul(Matrixf matrix) Parameters matrix Matrixf Returns Matrixf ReverseMul(float[]) public Matrixf ReverseMul(float[] matrix) Parameters matrix float[] Returns Matrixf Rotate(float, float, float) public Matrixf Rotate(float radX, float radY, float radZ) Parameters radX float radY float radZ float Returns Matrixf Rotate(Vec3f) public Matrixf Rotate(Vec3f radians) Parameters radians Vec3f Returns Matrixf RotateDeg(Vec3f) public Matrixf RotateDeg(Vec3f degrees) Parameters degrees Vec3f Returns Matrixf RotateX(float) public Matrixf RotateX(float radX) Parameters radX float Returns Matrixf RotateXDeg(float) public Matrixf RotateXDeg(float degX) Parameters degX float Returns Matrixf RotateY(float) public Matrixf RotateY(float radY) Parameters radY float Returns Matrixf RotateYDeg(float) public Matrixf RotateYDeg(float degY) Parameters degY float Returns Matrixf RotateZ(float) public Matrixf RotateZ(float radZ) Parameters radZ float Returns Matrixf RotateZDeg(float) public Matrixf RotateZDeg(float degZ) Parameters degZ float Returns Matrixf Scale(float, float, float) public Matrixf Scale(float x, float y, float z) Parameters x float y float z float Returns Matrixf Set(double[]) public Matrixf Set(double[] values) Parameters values double[] Returns Matrixf Set(float[]) public Matrixf Set(float[] values) Parameters values float[] Returns Matrixf TransformVector(Vec4d) Vectors with w==0 are called vectors and with w==1 are called points public Vec4d TransformVector(Vec4d vec) Parameters vec Vec4d Returns Vec4d TransformVector(Vec4f) Vectors with w==0 are called vectors and with w==1 are called points public Vec4f TransformVector(Vec4f vec) Parameters vec Vec4f Returns Vec4f Translate(double, double, double) public Matrixf Translate(double x, double y, double z) Parameters x double y double z double Returns Matrixf Translate(float, float, float) public Matrixf Translate(float x, float y, float z) Parameters x float y float z float Returns Matrixf Translate(Vec3f) public Matrixf Translate(Vec3f vec) Parameters vec Vec3f Returns Matrixf"
  },
  "api/Vintagestory.API.Client.MeshData.MeshDataFilterDelegate.html": {
    "href": "api/Vintagestory.API.Client.MeshData.MeshDataFilterDelegate.html",
    "title": "Delegate MeshData.MeshDataFilterDelegate | VintageStory API",
    "keywords": "Delegate MeshData.MeshDataFilterDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate bool MeshData.MeshDataFilterDelegate(int faceIndex) Parameters faceIndex int Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.MeshData.html": {
    "href": "api/Vintagestory.API.Client.MeshData.html",
    "title": "Class MeshData | VintageStory API",
    "keywords": "Class MeshData Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A data structure that can be used to upload mesh information onto the graphics card Please note, all arrays are used as a buffer. They do not tightly fit the data but are always sized as a multiple of 2 from the initial size. Open in GitHub public class MeshData Inheritance object MeshData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) MeshUtil.ClearWindFlags(MeshData) MeshUtil.SetWindFlag(MeshData, float, int) MeshUtil.ToggleWindModeSetWindData(MeshData, int, bool, int) Constructors MeshData(bool) Creates a new mesh data instance with no components initialized. public MeshData(bool initialiseArrays = true) Parameters initialiseArrays bool MeshData(int) This constructor creates a basic MeshData with xyz, Uv, Rgba, Flags and Indices only; Indices to Vertices ratio is the default 6:4 public MeshData(int capacity) Parameters capacity int MeshData(int, int, bool, bool, bool, bool) Creates a new mesh data instance with given components, but you can also freely nullify or set individual components after initialization Any component that is null is ignored by UploadModel/UpdateModel public MeshData(int capacityVertices, int capacityIndices, bool withNormals = false, bool withUv = true, bool withRgba = true, bool withFlags = true) Parameters capacityVertices int capacityIndices int withNormals bool withUv bool withRgba bool withFlags bool Fields BaseSizeInBytes public const int BaseSizeInBytes = 34 Field Value int ClimateColorMapIds BlockShapeTesselator climate colormap ids. Required by TerrainChunkTesselator to determine whether to color a vertex by a color map or not. Should hold VerticesCount / 4 values. Set to 0 for no color mapping, set 1..n for color map 0..n-1 public byte[] ClimateColorMapIds Field Value byte[] ColorMapIdsCount Amount of assigned tint values public int ColorMapIdsCount Field Value int CustomBytes Custom bytes buffer. Can be used to upload arbitrary amounts of byte values onto the graphics card public CustomMeshDataPartByte CustomBytes Field Value CustomMeshDataPartByte CustomFloats Custom floats buffer. Can be used to upload arbitrary amounts of float values onto the graphics card public CustomMeshDataPartFloat CustomFloats Field Value CustomMeshDataPartFloat CustomInts Custom ints buffer. Can be used to upload arbitrary amounts of int values onto the graphics card public CustomMeshDataPartInt CustomInts Field Value CustomMeshDataPartInt CustomShorts Custom shorts buffer. Can be used to upload arbitrary amounts of short values onto the graphics card public CustomMeshDataPartShort CustomShorts Field Value CustomMeshDataPartShort Flags The render flags buffer. This should hold VerticesCount*1 values. public int[] Flags Field Value int[] FlagsInstanced When using instanced rendering, set this flag to have the flags instanced. public bool FlagsInstanced Field Value bool FlagsOffset For offseting the data in the VBO. This field is used when updating a mesh. public int FlagsOffset Field Value int FlagsSize the size of the flags. public const int FlagsSize = 4 Field Value int FlagsStatic flags vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often. public bool FlagsStatic Field Value bool FrostableBits public bool[] FrostableBits Field Value bool[] HasAnyWindModeSet True if the flags array contains any wind mode public bool HasAnyWindModeSet Field Value bool IndexSize the size of the index. public const int IndexSize = 4 Field Value int Indices The indices buffer. This should hold IndicesCount values. public int[] Indices Field Value int[] IndicesCount Amount of currently assigned indices public int IndicesCount Field Value int IndicesInstanced When using instanced rendering, set this flag to have the indices instanced. public bool IndicesInstanced Field Value bool IndicesMax Index buffer size public int IndicesMax Field Value int IndicesOffset For offseting the data in the VBO. This field is used when updating a mesh. public int IndicesOffset Field Value int IndicesPerFace public int IndicesPerFace Field Value int IndicesStatic indices vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often. public bool IndicesStatic Field Value bool NormalSize The size of the normals. public const int NormalSize = 4 Field Value int Normals The normals buffer. This should hold VerticesCount*1 values. Currently unused by the engine. GL_INT_2_10_10_10_REV Format x: bits 0-9 (10 bit signed int) y: bits 10-19 (10 bit signed int) z: bits 20-29 (10 bit signed int) w: bits 30-31 public int[] Normals Field Value int[] NormalsCount Amount of currently assigned normals public int NormalsCount Field Value int NormalsOffset For offseting the data in the VBO. This field is used when updating a mesh. public int NormalsOffset Field Value int Recyclable If true, this MeshData was constructed from MeshDataRecycler public bool Recyclable Field Value bool Recycler public static MeshDataRecycler Recycler Field Value MeshDataRecycler RecyclingTime The time this MeshData most recently entered the recycling system; the oldest may be garbage collected public long RecyclingTime Field Value long RenderPassCount Amount of assigned render pass values public int RenderPassCount Field Value int RenderPassesAndExtraBits BlockShapeTesselator renderpass. Required by TerrainChunkTesselator to determine in which mesh data pool each quad should land in. Should hold VerticesCount / 4 values. Lower 10 bits = render pass Upper 6 bits = extra bits for tesselators Bit 10: DisableRandomDrawOffset public short[] RenderPassesAndExtraBits Field Value short[] Rgba The vertex color buffer. This should hold VerticesCount*4 values. public byte[] Rgba Field Value byte[] Rgba2Instanced When using instanced rendering, set this flag to have the rgba2 values instanced. public bool Rgba2Instanced Field Value bool Rgba2Offset For offseting the data in the VBO. This field is used when updating a mesh. public int Rgba2Offset Field Value int Rgba2Static rgba2 vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often. public bool Rgba2Static Field Value bool RgbaInstanced When using instanced rendering, set this flag to have the rgba values instanced. public bool RgbaInstanced Field Value bool RgbaOffset For offseting the data in the VBO. This field is used when updating a mesh. public int RgbaOffset Field Value int RgbaSize The size of the color. public const int RgbaSize = 4 Field Value int RgbaStatic rgab vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often. public bool RgbaStatic Field Value bool SeasonColorMapIds BlockShapeTesselator season colormap ids. Required by TerrainChunkTesselator to determine whether to color a vertex by a color map or not. Should hold VerticesCount / 4 values. Set to 0 for no color mapping, set 1..n for color map 0..n-1 public byte[] SeasonColorMapIds Field Value byte[] StandardIndicesPerFace public const int StandardIndicesPerFace = 6 Field Value int StandardVerticesPerFace public const int StandardVerticesPerFace = 4 Field Value int TextureIds public int[] TextureIds Field Value int[] TextureIndices Texture index per face, references to and index in the TextureIds array public byte[] TextureIndices Field Value byte[] TextureIndicesCount public int TextureIndicesCount Field Value int Uv The uv buffer for texture coordinates. This should hold VerticesCount*2 values. public float[] Uv Field Value float[] UvInstanced When using instanced rendering, set this flag to have the uv values instanced. public bool UvInstanced Field Value bool UvOffset For offseting the data in the VBO. This field is used when updating a mesh. public int UvOffset Field Value int UvSize The size of the Uv. public const int UvSize = 8 Field Value int UvStatic uv vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often. public bool UvStatic Field Value bool VerticesCount Amount of currently assigned vertices public int VerticesCount Field Value int VerticesMax Vertex buffer size public int VerticesMax Field Value int VerticesPerFace public int VerticesPerFace Field Value int XyzFaces BlockShapeTesselator xyz faces. Required by TerrainChunkTesselator to determine vertex lightness. Should hold VerticesCount / 4 values. Set to 0 for no face, set to 1..8 for faces 0..7 public byte[] XyzFaces Field Value byte[] XyzFacesCount Amount of assigned xyz face values public int XyzFacesCount Field Value int XyzInstanced When using instanced rendering, set this flag to have the xyz values instanced. public bool XyzInstanced Field Value bool XyzOffset For offseting the data in the VBO. This field is used when updating a mesh. public int XyzOffset Field Value int XyzSize The size of the position values. public const int XyzSize = 12 Field Value int XyzStatic xyz vbo usage hints for the graphics card. Recommended to be set to false when this section of data changes often. public bool XyzStatic Field Value bool mode The meshes draw mode public EnumDrawMode mode Field Value EnumDrawMode xyz The x/y/z coordinates buffer. This should hold VerticesCount*3 values. public float[] xyz Field Value float[] Properties FlagsCount returns VerticesCount public int FlagsCount { get; } Property Value int RenderPasses [Obsolete(\"Use RenderPassesAndExtraBits instead\")] public short[] RenderPasses { get; } Property Value short[] Rgba2Count returns VerticesCount * 4 public int Rgba2Count { get; } Property Value int RgbaCount returns VerticesCount * 4 public int RgbaCount { get; } Property Value int UvCount returns VerticesCount * 2 public int UvCount { get; } Property Value int XyzCount returns VerticesCount * 3 public int XyzCount { get; } Property Value int Methods AddColorMapIndex(byte, byte) public void AddColorMapIndex(byte climateMapIndex, byte seasonMapIndex) Parameters climateMapIndex byte seasonMapIndex byte AddColorMapIndex(byte, byte, bool) public void AddColorMapIndex(byte climateMapIndex, byte seasonMapIndex, bool frostableBit) Parameters climateMapIndex byte seasonMapIndex byte frostableBit bool AddIndex(int) public void AddIndex(int index) Parameters index int AddIndices(bool, int, int, int, int, int, int) public void AddIndices(bool allowSSBOs, int i1, int i2, int i3, int i4, int i5, int i6) Parameters allowSSBOs bool i1 int i2 int i3 int i4 int i5 int i6 int AddIndices(int, int, int, int, int, int) Add 6 indices public void AddIndices(int i1, int i2, int i3, int i4, int i5, int i6) Parameters i1 int i2 int i3 int i4 int i5 int i6 int AddIndices(int[]) public void AddIndices(int[] indices) Parameters indices int[] AddMeshData(MeshData) Add supplied mesh data to this mesh. If a given dataset is not set, it is not copied from the sourceMesh. Automatically adjusts the indices for you. public void AddMeshData(MeshData sourceMesh) Parameters sourceMesh MeshData AddMeshData(MeshData, float, float, float) public void AddMeshData(MeshData sourceMesh, float xOffset, float yOffset, float zOffset) Parameters sourceMesh MeshData xOffset float yOffset float zOffset float AddMeshData(MeshData, EnumChunkRenderPass) Add supplied mesh data to this mesh. If a given dataset is not set, it is not copied from the sourceMesh. Automatically adjusts the indices for you. Is filtered to only add mesh data for given render pass. A negative render pass value defaults to EnumChunkRenderPass.Opaque public void AddMeshData(MeshData data, EnumChunkRenderPass filterByRenderPass) Parameters data MeshData filterByRenderPass EnumChunkRenderPass AddMeshData(MeshData, MeshDataFilterDelegate) public void AddMeshData(MeshData data, MeshData.MeshDataFilterDelegate dele = null) Parameters data MeshData dele MeshData.MeshDataFilterDelegate AddNormal(float, float, float) Adds a new normal to the mesh. Grows the normal buffer if necessary. public void AddNormal(float normalizedX, float normalizedY, float normalizedZ) Parameters normalizedX float normalizedY float normalizedZ float AddNormal(BlockFacing) Adds a new normal to the mesh. Grows the normal buffer if necessary. public void AddNormal(BlockFacing facing) Parameters facing BlockFacing AddQuadIndices(int) public void AddQuadIndices(int i) Parameters i int AddRenderPass(short) public void AddRenderPass(short renderPass) Parameters renderPass short AddTextureId(int) public void AddTextureId(int textureId) Parameters textureId int AddVertex(float, float, float, float, float) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddVertex(float x, float y, float z, float u, float v) Parameters x float y float z float u float v float AddVertex(float, float, float, float, float, byte[]) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddVertex(float x, float y, float z, float u, float v, byte[] color) Parameters x float y float z float u float v float color byte[] AddVertex(float, float, float, float, float, int) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddVertex(float x, float y, float z, float u, float v, int color) Parameters x float y float z float u float v float color int AddVertexSkipTex(float, float, float, int) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddVertexSkipTex(float x, float y, float z, int color = -1) Parameters x float y float z float color int AddVertexWithFlags(float, float, float, float, float, int, int) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddVertexWithFlags(float x, float y, float z, float u, float v, int color, int flags) Parameters x float y float z float u float v float color int flags int AddVertexWithFlagsSkipColor(float, float, float, float, float, int) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddVertexWithFlagsSkipColor(float x, float y, float z, float u, float v, int flags) Parameters x float y float z float u float v float flags int AddWithFlagsVertex(float, float, float, float, float, int, int) Adds a new vertex to the mesh. Grows the vertex buffer if necessary. public void AddWithFlagsVertex(float x, float y, float z, float u, float v, int color, int flags) Parameters x float y float z float u float v float color int flags int AddXyzFace(byte) public void AddXyzFace(byte faceIndex) Parameters faceIndex byte Clear() Sets the counts of all data to 0 public MeshData Clear() Returns MeshData Clone() Creates a compact, deep copy of the mesh public MeshData Clone() Returns MeshData CloneUsingRecycler() public MeshData CloneUsingRecycler() Returns MeshData CompactBuffers() Resizes all buffers to tightly fit the data. Recommended to run this method for long-term in-memory storage of meshdata for meshes that won't get any new vertices added public void CompactBuffers() Dispose() Allows meshdata object to be returned to the recycler public void Dispose() DisposeBasicData() public void DisposeBasicData() EmptyClone() Creates an empty copy of the mesh public MeshData EmptyClone() Returns MeshData GetIndices() public int[] GetIndices() Returns int[] GetIndicesCount() Gets the number of Indicices in this mesh. public int GetIndicesCount() Returns int The number of indicies in the mesh. Remarks ..Shouldn't this be a property? GetMode() public EnumDrawMode GetMode() Returns EnumDrawMode GetRgba() public byte[] GetRgba() Returns byte[] GetUv() public float[] GetUv() Returns float[] GetVerticesCount() Gets the number of verticies in the the mesh. public int GetVerticesCount() Returns int The number of verticies in this mesh. Remarks ..Shouldn't this be a property? GetXyz() public float[] GetXyz() Returns float[] GrowIndexBuffer() public void GrowIndexBuffer() GrowIndexBuffer(int) public void GrowIndexBuffer(int byAtLeastQuantity) Parameters byAtLeastQuantity int GrowNormalsBuffer() public void GrowNormalsBuffer() GrowVertexBuffer() Doubles the size of the xyz, uv, rgba, rgba2 and flags arrays public void GrowVertexBuffer() MatrixTransform(double[]) Apply given transformation on the mesh public MeshData MatrixTransform(double[] matrix) Parameters matrix double[] Returns MeshData MatrixTransform(float[]) Apply given transformation on the mesh public MeshData MatrixTransform(float[] matrix) Parameters matrix float[] Returns MeshData MatrixTransform(float[], float[], Vec3f) Apply given transformation on the mesh - specifying two temporary vectors to work in (these can then be re-used for performance reasons) public MeshData MatrixTransform(float[] matrix, float[] vec, Vec3f origin = null) Parameters matrix float[] vec float[] a re-usable float[4], values unimportant origin Vec3f origin point Returns MeshData MatrixTransform(Span<float>, float[], Vec3f) public MeshData MatrixTransform(Span<float> matrix, float[] vec, Vec3f origin = null) Parameters matrix Span<float> vec float[] origin Vec3f Returns MeshData ModelTransform(ModelTransform) Apply given transformation on the mesh public MeshData ModelTransform(ModelTransform transform) Parameters transform ModelTransform Returns MeshData RemoveIndex() Removes the last index in the indices array public void RemoveIndex() RemoveVertex() Removes the last vertex in the vertices array public void RemoveVertex() RemoveVertices(int) Removes the last \"count\" vertices from the vertex array public void RemoveVertices(int count) Parameters count int Rotate(Vec3f, float, float, float) Rotate the mesh by given angles around given origin public MeshData Rotate(Vec3f origin, float radX, float radY, float radZ) Parameters origin Vec3f radX float radY float radZ float Returns MeshData Scale(Vec3f, float, float, float) Scale the mesh by given values around given origin public MeshData Scale(Vec3f origin, float scaleX, float scaleY, float scaleZ) Parameters origin Vec3f scaleX float scaleY float scaleZ float Returns MeshData SetIndices(int[]) public void SetIndices(int[] p) Parameters p int[] SetIndicesCount(int) Sets the number of indices in this mesh. public void SetIndicesCount(int value) Parameters value int The number of indices in this mesh. SetMode(EnumDrawMode) public void SetMode(EnumDrawMode p) Parameters p EnumDrawMode SetRgba(byte[]) public void SetRgba(byte[] p) Parameters p byte[] SetTexPos(TextureAtlasPosition) Sets the uvs of this mesh to the specified TextureAtlasPosition, assuming the initial UVs range from 0..1, as they will be scaled by the texPos public void SetTexPos(TextureAtlasPosition texPos) Parameters texPos TextureAtlasPosition SetUv(float[]) public void SetUv(float[] p) Parameters p float[] SetVertexFlags(int) Applies a vertex flag to an existing MeshData (uses binary OR) public void SetVertexFlags(int flag) Parameters flag int SetVerticesCount(int) Sets the number of verticies in this mesh. public void SetVerticesCount(int value) Parameters value int The number of verticies in this mesh Remarks ..Shouldn't this be a property? SetXyz(float[]) public void SetXyz(float[] p) Parameters p float[] SizeInBytes() public int SizeInBytes() Returns int SplitByTextureId() public MeshData[] SplitByTextureId() Returns MeshData[] Translate(float, float, float) Offset the mesh by given values public MeshData Translate(float x, float y, float z) Parameters x float y float z float Returns MeshData Translate(Vec3f) Offset the mesh by given values public MeshData Translate(Vec3f offset) Parameters offset Vec3f Returns MeshData WithColorMaps() Sets up the tints array for holding tint info public MeshData WithColorMaps() Returns MeshData WithNormals() Sets up the renderPasses array for holding render pass info public MeshData WithNormals() Returns MeshData WithRenderpasses() Sets up the renderPasses array for holding render pass info public MeshData WithRenderpasses() Returns MeshData WithTexPos(TextureAtlasPosition) Returns a copy of this mesh with the uvs set to the specified TextureAtlasPosition public MeshData WithTexPos(TextureAtlasPosition texPos) Parameters texPos TextureAtlasPosition Returns MeshData WithXyzFaces() Sets up the xyzfaces array for holding xyzfaces info public MeshData WithXyzFaces() Returns MeshData getTextureIndex(int) public byte getTextureIndex(int textureId) Parameters textureId int Returns byte"
  },
  "api/Vintagestory.API.Client.MeshDataPool.html": {
    "href": "api/Vintagestory.API.Client.MeshDataPool.html",
    "title": "Class MeshDataPool | VintageStory API",
    "keywords": "Class MeshDataPool Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll This is a modeldata pool, which can hold 400k vertices, 300k indices but not more than 900 chunks Open in GitHub public class MeshDataPool Inheritance object MeshDataPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AllocatedTris How many triangles are allocated. public int AllocatedTris Field Value int CurrentFragmentation The current fragmentaton. public float CurrentFragmentation Field Value float IndicesPoolSize the amount of indicies for this pool. public int IndicesPoolSize Field Value int MaxPartsPerPool The maximum parts for this pool. public int MaxPartsPerPool Field Value int RenderedTriangles How many triangles are rendered. public int RenderedTriangles Field Value int UsedVertices How many of the vertices are used. public int UsedVertices Field Value int VerticesPoolSize The current vertices for this pool. public int VerticesPoolSize Field Value int indicesGroupsCount How many index groups are there. public int indicesGroupsCount Field Value int indicesPosition the position of the indices. public int indicesPosition Field Value int indicesSizes The size of each index. public int[] indicesSizes Field Value int[] indicesStartsByte The starting byte for each index. public int[] indicesStartsByte Field Value int[] verticesPosition the position of the vertices. public int verticesPosition Field Value int Methods AllocateNewPool(ICoreClientAPI, int, int, int, CustomMeshDataPartFloat, CustomMeshDataPartShort, CustomMeshDataPartByte, CustomMeshDataPartInt) Allocates a new pool for mesh data. public static MeshDataPool AllocateNewPool(ICoreClientAPI capi, int verticesPoolSize, int indicesPoolSize, int maxPartsPerPool, CustomMeshDataPartFloat customFloats = null, CustomMeshDataPartShort customShorts = null, CustomMeshDataPartByte customBytes = null, CustomMeshDataPartInt customInts = null) Parameters capi ICoreClientAPI The core client API verticesPoolSize int The vertices pool size. indicesPoolSize int The index pool size. maxPartsPerPool int The maximum parts per pool. customFloats CustomMeshDataPartFloat The custom floats of the pool. customShorts CustomMeshDataPartShort customBytes CustomMeshDataPartByte The custom bytes of the pool. customInts CustomMeshDataPartInt The custom ints of the pool. Returns MeshDataPool The resulting mesh data pool. CalcFragmentation() Calculates the current fragmentation of the mesh. public void CalcFragmentation() Dispose(ICoreClientAPI) Disposes of the current mesh pool. public void Dispose(ICoreClientAPI capi) Parameters capi ICoreClientAPI The core client API Draw(ICoreClientAPI, FrustumCulling, EnumFrustumCullMode) Draw the model. public void Draw(ICoreClientAPI capi, FrustumCulling frustumCuller, EnumFrustumCullMode frustumCullMode) Parameters capi ICoreClientAPI The core client API frustumCuller FrustumCulling The area where models can be viewed from the camera. frustumCullMode EnumFrustumCullMode The mode of the culling. FrustumCull(FrustumCulling, EnumFrustumCullMode) Cleans up the rendering view of the models. public void FrustumCull(FrustumCulling frustumCuller, EnumFrustumCullMode frustumCullMode) Parameters frustumCuller FrustumCulling The area where models can be viewed from the camera. frustumCullMode EnumFrustumCullMode The mode of the culling. GetFragmentation() Gets the current fragmentation of the pool. public float GetFragmentation() Returns float IsEmpty() Is this an empty pool. public bool IsEmpty() Returns bool true if the pool is empty. RemoveLocation(ModelDataPoolLocation) Attempts to remove the model from the pool if the model exists. Will throw an invalid call or an InvalidOperationException if used improperly. public void RemoveLocation(ModelDataPoolLocation location) Parameters location ModelDataPoolLocation The location of the model data. RenderMesh(IRenderAPI) public void RenderMesh(IRenderAPI render) Parameters render IRenderAPI SetFullyVisible() public void SetFullyVisible() TryAdd(ICoreClientAPI, MeshData, Vec3i, int, Sphere) Attempts to add the new model. public ModelDataPoolLocation TryAdd(ICoreClientAPI capi, MeshData modeldata, Vec3i modelOrigin, int dimension, Sphere frustumCullSphere) Parameters capi ICoreClientAPI The core client API modeldata MeshData The model to add modelOrigin Vec3i The origin point of the model. dimension int frustumCullSphere Sphere The culling sphere. Returns ModelDataPoolLocation The location of the model (and the data) in the pool."
  },
  "api/Vintagestory.API.Client.MeshDataPoolManager.html": {
    "href": "api/Vintagestory.API.Client.MeshDataPoolManager.html",
    "title": "Class MeshDataPoolManager | VintageStory API",
    "keywords": "Class MeshDataPoolManager Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds a collection of pools, usually for 1 render pass Open in GitHub public class MeshDataPoolManager Inheritance object MeshDataPoolManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors MeshDataPoolManager(MeshDataPoolMasterManager, FrustumCulling, ICoreClientAPI, int, int, int, CustomMeshDataPartFloat, CustomMeshDataPartShort, CustomMeshDataPartByte, CustomMeshDataPartInt) Creates a new Mesh Data Pool public MeshDataPoolManager(MeshDataPoolMasterManager masterPool, FrustumCulling frustumCuller, ICoreClientAPI capi, int defaultVertexPoolSize, int defaultIndexPoolSize, int maxPartsPerPool, CustomMeshDataPartFloat customFloats = null, CustomMeshDataPartShort customShorts = null, CustomMeshDataPartByte customBytes = null, CustomMeshDataPartInt customInts = null) Parameters masterPool MeshDataPoolMasterManager The master mesh data pool manager frustumCuller FrustumCulling the Frustum Culler for the Pool capi ICoreClientAPI The Client API defaultVertexPoolSize int Size allocated for the Vertices. defaultIndexPoolSize int Size allocated for the Indices maxPartsPerPool int The maximum number of parts for this pool. customFloats CustomMeshDataPartFloat Additional float data customShorts CustomMeshDataPartShort customBytes CustomMeshDataPartByte Additional byte data customInts CustomMeshDataPartInt additional int data Methods AddModel(MeshData, Vec3i, int, Sphere) Adds a model to the mesh pool. public ModelDataPoolLocation AddModel(MeshData modeldata, Vec3i modelOrigin, int dimension, Sphere frustumCullSphere) Parameters modeldata MeshData The model data modelOrigin Vec3i The origin point of the Model dimension int frustumCullSphere Sphere The culling sphere. Returns ModelDataPoolLocation The location identifier for the pooled model. GetStats(ref long, ref long, ref long) Gets the stats of the model. public void GetStats(ref long usedVideoMemory, ref long renderedTris, ref long allocatedTris) Parameters usedVideoMemory long The amount of memory used by this pool. renderedTris long The number of Tris rendered by this pool. allocatedTris long The number of tris allocated by this pool. Render(Vec3d, string, EnumFrustumCullMode) Renders the chunk models to the GPU. One of the most important methods in the entire game! public void Render(Vec3d playerpos, string originUniformName, EnumFrustumCullMode frustumCullMode = EnumFrustumCullMode.CullNormal) Parameters playerpos Vec3d The position of the Player originUniformName string frustumCullMode EnumFrustumCullMode The culling mode. Default is CulHideDelay."
  },
  "api/Vintagestory.API.Client.MeshDataPoolMasterManager.html": {
    "href": "api/Vintagestory.API.Client.MeshDataPoolMasterManager.html",
    "title": "Class MeshDataPoolMasterManager | VintageStory API",
    "keywords": "Class MeshDataPoolMasterManager Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Holds all chunk mesh pools of the current running game Open in GitHub public class MeshDataPoolMasterManager Inheritance object MeshDataPoolMasterManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors MeshDataPoolMasterManager(ICoreClientAPI) Initializes the master mesh data pool. public MeshDataPoolMasterManager(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Client API. Fields DelayedPoolLocationRemoval If true, RemoveLocation() only actually removes the location after 3 frames. Need to call OnFrame() to achieve that public bool DelayedPoolLocationRemoval Field Value bool currentDt public float currentDt Field Value float currentModelViewMatrix public float[] currentModelViewMatrix Field Value float[] shadowMVPMatrix public float[] shadowMVPMatrix Field Value float[] Methods AddModelDataPool(MeshDataPool) Adds a new pool to the master pool. public void AddModelDataPool(MeshDataPool pool) Parameters pool MeshDataPool The mesh data pool to add. CalcFragmentation() Calculates the fragmentation. public float CalcFragmentation() Returns float The resulting calculation. DisposeAllPools(ICoreClientAPI) Cleans up and gets rid of all the pools. public void DisposeAllPools(ICoreClientAPI capi) Parameters capi ICoreClientAPI The client API. OnFrame(float, float[], float[]) public void OnFrame(float dt, float[] modelviewMatrix, float[] shadowMVPMatrix) Parameters dt float modelviewMatrix float[] shadowMVPMatrix float[] QuantityModelDataPools() The number of model pools in this master manager. public int QuantityModelDataPools() Returns int The number of model pools RemoveDataPoolLocations(ModelDataPoolLocation[]) Removes the models with the given locations. public void RemoveDataPoolLocations(ModelDataPoolLocation[] locations) Parameters locations ModelDataPoolLocation[] The locations of the model data."
  },
  "api/Vintagestory.API.Client.MeshDataRecycler.html": {
    "href": "api/Vintagestory.API.Client.MeshDataRecycler.html",
    "title": "Class MeshDataRecycler | VintageStory API",
    "keywords": "Class MeshDataRecycler Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll This is a recycling system for MeshData objects, so that they can be re-used: helps performance by easing memory allocation pressure, at the cost of holding typically around 300-400MB of memory for these recycled objects Open in GitHub public class MeshDataRecycler Inheritance object MeshDataRecycler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors MeshDataRecycler(IClientWorldAccessor) public MeshDataRecycler(IClientWorldAccessor clientMain) Parameters clientMain IClientWorldAccessor Fields MinimumSizeForRecycling public const int MinimumSizeForRecycling = 4096 Field Value int TTL public const int TTL = 15000 Field Value int Methods Dispose() Dispose of the MeshDataRecycler (normally on game exit, but can also be used to disable further use of it) public void Dispose() DoRecycling() Call this periodically on the same thread which will call GetOrCreateMesh, this is required to ensure the Recycling system is up to date public void DoRecycling() GetOrCreateMesh(int) Gets or creates a MeshData with basic data fields already allocated (may contain junk data) and capacity (VerticesMax) at least equal to minimumVertices; in MeshData created/recycled using this system, IndicesMax will be fixed equal to VerticesMax * 6 / 4 public MeshData GetOrCreateMesh(int minimumVertices) Parameters minimumVertices int Returns MeshData Recycle(MeshData) Offer this MeshData to the recycling system: it will first be queued for recycling, and later processed to be either recycled or disposed of public void Recycle(MeshData meshData) Parameters meshData MeshData"
  },
  "api/Vintagestory.API.Client.MeshRef.html": {
    "href": "api/Vintagestory.API.Client.MeshRef.html",
    "title": "Class MeshRef | VintageStory API",
    "keywords": "Class MeshRef Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A reference to a mesh that's been uploaded onto the graphics card (i.e. that has been placed in an OpenGL VAO). This reference can be used for rendering it. Open in GitHub public abstract class MeshRef : IDisposable Inheritance object MeshRef Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Disposed Am I disposed? public bool Disposed { get; protected set; } Property Value bool Initialized public abstract bool Initialized { get; } Property Value bool MultidrawByTextureId public bool MultidrawByTextureId { get; protected set; } Property Value bool Methods Dispose() Frees up any gpu allocated memory. Equivalent to calling api.Render.DeleteMesh() public virtual void Dispose()"
  },
  "api/Vintagestory.API.Client.MeshUtil.html": {
    "href": "api/Vintagestory.API.Client.MeshUtil.html",
    "title": "Class MeshUtil | VintageStory API",
    "keywords": "Class MeshUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class MeshUtil Inheritance object MeshUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearWindFlags(MeshData) public static void ClearWindFlags(this MeshData sourceMesh) Parameters sourceMesh MeshData SetWindFlag(MeshData, float, int) Sets given flag if vertex y > WaveFlagMinY, otherwise it clears all wind mode bits public static void SetWindFlag(this MeshData sourceMesh, float waveFlagMinY = 0.5625, int flag = 67108864) Parameters sourceMesh MeshData waveFlagMinY float flag int Default is EnumWindBitModeMask.NormalWind ToggleWindModeSetWindData(MeshData, int, bool, int) public static void ToggleWindModeSetWindData(this MeshData sourceMesh, int leavesNoShearTileSide, bool enableWind, int groundOffsetTop) Parameters sourceMesh MeshData leavesNoShearTileSide int enableWind bool groundOffsetTop int"
  },
  "api/Vintagestory.API.Client.ModelCubeUtilExt.EnumShadeMode.html": {
    "href": "api/Vintagestory.API.Client.ModelCubeUtilExt.EnumShadeMode.html",
    "title": "Enum ModelCubeUtilExt.EnumShadeMode | VintageStory API",
    "keywords": "Enum ModelCubeUtilExt.EnumShadeMode Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public enum ModelCubeUtilExt.EnumShadeMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Gradient = 2 Off = 0 On = 1"
  },
  "api/Vintagestory.API.Client.ModelCubeUtilExt.html": {
    "href": "api/Vintagestory.API.Client.ModelCubeUtilExt.html",
    "title": "Class ModelCubeUtilExt | VintageStory API",
    "keywords": "Class ModelCubeUtilExt Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class ModelCubeUtilExt : CubeMeshUtil Inheritance object CubeMeshUtil ModelCubeUtilExt Inherited Members CubeMeshUtil.CloudSideShadings CubeMeshUtil.DefaultBlockSideShadings CubeMeshUtil.DefaultBlockSideShadingsByFacing CubeMeshUtil.CubeVertices CubeMeshUtil.CubeFaceIndices CubeMeshUtil.CubeUvCoords CubeMeshUtil.CubeVertexIndices CubeMeshUtil.BaseCubeVertexIndices CubeMeshUtil.GetCube() CubeMeshUtil.GetShadedCubeRGBA(int, float[], bool) CubeMeshUtil.GetShadedCubeRGBA(int[], bool) CubeMeshUtil.GetCubeOnlyScaleXyz(float, float, Vec3f) CubeMeshUtil.GetCube(float, float, Vec3f) CubeMeshUtil.GetCube(float, float, float, Vec3f) CubeMeshUtil.ScaleCubeMesh(MeshData, float, float, float, Vec3f) CubeMeshUtil.GetCubeFace(BlockFacing) CubeMeshUtil.GetCubeFace(BlockFacing, float, float, Vec3f) CubeMeshUtil.SetXyzFacesAndPacketNormals(MeshData) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AddFace(MeshData, BlockFacing, Vec3f, Vec3f, Vec2f, Vec2f, int, int, EnumShadeMode, int[], float, int, byte, byte, short) public static void AddFace(MeshData modeldata, BlockFacing face, Vec3f centerXyz, Vec3f sizeXyz, Vec2f originUv, Vec2f sizeUv, int textureId, int color, ModelCubeUtilExt.EnumShadeMode shade, int[] vertexFlags, float brightness = 1, int uvRotation = 0, byte climateColorMapId = 0, byte seasonColorMapId = 0, short renderPass = -1) Parameters modeldata MeshData face BlockFacing centerXyz Vec3f sizeXyz Vec3f originUv Vec2f sizeUv Vec2f textureId int color int shade ModelCubeUtilExt.EnumShadeMode vertexFlags int[] brightness float uvRotation int climateColorMapId byte seasonColorMapId byte renderPass short AddFaceSkipTex(MeshData, BlockFacing, Vec3f, Vec3f, int, float) public static void AddFaceSkipTex(MeshData modeldata, BlockFacing face, Vec3f centerXyz, Vec3f sizeXyz, int color, float brightness = 1) Parameters modeldata MeshData face BlockFacing centerXyz Vec3f sizeXyz Vec3f color int brightness float"
  },
  "api/Vintagestory.API.Client.ModelDataPoolLocation.html": {
    "href": "api/Vintagestory.API.Client.ModelDataPoolLocation.html",
    "title": "Class ModelDataPoolLocation | VintageStory API",
    "keywords": "Class ModelDataPoolLocation Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Contains all the data for the given model pool. Open in GitHub public class ModelDataPoolLocation Inheritance object ModelDataPoolLocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CullVisible public Bools CullVisible Field Value Bools FrustumCullSphere The culling sphere. public Sphere FrustumCullSphere Field Value Sphere FrustumVisible Whether this model is visible or not. public bool FrustumVisible Field Value bool Hide public bool Hide Field Value bool IndicesEnd Where the indices of the model end. public int IndicesEnd Field Value int IndicesStart Where the indices of the model start. public int IndicesStart Field Value int LodLevel public int LodLevel Field Value int PoolId The ID of the pool model. public int PoolId Field Value int TransitionCounter Used for models with movements (like a door). public int TransitionCounter Field Value int VerticesEnd Where the vertices end. public int VerticesEnd Field Value int VerticesStart Where the vertices start. public int VerticesStart Field Value int VisibleBufIndex public static int VisibleBufIndex Field Value int Methods IsVisible(EnumFrustumCullMode, FrustumCulling) public bool IsVisible(EnumFrustumCullMode mode, FrustumCulling culler) Parameters mode EnumFrustumCullMode culler FrustumCulling Returns bool"
  },
  "api/Vintagestory.API.Client.MouseButtonState.html": {
    "href": "api/Vintagestory.API.Client.MouseButtonState.html",
    "title": "Class MouseButtonState | VintageStory API",
    "keywords": "Class MouseButtonState Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class MouseButtonState Inheritance object MouseButtonState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Left public bool Left Field Value bool Middle public bool Middle Field Value bool Right public bool Right Field Value bool Methods Clear() public void Clear()"
  },
  "api/Vintagestory.API.Client.MouseEvent.html": {
    "href": "api/Vintagestory.API.Client.MouseEvent.html",
    "title": "Class MouseEvent | VintageStory API",
    "keywords": "Class MouseEvent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll This contains the data for what the mouse is currently doing. Open in GitHub public class MouseEvent Inheritance object MouseEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors MouseEvent(int, int) public MouseEvent(int x, int y) Parameters x int y int MouseEvent(int, int, int, int) public MouseEvent(int x, int y, int deltaX, int deltaY) Parameters x int y int deltaX int deltaY int MouseEvent(int, int, int, int, EnumMouseButton) public MouseEvent(int x, int y, int deltaX, int deltaY, EnumMouseButton button) Parameters x int y int deltaX int deltaY int button EnumMouseButton MouseEvent(int, int, int, int, EnumMouseButton, int) This is apparently used for mouse move events (set to true if the mouse state has changed during constant polling, set to false if the move event came from opentk. This emulated state is apparantly used to determine the correct delta position to turn the camera. public MouseEvent(int x, int y, int deltaX, int deltaY, EnumMouseButton button, int modifiers) Parameters x int y int deltaX int deltaY int button EnumMouseButton modifiers int MouseEvent(int, int, EnumMouseButton) public MouseEvent(int x, int y, EnumMouseButton button) Parameters x int y int button EnumMouseButton MouseEvent(int, int, EnumMouseButton, int) public MouseEvent(int x, int y, EnumMouseButton button, int modifiers) Parameters x int y int button EnumMouseButton modifiers int Properties Button Gets the current mouse button pressed. public EnumMouseButton Button { get; } Property Value EnumMouseButton DeltaX The X movement of the mouse. public int DeltaX { get; } Property Value int DeltaY The Y movement of the mouse. public int DeltaY { get; } Property Value int Handled Am I handled? public bool Handled { get; set; } Property Value bool Modifiers public int Modifiers { get; } Property Value int X Current X position of the mouse. public int X { get; } Property Value int Y Current Y position of the mouse. public int Y { get; } Property Value int"
  },
  "api/Vintagestory.API.Client.MouseEventDelegate.html": {
    "href": "api/Vintagestory.API.Client.MouseEventDelegate.html",
    "title": "Delegate MouseEventDelegate | VintageStory API",
    "keywords": "Delegate MouseEventDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void MouseEventDelegate(MouseEvent e) Parameters e MouseEvent Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.MouseWheelEventArgs.html": {
    "href": "api/Vintagestory.API.Client.MouseWheelEventArgs.html",
    "title": "Class MouseWheelEventArgs | VintageStory API",
    "keywords": "Class MouseWheelEventArgs Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The event arguments for the mouse. Open in GitHub public class MouseWheelEventArgs Inheritance object MouseWheelEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields delta The rough change in time since last called. public int delta Field Value int deltaPrecise The precise change in time since last called. public float deltaPrecise Field Value float value The rough change in value. public int value Field Value int valuePrecise The precise change in value. public float valuePrecise Field Value float Properties IsHandled Is the current event being handled? public bool IsHandled { get; } Property Value bool Methods SetHandled(bool) Changes or sets the current handled state. public void SetHandled(bool value = true) Parameters value bool Should the event be handled?"
  },
  "api/Vintagestory.API.Client.MultiTextureMeshRef.html": {
    "href": "api/Vintagestory.API.Client.MultiTextureMeshRef.html",
    "title": "Class MultiTextureMeshRef | VintageStory API",
    "keywords": "Class MultiTextureMeshRef Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class MultiTextureMeshRef : IDisposable Inheritance object MultiTextureMeshRef Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors MultiTextureMeshRef(MeshRef[], int[]) public MultiTextureMeshRef(MeshRef[] meshrefs, int[] textureids) Parameters meshrefs MeshRef[] textureids int[] Fields meshrefs public MeshRef[] meshrefs Field Value MeshRef[] textureids public int[] textureids Field Value int[] Properties Disposed public bool Disposed { get; } Property Value bool Initialized public bool Initialized { get; } Property Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Vintagestory.API.Client.MusicTrack.html": {
    "href": "api/Vintagestory.API.Client.MusicTrack.html",
    "title": "Class MusicTrack | VintageStory API",
    "keywords": "Class MusicTrack Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Adds a basic music track. Open in GitHub public class MusicTrack : IMusicTrack Inheritance object MusicTrack Implements IMusicTrack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ForceActive If true, the music is considered active/playing until set to false and so no other track will play public bool ForceActive Field Value bool Location public AssetLocation Location Field Value AssetLocation ManualDispose public bool ManualDispose Field Value bool Sound Get the current sound file. public ILoadedSound Sound Field Value ILoadedSound loading Is it loading? public bool loading Field Value bool Properties IsActive Is the current song actively playing or is it loading? (False if neither action. public bool IsActive { get; } Property Value bool Name The name of the track. public string Name { get; } Property Value string PositionString public string PositionString { get; } Property Value string Priority The current song's priority. public float Priority { get; set; } Property Value float StartPriority The start priority of the track. A higher priority will leave active tracks playing. public virtual float StartPriority { get; } Property Value float Methods BeginPlay(TrackedPlayerProperties) Begins playing the Music track. public virtual void BeginPlay(TrackedPlayerProperties props) Parameters props TrackedPlayerProperties Player Properties BeginSort() Called before sorting by start priority happens public virtual void BeginSort() ContinuePlay(float, TrackedPlayerProperties) Is it cool for the current track to continue playing? public virtual bool ContinuePlay(float dt, TrackedPlayerProperties props) Parameters dt float Delta Time/Change in time. props TrackedPlayerProperties Track properties. Returns bool Cool or not cool? FadeOut(float, Action) Fades out the current track. public virtual void FadeOut(float seconds, Action onFadedOut = null) Parameters seconds float The duration of the fade out in seconds. onFadedOut Action What to have happen after the track has faded out. FastForward(float) public void FastForward(float seconds) Parameters seconds float Initialize(IAssetManager, ICoreClientAPI, IMusicEngine) Initialize the track. public virtual void Initialize(IAssetManager assetManager, ICoreClientAPI capi, IMusicEngine musicEngine) Parameters assetManager IAssetManager the global Asset Manager capi ICoreClientAPI The Core Client API musicEngine IMusicEngine ShouldPlay(TrackedPlayerProperties, ClimateCondition, BlockPos) Should this current track play? public virtual bool ShouldPlay(TrackedPlayerProperties props, ClimateCondition conds, BlockPos pos) Parameters props TrackedPlayerProperties Player Properties conds ClimateCondition pos BlockPos Returns bool Should we play the current track? Stop() Stops the track immediately public void Stop() UpdateVolume() Updates the volume of the current track provided Sound is not null. (effectively calls Sound.SetVolume) public virtual void UpdateVolume()"
  },
  "api/Vintagestory.API.Client.MusicTrackPart.html": {
    "href": "api/Vintagestory.API.Client.MusicTrackPart.html",
    "title": "Class MusicTrackPart | VintageStory API",
    "keywords": "Class MusicTrackPart Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class MusicTrackPart Inheritance object MusicTrackPart Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Files The files for the part. [JsonProperty] public AssetLocation[] Files Field Value AssetLocation[] Loading Am I loading? public bool Loading Field Value bool MaxSuitability The maximum Suitability of the given track [JsonProperty] public float MaxSuitability Field Value float MaxVolumne The maximum volume of a given track. [JsonProperty] public float MaxVolumne Field Value float MinSuitability The minimum Suitability of the given track [JsonProperty] public float MinSuitability Field Value float MinVolumne The minimum volume of a given track. [JsonProperty] public float MinVolumne Field Value float PosY the Y position. [JsonProperty] public float[] PosY Field Value float[] Sound The loaded sound public ILoadedSound Sound Field Value ILoadedSound StartedMs Start time in Miliseconds public long StartedMs Field Value long Sunlight [JsonProperty] public float[] Sunlight Field Value float[] Properties IsPlaying Am I playing? public bool IsPlaying { get; } Property Value bool Methods Applicable(IWorldAccessor, TrackedPlayerProperties) Am I applicable? public bool Applicable(IWorldAccessor world, TrackedPlayerProperties props) Parameters world IWorldAccessor world information props TrackedPlayerProperties the properties of the current track. Returns bool CurrentSuitability(IWorldAccessor, TrackedPlayerProperties) The current Suitability of the track. public float CurrentSuitability(IWorldAccessor world, TrackedPlayerProperties props) Parameters world IWorldAccessor world information props TrackedPlayerProperties the properties of the current track. Returns float CurrentVolume(IWorldAccessor, TrackedPlayerProperties) The current volume of the track. public float CurrentVolume(IWorldAccessor world, TrackedPlayerProperties props) Parameters world IWorldAccessor world information props TrackedPlayerProperties the properties of the current track. Returns float ExpandFiles(IAssetManager) Expands the target files. public virtual void ExpandFiles(IAssetManager assetManager) Parameters assetManager IAssetManager The current AssetManager instance."
  },
  "api/Vintagestory.API.Client.NetworkServerMessageHandler-1.html": {
    "href": "api/Vintagestory.API.Client.NetworkServerMessageHandler-1.html",
    "title": "Delegate NetworkServerMessageHandler<T> | VintageStory API",
    "keywords": "Delegate NetworkServerMessageHandler<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Handler for processing a message public delegate void NetworkServerMessageHandler<T>(T packet) Parameters packet T Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.NormalUtil.html": {
    "href": "api/Vintagestory.API.Client.NormalUtil.html",
    "title": "Class NormalUtil | VintageStory API",
    "keywords": "Class NormalUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public static class NormalUtil Inheritance object NormalUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields NegBit public static int NegBit Field Value int nineBitMask public static int nineBitMask Field Value int tenBitMask public static int tenBitMask Field Value int tenthBitMask public static int tenthBitMask Field Value int Methods FromPackedNormal(int, ref float[]) public static void FromPackedNormal(int normal, ref float[] toFill) Parameters normal int toFill float[] FromPackedNormal(int, ref Vec4f) public static void FromPackedNormal(int normal, ref Vec4f toFill) Parameters normal int toFill Vec4f PackNormal(float, float, float) public static int PackNormal(float x, float y, float z) Parameters x float y float z float Returns int PackNormal(Vec4f) public static int PackNormal(Vec4f normal) Parameters normal Vec4f Returns int"
  },
  "api/Vintagestory.API.Client.OnGamePauseResume.html": {
    "href": "api/Vintagestory.API.Client.OnGamePauseResume.html",
    "title": "Delegate OnGamePauseResume | VintageStory API",
    "keywords": "Delegate OnGamePauseResume Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void OnGamePauseResume(bool isPaused) Parameters isPaused bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.OnHotKeyDelegate.html": {
    "href": "api/Vintagestory.API.Client.OnHotKeyDelegate.html",
    "title": "Delegate OnHotKeyDelegate | VintageStory API",
    "keywords": "Delegate OnHotKeyDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void OnHotKeyDelegate(string hotkeycode, KeyCombination keyComb) Parameters hotkeycode string keyComb KeyCombination Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.OnRequireCell-1.html": {
    "href": "api/Vintagestory.API.Client.OnRequireCell-1.html",
    "title": "Delegate OnRequireCell<T> | VintageStory API",
    "keywords": "Delegate OnRequireCell<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate IGuiElementCell OnRequireCell<T>(T cell, ElementBounds bounds) Parameters cell T bounds ElementBounds Returns IGuiElementCell Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.OnSettingsChanged-1.html": {
    "href": "api/Vintagestory.API.Client.OnSettingsChanged-1.html",
    "title": "Delegate OnSettingsChanged<T> | VintageStory API",
    "keywords": "Delegate OnSettingsChanged<T> Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void OnSettingsChanged<T>(T newValue) Parameters newValue T Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.OnValueGetDelegate.html": {
    "href": "api/Vintagestory.API.Client.OnValueGetDelegate.html",
    "title": "Delegate OnValueGetDelegate | VintageStory API",
    "keywords": "Delegate OnValueGetDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate string OnValueGetDelegate(string elementCode) Parameters elementCode string Returns string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.OnValueSetDelegate.html": {
    "href": "api/Vintagestory.API.Client.OnValueSetDelegate.html",
    "title": "Delegate OnValueSetDelegate | VintageStory API",
    "keywords": "Delegate OnValueSetDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void OnValueSetDelegate(string elementCode, string newValue) Parameters elementCode string newValue string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ParticlePhysics.html": {
    "href": "api/Vintagestory.API.Client.ParticlePhysics.html",
    "title": "Class ParticlePhysics | VintageStory API",
    "keywords": "Class ParticlePhysics Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class ParticlePhysics Inheritance object ParticlePhysics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ParticlePhysics(IBlockAccessor) public ParticlePhysics(IBlockAccessor blockAccess) Parameters blockAccess IBlockAccessor Fields AsyncSpawnTime public const float AsyncSpawnTime = 0.033 Field Value float BlockAccess public IBlockAccessor BlockAccess Field Value IBlockAccessor CollisionBoxList public CachedCuboidList CollisionBoxList Field Value CachedCuboidList MotionCap public float MotionCap Field Value float PhysicsTickTime public float PhysicsTickTime Field Value float Methods CollisionStrength(Vec3f, Vec3f, float, float) public Vec3f CollisionStrength(Vec3f velocitybefore, Vec3f velocitynow, float gravityStrength, float deltatime) Parameters velocitybefore Vec3f velocitynow Vec3f gravityStrength float deltatime float Returns Vec3f HandleBoyancy(Vec3d, Vec3f, bool, float, float, float) public void HandleBoyancy(Vec3d pos, Vec3f velocity, bool boyant, float gravityStrength, float deltatime, float height) Parameters pos Vec3d velocity Vec3f boyant bool gravityStrength float deltatime float height float UpdateMotion(Vec3d, Vec3f, float) Updates the velocity vector according to the amount of passed time, gravity and terrain collision. public EnumCollideFlags UpdateMotion(Vec3d pos, Vec3f motion, float size) Parameters pos Vec3d motion Vec3f size float Returns EnumCollideFlags"
  },
  "api/Vintagestory.API.Client.PerceptionEffect.html": {
    "href": "api/Vintagestory.API.Client.PerceptionEffect.html",
    "title": "Class PerceptionEffect | VintageStory API",
    "keywords": "Class PerceptionEffect Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class PerceptionEffect Inheritance object PerceptionEffect Derived DamagedPerceptionEffect DrunkPerceptionEffect FreezingPerceptionEffect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PerceptionEffect(ICoreClientAPI) public PerceptionEffect(ICoreClientAPI capi) Parameters capi ICoreClientAPI Fields Code public string Code Field Value string DurationHours public double DurationHours Field Value double Intensity public float Intensity Field Value float PerceptionEffectId public int PerceptionEffectId Field Value int capi protected ICoreClientAPI capi Field Value ICoreClientAPI Methods ApplyToFpHand(Matrixf) public virtual void ApplyToFpHand(Matrixf modelMat) Parameters modelMat Matrixf ApplyToTpPlayer(EntityPlayer, float[], float?) public virtual void ApplyToTpPlayer(EntityPlayer entityPlr, float[] modelMatrix, float? playerIntensity = null) Parameters entityPlr EntityPlayer modelMatrix float[] playerIntensity float? NowActive(float) public virtual void NowActive(float intensity) Parameters intensity float NowDisabled() public virtual void NowDisabled() OnBeforeGameRender(float) public virtual void OnBeforeGameRender(float dt) Parameters dt float OnOwnPlayerDataReceived(EntityPlayer) public virtual void OnOwnPlayerDataReceived(EntityPlayer eplr) Parameters eplr EntityPlayer"
  },
  "api/Vintagestory.API.Client.PerceptionEffects.html": {
    "href": "api/Vintagestory.API.Client.PerceptionEffects.html",
    "title": "Class PerceptionEffects | VintageStory API",
    "keywords": "Class PerceptionEffects Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class PerceptionEffects Inheritance object PerceptionEffects Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PerceptionEffects(ICoreClientAPI) public PerceptionEffects(ICoreClientAPI capi) Parameters capi ICoreClientAPI Properties RegisteredEffects public ICollection<string> RegisteredEffects { get; } Property Value ICollection<string> Methods ApplyToFpHand(Matrixf) public void ApplyToFpHand(Matrixf modelMat) Parameters modelMat Matrixf ApplyToTpPlayer(EntityPlayer, float[], float?) public void ApplyToTpPlayer(EntityPlayer entityPlr, float[] modelMatrix, float? playerIntensity = null) Parameters entityPlr EntityPlayer modelMatrix float[] playerIntensity float? OnBeforeGameRender(float) public void OnBeforeGameRender(float dt) Parameters dt float OnOwnPlayerDataReceived(EntityPlayer) public void OnOwnPlayerDataReceived(EntityPlayer eplr) Parameters eplr EntityPlayer RegisterPerceptionEffect(PerceptionEffect, string) public void RegisterPerceptionEffect(PerceptionEffect effect, string code) Parameters effect PerceptionEffect code string TriggerEffect(string, float, bool?) public void TriggerEffect(string code, float intensity, bool? on = null) Parameters code string intensity float on bool?"
  },
  "api/Vintagestory.API.Client.Plane.html": {
    "href": "api/Vintagestory.API.Client.Plane.html",
    "title": "Struct Plane | VintageStory API",
    "keywords": "Struct Plane Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public struct Plane Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Plane(double, double, double, double) Creates a Plane with normalised (length 1.0) normal vector public Plane(double x, double y, double z, double d) Parameters x double y double z double d double Fields D public double D Field Value double normalX public double normalX Field Value double normalY public double normalY Field Value double normalZ public double normalZ Field Value double Methods AABBisOutside(Sphere) public bool AABBisOutside(Sphere sphere) Parameters sphere Sphere Returns bool distanceOfPoint(double, double, double) public double distanceOfPoint(double x, double y, double z) Parameters x double y double z double Returns double"
  },
  "api/Vintagestory.API.Client.PlayerEventDelegate.html": {
    "href": "api/Vintagestory.API.Client.PlayerEventDelegate.html",
    "title": "Delegate PlayerEventDelegate | VintageStory API",
    "keywords": "Delegate PlayerEventDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void PlayerEventDelegate(IClientPlayer byPlayer) Parameters byPlayer IClientPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.QuadMeshUtil.html": {
    "href": "api/Vintagestory.API.Client.QuadMeshUtil.html",
    "title": "Class QuadMeshUtil | VintageStory API",
    "keywords": "Class QuadMeshUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Utility class for simple quad meshes Open in GitHub public class QuadMeshUtil Inheritance object QuadMeshUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetCustomQuad(float, float, float, float, float, byte, byte, byte, byte) Returns a single vertical quad mesh at given position, size and color public static MeshData GetCustomQuad(float x, float y, float z, float width, float height, byte r, byte g, byte b, byte a) Parameters x float y float z float width float height float r byte g byte b byte a byte Returns MeshData GetCustomQuadHorizontal(float, float, float, float, float, byte, byte, byte, byte) Returns a single horziontal quad mesh with given params public static MeshData GetCustomQuadHorizontal(float x, float y, float z, float width, float length, byte r, byte g, byte b, byte a) Parameters x float y float z float width float length float r byte g byte b byte a byte Returns MeshData GetCustomQuadModelData(float, float, float, float, float) Quad without rgba, with uv public static MeshData GetCustomQuadModelData(float x, float y, float z, float dw, float dh) Parameters x float y float z float dw float dh float Returns MeshData GetCustomQuadModelData(float, float, float, float, float, float, float, float, byte, byte, byte, byte) Returns a custom quad mesh with the given params. public static MeshData GetCustomQuadModelData(float u, float v, float u2, float v2, float dx, float dy, float dw, float dh, byte r, byte g, byte b, byte a) Parameters u float v float u2 float v2 float dx float dy float dw float dh float r byte g byte b byte a byte Returns MeshData GetQuad() Returns a single vertical quad mesh of with vertices going from -1/-1 to 1/1 With UV, without RGBA public static MeshData GetQuad() Returns MeshData"
  },
  "api/Vintagestory.API.Client.RainMusicTrack.html": {
    "href": "api/Vintagestory.API.Client.RainMusicTrack.html",
    "title": "Class RainMusicTrack | VintageStory API",
    "keywords": "Class RainMusicTrack Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Creates a track for rain related music. [Not yet implemented] Open in GitHub public class RainMusicTrack : IMusicTrack Inheritance object RainMusicTrack Implements IMusicTrack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties IsActive Is the track active? public bool IsActive { get; } Property Value bool Name The name of the track public string Name { get; } Property Value string PositionString public string PositionString { get; } Property Value string Priority The priority of the track. A higher priority will cancel active tracks. public float Priority { get; } Property Value float StartPriority The start priority of the track. A higher priority will leave active tracks playing. public float StartPriority { get; } Property Value float Methods BeginPlay(TrackedPlayerProperties) Begin playing the current track. public void BeginPlay(TrackedPlayerProperties props) Parameters props TrackedPlayerProperties Player Properties BeginSort() Called before sorting by start priority happens public void BeginSort() ContinuePlay(float, TrackedPlayerProperties) Is it cool for the current track to continue playing? public bool ContinuePlay(float dt, TrackedPlayerProperties props) Parameters dt float Delta Time/Change in time. props TrackedPlayerProperties Track properties. Returns bool Cool or not cool? FadeOut(float, Action) Called when the track to interupted or when Update() returned false. So called every time the tracked ended or has to end public void FadeOut(float seconds, Action onFadedOut = null) Parameters seconds float onFadedOut Action FadeOut(float, Action<ILoadedSound>) public void FadeOut(float seconds, Action<ILoadedSound> onFadedOut) Parameters seconds float onFadedOut Action<ILoadedSound> FastForward(float) public void FastForward(float seconds) Parameters seconds float Initialize(IAssetManager, ICoreClientAPI, IMusicEngine) Initialization of the Music Track. public void Initialize(IAssetManager assetManager, ICoreClientAPI capi, IMusicEngine musicEngine) Parameters assetManager IAssetManager the global Asset Manager capi ICoreClientAPI The Core Client API musicEngine IMusicEngine ShouldPlay(TrackedPlayerProperties, ClimateCondition, BlockPos) Should this current track play? public bool ShouldPlay(TrackedPlayerProperties props, ClimateCondition conds, BlockPos pos) Parameters props TrackedPlayerProperties Player Properties conds ClimateCondition pos BlockPos Returns bool Should we play the current track? Stop() public void Stop() UpdateVolume() Updates the volume on the current track. public void UpdateVolume()"
  },
  "api/Vintagestory.API.Client.RawTexture.html": {
    "href": "api/Vintagestory.API.Client.RawTexture.html",
    "title": "Class RawTexture | VintageStory API",
    "keywords": "Class RawTexture Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class RawTexture Inheritance object RawTexture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Height public int Height Field Value int MagFilter public EnumTextureFilter MagFilter Field Value EnumTextureFilter MinFilter public EnumTextureFilter MinFilter Field Value EnumTextureFilter PixelFormat public EnumTexturePixelFormat PixelFormat Field Value EnumTexturePixelFormat PixelInternalFormat public EnumTextureInternalFormat PixelInternalFormat Field Value EnumTextureInternalFormat TextureId public int TextureId Field Value int Width public int Width Field Value int WrapS public EnumTextureWrap WrapS Field Value EnumTextureWrap WrapT public EnumTextureWrap WrapT Field Value EnumTextureWrap"
  },
  "api/Vintagestory.API.Client.RenderDelegateWithBounds.html": {
    "href": "api/Vintagestory.API.Client.RenderDelegateWithBounds.html",
    "title": "Delegate RenderDelegateWithBounds | VintageStory API",
    "keywords": "Delegate RenderDelegateWithBounds Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void RenderDelegateWithBounds(float deltaTime, ElementBounds currentBounds) Parameters deltaTime float currentBounds ElementBounds Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.RenderSkillItemDelegate.html": {
    "href": "api/Vintagestory.API.Client.RenderSkillItemDelegate.html",
    "title": "Delegate RenderSkillItemDelegate | VintageStory API",
    "keywords": "Delegate RenderSkillItemDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void RenderSkillItemDelegate(AssetLocation code, float dt, double atPosX, double atPosY) Parameters code AssetLocation dt float atPosX double atPosY double Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.RichTextComponent.html": {
    "href": "api/Vintagestory.API.Client.RichTextComponent.html",
    "title": "Class RichTextComponent | VintageStory API",
    "keywords": "Class RichTextComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class RichTextComponent : RichTextComponentBase Inheritance object RichTextComponentBase RichTextComponent Derived ClearFloatTextComponent HotkeyComponent LinkTextComponent Inherited Members RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseDown(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.Dispose() RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors RichTextComponent(ICoreClientAPI, string, CairoFont) public RichTextComponent(ICoreClientAPI api, string displayText, CairoFont font) Parameters api ICoreClientAPI displayText string font CairoFont Fields DisplayText public string DisplayText Field Value string Font public CairoFont Font Field Value CairoFont Lines public TextLine[] Lines Field Value TextLine[] linebreak protected EnumLinebreakBehavior linebreak Field Value EnumLinebreakBehavior textUtil protected TextDrawUtil textUtil Field Value TextDrawUtil Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult True when longer than 1 line ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context Context of the text component. surface ImageSurface The surface of the image. GetFontOrientOffsetX() protected double GetFontOrientOffsetX() Returns double RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double init() protected void init()"
  },
  "api/Vintagestory.API.Client.RichTextComponentBase.html": {
    "href": "api/Vintagestory.API.Client.RichTextComponentBase.html",
    "title": "Class RichTextComponentBase | VintageStory API",
    "keywords": "Class RichTextComponentBase Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class RichTextComponentBase Inheritance object RichTextComponentBase Derived IconComponent ItemstackComponentBase RichTextComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors RichTextComponentBase(ICoreClientAPI) public RichTextComponentBase(ICoreClientAPI api) Parameters api ICoreClientAPI Fields api protected ICoreClientAPI api Field Value ICoreClientAPI Properties BoundsPerLine The width/height boundaries of this text component per line public virtual LineRectangled[] BoundsPerLine { get; protected set; } Property Value LineRectangled[] Float When left or right, then this element can span over multiple text lines public virtual EnumFloat Float { get; set; } Property Value EnumFloat MouseOverCursor public string MouseOverCursor { get; protected set; } Property Value string PaddingLeft Unscaled value public virtual double PaddingLeft { get; set; } Property Value double PaddingRight Padding that is used when a richtextcomponent came before and needs some left spacing to it. Unscaled value public virtual double PaddingRight { get; set; } Property Value double RenderColor public virtual Vec4f RenderColor { get; set; } Property Value Vec4f UnscaledMarginTop This will be the Y-Advance into the next line. Unscaled value. Also used as the offset with EnumVerticalAlign.FixedOffset public virtual double UnscaledMarginTop { get; set; } Property Value double VerticalAlign public virtual EnumVerticalAlign VerticalAlign { get; set; } Property Value EnumVerticalAlign Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public virtual EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult A ComposeElements(Context, ImageSurface) Composes the element. public virtual void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() public virtual void Dispose() GetCurrentFlowPathSection(TextFlowPath[], double) protected virtual TextFlowPath GetCurrentFlowPathSection(TextFlowPath[] flowPath, double posY) Parameters flowPath TextFlowPath[] posY double Returns TextFlowPath OnMouseDown(MouseEvent) public virtual void OnMouseDown(MouseEvent args) Parameters args MouseEvent OnMouseMove(MouseEvent) public virtual void OnMouseMove(MouseEvent args) Parameters args MouseEvent OnMouseUp(MouseEvent) public virtual void OnMouseUp(MouseEvent args) Parameters args MouseEvent RenderInteractiveElements(float, double, double, double) Renders the text component. public virtual void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double UseMouseOverCursor(ElementBounds) public virtual bool UseMouseOverCursor(ElementBounds richtextBounds) Parameters richtextBounds ElementBounds Returns bool"
  },
  "api/Vintagestory.API.Client.SavegameCellEntry.html": {
    "href": "api/Vintagestory.API.Client.SavegameCellEntry.html",
    "title": "Class SavegameCellEntry | VintageStory API",
    "keywords": "Class SavegameCellEntry Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class SavegameCellEntry Inheritance object SavegameCellEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DetailText The details of the table cell. public string DetailText Field Value string DetailTextFont The font of the detail text. public CairoFont DetailTextFont Field Value CairoFont DetailTextOffY public double DetailTextOffY Field Value double DrawAsButton public bool DrawAsButton Field Value bool Enabled Whether or not the cell is on. public bool Enabled Field Value bool HoverText public string HoverText Field Value string LeftOffY The y offset of the left title and detail text public float LeftOffY Field Value float OnClick The event fired when the tablecell is clicked. public Action OnClick Field Value Action RightTopOffY The y offset of the right top text public float RightTopOffY Field Value float RightTopText The text displayed in the top right corner of the cell. public string RightTopText Field Value string Selected public bool Selected Field Value bool Title The title of the Table Cell. public string Title Field Value string TitleFont The font of the cell title. public CairoFont TitleFont Field Value CairoFont"
  },
  "api/Vintagestory.API.Client.SelectionChangedDelegate.html": {
    "href": "api/Vintagestory.API.Client.SelectionChangedDelegate.html",
    "title": "Delegate SelectionChangedDelegate | VintageStory API",
    "keywords": "Delegate SelectionChangedDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate void SelectionChangedDelegate(string code, bool selected) Parameters code string selected bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.ShapeTextureSource.html": {
    "href": "api/Vintagestory.API.Client.ShapeTextureSource.html",
    "title": "Class ShapeTextureSource | VintageStory API",
    "keywords": "Class ShapeTextureSource Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class ShapeTextureSource : ITexPositionSource Inheritance object ShapeTextureSource Implements ITexPositionSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ShapeTextureSource(ICoreClientAPI, Shape, string) public ShapeTextureSource(ICoreClientAPI capi, Shape shape, string filenameForLogging) Parameters capi ICoreClientAPI shape Shape filenameForLogging string ShapeTextureSource(ICoreClientAPI, Shape, string, IDictionary<string, CompositeTexture>, TexturePathUpdater) public ShapeTextureSource(ICoreClientAPI capi, Shape shape, string filenameForLogging, IDictionary<string, CompositeTexture> texturesSource, TexturePathUpdater pathUpdater) Parameters capi ICoreClientAPI shape Shape filenameForLogging string texturesSource IDictionary<string, CompositeTexture> pathUpdater TexturePathUpdater Fields firstTexPos public TextureAtlasPosition? firstTexPos Field Value TextureAtlasPosition textures public Dictionary<string, CompositeTexture> textures Field Value Dictionary<string, CompositeTexture> Properties AtlasSize This returns the size of the atlas this texture resides in. public Size2i AtlasSize { get; } Property Value Size2i this[string] public TextureAtlasPosition this[string textureCode] { get; } Parameters textureCode string Property Value TextureAtlasPosition"
  },
  "api/Vintagestory.API.Client.SkillItem.html": {
    "href": "api/Vintagestory.API.Client.SkillItem.html",
    "title": "Class SkillItem | VintageStory API",
    "keywords": "Class SkillItem Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class SkillItem : IDisposable Inheritance object SkillItem Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code public AssetLocation Code Field Value AssetLocation Data public object Data Field Value object Description public string Description Field Value string Enabled public bool Enabled Field Value bool Hotkey public KeyCombination Hotkey Field Value KeyCombination Linebreak public bool Linebreak Field Value bool Name public string Name Field Value string RenderHandler public RenderSkillItemDelegate RenderHandler Field Value RenderSkillItemDelegate Texture public LoadedTexture Texture Field Value LoadedTexture TexturePremultipliedAlpha public bool TexturePremultipliedAlpha Field Value bool Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() WithIcon(ICoreClientAPI, string) public SkillItem WithIcon(ICoreClientAPI capi, string iconCode) Parameters capi ICoreClientAPI iconCode string Returns SkillItem WithIcon(ICoreClientAPI, DrawSkillIconDelegate) public SkillItem WithIcon(ICoreClientAPI capi, DrawSkillIconDelegate onDrawIcon) Parameters capi ICoreClientAPI onDrawIcon DrawSkillIconDelegate Returns SkillItem WithIcon(ICoreClientAPI, LoadedTexture) public SkillItem WithIcon(ICoreClientAPI capi, LoadedTexture texture) Parameters capi ICoreClientAPI texture LoadedTexture Returns SkillItem WithLetterIcon(ICoreClientAPI, string) public SkillItem WithLetterIcon(ICoreClientAPI capi, string letter) Parameters capi ICoreClientAPI letter string Returns SkillItem"
  },
  "api/Vintagestory.API.Client.SliderTooltipDelegate.html": {
    "href": "api/Vintagestory.API.Client.SliderTooltipDelegate.html",
    "title": "Delegate SliderTooltipDelegate | VintageStory API",
    "keywords": "Delegate SliderTooltipDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate string SliderTooltipDelegate(int currentValue) Parameters currentValue int Returns string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.SlideshowGridRecipeTextComponent.html": {
    "href": "api/Vintagestory.API.Client.SlideshowGridRecipeTextComponent.html",
    "title": "Class SlideshowGridRecipeTextComponent | VintageStory API",
    "keywords": "Class SlideshowGridRecipeTextComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draws multiple itemstacks Open in GitHub public class SlideshowGridRecipeTextComponent : ItemstackComponentBase Inheritance object RichTextComponentBase ItemstackComponentBase SlideshowGridRecipeTextComponent Inherited Members ItemstackComponentBase.renderedTooltipSlot ItemstackComponentBase.stackInfo ItemstackComponentBase.capi ItemstackComponentBase.stackInfoBounds ItemstackComponentBase.parentBounds ItemstackComponentBase.offY ItemstackComponentBase.offX ItemstackComponentBase.dummyInv ItemstackComponentBase.OnRequireInfoText(ItemSlot) ItemstackComponentBase.RenderItemstackTooltip(ItemSlot, double, double, float) RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SlideshowGridRecipeTextComponent(ICoreClientAPI, GridRecipe[], double, EnumFloat, Action<ItemStack>, ItemStack[]) Flips through given array of grid recipes every second public SlideshowGridRecipeTextComponent(ICoreClientAPI capi, GridRecipe[] gridrecipes, double size, EnumFloat floatType, Action<ItemStack> onStackClicked = null, ItemStack[] allStacks = null) Parameters capi ICoreClientAPI gridrecipes GridRecipe[] size double floatType EnumFloat onStackClicked Action<ItemStack> allStacks ItemStack[] If set, will resolve wildcards based on this list, otherwise will search all available blocks/items Fields CurrentVisibleRecipe public GridRecipeAndUnnamedIngredients CurrentVisibleRecipe Field Value GridRecipeAndUnnamedIngredients GridRecipesAndUnIn public GridRecipeAndUnnamedIngredients[] GridRecipesAndUnIn Field Value GridRecipeAndUnnamedIngredients[] Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult A ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface Dispose() public override void Dispose() OnMouseDown(MouseEvent) public override void OnMouseDown(MouseEvent args) Parameters args MouseEvent RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double"
  },
  "api/Vintagestory.API.Client.SlideshowItemstackTextComponent.html": {
    "href": "api/Vintagestory.API.Client.SlideshowItemstackTextComponent.html",
    "title": "Class SlideshowItemstackTextComponent | VintageStory API",
    "keywords": "Class SlideshowItemstackTextComponent Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Draws multiple itemstacks Open in GitHub public class SlideshowItemstackTextComponent : ItemstackComponentBase Inheritance object RichTextComponentBase ItemstackComponentBase SlideshowItemstackTextComponent Inherited Members ItemstackComponentBase.renderedTooltipSlot ItemstackComponentBase.stackInfo ItemstackComponentBase.capi ItemstackComponentBase.stackInfoBounds ItemstackComponentBase.parentBounds ItemstackComponentBase.offY ItemstackComponentBase.offX ItemstackComponentBase.dummyInv ItemstackComponentBase.RenderItemstackTooltip(ItemSlot, double, double, float) ItemstackComponentBase.Dispose() RichTextComponentBase.MouseOverCursor RichTextComponentBase.api RichTextComponentBase.BoundsPerLine RichTextComponentBase.UnscaledMarginTop RichTextComponentBase.PaddingRight RichTextComponentBase.PaddingLeft RichTextComponentBase.Float RichTextComponentBase.RenderColor RichTextComponentBase.VerticalAlign RichTextComponentBase.GetCurrentFlowPathSection(TextFlowPath[], double) RichTextComponentBase.OnMouseMove(MouseEvent) RichTextComponentBase.OnMouseUp(MouseEvent) RichTextComponentBase.UseMouseOverCursor(ElementBounds) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SlideshowItemstackTextComponent(ICoreClientAPI, ItemStack, List<ItemStack>, double, EnumFloat, Action<ItemStack>) Looks at the collectibles handbook groupBy attribute and makes a list of itemstacks from that public SlideshowItemstackTextComponent(ICoreClientAPI capi, ItemStack itemstackgroup, List<ItemStack> allstacks, double unscaleSize, EnumFloat floatType, Action<ItemStack> onStackClicked = null) Parameters capi ICoreClientAPI itemstackgroup ItemStack allstacks List<ItemStack> unscaleSize double floatType EnumFloat onStackClicked Action<ItemStack> SlideshowItemstackTextComponent(ICoreClientAPI, ItemStack[], double, EnumFloat, Action<ItemStack>) Flips through given array of item stacks every second public SlideshowItemstackTextComponent(ICoreClientAPI capi, ItemStack[] itemstacks, double unscaledSize, EnumFloat floatType, Action<ItemStack> onStackClicked = null) Parameters capi ICoreClientAPI itemstacks ItemStack[] unscaledSize double floatType EnumFloat onStackClicked Action<ItemStack> Fields ExtraTooltipText public string ExtraTooltipText Field Value string Itemstacks public ItemStack[] Itemstacks Field Value ItemStack[] ShowTooltip public bool ShowTooltip Field Value bool curItemIndex protected int curItemIndex Field Value int onStackClicked protected Action<ItemStack> onStackClicked Field Value Action<ItemStack> overrideCurrentItemStack public StackDisplayDelegate overrideCurrentItemStack Field Value StackDisplayDelegate renderOffset public Vec3f renderOffset Field Value Vec3f renderSize public float renderSize Field Value float secondsVisible protected float secondsVisible Field Value float slot protected ItemSlot slot Field Value ItemSlot Properties Background public bool Background { get; set; } Property Value bool ShowStackSize public bool ShowStackSize { get; set; } Property Value bool Methods CalcBounds(TextFlowPath[], double, double, double, out double) Initializes the size and stuff. Return true if you had to enter the next line public override EnumCalcBoundsResult CalcBounds(TextFlowPath[] flowPath, double currentLineHeight, double offsetX, double lineY, out double nextOffsetX) Parameters flowPath TextFlowPath[] currentLineHeight double offsetX double lineY double nextOffsetX double Returns EnumCalcBoundsResult A ComposeElements(Context, ImageSurface) Composes the element. public override void ComposeElements(Context ctx, ImageSurface surface) Parameters ctx Context surface ImageSurface OnMouseDown(MouseEvent) public override void OnMouseDown(MouseEvent args) Parameters args MouseEvent OnRequireInfoText(ItemSlot) protected override string OnRequireInfoText(ItemSlot slot) Parameters slot ItemSlot Returns string RenderInteractiveElements(float, double, double, double) Renders the text component. public override void RenderInteractiveElements(float deltaTime, double renderX, double renderY, double renderZ) Parameters deltaTime float renderX double renderY double renderZ double"
  },
  "api/Vintagestory.API.Client.SoundParams.html": {
    "href": "api/Vintagestory.API.Client.SoundParams.html",
    "title": "Class SoundParams | VintageStory API",
    "keywords": "Class SoundParams Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The sound paramaters used for loading sounds on the client side Open in GitHub [ProtoContract] public class SoundParams Inheritance object SoundParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SoundParams() Empty Constructor. public SoundParams() SoundParams(AssetLocation) Constructs the sound based off the asset location. public SoundParams(AssetLocation location) Parameters location AssetLocation The asset location of the track. Fields DisposeOnFinish Probably want to set this to false on looping sounds. But remember to dispose it yourself when you no longer need it [ProtoMember(5)] public bool DisposeOnFinish Field Value bool Location The specific sound to be played [ProtoMember(1)] public AssetLocation Location Field Value AssetLocation LowPassFilter 0...1 [ProtoMember(7)] public float LowPassFilter Field Value float Pitch The sounds intial pitch. [ProtoMember(6)] public float Pitch Field Value float Position The position of the sound [ProtoMember(2)] public Vec3f Position Field Value Vec3f Range The sounds initial range (default is 32) [ProtoMember(11)] public float Range Field Value float ReferenceDistance The range in which the sound does not attenuate at all [ProtoMember(9)] public float ReferenceDistance Field Value float RelativePosition If true then Position is added relative to the players current position [ProtoMember(3)] public bool RelativePosition Field Value bool ReverbDecayTime 0...99f [ProtoMember(8)] public float ReverbDecayTime Field Value float ShouldLoop If the sound should start again when finished [ProtoMember(4)] public bool ShouldLoop Field Value bool SoundType Determines whether to apply the music or sound volumne level to the Volume [ProtoMember(12)] public EnumSoundType SoundType Field Value EnumSoundType Properties Volume The sounds initial volumne (0f - 1f) public float Volume { get; set; } Property Value float"
  },
  "api/Vintagestory.API.Client.StackAndWildCard.html": {
    "href": "api/Vintagestory.API.Client.StackAndWildCard.html",
    "title": "Class StackAndWildCard | VintageStory API",
    "keywords": "Class StackAndWildCard Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class StackAndWildCard Inheritance object StackAndWildCard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Stack public ItemStack Stack Field Value ItemStack WildCard public AssetLocation WildCard Field Value AssetLocation"
  },
  "api/Vintagestory.API.Client.StackDisplayDelegate.html": {
    "href": "api/Vintagestory.API.Client.StackDisplayDelegate.html",
    "title": "Delegate StackDisplayDelegate | VintageStory API",
    "keywords": "Delegate StackDisplayDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate ItemStack StackDisplayDelegate() Returns ItemStack Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.StatbarValueDelegate.html": {
    "href": "api/Vintagestory.API.Client.StatbarValueDelegate.html",
    "title": "Delegate StatbarValueDelegate | VintageStory API",
    "keywords": "Delegate StatbarValueDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate string StatbarValueDelegate() Returns string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.SurfaceMusicTrack.html": {
    "href": "api/Vintagestory.API.Client.SurfaceMusicTrack.html",
    "title": "Class SurfaceMusicTrack | VintageStory API",
    "keywords": "Class SurfaceMusicTrack Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Adds a basic music track. Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class SurfaceMusicTrack : IMusicTrack Inheritance object SurfaceMusicTrack Implements IMusicTrack Derived EventMusicTrack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Chance [JsonProperty] public float Chance Field Value float DistanceToSpawnPoint [JsonProperty] public float DistanceToSpawnPoint Field Value float Location The location of the track. [JsonProperty(\"File\")] public AssetLocation Location Field Value AssetLocation MaxHour Latest to play the track. [JsonProperty] public float MaxHour Field Value float MaxLatitude [JsonProperty] public float MaxLatitude Field Value float MaxSeason [JsonProperty] public float MaxSeason Field Value float MaxTemperature [JsonProperty] public float MaxTemperature Field Value float MinHour Earliest to play the track. [JsonProperty] public float MinHour Field Value float MinLatitude [JsonProperty] public float MinLatitude Field Value float MinRainFall [JsonProperty] public float MinRainFall Field Value float MinSeason [JsonProperty] public float MinSeason Field Value float MinSunlight Minimum sunlight to play the track. [JsonProperty] public int MinSunlight Field Value int OnPlayList The current play style of the track [JsonProperty] public string OnPlayList Field Value string OnPlayLists public string[] OnPlayLists Field Value string[] ShouldPlayMusic public static bool ShouldPlayMusic Field Value bool Sound Get the current sound file. public ILoadedSound Sound Field Value ILoadedSound capi Core client API. protected ICoreClientAPI capi Field Value ICoreClientAPI globalCooldownUntilMs Global cooldown until next track public static long globalCooldownUntilMs Field Value long musicEngine protected IMusicEngine musicEngine Field Value IMusicEngine nowMaxHour protected float nowMaxHour Field Value float nowMinHour protected float nowMinHour Field Value float prevFrequency Gets the previous frequency setting. protected static int prevFrequency Field Value int tracksCooldownUntilMs Cooldown for each track by name. public static Dictionary<string, long> tracksCooldownUntilMs Field Value Dictionary<string, long> Properties IsActive Is the current song actively playing or is it loading? (False if neither action. public bool IsActive { get; } Property Value bool MusicFrequency Gets the current Music Frequency setting. public int MusicFrequency { get; } Property Value int Name The name of the track. public string Name { get; } Property Value string PositionString public string PositionString { get; } Property Value string Priority The current song's priority. If higher than 1, will stop other tracks and start this one [JsonProperty] public float Priority { get; set; } Property Value float StartPriority The start priority of the track. A higher priority will leave active tracks playing. public float StartPriority { get; set; } Property Value float StartPriorityRnd The songs starting priority. If higher than 1, then it will be started first. But does not interrupt already running tracks. When reading a songs start priority the maximum of start priority and priority is used [JsonProperty(\"StartPriority\")] public NatFloat StartPriorityRnd { get; set; } Property Value NatFloat Methods BeginPlay(TrackedPlayerProperties) Begins playing the Music track. public virtual void BeginPlay(TrackedPlayerProperties props) Parameters props TrackedPlayerProperties Player Properties BeginSort() Called before sorting by start priority happens public virtual void BeginSort() ContinuePlay(float, TrackedPlayerProperties) Is it cool for the current track to continue playing? public virtual bool ContinuePlay(float dt, TrackedPlayerProperties props) Parameters dt float Delta Time/Change in time. props TrackedPlayerProperties Track properties. Returns bool Cool or not cool? FadeOut(float, Action) Fades out the current track. public virtual void FadeOut(float seconds, Action onFadedOut = null) Parameters seconds float The duration of the fade out in seconds. onFadedOut Action What to have happen after the track has faded out. FastForward(float) public virtual void FastForward(float seconds) Parameters seconds float FrequencyChanged(int, ICoreClientAPI) The Frequency change in the static system. protected static void FrequencyChanged(int newFreq, ICoreClientAPI capi) Parameters newFreq int The new frequency capi ICoreClientAPI the core client API Initialize(IAssetManager, ICoreClientAPI, IMusicEngine) Initialize the track. public virtual void Initialize(IAssetManager assetManager, ICoreClientAPI capi, IMusicEngine musicEngine) Parameters assetManager IAssetManager the global Asset Manager capi ICoreClientAPI The Core Client API musicEngine IMusicEngine SetCooldown(float) Sets the cooldown of the current track. public virtual void SetCooldown(float multiplier) Parameters multiplier float The multiplier for the cooldown. ShouldPlay(TrackedPlayerProperties, ClimateCondition, BlockPos) Should this current track play? public virtual bool ShouldPlay(TrackedPlayerProperties props, ClimateCondition conds, BlockPos pos) Parameters props TrackedPlayerProperties Player Properties conds ClimateCondition pos BlockPos Returns bool Should we play the current track? UpdateVolume() Updates the volume of the current track provided Sound is not null. (effectively calls Sound.SetVolume) public virtual void UpdateVolume() selectMinMaxHour() protected virtual void selectMinMaxHour()"
  },
  "api/Vintagestory.API.Client.Tesselation.TileSideEnum.html": {
    "href": "api/Vintagestory.API.Client.Tesselation.TileSideEnum.html",
    "title": "Class TileSideEnum | VintageStory API",
    "keywords": "Class TileSideEnum Namespace Vintagestory.API.Client.Tesselation Assembly VintagestoryAPI.dll Open in GitHub public class TileSideEnum Inheritance object TileSideEnum Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AxisByTileSide public static int[] AxisByTileSide Field Value int[] Codes public static string[] Codes Field Value string[] Down public const int Down = 5 Field Value int East public const int East = 1 Field Value int MoveIndex public static int[] MoveIndex Field Value int[] North public const int North = 0 Field Value int OffsetByTileSide public static FastVec3i[] OffsetByTileSide Field Value FastVec3i[] Opposites public static int[] Opposites Field Value int[] SideCount public const int SideCount = 6 Field Value int South public const int South = 2 Field Value int Up public const int Up = 4 Field Value int West public const int West = 3 Field Value int Methods GetOpposite(int) public static int GetOpposite(int tileSide) Parameters tileSide int Returns int ToFlags(int) public static int ToFlags(int nValue) Parameters nValue int Returns int"
  },
  "api/Vintagestory.API.Client.Tesselation.TileSideFlagsEnum.html": {
    "href": "api/Vintagestory.API.Client.Tesselation.TileSideFlagsEnum.html",
    "title": "Class TileSideFlagsEnum | VintageStory API",
    "keywords": "Class TileSideFlagsEnum Namespace Vintagestory.API.Client.Tesselation Assembly VintagestoryAPI.dll Open in GitHub public class TileSideFlagsEnum Inheritance object TileSideFlagsEnum Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields All public const int All = 63 Field Value int Down public const int Down = 32 Field Value int East public const int East = 2 Field Value int None public const int None = 0 Field Value int North public const int North = 1 Field Value int South public const int South = 4 Field Value int Up public const int Up = 16 Field Value int West public const int West = 8 Field Value int Methods HasFlag(int, int) public static bool HasFlag(int nFlagA, int nFlagB) Parameters nFlagA int nFlagB int Returns bool"
  },
  "api/Vintagestory.API.Client.Tesselation.html": {
    "href": "api/Vintagestory.API.Client.Tesselation.html",
    "title": "Namespace Vintagestory.API.Client.Tesselation | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Client.Tesselation Classes TileSideEnum Open in GitHub TileSideFlagsEnum Open in GitHub"
  },
  "api/Vintagestory.API.Client.TesselationMetaData.html": {
    "href": "api/Vintagestory.API.Client.TesselationMetaData.html",
    "title": "Class TesselationMetaData | VintageStory API",
    "keywords": "Class TesselationMetaData Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TesselationMetaData Inheritance object TesselationMetaData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ClimateColorMapId public byte ClimateColorMapId Field Value byte GeneralGlowLevel public int GeneralGlowLevel Field Value int GeneralWindMode public int GeneralWindMode Field Value int IgnoreElements public string[] IgnoreElements Field Value string[] QuantityElements public int? QuantityElements Field Value int? Rotation public Vec3f Rotation Field Value Vec3f SeasonColorMapId public byte SeasonColorMapId Field Value byte SelectiveElements public string[] SelectiveElements Field Value string[] TexSource public ITexPositionSource TexSource Field Value ITexPositionSource TexturesSizes public Dictionary<string, int[]> TexturesSizes Field Value Dictionary<string, int[]> TypeForLogging public string TypeForLogging Field Value string UsesColorMap public bool UsesColorMap Field Value bool WithDamageEffect public bool WithDamageEffect Field Value bool WithJointIds public bool WithJointIds Field Value bool defaultTextureSize public int[] defaultTextureSize Field Value int[] randomRotMatrices public static float[][] randomRotMatrices Field Value float[][] randomRotations public static float[] randomRotations Field Value float[] Methods Clone() public TesselationMetaData Clone() Returns TesselationMetaData"
  },
  "api/Vintagestory.API.Client.TextBackground.html": {
    "href": "api/Vintagestory.API.Client.TextBackground.html",
    "title": "Class TextBackground | VintageStory API",
    "keywords": "Class TextBackground Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TextBackground Inheritance object TextBackground Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BorderColor The stroke color of the border public double[] BorderColor Field Value double[] BorderWidth The thickness of the border public double BorderWidth Field Value double FillColor The fill color of the background public double[] FillColor Field Value double[] HorPadding The padding around the text. public int HorPadding Field Value int Radius The radius of the text. public double Radius Field Value double Shade Adds a blur to the background public bool Shade Field Value bool ShadeColor public double[] ShadeColor Field Value double[] VerPadding public int VerPadding Field Value int Properties Padding public int Padding { set; } Property Value int Methods Clone() public TextBackground Clone() Returns TextBackground"
  },
  "api/Vintagestory.API.Client.TextDrawUtil.html": {
    "href": "api/Vintagestory.API.Client.TextDrawUtil.html",
    "title": "Class TextDrawUtil | VintageStory API",
    "keywords": "Class TextDrawUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TextDrawUtil Inheritance object TextDrawUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AutobreakAndDrawMultilineText(Context, CairoFont, string, double, double, TextFlowPath[], EnumTextOrientation, EnumLinebreakBehavior) public double AutobreakAndDrawMultilineText(Context ctx, CairoFont font, string text, double lineX, double lineY, TextFlowPath[] flowPath, EnumTextOrientation orientation = EnumTextOrientation.Left, EnumLinebreakBehavior linebreak = EnumLinebreakBehavior.AfterWord) Parameters ctx Context font CairoFont text string lineX double lineY double flowPath TextFlowPath[] orientation EnumTextOrientation linebreak EnumLinebreakBehavior Returns double AutobreakAndDrawMultilineText(Context, CairoFont, string, double, EnumTextOrientation) Use Matrix transformation to move the draw position public void AutobreakAndDrawMultilineText(Context ctx, CairoFont font, string text, double boxWidth, EnumTextOrientation orientation = EnumTextOrientation.Left) Parameters ctx Context The context of the text. font CairoFont The font of the text. text string The text itself. boxWidth double The width of the box containing the text. orientation EnumTextOrientation The orientation of the text. AutobreakAndDrawMultilineTextAt(Context, CairoFont, string, double, double, double, EnumTextOrientation) Draws the text with matrix transformations. public double AutobreakAndDrawMultilineTextAt(Context ctx, CairoFont font, string text, double posX, double posY, double boxWidth, EnumTextOrientation orientation = EnumTextOrientation.Left) Parameters ctx Context The context of the text. font CairoFont The font of the text. text string The text itself. posX double The X position of the text. posY double The Y position of the text. boxWidth double The width of the box containing the text. orientation EnumTextOrientation The orientation of the text. Returns double The new height of the text. DrawMultilineText(Context, CairoFont, TextLine[], EnumTextOrientation) lineX is set to 0 after the second line, lineY is advanced by line height for each line public void DrawMultilineText(Context ctx, CairoFont font, TextLine[] lines, EnumTextOrientation orientation = EnumTextOrientation.Left) Parameters ctx Context The context of the text. font CairoFont The font of the text lines TextLine[] The preformatted lines of the text. orientation EnumTextOrientation The orientation of text (Default: Left) DrawMultilineTextAt(Context, CairoFont, TextLine[], double, double, double, EnumTextOrientation) Draws the text with pre-set breaks. public void DrawMultilineTextAt(Context ctx, CairoFont font, TextLine[] lines, double posX, double posY, double boxWidth, EnumTextOrientation orientation = EnumTextOrientation.Left) Parameters ctx Context The context of the text. font CairoFont The font of the text. lines TextLine[] The lines of text. posX double The X position of the text. posY double The Y position of the text. boxWidth double The width of the box containing the text. orientation EnumTextOrientation The orientation of the text. DrawTextLine(Context, CairoFont, string, double, double, bool) Draws a line of text on the screen. public void DrawTextLine(Context ctx, CairoFont font, string text, double offsetX = 0, double offsetY = 0, bool textPathMode = false) Parameters ctx Context The context of the text. font CairoFont The font of the text. text string The text to draw. offsetX double The X offset for the text start position. (Default: 0) offsetY double The Y offset for the text start position. (Default: 0) textPathMode bool Whether or not to use TextPathMode. GetLineHeight(CairoFont) Gets the height of the font to calculate the height of the line. public double GetLineHeight(CairoFont font) Parameters font CairoFont The font to calculate from. Returns double The height of the line. GetMultilineTextHeight(CairoFont, string, double, EnumLinebreakBehavior) public double GetMultilineTextHeight(CairoFont font, string text, double boxWidth, EnumLinebreakBehavior linebreak = EnumLinebreakBehavior.Default) Parameters font CairoFont text string boxWidth double linebreak EnumLinebreakBehavior Returns double GetMultilineTextHeight(CairoFont, string, EnumLinebreakBehavior, TextFlowPath[], double) Get the final height of the text. public double GetMultilineTextHeight(CairoFont font, string text, EnumLinebreakBehavior linebreak, TextFlowPath[] flowPath, double lineY = 0) Parameters font CairoFont The font of the text. text string The text itself. linebreak EnumLinebreakBehavior flowPath TextFlowPath[] The path for the text. lineY double The height of the line Returns double The final height of the text. GetQuantityTextLines(CairoFont, string, double, EnumLinebreakBehavior) public int GetQuantityTextLines(CairoFont font, string text, double boxWidth, EnumLinebreakBehavior linebreak = EnumLinebreakBehavior.Default) Parameters font CairoFont text string boxWidth double linebreak EnumLinebreakBehavior Returns int GetQuantityTextLines(CairoFont, string, EnumLinebreakBehavior, TextFlowPath[], double) Gets the number of lines of text. public int GetQuantityTextLines(CairoFont font, string text, EnumLinebreakBehavior linebreak, TextFlowPath[] flowPath, double lineY = 0) Parameters font CairoFont The font of the text. text string The text itself. linebreak EnumLinebreakBehavior flowPath TextFlowPath[] The path for the text. lineY double The height of the line Returns int The number of lines. Lineize(Context, string, double, double, EnumLinebreakBehavior, bool) public TextLine[] Lineize(Context ctx, string text, double boxwidth, double lineHeightMultiplier = 1, EnumLinebreakBehavior linebreak = EnumLinebreakBehavior.Default, bool keepLinebreakChar = false) Parameters ctx Context text string boxwidth double lineHeightMultiplier double linebreak EnumLinebreakBehavior keepLinebreakChar bool Returns TextLine[] Lineize(Context, string, EnumLinebreakBehavior, TextFlowPath[], double, double, double, bool) Turns the supplied text into line of text constrained by supplied flow path and starting at supplied start coordinates public TextLine[] Lineize(Context ctx, string text, EnumLinebreakBehavior linebreak, TextFlowPath[] flowPath, double startOffsetX = 0, double startY = 0, double lineHeightMultiplier = 1, bool keepLinebreakChar = false) Parameters ctx Context Contexts of the GUI. text string The text to be split linebreak EnumLinebreakBehavior flowPath TextFlowPath[] Sets the general flow of text. startOffsetX double The offset start position for X startY double The offset start position for Y lineHeightMultiplier double keepLinebreakChar bool Returns TextLine[] The text broken up into lines. Lineize(CairoFont, string, double, EnumLinebreakBehavior, bool) public TextLine[] Lineize(CairoFont font, string fulltext, double boxWidth, EnumLinebreakBehavior linebreak = EnumLinebreakBehavior.Default, bool keepLinebreakChar = false) Parameters font CairoFont fulltext string boxWidth double linebreak EnumLinebreakBehavior keepLinebreakChar bool Returns TextLine[] Lineize(CairoFont, string, EnumLinebreakBehavior, TextFlowPath[], double, double, bool) Turns the supplied text into line of text constrained by supplied flow path and starting at supplied start coordinates public TextLine[] Lineize(CairoFont font, string fulltext, EnumLinebreakBehavior linebreak, TextFlowPath[] flowPath, double startOffsetX = 0, double startY = 0, bool keepLinebreakChar = false) Parameters font CairoFont The font of the text. fulltext string The text of the lines. linebreak EnumLinebreakBehavior flowPath TextFlowPath[] The flow direction of text. startOffsetX double The offset start position for X startY double The offset start position for Y keepLinebreakChar bool Returns TextLine[] The text broken up into lines."
  },
  "api/Vintagestory.API.Client.TextFlowPath.html": {
    "href": "api/Vintagestory.API.Client.TextFlowPath.html",
    "title": "Class TextFlowPath | VintageStory API",
    "keywords": "Class TextFlowPath Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TextFlowPath Inheritance object TextFlowPath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TextFlowPath() public TextFlowPath() TextFlowPath(double) public TextFlowPath(double boxWidth) Parameters boxWidth double TextFlowPath(double, double, double, double) public TextFlowPath(double x1, double y1, double x2, double y2) Parameters x1 double y1 double x2 double y2 double Fields X1 public double X1 Field Value double X2 public double X2 Field Value double Y1 public double Y1 Field Value double Y2 public double Y2 Field Value double"
  },
  "api/Vintagestory.API.Client.TextLine.html": {
    "href": "api/Vintagestory.API.Client.TextLine.html",
    "title": "Class TextLine | VintageStory API",
    "keywords": "Class TextLine Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TextLine Inheritance object TextLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bounds The bounds of the line of text. public LineRectangled Bounds Field Value LineRectangled LeftSpace public double LeftSpace Field Value double NextOffsetX public double NextOffsetX Field Value double RightSpace public double RightSpace Field Value double Text The text of the text line. public string Text Field Value string"
  },
  "api/Vintagestory.API.Client.TextTextureUtil.html": {
    "href": "api/Vintagestory.API.Client.TextTextureUtil.html",
    "title": "Class TextTextureUtil | VintageStory API",
    "keywords": "Class TextTextureUtil Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TextTextureUtil Inheritance object TextTextureUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TextTextureUtil(ICoreClientAPI) Text Texture Util constructor. public TextTextureUtil(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Client API. Methods GenOrUpdateTextTexture(string, CairoFont, int, int, ref LoadedTexture, TextBackground, EnumTextOrientation, bool) Takes a texture and applies some text to it. public void GenOrUpdateTextTexture(string text, CairoFont font, int width, int height, ref LoadedTexture loadedTexture, TextBackground background = null, EnumTextOrientation orientation = EnumTextOrientation.Left, bool demulAlpha = false) Parameters text string The text to texture. font CairoFont The font of the text. width int The width of the text. height int The height of the text. loadedTexture LoadedTexture The texture to be loaded on to. background TextBackground The background of the text. (default: none/null) orientation EnumTextOrientation The orientation of the text. (default: left) demulAlpha bool GenOrUpdateTextTexture(string, CairoFont, ref LoadedTexture, TextBackground) Takes a texture and applies some text to it. public void GenOrUpdateTextTexture(string text, CairoFont font, ref LoadedTexture loadedTexture, TextBackground background = null) Parameters text string The text to texture. font CairoFont The font of the text. loadedTexture LoadedTexture The texture to be loaded on to. background TextBackground The background of the text. (default: none/null) GenTextTexture(string, CairoFont, int, int, TextBackground) Takes a string of text and applies a texture to it. public LoadedTexture GenTextTexture(string text, CairoFont font, int width, int height, TextBackground background = null) Parameters text string The text to texture. font CairoFont The font of the text. width int The width of the text. height int The height of the text. background TextBackground The background of the text. (default: none/null) Returns LoadedTexture The texturized text. GenTextTexture(string, CairoFont, int, int, TextBackground, EnumTextOrientation, bool) Takes a string of text and applies a texture to it. public LoadedTexture GenTextTexture(string text, CairoFont font, int width, int height, TextBackground background = null, EnumTextOrientation orientation = EnumTextOrientation.Left, bool demulAlpha = false) Parameters text string The text to texture. font CairoFont The font of the text. width int The width of the text. height int The height of the text. background TextBackground The background of the text. (default: none/null) orientation EnumTextOrientation The orientation of the text. (default: left) demulAlpha bool Returns LoadedTexture The texturized text. GenTextTexture(string, CairoFont, int, TextBackground, EnumTextOrientation) Takes a string of text and applies a texture to it. public LoadedTexture GenTextTexture(string text, CairoFont font, int maxWidth, TextBackground background = null, EnumTextOrientation orientation = EnumTextOrientation.Left) Parameters text string The text to texture. font CairoFont The font of the text. maxWidth int The maximum width of the text. background TextBackground The background of the text. (default: none/null) orientation EnumTextOrientation The orientation of the text. (default: left) Returns LoadedTexture The texturized text. GenTextTexture(string, CairoFont, TextBackground) Takes a string of text and applies a texture to it. public LoadedTexture GenTextTexture(string text, CairoFont font, TextBackground background = null) Parameters text string The text to texture. font CairoFont The font of the text. background TextBackground The background of the text. (default: none/null) Returns LoadedTexture The texturized text. GenUnscaledTextTexture(string, CairoFont, TextBackground) Generates an unscaled text texture. public LoadedTexture GenUnscaledTextTexture(string text, CairoFont font, TextBackground background = null) Parameters text string The text to texture. font CairoFont The font of the text. background TextBackground The background of the text (Default: none/null) Returns LoadedTexture The loaded unscaled texture."
  },
  "api/Vintagestory.API.Client.TextureAtlasPosition.html": {
    "href": "api/Vintagestory.API.Client.TextureAtlasPosition.html",
    "title": "Class TextureAtlasPosition | VintageStory API",
    "keywords": "Class TextureAtlasPosition Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll The position of a texture inside an atlas Open in GitHub public class TextureAtlasPosition Inheritance object TextureAtlasPosition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AvgColor public int AvgColor Field Value int RndColors public int[] RndColors Field Value int[] RndColorsLength public const int RndColorsLength = 30 Field Value int atlasNumber A sequential number in which atlas this position is in. Atlasses for a given type are sequentially numbered if more than one atlas was required to hold all the textures public byte atlasNumber Field Value byte atlasTextureId The OpenGL textureid public int atlasTextureId Field Value int reloadIteration A sequential number that goes up with every texture atlas reload, used to see if this texpos is still fresh public short reloadIteration Field Value short x1 The x coordinate of the texture origin point public float x1 Field Value float x2 The x coordinate of the texture end point public float x2 Field Value float y1 The y coordinate of the texture origin point public float y1 Field Value float y2 The y coordinate of the texture end point public float y2 Field Value float Methods Clone() public TextureAtlasPosition Clone() Returns TextureAtlasPosition"
  },
  "api/Vintagestory.API.Client.TextureDictionary.html": {
    "href": "api/Vintagestory.API.Client.TextureDictionary.html",
    "title": "Class TextureDictionary | VintageStory API",
    "keywords": "Class TextureDictionary Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class TextureDictionary : FastSmallDictionary<string, CompositeTexture>, IDictionary<string, CompositeTexture>, ICollection<KeyValuePair<string, CompositeTexture>>, IEnumerable<KeyValuePair<string, CompositeTexture>>, IEnumerable Inheritance object FastSmallDictionary<string, CompositeTexture> TextureDictionary Implements IDictionary<string, CompositeTexture> ICollection<KeyValuePair<string, CompositeTexture>> IEnumerable<KeyValuePair<string, CompositeTexture>> IEnumerable Inherited Members FastSmallDictionary<string, CompositeTexture>.Keys FastSmallDictionary<string, CompositeTexture>.Values FastSmallDictionary<string, CompositeTexture>.IsReadOnly FastSmallDictionary<string, CompositeTexture>.Count FastSmallDictionary<string, CompositeTexture>.Clone() FastSmallDictionary<string, CompositeTexture>.GetFirstKey() FastSmallDictionary<string, CompositeTexture>.this[string] FastSmallDictionary<string, CompositeTexture>.TryGetValue(string) FastSmallDictionary<string, CompositeTexture>.ContainsKey(string) FastSmallDictionary<string, CompositeTexture>.Add(string, CompositeTexture) FastSmallDictionary<string, CompositeTexture>.TryGetValue(string, out CompositeTexture) FastSmallDictionary<string, CompositeTexture>.Clear() FastSmallDictionary<string, CompositeTexture>.GetEnumerator() FastSmallDictionary<string, CompositeTexture>.Add(KeyValuePair<string, CompositeTexture>) FastSmallDictionary<string, CompositeTexture>.Contains(KeyValuePair<string, CompositeTexture>) FastSmallDictionary<string, CompositeTexture>.Remove(string) FastSmallDictionary<string, CompositeTexture>.Remove(KeyValuePair<string, CompositeTexture>) FastSmallDictionary<string, CompositeTexture>.CopyTo(KeyValuePair<string, CompositeTexture>[], int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TextureDictionary() public TextureDictionary() TextureDictionary(int) public TextureDictionary(int initialCapacity) Parameters initialCapacity int Methods BakeAndCollect(IAssetManager, ITextureLocationDictionary, AssetLocation, string) Called by the texture atlas manager when building up the block atlas. Has to add all of the blocks textures public virtual void BakeAndCollect(IAssetManager manager, ITextureLocationDictionary mainTextureDict, AssetLocation sourceCode, string sourceMessage) Parameters manager IAssetManager mainTextureDict ITextureLocationDictionary sourceCode AssetLocation sourceMessage string"
  },
  "api/Vintagestory.API.Client.TexturePathUpdater.html": {
    "href": "api/Vintagestory.API.Client.TexturePathUpdater.html",
    "title": "Delegate TexturePathUpdater | VintageStory API",
    "keywords": "Delegate TexturePathUpdater Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate string TexturePathUpdater(string path) Parameters path string Returns string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.TextureSourceBuilder.html": {
    "href": "api/Vintagestory.API.Client.TextureSourceBuilder.html",
    "title": "Delegate TextureSourceBuilder | VintageStory API",
    "keywords": "Delegate TextureSourceBuilder Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate ITexPositionSource TextureSourceBuilder(Shape shape, string name) Parameters shape Shape name string Returns ITexPositionSource Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.UBORef.html": {
    "href": "api/Vintagestory.API.Client.UBORef.html",
    "title": "Class UBORef | VintageStory API",
    "keywords": "Class UBORef Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public abstract class UBORef : IDisposable Inheritance object UBORef Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Handle public int Handle Field Value int Properties Disposed Am I disposed? public bool Disposed { get; protected set; } Property Value bool Size Size in Bytes public int Size { get; set; } Property Value int Methods Bind() public abstract void Bind() Dispose() Frees up any gpu allocated memory. Equivalent to calling api.Render.DeleteMesh() public virtual void Dispose() Unbind() public abstract void Unbind() Update(object, int, int) public abstract void Update(object data, int offset, int size) Parameters data object offset int size int Update<T>(T) public abstract void Update<T>(T data) where T : struct Parameters data T Type Parameters T Update<T>(T, int, int) public abstract void Update<T>(T data, int offset, int size) where T : struct Parameters data T offset int size int Type Parameters T"
  },
  "api/Vintagestory.API.Client.VisibleTestDelegate.html": {
    "href": "api/Vintagestory.API.Client.VisibleTestDelegate.html",
    "title": "Delegate VisibleTestDelegate | VintageStory API",
    "keywords": "Delegate VisibleTestDelegate Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll public delegate bool VisibleTestDelegate(FrustumCulling culler) Parameters culler FrustumCulling Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Client.WireframeModes.html": {
    "href": "api/Vintagestory.API.Client.WireframeModes.html",
    "title": "Class WireframeModes | VintageStory API",
    "keywords": "Class WireframeModes Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll Open in GitHub public class WireframeModes Inheritance object WireframeModes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AmbientSounds public bool AmbientSounds Field Value bool BlockEntity public bool BlockEntity Field Value bool Chunk public bool Chunk Field Value bool Entity public bool Entity Field Value bool Inside public bool Inside Field Value bool LandClaim public bool LandClaim Field Value bool Region public bool Region Field Value bool ServerChunk public bool ServerChunk Field Value bool Structures public bool Structures Field Value bool Vertex public bool Vertex Field Value bool"
  },
  "api/Vintagestory.API.Client.WorldInteraction.html": {
    "href": "api/Vintagestory.API.Client.WorldInteraction.html",
    "title": "Class WorldInteraction | VintageStory API",
    "keywords": "Class WorldInteraction Namespace Vintagestory.API.Client Assembly VintagestoryAPI.dll A world interaction for the object. This is used to prompt the player about what a certain object can do. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class WorldInteraction Inheritance object WorldInteraction Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ActionLangCode The text to show, will be used in the form of Lang.Get(ActionLangCode); [JsonProperty] public string ActionLangCode Field Value string GetMatchingStacks Only applicable when ItemStacks is non null. If set, this method will be executed before adding the interaction. Lets you return a filtered list of itemstacks that can be used for this interaction (or null/empty array for not interactable) public InteractionStacksDelegate GetMatchingStacks Field Value InteractionStacksDelegate HotKeyCode Does it require a mouse modifier key to perform this action (e.g. \"shift\" or \"ctrl\") [JsonProperty] public string HotKeyCode Field Value string Itemstacks public ItemStack[] Itemstacks Field Value ItemStack[] JsonItemStacks Does the player need to hold a certain items/blocks in hands? (e.g. a knife). You can define an array of item stacks here and the game will loop through them in a 1 second interval. This property is loaded from the entitytypes and blocktype json files and then resolved. [JsonProperty(\"ItemStacks\")] public JsonItemStack[] JsonItemStacks Field Value JsonItemStack[] MouseButton What mouse button should be used for this interaction? [JsonProperty] public EnumMouseButton MouseButton Field Value EnumMouseButton RequireFreeHand If true, the interaction only applies when the player has no slot in hands public bool RequireFreeHand Field Value bool ShouldApply Only applicable when ItemStacks is null. If set and the method returns false, the interaction will not be displayed public InteractionMatcherDelegate ShouldApply Field Value InteractionMatcherDelegate Properties HotKeyCodes Does it require pressing multiple keys to perform this action (if set then HotkeyCode is ignored) [JsonProperty] public string[] HotKeyCodes { get; set; } Property Value string[]"
  },
  "api/Vintagestory.API.Client.html": {
    "href": "api/Vintagestory.API.Client.html",
    "title": "Namespace Vintagestory.API.Client | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Client Classes AvailableCodec Open in GitHub BakedCompositeTexture An expanded, atlas-friendly version of a CompositeTexture Open in GitHub BlendedOverlayTexture Defines a texture to be overlayed on another texture. Open in GitHub CairoFont Represent a font with sizing and styling for use in rendering text Open in GitHub CaveMusicTrack Represent a dynamically composed track made out of individual small pieces of music mixed together defined by specific rules Requirements: Start/Stop Multiple Trackpieces Set their volumne dynamically Decide which Trackpieces to play Allow individual rules per Trackpiece Specific examples: Play Thunder ambient only if thunderlevel above 10 Thunder ambient volume based on thunderlevel (between 0.3 and 1.1?) Play Aquatic Drone only when y below 60 Play Deep Drone only when y below 50 Open in GitHub ClearFloatTextComponent Open in GitHub CompositeTexture Holds data about a texture. Also allows textures to be overlayed on top of one another. Open in GitHub ConfigItem A config item for the GUIElementConfigList. Open in GitHub ContainedTextureSource Helper class for implementors of ITexPositionSource Open in GitHub CubeMeshUtil Open in GitHub CustomMeshDataPartByte Holds arbitrary byte data for meshes to be used in the shader Open in GitHub CustomMeshDataPartFloat Holds arbitrary float data for meshes to be used in the shader Open in GitHub CustomMeshDataPartInt Holds arbitrary int data for meshes to be used in the shader Open in GitHub CustomMeshDataPartShort Holds arbitrary short data for meshes to be used in the shader Open in GitHub CustomMeshDataPart<T> Holds arbitrary mesh data for meshes to be used in a shader DamagedPerceptionEffect Open in GitHub DefaultShaderUniforms Open in GitHub DialogElement Open in GitHub DialogRow Open in GitHub DrunkPerceptionEffect Open in GitHub DummyRenderer Open in GitHub ElementBounds Box sizing model comparable to the box sizing model of cascading style sheets using \"position:relative;\" Each element has a position, size, padding and margin Padding is counted towards the size of the box, whereas margin is not Open in GitHub ElementStdBounds Just some default sizings for various ui elements Open in GitHub EnumLodPool Open in GitHub EventMusicTrack Open in GitHub FastBitmap Open in GitHub FileDropEvent Open in GitHub FontConfig Open in GitHub FrameBufferRef Open in GitHub FramebufferAttrs Open in GitHub FramebufferAttrsAttachment Open in GitHub FreezingPerceptionEffect Open in GitHub FrustumCulling Open in GitHub GlKeyNames Open in GitHub GridRecipeAndUnnamedIngredients Open in GitHub GuiComposer Composes a dialog which are made from a set of elements The composed dialog is cached, so to recompose you have to Recompose All elements or instantiate a new composer with doCache set to false The caching allows the dialog using the composer to not worry about performance and just call compose whenever it has to display a new composed dialog You add components by chaining the functions of the composer together for building the result. Open in GitHub GuiComposerHelpers Open in GitHub GuiDialog Open in GitHub GuiDialog.DlgComposers Dialogue Composer for the GUIDialogue. GuiDialogBlockEntity Base class for dialogs bound to block entities. Open in GitHub GuiDialogBlockEntityInventory A block entity inventory system for things like a campfire, or other things like that. Open in GitHub GuiDialogCharacterBase Open in GitHub GuiDialogConfirm Open in GitHub GuiDialogGeneric Mainly used for block entity based guis Open in GitHub GuiElement Open in GitHub GuiElementCellList<T> GuiElementChatInput Open in GitHub GuiElementClipHelpler Open in GitHub GuiElementColorListPicker Creates a toggle button for the GUI. Open in GitHub GuiElementCompactScrollbar Open in GitHub GuiElementConfigList A configurable list of items. An example of this is the controls in the settings menu. Open in GitHub GuiElementContainer Open in GitHub GuiElementControl An element that allows input and can be disabled Open in GitHub GuiElementCustomDraw Open in GitHub GuiElementCustomRender Open in GitHub GuiElementDialogBackground Open in GitHub GuiElementDialogTitleBar A title bar for your GUI. Open in GitHub GuiElementDropDown Creates a drop-down list of items. Open in GitHub GuiElementDynamicText Text that can be changed after being composed Open in GitHub GuiElementDynamicTextHelper Open in GitHub GuiElementEditableTextBase Open in GitHub GuiElementElementListPickerBase<T> Creates a toggle button for the GUI. GuiElementEmbossedText Open in GitHub GuiElementGameOverlay Open in GitHub GuiElementGameOverlyHelper Open in GitHub GuiElementGrayBackground Open in GitHub GuiElementGrayBackgroundHelpber Open in GitHub GuiElementHelpers Open in GitHub GuiElementHorizontalTabs Open in GitHub GuiElementHoverText Open in GitHub GuiElementIconListPicker Creates a toggle button for the GUI. Open in GitHub GuiElementImage Open in GitHub GuiElementImageBackgroundHelper Open in GitHub GuiElementInsetHelper Open in GitHub GuiElementItemSlotGrid Displays the slots of an inventory in the form of a slot grid Open in GitHub GuiElementItemSlotGridBase A base class for the slot grid. For all your slot grid needs. Open in GitHub GuiElementItemSlotGridExcl Builds slot grid with exclusions to the grid. Open in GitHub GuiElementItemstackInfo Open in GitHub GuiElementListMenu Open in GitHub GuiElementMainMenuCell Open in GitHub GuiElementNumberInput A numerical input field for inputting numbers. Open in GitHub GuiElementParent Open in GitHub GuiElementPassiveItemSlot Displays a single slot from given inventory, cannot be directly interacted with. Currently used for the mouse slot Open in GitHub GuiElementRichtext Open in GitHub GuiElementScrollbar Open in GitHub GuiElementSkillItemGrid A slot for item skills. Open in GitHub GuiElementSlider Open in GitHub GuiElementSliderOld Open in GitHub GuiElementStatbar A stat bar to the GUI for keeping track of progress and numbers. Open in GitHub GuiElementStaticText Open in GitHub GuiElementSwitch Open in GitHub GuiElementSwitchOld Open in GitHub GuiElementTextArea Open in GitHub GuiElementTextBase Open in GitHub GuiElementTextButton Open in GitHub GuiElementTextInput Open in GitHub GuiElementToggleButton Creates a toggle button for the GUI. Open in GitHub GuiElementVerticalTabs Open in GitHub GuiJsonDialog This is a dialogue built from JSON files. Open in GitHub GuiStyle A class containing common values for elements before scaling is applied. Open in GitHub GuiTab Open in GitHub HotKey Open in GitHub HotkeyComponent Open in GitHub HudElement Base class for Hud Elements. Open in GitHub IconComponent Draws an icon Open in GitHub IconUtil Open in GitHub ItemRenderInfo Holds information on how a collectible should be rendered in hands, on the ground or in gui. In collectible.OnBeforeRender() the values are prefilled with the default ones. Open in GitHub ItemstackComponentBase Draws an itemstack Open in GitHub ItemstackTextComponent Draws an itemstack Open in GitHub JsonDialogSettings Open in GitHub KeyCombination Mapping of an input key combination. Note: the \"key\" might also be a mouse button if a hotkey has been configured to be activated by a mouse button Open in GitHub KeyConverter Converts key code from OpenTK 4 to GlKeys Open in GitHub KeyEvent Open in GitHub LineMeshUtil Open in GitHub LineRectangled Open in GitHub LinkTextComponent Open in GitHub LoadedTexture A reference to a texture that has been uploaded onto the graphics cards, if TextureId is not zero Open in GitHub MatrixToolsd Open in GitHub Matrixf Open in GitHub MeshData A data structure that can be used to upload mesh information onto the graphics card Please note, all arrays are used as a buffer. They do not tightly fit the data but are always sized as a multiple of 2 from the initial size. Open in GitHub MeshDataPool This is a modeldata pool, which can hold 400k vertices, 300k indices but not more than 900 chunks Open in GitHub MeshDataPoolManager Holds a collection of pools, usually for 1 render pass Open in GitHub MeshDataPoolMasterManager Holds all chunk mesh pools of the current running game Open in GitHub MeshDataRecycler This is a recycling system for MeshData objects, so that they can be re-used: helps performance by easing memory allocation pressure, at the cost of holding typically around 300-400MB of memory for these recycled objects Open in GitHub MeshRef A reference to a mesh that's been uploaded onto the graphics card (i.e. that has been placed in an OpenGL VAO). This reference can be used for rendering it. Open in GitHub MeshUtil Open in GitHub ModelCubeUtilExt Open in GitHub ModelDataPoolLocation Contains all the data for the given model pool. Open in GitHub MouseButtonState Open in GitHub MouseEvent This contains the data for what the mouse is currently doing. Open in GitHub MouseWheelEventArgs The event arguments for the mouse. Open in GitHub MultiTextureMeshRef Open in GitHub MusicTrack Adds a basic music track. Open in GitHub MusicTrackPart Open in GitHub NormalUtil Open in GitHub ParticlePhysics Open in GitHub PerceptionEffect Open in GitHub PerceptionEffects Open in GitHub QuadMeshUtil Utility class for simple quad meshes Open in GitHub RainMusicTrack Creates a track for rain related music. [Not yet implemented] Open in GitHub RawTexture Open in GitHub RichTextComponent Open in GitHub RichTextComponentBase Open in GitHub SavegameCellEntry Open in GitHub ShapeTextureSource Open in GitHub SkillItem Open in GitHub SlideshowGridRecipeTextComponent Draws multiple itemstacks Open in GitHub SlideshowItemstackTextComponent Draws multiple itemstacks Open in GitHub SoundParams The sound paramaters used for loading sounds on the client side Open in GitHub StackAndWildCard Open in GitHub SurfaceMusicTrack Adds a basic music track. Open in GitHub TesselationMetaData Open in GitHub TextBackground Open in GitHub TextDrawUtil Open in GitHub TextFlowPath Open in GitHub TextLine Open in GitHub TextTextureUtil Open in GitHub TextureAtlasPosition The position of a texture inside an atlas Open in GitHub TextureDictionary Open in GitHub UBORef Open in GitHub WireframeModes Open in GitHub WorldInteraction A world interaction for the object. This is used to prompt the player about what a certain object can do. Open in GitHub Structs ColorMapData Plane Interfaces IAsyncParticleManager IAviWriter IBlockTextureAtlasAPI Block texture Atlas IClientEventAPI Contains some client specific events you can hook into IClientNetworkAPI API Features to set up a network channel for custom server<->client data exchange. Client side. IClientNetworkChannel Represent a custom network channel for sending messages between client and server IClientPlayer A client side player IClientWorldAccessor The world accessor implemented by the client, offers some extra features only available on the client IColorPresets Facilitates the Accessibility tab wireframe colors setting. Offers three preset color options, \"Default\", \"Preset2\" and \"Preset3\". The selection between these three options is chosen by the ClientSettings int value \"guiColorsPreset\". Within these presets, individual color values are stored by string key. ICoreClientAPI The core api implemented by the client. The main interface for accessing the client. Contains all sub components and some miscellaneous methods. ICustomInteractionHelpPositioning IGuiAPI IGuiComposerManager IGuiElementCell IInputAPI This interface manages the inputs of the player and is used mostly on the client side. IItemTextureAtlasAPI Item texture Atlas. ILoadedSound Represents a loaded game sound IMacroBase IMacroManager IMeshPoolSupplier IMetaBlock IMusicEngine IMusicTrack INetworkChannel IPointLight IRenderAPI The main api component to assist you in rendering pretty stuff onto the screen IRenderer Interface to render something on to the clients screens. Used for block entitites. ISettings Setting interface for multiple settings. ISettingsClass<T> Setting interface. IShader IShaderAPI API for configuring and loading GLSL Shaders IShaderProgram IStandardShaderProgram ITerrainMeshPool ITesselatorAPI Interface that allows custom model model meshing for items, blocks and entities Texturing crash course: Block, Item and Entity textures are loaded from json files in the form of a CompositeTexture instance After connecting to a game server, the client inserts all of these textures into their type-respective texture atlasses After insertion a \"texture sub-id\" is left behind in the CompositeTexture.Baked Property You can now find the position of the texture inside the atlas through the Block/Item/Entity-TextureAtlasPositions arrays (teturesubid is the array key) Shape Tesselation crash course: Block and Item shapes are loaded from json files in the form of a CompositeShape instance A CompositeShape instance hold some block/item specific information as well as an identifier to a Shape instance After connecting to a game server, the client loads all shapes from the shape folder then finds each blocks/items shape by its shape identifier Result is a MeshData instance that holds all vertices, UV coords, colors and etc. for each block That meshdata instance is a) Held as-is in memory for using during chunk tesselation (you can get a reference to it through getDefaultBlockMesh()) b) \"Compiled\" to a Model for use during rendering in the gui. Model Compilation means all it's mesh data is uploaded onto the graphcis through a VAO and a ModelRef instance is left behind which can be used by the RenderAPI to render it. ITesselatorManager Manager interface for Tesselators. ITexPositionSource An interface that can supply texture atlas positions ITextureAtlasAPI Entity texture Atlas. Enums DataConversion Open in GitHub ElementSizing Open in GitHub EnumBlendMode Open in GitHub EnumBlockEntityPacketId Packet IDs for block entities. Open in GitHub EnumButtonStyle Open in GitHub EnumCalcBoundsResult Open in GitHub EnumCameraMode Open in GitHub EnumChannelState The state of a network channel Open in GitHub EnumChunkRenderPass The various render passes available for rendering blocks Open in GitHub EnumCollideFlags Open in GitHub EnumDialogArea First word = X Alignment (left, center, right or fixed) Second word = Y Alignment (top, middle, bottom or fixed) Open in GitHub EnumDialogElementMode Open in GitHub EnumDialogElementType Open in GitHub EnumDialogType Open in GitHub EnumDrawMode Open in GitHub EnumDrawType Draw types for blocks. Open in GitHub EnumFaceCullMode Types that determine how block faces should be culled. Open in GitHub EnumFloat Open in GitHub EnumFontStyle Open in GitHub EnumFrameBuffer Open in GitHub EnumFramebufferAttachment Open in GitHub EnumFrustumCullMode Open in GitHub EnumHighlightBlocksMode Open in GitHub EnumItemRenderTarget The render taget for an item stack Open in GitHub EnumItemType Open in GitHub EnumLinebreakBehavior Open in GitHub EnumRenderStage Open in GitHub EnumShaderProgram Open in GitHub EnumShaderType Open in GitHub EnumSoundType Sound types, often used to determine specific volume controls. Open in GitHub EnumTextOrientation Open in GitHub EnumTextureFilter Open in GitHub EnumTextureInternalFormat Open in GitHub EnumTexturePixelFormat Open in GitHub EnumTextureWrap Open in GitHub EnumVelocityState Open in GitHub EnumVerticalAlign Open in GitHub GlKeys Internally the game uses OpenTK and their Keys are by default mapped to US QWERTY Keyboard layout which the GlKeys also do. Upon typing text in a Text input field it will produce the correct characters according to your keyboard layout. If you need to get the character for the current Keyboard layout use GetKeyName(GlKeys) Open in GitHub GuiDialog.EnumPosFlag HotkeyType Open in GitHub ModelCubeUtilExt.EnumShadeMode Delegates BlockChangedDelegate OldBlock param may be null! CanClickSlotDelegate ChatLineDelegate ClientChatLineDelegate ConfigItemClickDelegate ContinousParticleSpawnTaskDelegate Return false to stop spawning particles CreateTextureDelegate DrawDelegate DrawDelegateWithBounds DrawIconDelegate DrawSkillIconDelegate FileDropDelegate GuiElementEditableTextBase.OnTryTextChangeDelegate IconRendererDelegate InfoTextDelegate IngameDiscoveryDelegate IngameErrorDelegate InteractionMatcherDelegate InteractionStacksDelegate IsPlayerReadyDelegate ItemRenderDelegate A custom itemstack render handler. This method is called after Collectible.OnBeforeRender(). For render target gui, the gui shader and its uniforms are already fully prepared, you may only call RenderMesh() and ignore the modelMat, position and size values - stack sizes however, are not covered by this. KeyEventDelegate MeshData.MeshDataFilterDelegate MouseEventDelegate NetworkServerMessageHandler<T> Handler for processing a message OnGamePauseResume OnHotKeyDelegate OnRequireCell<T> OnSettingsChanged<T> OnValueGetDelegate OnValueSetDelegate PlayerEventDelegate RenderDelegateWithBounds RenderSkillItemDelegate SelectionChangedDelegate SliderTooltipDelegate StackDisplayDelegate StatbarValueDelegate TexturePathUpdater TextureSourceBuilder VisibleTestDelegate"
  },
  "api/Vintagestory.API.Common.ActionBoolReturn-1.html": {
    "href": "api/Vintagestory.API.Common.ActionBoolReturn-1.html",
    "title": "Delegate ActionBoolReturn<T> | VintageStory API",
    "keywords": "Delegate ActionBoolReturn<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Returns true if the action/event was successfull. public delegate bool ActionBoolReturn<T>(T t) Parameters t T The arguments for the event. Returns bool Type Parameters T The additional type to pass in. Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionBoolReturn-2.html": {
    "href": "api/Vintagestory.API.Common.ActionBoolReturn-2.html",
    "title": "Delegate ActionBoolReturn<T1, T2> | VintageStory API",
    "keywords": "Delegate ActionBoolReturn<T1, T2> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Returns true if the action/event was successfull. public delegate bool ActionBoolReturn<T1, T2>(T1 t1, T2 t2) Parameters t1 T1 Returns true if the action/event was successfull. t2 T2 Returns true if the action/event was successfull. Returns bool Type Parameters T1 The additional type to pass in. T2 The additional type to pass in. Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionBoolReturn-3.html": {
    "href": "api/Vintagestory.API.Common.ActionBoolReturn-3.html",
    "title": "Delegate ActionBoolReturn<T1, T2, T3> | VintageStory API",
    "keywords": "Delegate ActionBoolReturn<T1, T2, T3> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Returns true if the action/event was successfull. public delegate bool ActionBoolReturn<T1, T2, T3>(T1 t1, T2 t2, T3 t3) Parameters t1 T1 Returns true if the action/event was successfull. t2 T2 Returns true if the action/event was successfull. t3 T3 Returns true if the action/event was successfull. Returns bool Type Parameters T1 The additional type to pass in. T2 The additional type to pass in. T3 The additional type to pass in. Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionBoolReturn-4.html": {
    "href": "api/Vintagestory.API.Common.ActionBoolReturn-4.html",
    "title": "Delegate ActionBoolReturn<T1, T2, T3, T4> | VintageStory API",
    "keywords": "Delegate ActionBoolReturn<T1, T2, T3, T4> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Returns true if the action/event was successfull. public delegate bool ActionBoolReturn<T1, T2, T3, T4>(T1 t1, T2 t2, T3 t3, T4 t4) Parameters t1 T1 Returns true if the action/event was successfull. t2 T2 Returns true if the action/event was successfull. t3 T3 Returns true if the action/event was successfull. t4 T4 Returns true if the action/event was successfull. Returns bool Type Parameters T1 The additional type to pass in. T2 The additional type to pass in. T3 The additional type to pass in. T4 Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionBoolReturn.html": {
    "href": "api/Vintagestory.API.Common.ActionBoolReturn.html",
    "title": "Delegate ActionBoolReturn | VintageStory API",
    "keywords": "Delegate ActionBoolReturn Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Return true if the action/event was successfull public delegate bool ActionBoolReturn() Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionConsumable-1.html": {
    "href": "api/Vintagestory.API.Common.ActionConsumable-1.html",
    "title": "Delegate ActionConsumable<T> | VintageStory API",
    "keywords": "Delegate ActionConsumable<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Return true if the action/event should be \"consumed\" (e.g. mark a mouse click as handled) public delegate bool ActionConsumable<T>(T t1) Parameters t1 T Returns bool Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionConsumable-2.html": {
    "href": "api/Vintagestory.API.Common.ActionConsumable-2.html",
    "title": "Delegate ActionConsumable<T1, T2> | VintageStory API",
    "keywords": "Delegate ActionConsumable<T1, T2> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Return true if the action/event should be \"consumed\" (e.g. mark a mouse click as handled) public delegate bool ActionConsumable<T1, T2>(T1 t1, T2 t2) Parameters t1 T1 t2 T2 Returns bool Type Parameters T1 T2 Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActionConsumable.html": {
    "href": "api/Vintagestory.API.Common.ActionConsumable.html",
    "title": "Delegate ActionConsumable | VintageStory API",
    "keywords": "Delegate ActionConsumable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Return true if the action/event should be \"consumed\" (e.g. mark a mouse click as handled) public delegate bool ActionConsumable() Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ActiveSlotChangeEventArgs.html": {
    "href": "api/Vintagestory.API.Common.ActiveSlotChangeEventArgs.html",
    "title": "Class ActiveSlotChangeEventArgs | VintageStory API",
    "keywords": "Class ActiveSlotChangeEventArgs Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This contains data about an event that fires when a player changes which slot they're actively using. Such as the currently selected hotbar slot. Open in GitHub public class ActiveSlotChangeEventArgs Inheritance object ActiveSlotChangeEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ActiveSlotChangeEventArgs(int, int) public ActiveSlotChangeEventArgs(int from, int to) Parameters from int to int Properties FromSlot The currently active slot being switched away from. public int FromSlot { get; } Property Value int ToSlot The target slot that is being switched to. public int ToSlot { get; } Property Value int"
  },
  "api/Vintagestory.API.Common.AdvancedParticleProperties.html": {
    "href": "api/Vintagestory.API.Common.AdvancedParticleProperties.html",
    "title": "Class AdvancedParticleProperties | VintageStory API",
    "keywords": "Class AdvancedParticleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used to add a set of particle properties to a collectible. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class AdvancedParticleProperties : IParticlePropertiesProvider Inheritance object AdvancedParticleProperties Implements IParticlePropertiesProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Color When HsvaColor is null, this is used public int Color Field Value int HsvaColor The Hue/Saturation/Value/Alpha for the color of the particle. [JsonProperty] public NatFloat[] HsvaColor Field Value NatFloat[] PosOffset Offset from the blocks hitboxes top middle position [JsonProperty] public NatFloat[] PosOffset Field Value NatFloat[] basePos The base position for the particles. public Vec3d basePos Field Value Vec3d baseVelocity public Vec3f baseVelocity Field Value Vec3f block The base block for the particle. public Block block Field Value Block Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often public bool Async { get; } Property Value bool BlueEvolve A transforming Blue value. [JsonProperty] public EvolvingNatFloat BlueEvolve { get; set; } Property Value EvolvingNatFloat Bounciness The amount of velocity to be kept when this particle collides with something. Directional velocity is multipled by (-Bounciness * 0.65) on any collision. [JsonProperty] public float Bounciness { get; set; } Property Value float ColorByBlock Whether or not to color the particle by the block it's on. [JsonProperty] public bool ColorByBlock { get; set; } Property Value bool DeathParticles More particles that spawn when this particle dies. [JsonProperty] public AdvancedParticleProperties[] DeathParticles { get; set; } Property Value AdvancedParticleProperties[] DieInAir Whether or not the particle dies in air. [JsonProperty] public bool DieInAir { get; set; } Property Value bool DieInLiquid Whether or not the particle dies in water. [JsonProperty] public bool DieInLiquid { get; set; } Property Value bool DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location [JsonProperty] public bool DieOnRainHeightmap { get; set; } Property Value bool GravityEffect The gravity effect on the particle. [JsonProperty] public NatFloat GravityEffect { get; set; } Property Value NatFloat GreenEvolve A transforming Green value. [JsonProperty] public EvolvingNatFloat GreenEvolve { get; set; } Property Value EvolvingNatFloat LifeLength The life length, in seconds, of the particle. [JsonProperty] public NatFloat LifeLength { get; set; } Property Value NatFloat LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark public int LightEmission { get; } Property Value int OpacityEvolve A transforming opacity value. [JsonProperty] public EvolvingNatFloat OpacityEvolve { get; set; } Property Value EvolvingNatFloat ParentVelocity public Vec3f ParentVelocity { get; set; } Property Value Vec3f ParentVelocityWeight public float ParentVelocityWeight { get; set; } Property Value float ParticleModel Sets the base model for the particle. [JsonProperty] public EnumParticleModel ParticleModel { get; set; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public Vec3d Pos { get; } Property Value Vec3d Quantity The quantity of the particles given. [JsonProperty] public NatFloat Quantity { get; set; } Property Value NatFloat RandomVelocityChange Allows each particle to randomly change its velocity over time. [JsonProperty] public bool RandomVelocityChange { get; set; } Property Value bool RedEvolve A transforming Red value. [JsonProperty] public EvolvingNatFloat RedEvolve { get; set; } Property Value EvolvingNatFloat SecondaryParticles More particles that spawn from this particle over time. See SecondarySpawnInterval to control rate. [JsonProperty] public AdvancedParticleProperties[] SecondaryParticles { get; set; } Property Value AdvancedParticleProperties[] SecondarySpawnInterval The inverval that the SecondaryParticles spawn. [JsonProperty] public NatFloat SecondarySpawnInterval { get; set; } Property Value NatFloat SelfPropelled Whether or not the particle is self propelled. [JsonProperty] public bool SelfPropelled { get; set; } Property Value bool Size The size of the particles given. [JsonProperty] public NatFloat Size { get; set; } Property Value NatFloat SizeEvolve A transforming Size value. [JsonProperty] public EvolvingNatFloat SizeEvolve { get; set; } Property Value EvolvingNatFloat SwimOnLiquid Whether or not the particle floats on liquids. [JsonProperty] public bool SwimOnLiquid { get; set; } Property Value bool TerrainCollision Whether or not the particle collides with the terrain. [JsonProperty] public bool TerrainCollision { get; set; } Property Value bool Velocity The velocity of the particles. [JsonProperty] public NatFloat[] Velocity { get; set; } Property Value NatFloat[] VelocityEvolve A dynamic velocity value. [JsonProperty] public EvolvingNatFloat[] VelocityEvolve { get; set; } Property Value EvolvingNatFloat[] VertexFlags The level of glow in the particle. [JsonProperty] public int VertexFlags { get; set; } Property Value int WindAffectednes How much the particles are affected by wind. [JsonProperty] public float WindAffectednes { get; set; } Property Value float WindAffectednesAtPos public float WindAffectednesAtPos { get; set; } Property Value float Methods BeginParticle() Begins the advanced particle. public void BeginParticle() Clone() public AdvancedParticleProperties Clone() Returns AdvancedParticleProperties FromBytes(BinaryReader, IWorldAccessor) For reading from the network public void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) Converts the color to RGBA. public int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI The Core Client API. Returns int The set RGBA color. GetVelocity(Vec3d) Gets the velocity of the particle. public Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Initializes the particle. public void Init(ICoreAPI api) Parameters api ICoreAPI The core API. PrepareForSecondarySpawn(ParticleBase) prepares the particle for secondary spawning. public void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase ToBytes(BinaryWriter) For sending over the network public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter createFromBytes(BinaryReader, IWorldAccessor) public static AdvancedParticleProperties createFromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor Returns AdvancedParticleProperties"
  },
  "api/Vintagestory.API.Common.AirBubbleParticles.html": {
    "href": "api/Vintagestory.API.Common.AirBubbleParticles.html",
    "title": "Class AirBubbleParticles | VintageStory API",
    "keywords": "Class AirBubbleParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AirBubbleParticles : IParticlePropertiesProvider Inheritance object AirBubbleParticles Implements IParticlePropertiesProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AddVelocity The velocity to add to the bubble particle. public Vec3f AddVelocity Field Value Vec3f BasePos The base position of the bubble particle. public Vec3d BasePos Field Value Vec3d Range public float Range Field Value float horVelocityMul public float horVelocityMul Field Value float quantity public float quantity Field Value float Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often public bool Async { get; } Property Value bool BlueEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat BlueEvolve { get; } Property Value EvolvingNatFloat Bounciness public float Bounciness { get; set; } Property Value float DeathParticles Gets the death particles. public IParticlePropertiesProvider[] DeathParticles { get; } Property Value IParticlePropertiesProvider[] There are no death particles for bubbles. DieInAir Whether or not the bubbles die in air. public bool DieInAir { get; } Property Value bool Yes they die in air. DieInLiquid Whether or not the bubbles die in liquid. public bool DieInLiquid { get; } Property Value bool They don't. DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location public bool DieOnRainHeightmap { get; } Property Value bool GravityEffect Gets the gravity applied to the particle. public float GravityEffect { get; } Property Value float None. GreenEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat GreenEvolve { get; } Property Value EvolvingNatFloat LifeLength Gets the length of life for the particle. public float LifeLength { get; set; } Property Value float 0.25f LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark public int LightEmission { get; } Property Value int OpacityEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat ParentVelocity public Vec3f ParentVelocity { get; } Property Value Vec3f ParticleModel The base model of the particle. public EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel It's a cube. Pos Position in the world where the particle should spawn public Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public float Quantity { get; } Property Value float RandomVelocityChange public bool RandomVelocityChange { get; set; } Property Value bool RedEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat RedEvolve { get; } Property Value EvolvingNatFloat SecondaryParticles Gets the secondary particles public IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] null, the bubble particles don't have secondary particles. SecondarySpawnInterval Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn. This is only honored if this particle is defined as a secondary particle. public float SecondarySpawnInterval { get; } Property Value float SelfPropelled This particle is not self propelled. public bool SelfPropelled { get; } Property Value bool Size Size of the particle public float Size { get; } Property Value float SizeEvolve Size change over time public EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid Whether or not the bubbles die in liquid. public bool SwimOnLiquid { get; set; } Property Value bool They don't. TerrainCollision Whether or not the bubble collides with the terrain. public bool TerrainCollision { get; } Property Value bool VelocityEvolve Velocity change over time (acts as a multiplier to the velocity) public EvolvingNatFloat[] VelocityEvolve { get; } Property Value EvolvingNatFloat[] VertexFlags Gets the glow level of the bubbles. public int VertexFlags { get; } Property Value int No glow. Methods BeginParticle() Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles public void BeginParticle() FromBytes(BinaryReader, IWorldAccessor) This particle does not load from file. public void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Initializes the bubble particle. public void Init(ICoreAPI api) Parameters api ICoreAPI The core API. PrepareForSecondarySpawn(ParticleBase) Updates instance related state for secondary particles based on the given parent particle instance public void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase The parent IParticleInstance from which this secondary particle is being spawned ToBytes(BinaryWriter) This particle does not save to file. public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.AmbientModifier.html": {
    "href": "api/Vintagestory.API.Common.AmbientModifier.html",
    "title": "Class AmbientModifier | VintageStory API",
    "keywords": "Class AmbientModifier Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AmbientModifier Inheritance object AmbientModifier Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AmbientColor public WeightedFloatArray AmbientColor Field Value WeightedFloatArray CloudBrightness public WeightedFloat CloudBrightness Field Value WeightedFloat CloudDensity public WeightedFloat CloudDensity Field Value WeightedFloat FlatFogDensity public WeightedFloat FlatFogDensity Field Value WeightedFloat FlatFogYPos public WeightedFloat FlatFogYPos Field Value WeightedFloat FogBrightness public WeightedFloat FogBrightness Field Value WeightedFloat FogColor public WeightedFloatArray FogColor Field Value WeightedFloatArray FogDensity public WeightedFloat FogDensity Field Value WeightedFloat FogMin public WeightedFloat FogMin Field Value WeightedFloat LerpSpeed public WeightedFloat LerpSpeed Field Value WeightedFloat SceneBrightness public WeightedFloat SceneBrightness Field Value WeightedFloat Properties DefaultAmbient public static AmbientModifier DefaultAmbient { get; } Property Value AmbientModifier Methods Clone() public AmbientModifier Clone() Returns AmbientModifier EnsurePopulated() public AmbientModifier EnsurePopulated() Returns AmbientModifier FromBytes(BinaryReader) public void FromBytes(BinaryReader reader) Parameters reader BinaryReader SetLerped(AmbientModifier, AmbientModifier, float) public void SetLerped(AmbientModifier left, AmbientModifier right, float w) Parameters left AmbientModifier right AmbientModifier w float ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.AnimCacheEntry.html": {
    "href": "api/Vintagestory.API.Common.AnimCacheEntry.html",
    "title": "Class AnimCacheEntry | VintageStory API",
    "keywords": "Class AnimCacheEntry Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimCacheEntry Inheritance object AnimCacheEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Animations Animations of this cache. public Animation[] Animations Field Value Animation[] RootElems The root elements of this cache. public ShapeElement[] RootElems Field Value ShapeElement[] RootPoses The poses of this cache public List<ElementPose> RootPoses Field Value List<ElementPose>"
  },
  "api/Vintagestory.API.Common.AnimFrameCallback.html": {
    "href": "api/Vintagestory.API.Common.AnimFrameCallback.html",
    "title": "Class AnimFrameCallback | VintageStory API",
    "keywords": "Class AnimFrameCallback Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimFrameCallback Inheritance object AnimFrameCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Animation public string Animation Field Value string Callback public Action Callback Field Value Action Frame public float Frame Field Value float"
  },
  "api/Vintagestory.API.Common.AnimatableRenderer.html": {
    "href": "api/Vintagestory.API.Common.AnimatableRenderer.html",
    "title": "Class AnimatableRenderer | VintageStory API",
    "keywords": "Class AnimatableRenderer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimatableRenderer : IRenderer, IDisposable Inheritance object AnimatableRenderer Implements IRenderer IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AnimatableRenderer(ICoreClientAPI, Vec3d, Vec3f, AnimatorBase, Dictionary<string, AnimationMetaData>, MeshRef, int, EnumRenderStage) [Obsolete(\"Use constructor with MultiTextureMeshRef instead, the standard MeshRef texturing breaks when there is multiple texture atlasses\")] public AnimatableRenderer(ICoreClientAPI capi, Vec3d pos, Vec3f rotationDeg, AnimatorBase animator, Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode, MeshRef meshref, int textureId, EnumRenderStage renderStage = EnumRenderStage.Opaque) Parameters capi ICoreClientAPI pos Vec3d rotationDeg Vec3f animator AnimatorBase activeAnimationsByAnimCode Dictionary<string, AnimationMetaData> meshref MeshRef textureId int renderStage EnumRenderStage AnimatableRenderer(ICoreClientAPI, Vec3d, Vec3f, AnimatorBase, Dictionary<string, AnimationMetaData>, MultiTextureMeshRef, EnumRenderStage) public AnimatableRenderer(ICoreClientAPI capi, Vec3d pos, Vec3f rotationDeg, AnimatorBase animator, Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode, MultiTextureMeshRef meshref, EnumRenderStage renderStage = EnumRenderStage.Opaque) Parameters capi ICoreClientAPI pos Vec3d rotationDeg Vec3f animator AnimatorBase activeAnimationsByAnimCode Dictionary<string, AnimationMetaData> meshref MultiTextureMeshRef renderStage EnumRenderStage Fields CustomTransform public float[] CustomTransform Field Value float[] FogAffectedness public float FogAffectedness Field Value float LightAffected public bool LightAffected Field Value bool ModelMat public float[] ModelMat Field Value float[] ScaleX public float ScaleX Field Value float ScaleY public float ScaleY Field Value float ScaleZ public float ScaleZ Field Value float ShouldRender public bool ShouldRender Field Value bool StabilityAffected public bool StabilityAffected Field Value bool activeAnimationsByAnimCode protected Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode Field Value Dictionary<string, AnimationMetaData> animator protected AnimatorBase animator Field Value AnimatorBase backfaceCulling public bool backfaceCulling Field Value bool capi protected ICoreClientAPI capi Field Value ICoreClientAPI meshref public MeshRef meshref Field Value MeshRef mtmeshref public MultiTextureMeshRef mtmeshref Field Value MultiTextureMeshRef pos protected Vec3d pos Field Value Vec3d renderColor public Vec4f renderColor Field Value Vec4f rotationDeg public Vec3f rotationDeg Field Value Vec3f textureId public int textureId Field Value int Properties RenderOrder 0 = drawn first, 1 = drawn last Default render orders by render stage: Before: 0 = Ambient Manager 0 = Camera Opaque: 0.1 = Blue sky (Icosahedron) 0.2 = Night skybox 0.3 = Sun and moon 0.37 = Terrain opaque 0.4 = Enitities 0.5 = Decals 0.5 = Debug wireframe 0.6 = particles 0.7 = Cinematic camera line preview 0.8 = fp held item 0.9 = held item opaque custom renderer OIT: 0.2 = Frame buffer debug screen 0.35 = Clouds 0.37 = Terrain oit 0.4 = Enitities 0.6 = particles 0.9 = held item oit custom renderer Shadow far: 0 = shadow map init 0.37 = Terrain shadow far 0.4 = Enitities Shadow far done: 1 = shadow map finish Shadow near: 0 = shadow map init 0.37 = Terrain shadow near 0.4 = Enitities Shadow near done: 1 = shadow map finish Ortho: 0.2 = Frame buffer debug screen 0.4 = Enitities 0.9 = held item ortho custom renderer 0.95 = sleeping overlay 0.98 = bow/spear aiming reticle 1 = Gui manager 1.02 = crosshair and mouse cursor AfterFinalComposition: 2 = screenshot Done: 0.1 = gui manager 2 = screenshot 0.98 = Cinematic camera camera advancing and frame capture when recording 0.99 = Chunk Tesselator Manager (uploads new/modified chunk meshes) 0.999 = Compress chunks scan 1 = video recorder public double RenderOrder { get; } Property Value double RenderRange Within what range to the player OnRenderFrame() should be called (currently not used!) public int RenderRange { get; } Property Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() OnRenderFrame(float, EnumRenderStage) Called every frame for rendering whatever you need to render public void OnRenderFrame(float dt, EnumRenderStage stage) Parameters dt float stage EnumRenderStage"
  },
  "api/Vintagestory.API.Common.Animation.html": {
    "href": "api/Vintagestory.API.Common.Animation.html",
    "title": "Class Animation | VintageStory API",
    "keywords": "Class Animation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a shape animation and can calculate the transformation matrices for each frame to be sent to the shader Process For each frame, for each root element, calculate the transformation matrix. Curent model matrix is identy mat. 1.1. Get previous and next key frame. Apply translation, rotation and scale to model matrix. 1.2. Store this matrix as animationmatrix in list 1.3. For each child element 1.3.1. Multiply local transformation matrix with the animation matrix. This matrix is now the curent model matrix. Go to 1 with child elements as root elems For each frame, for each joint 2.1. Calculate the inverse model matrix 2.2. Multiply stored animationmatrix with the inverse model matrix done Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class Animation Inheritance object Animation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code [JsonProperty] public string Code Field Value string CodeCrc32 public uint CodeCrc32 Field Value uint EaseAnimationSpeed [JsonProperty] public bool EaseAnimationSpeed Field Value bool KeyFrames [JsonProperty] public AnimationKeyFrame[] KeyFrames Field Value AnimationKeyFrame[] Name [JsonProperty] public string Name Field Value string OnActivityStopped [JsonProperty] public EnumEntityActivityStoppedHandling OnActivityStopped Field Value EnumEntityActivityStoppedHandling OnAnimationEnd [JsonProperty] public EnumEntityAnimationEndHandling OnAnimationEnd Field Value EnumEntityAnimationEndHandling PrevNextKeyFrameByFrame public AnimationFrame[][] PrevNextKeyFrameByFrame Field Value AnimationFrame[][] QuantityFrames [JsonProperty] public int QuantityFrames Field Value int Version [JsonProperty] public int Version Field Value int jointsDone protected HashSet<int> jointsDone Field Value HashSet<int> Methods Clone() public Animation Clone() Returns Animation GenerateAllFrames(ShapeElement[], Dictionary<int, AnimationJoint>, bool) Compiles the animation into a bunch of matrices, 31 matrices per frame. public void GenerateAllFrames(ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, bool recursive = true) Parameters rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> recursive bool When false, will only do root elements GenerateFrame(int, AnimationFrame[], ShapeElement[], Dictionary<int, AnimationJoint>, float[], List<ElementPose>, bool) protected void GenerateFrame(int indexNumber, AnimationFrame[] resKeyFrames, ShapeElement[] elements, Dictionary<int, AnimationJoint> jointsById, float[] modelMatrix, List<ElementPose> transforms, bool recursive = true) Parameters indexNumber int resKeyFrames AnimationFrame[] elements ShapeElement[] jointsById Dictionary<int, AnimationJoint> modelMatrix float[] transforms List<ElementPose> recursive bool GenerateFrameForElement(int, ShapeElement, ref ElementPose) protected void GenerateFrameForElement(int frameNumber, ShapeElement element, ref ElementPose transform) Parameters frameNumber int element ShapeElement transform ElementPose getLeftRightResolvedFrame(int, AnimationFrame[], out AnimationFrame, out AnimationFrame) protected void getLeftRightResolvedFrame(int frameNumber, AnimationFrame[] frames, out AnimationFrame left, out AnimationFrame right) Parameters frameNumber int frames AnimationFrame[] left AnimationFrame right AnimationFrame getTwoKeyFramesElementForFlag(int, ShapeElement, int, out AnimationKeyFrameElement, out AnimationKeyFrameElement) protected void getTwoKeyFramesElementForFlag(int frameNumber, ShapeElement forElement, int forFlag, out AnimationKeyFrameElement left, out AnimationKeyFrameElement right) Parameters frameNumber int forElement ShapeElement forFlag int left AnimationKeyFrameElement right AnimationKeyFrameElement lerpKeyFrameElement(AnimationKeyFrameElement, AnimationKeyFrameElement, int, float, ref ElementPose) protected void lerpKeyFrameElement(AnimationKeyFrameElement prev, AnimationKeyFrameElement next, int forFlag, float t, ref ElementPose transform) Parameters prev AnimationKeyFrameElement next AnimationKeyFrameElement forFlag int t float transform ElementPose"
  },
  "api/Vintagestory.API.Common.AnimationCache.html": {
    "href": "api/Vintagestory.API.Common.AnimationCache.html",
    "title": "Class AnimationCache | VintageStory API",
    "keywords": "Class AnimationCache Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class AnimationCache Inheritance object AnimationCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ClearCache(ICoreAPI) Clears the animation cache. public static void ClearCache(ICoreAPI api) Parameters api ICoreAPI ClearCache(ICoreAPI, Entity) Clears the animation cache. public static void ClearCache(ICoreAPI api, Entity entity) Parameters api ICoreAPI entity Entity InitManager(ICoreAPI, IAnimationManager, Entity, Shape, RunningAnimation[], bool, params string[]) Initializes the cache to the Animation Manager then spits it back out. [Obsolete(\"Use manager.LoadAnimator() or manager.LoadAnimatorCached() instead\")] public static IAnimationManager InitManager(ICoreAPI api, IAnimationManager manager, Entity entity, Shape entityShape, RunningAnimation[] copyOverAnims, bool requirePosesOnServer, params string[] requireJointsForElements) Parameters api ICoreAPI manager IAnimationManager entity Entity entityShape Shape copyOverAnims RunningAnimation[] requirePosesOnServer bool requireJointsForElements string[] Returns IAnimationManager LoadAnimatorCached(IAnimationManager, ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) public static IAnimationManager LoadAnimatorCached(this IAnimationManager manager, ICoreAPI api, Entity entity, Shape entityShape, RunningAnimation[] copyOverAnims, bool requirePosesOnServer, params string[] requireJointsForElements) Parameters manager IAnimationManager api ICoreAPI entity Entity entityShape Shape copyOverAnims RunningAnimation[] requirePosesOnServer bool requireJointsForElements string[] Returns IAnimationManager"
  },
  "api/Vintagestory.API.Common.AnimationFrame.html": {
    "href": "api/Vintagestory.API.Common.AnimationFrame.html",
    "title": "Class AnimationFrame | VintageStory API",
    "keywords": "Class AnimationFrame Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimationFrame Inheritance object AnimationFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields FrameNumber The frame number. public int FrameNumber Field Value int RootElementTransforms The transformations for the root element of the frame. public List<ElementPose> RootElementTransforms Field Value List<ElementPose> Methods FinalizeMatrices(Dictionary<int, AnimationJoint>) Finalizes the matricies with joints assigned by their ID. [Obsolete(\"Does nothing in 1.20.11 - actually it had no useful effect even before 1.20\")] public void FinalizeMatrices(Dictionary<int, AnimationJoint> jointsById) Parameters jointsById Dictionary<int, AnimationJoint> SetTransform(int, float[]) Sets the transform of a particular joint ID. [Obsolete(\"Does nothing in 1.20.11 - actually it had no useful effect even before 1.20\")] public void SetTransform(int jointId, float[] modelTransform) Parameters jointId int modelTransform float[]"
  },
  "api/Vintagestory.API.Common.AnimationJoint.html": {
    "href": "api/Vintagestory.API.Common.AnimationJoint.html",
    "title": "Class AnimationJoint | VintageStory API",
    "keywords": "Class AnimationJoint Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimationJoint Inheritance object AnimationJoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Element The attached ShapeElement. public ShapeElement Element Field Value ShapeElement JointId The ID of the joint. public int JointId Field Value int Methods ApplyInverseTransform(float[]) Takes the transform and inverses it. public float[] ApplyInverseTransform(float[] frameModelTransform) Parameters frameModelTransform float[] Returns float[]"
  },
  "api/Vintagestory.API.Common.AnimationKeyFrame.html": {
    "href": "api/Vintagestory.API.Common.AnimationKeyFrame.html",
    "title": "Class AnimationKeyFrame | VintageStory API",
    "keywords": "Class AnimationKeyFrame Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class AnimationKeyFrame Inheritance object AnimationKeyFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Elements The elements of the keyframe. [JsonProperty] public Dictionary<string, AnimationKeyFrameElement> Elements Field Value Dictionary<string, AnimationKeyFrameElement> Frame The ID of the keyframe. [JsonProperty] public int Frame Field Value int Methods Clone() public AnimationKeyFrame Clone() Returns AnimationKeyFrame Resolve(Dictionary<string, ShapeElement>) Resolves the keyframe animation for which elements are important. public void Resolve(Dictionary<string, ShapeElement> allElements) Parameters allElements Dictionary<string, ShapeElement> Resolve(ShapeElement[]) Resolves the keyframe animation for which elements are important. [Obsolete(\"Use the overload taking a Dictionary argument instead for higher performance on large sets\")] public void Resolve(ShapeElement[] allElements) Parameters allElements ShapeElement[]"
  },
  "api/Vintagestory.API.Common.AnimationKeyFrameElement.html": {
    "href": "api/Vintagestory.API.Common.AnimationKeyFrameElement.html",
    "title": "Class AnimationKeyFrameElement | VintageStory API",
    "keywords": "Class AnimationKeyFrameElement Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class AnimationKeyFrameElement Inheritance object AnimationKeyFrameElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ForElement public ShapeElement ForElement Field Value ShapeElement OffsetX [JsonProperty] public double? OffsetX Field Value double? OffsetY [JsonProperty] public double? OffsetY Field Value double? OffsetZ [JsonProperty] public double? OffsetZ Field Value double? OriginX [JsonProperty] public double? OriginX Field Value double? OriginY [JsonProperty] public double? OriginY Field Value double? OriginZ [JsonProperty] public double? OriginZ Field Value double? RotShortestDistanceX [JsonProperty] public bool RotShortestDistanceX Field Value bool RotShortestDistanceY [JsonProperty] public bool RotShortestDistanceY Field Value bool RotShortestDistanceZ [JsonProperty] public bool RotShortestDistanceZ Field Value bool RotationX [JsonProperty] public double? RotationX Field Value double? RotationY [JsonProperty] public double? RotationY Field Value double? RotationZ [JsonProperty] public double? RotationZ Field Value double? StretchX [JsonProperty] public double? StretchX Field Value double? StretchY [JsonProperty] public double? StretchY Field Value double? StretchZ [JsonProperty] public double? StretchZ Field Value double? Properties AnySet public bool AnySet { get; } Property Value bool OriginSet public bool OriginSet { get; } Property Value bool PositionSet public bool PositionSet { get; } Property Value bool RotationSet public bool RotationSet { get; } Property Value bool StretchSet public bool StretchSet { get; } Property Value bool"
  },
  "api/Vintagestory.API.Common.AnimationManager.html": {
    "href": "api/Vintagestory.API.Common.AnimationManager.html",
    "title": "Class AnimationManager | VintageStory API",
    "keywords": "Class AnimationManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimationManager : IAnimationManager, IDisposable Inheritance object AnimationManager Implements IAnimationManager IDisposable Derived PlayerAnimationManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) AnimationCache.LoadAnimatorCached(IAnimationManager, ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) Constructors AnimationManager() public AnimationManager() Fields ActiveAnimationsByAnimCode The list of currently active animations that should be playing public Dictionary<string, AnimationMetaData> ActiveAnimationsByAnimCode Field Value Dictionary<string, AnimationMetaData> Triggers public List<AnimFrameCallback> Triggers Field Value List<AnimFrameCallback> api protected ICoreAPI api Field Value ICoreAPI capi protected ICoreClientAPI capi Field Value ICoreClientAPI entity The entity attached to this Animation Manager. protected Entity entity Field Value Entity Properties AdjustCollisionBoxToAnimation public bool AdjustCollisionBoxToAnimation { get; set; } Property Value bool AnimationsDirty Are the animations dirty in this AnimationManager? public bool AnimationsDirty { get; set; } Property Value bool Animator The animator for the animation manager. public IAnimator Animator { get; set; } Property Value IAnimator HeadController The entity head controller for this animator. public EntityHeadController HeadController { get; set; } Property Value EntityHeadController Methods CopyOverAnimStates(RunningAnimation[], IAnimator) public void CopyOverAnimStates(RunningAnimation[] copyOverAnims, IAnimator animator) Parameters copyOverAnims RunningAnimation[] animator IAnimator Dispose() Disposes of the animation manager. public void Dispose() FromAttributes(ITreeAttribute, string) Loads the entity from a stored byte array from the SaveGame public virtual void FromAttributes(ITreeAttribute tree, string version) Parameters tree ITreeAttribute version string GetAnimationState(string) public virtual RunningAnimation GetAnimationState(string anim) Parameters anim string Returns RunningAnimation Init(ICoreAPI, Entity) Initializes the Animation Manager. public virtual void Init(ICoreAPI api, Entity entity) Parameters api ICoreAPI The Core API. entity Entity The entity this manager is attached to. IsAnimationActive(params string[]) public virtual bool IsAnimationActive(params string[] anims) Parameters anims string[] Returns bool LoadAnimator(ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) public IAnimator LoadAnimator(ICoreAPI api, Entity entity, Shape entityShape, RunningAnimation[] copyOverAnims, bool requirePosesOnServer, params string[] requireJointsForElements) Parameters api ICoreAPI entity Entity entityShape Shape copyOverAnims RunningAnimation[] requirePosesOnServer bool requireJointsForElements string[] Returns IAnimator OnClientFrame(float) The event fired each time the client ticks. public virtual void OnClientFrame(float dt) Parameters dt float OnReceivedServerAnimations(int[], int, float[]) The event fired when the manager recieves the server animations. public virtual void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] activeAnimationsCount int activeAnimationSpeeds float[] OnServerTick(float) The event fired at each server tick. public virtual void OnServerTick(float dt) Parameters dt float RegisterFrameCallback(AnimFrameCallback) public virtual void RegisterFrameCallback(AnimFrameCallback trigger) Parameters trigger AnimFrameCallback ResetAnimation(string) If given animation is running, will set its progress to the first animation frame public virtual void ResetAnimation(string animCode) Parameters animCode string SerializeActiveAnimations(bool, Action<string, FastMemoryStream>) protected virtual void SerializeActiveAnimations(bool forClient, Action<string, FastMemoryStream> output) Parameters forClient bool output Action<string, FastMemoryStream> ShouldPlaySound(AnimationSound) public void ShouldPlaySound(AnimationSound sound) Parameters sound AnimationSound StartAnimation(string) Start a new animation defined in the entity config file. If it's not defined, it won't play. Use StartAnimation(AnimationMetaData animdata) to circumvent the entity config anim data. public virtual bool StartAnimation(string configCode) Parameters configCode string Anim config code, not the animation code! Returns bool StartAnimation(AnimationMetaData) Client: Starts given animation Server: Sends all active anims to all connected clients then purges the ActiveAnimationsByAnimCode list public virtual bool StartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool StopAnimation(string) Stops given animation public virtual void StopAnimation(string code) Parameters code string ToAttributeBytes(BinaryWriter, bool) For performance, serializes the animations to be stored directly to the provided stream public virtual void ToAttributeBytes(BinaryWriter stream, bool forClient) Parameters stream BinaryWriter forClient bool ToAttributes(ITreeAttribute, bool) Serializes the animations to be stored in the SaveGame public virtual void ToAttributes(ITreeAttribute tree, bool forClient) Parameters tree ITreeAttribute forClient bool TriggerAnimationStopped(string) The event fired when the animation is stopped. public virtual void TriggerAnimationStopped(string code) Parameters code string The code that the animation stopped with. TryStartAnimation(AnimationMetaData) As StartAnimation, except that it does not attempt to start the animation if the named animation is non-existent for this entity public virtual bool TryStartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool onReceivedServerAnimation(AnimationMetaData) protected virtual void onReceivedServerAnimation(AnimationMetaData animmetadata) Parameters animmetadata AnimationMetaData Events OnAnimationReceived public event StartAnimationDelegate OnAnimationReceived Event Type StartAnimationDelegate OnAnimationStopped public event Action<string> OnAnimationStopped Event Type Action<string> OnStartAnimation public event StartAnimationDelegate OnStartAnimation Event Type StartAnimationDelegate"
  },
  "api/Vintagestory.API.Common.AnimationMetaData.html": {
    "href": "api/Vintagestory.API.Common.AnimationMetaData.html",
    "title": "Class AnimationMetaData | VintageStory API",
    "keywords": "Class AnimationMetaData Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Animation Meta Data is a json type that controls how an animation should be played. Open in GitHub [DocumentAsJson] public class AnimationMetaData Inheritance object AnimationMetaData Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"animations\": [ { \"code\": \"hurt\", \"animation\": \"hurt\", \"animationSpeed\": 2.2, \"weight\": 10, \"blendMode\": \"AddAverage\" }, { \"code\": \"die\", \"animation\": \"death\", \"animationSpeed\": 1.25, \"weight\": 10, \"blendMode\": \"Average\", \"triggeredBy\": { \"onControls\": [ \"dead\" ] } }, { \"code\": \"idle\", \"animation\": \"idle\", \"blendMode\": \"AddAverage\", \"easeOutSpeed\": 4, \"triggeredBy\": { \"defaultAnim\": true } }, { \"code\": \"walk\", \"animation\": \"walk\", \"weight\": 5 } ] Fields Animation The animations code identifier that we want to play [JsonProperty] public string Animation Field Value string AnimationSound [JsonProperty] public AnimationSound AnimationSound Field Value AnimationSound AnimationSpeed The speed this animation should play at. [JsonProperty] public float AnimationSpeed Field Value float Attributes Custom attributes that can be used for the animation. Valid vanilla attributes are: damageAtFrame (float) soundAtFrame (float) authorative (bool) [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject BlendMode The animation blend mode. Controls how this animation will react with other concurrent animations. Also see ElementBlendMode to control blend mode per element. [JsonProperty] public EnumAnimationBlendMode BlendMode Field Value EnumAnimationBlendMode ClientSide If true, the server does not sync this animation. [JsonProperty] public bool ClientSide Field Value bool Code Unique identifier to be able to reference this AnimationMetaData instance [JsonProperty] public string Code Field Value string CodeCrc32 public uint CodeCrc32 Field Value uint EaseInSpeed A multiplier applied to the weight value to \"ease in\" the animation. Choose a high value for looping animations or it will be glitchy [JsonProperty] public float EaseInSpeed Field Value float EaseOutSpeed A multiplier applied to the weight value to \"ease out\" the animation. Choose a high value for looping animations or it will be glitchy [JsonProperty] public float EaseOutSpeed Field Value float ElementBlendMode A way of specifying BlendMode per element. [JsonProperty] public Dictionary<string, EnumAnimationBlendMode> ElementBlendMode Field Value Dictionary<string, EnumAnimationBlendMode> ElementWeight A way of specifying Weight for each element. Also see ElementBlendMode to control blend modes per element.. [JsonProperty] public Dictionary<string, float> ElementWeight Field Value Dictionary<string, float> FpVariant public AnimationMetaData FpVariant Field Value AnimationMetaData HoldEyePosAfterEasein A value that determines whether to change the first-person eye position for the camera. Higher values will keep eye position static. [JsonProperty] public float HoldEyePosAfterEasein Field Value float MulWithWalkSpeed Should this animation speed be multiplied by the movement speed of the entity? [JsonProperty] public bool MulWithWalkSpeed Field Value bool StartFrameOnce public float StartFrameOnce Field Value float SupressDefaultAnimation Should this animation stop default animations from playing? [JsonProperty] public bool SupressDefaultAnimation Field Value bool TriggeredBy Controls when this animation should be played. [JsonProperty] public AnimationTrigger TriggeredBy Field Value AnimationTrigger WasStartedFromTrigger public bool WasStartedFromTrigger Field Value bool Weight The weight of this animation. When using multiple animations at a time, this controls the significance of each animation. The method for determining final animation values depends on this and BlendMode. [JsonProperty] public float Weight Field Value float WeightCapFactor This property can be used in cases where a animation with high weight is played alongside another animation with low element weight. In these cases, the easeIn become unaturally fast. Setting a value of 0.8f or similar here addresses this issue. 0f = uncapped weight 0.5f = weight cannot exceed 2 1f = weight cannot exceed 1 [JsonProperty] public float WeightCapFactor Field Value float WithFpVariant [JsonProperty] public bool WithFpVariant Field Value bool Properties AdjustCollisionBox [JsonProperty] public bool AdjustCollisionBox { get; set; } Property Value bool Methods Clone() Not a deep clone of all fields. Scalar fields, for example AnimationSpeed, are fresh copies and can be changed dynamically or per-entity, after cloning the AnimationMetaData. For performance reasons, the non-scalar fields such as the Attributes, ElementWeight, ElementBlendMode and TriggeredBy are not deep-cloned as these fields are usually unchanging for all entities using the animation. Note: If any implementing entity needs to change the non-scalar fields dynamically, or on a per-entity basis, that entity's code can clone and replace the object in its own individual copy of the AnimationMetaData. e.g. EntityDrifter replaces .TriggeredBy in some of its animations public AnimationMetaData Clone() Returns AnimationMetaData Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. FromBytes(BinaryReader, string) public static AnimationMetaData FromBytes(BinaryReader reader, string version) Parameters reader BinaryReader version string Returns AnimationMetaData GetCrc32(string) public static uint GetCrc32(string animcode) Parameters animcode string Returns uint GetCurrentAnimationSpeed(float) public float GetCurrentAnimationSpeed(float walkspeed) Parameters walkspeed float Returns float GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Init() public AnimationMetaData Init() Returns AnimationMetaData Matches(int) public bool Matches(int currentActivities) Parameters currentActivities int Returns bool ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.AnimationSound.html": {
    "href": "api/Vintagestory.API.Common.AnimationSound.html",
    "title": "Class AnimationSound | VintageStory API",
    "keywords": "Class AnimationSound Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [DocumentAsJson] public class AnimationSound Inheritance object AnimationSound Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Frame public int Frame Field Value int Location public AssetLocation Location Field Value AssetLocation RandomizePitch public bool RandomizePitch Field Value bool Range public float Range Field Value float Methods Clone() public AnimationSound Clone() Returns AnimationSound"
  },
  "api/Vintagestory.API.Common.AnimationTrigger.html": {
    "href": "api/Vintagestory.API.Common.AnimationTrigger.html",
    "title": "Class AnimationTrigger | VintageStory API",
    "keywords": "Class AnimationTrigger Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Data about when an animation should be triggered. Open in GitHub [DocumentAsJson] public class AnimationTrigger Inheritance object AnimationTrigger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DefaultAnim Is this animation the default animation for the entity? [JsonProperty] public bool DefaultAnim Field Value bool MatchExact If set to true, all OnControls elements need to be happening simultaneously to trigger the animation. If set to false, at least one OnControls element needs to be happening to trigger the animation. Defaults to false. [JsonProperty] public bool MatchExact Field Value bool OnControls An array of controls that should begin the animation. [JsonProperty] public EnumEntityActivity[] OnControls Field Value EnumEntityActivity[] Methods Clone() public AnimationTrigger Clone() Returns AnimationTrigger"
  },
  "api/Vintagestory.API.Common.AnimationUtil.html": {
    "href": "api/Vintagestory.API.Common.AnimationUtil.html",
    "title": "Class AnimationUtil | VintageStory API",
    "keywords": "Class AnimationUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AnimationUtil : IRenderer, IDisposable Inheritance object AnimationUtil Implements IRenderer IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AnimationUtil(ICoreAPI, Vec3d) public AnimationUtil(ICoreAPI api, Vec3d position) Parameters api ICoreAPI position Vec3d Fields activeAnimationsByAnimCode public Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode Field Value Dictionary<string, AnimationMetaData> animator public AnimatorBase animator Field Value AnimatorBase api protected ICoreAPI api Field Value ICoreAPI capi protected ICoreClientAPI capi Field Value ICoreClientAPI position protected Vec3d position Field Value Vec3d renderer public AnimatableRenderer renderer Field Value AnimatableRenderer stopRenderTriggered protected bool stopRenderTriggered Field Value bool Properties RenderOrder 0 = drawn first, 1 = drawn last Default render orders by render stage: Before: 0 = Ambient Manager 0 = Camera Opaque: 0.1 = Blue sky (Icosahedron) 0.2 = Night skybox 0.3 = Sun and moon 0.37 = Terrain opaque 0.4 = Enitities 0.5 = Decals 0.5 = Debug wireframe 0.6 = particles 0.7 = Cinematic camera line preview 0.8 = fp held item 0.9 = held item opaque custom renderer OIT: 0.2 = Frame buffer debug screen 0.35 = Clouds 0.37 = Terrain oit 0.4 = Enitities 0.6 = particles 0.9 = held item oit custom renderer Shadow far: 0 = shadow map init 0.37 = Terrain shadow far 0.4 = Enitities Shadow far done: 1 = shadow map finish Shadow near: 0 = shadow map init 0.37 = Terrain shadow near 0.4 = Enitities Shadow near done: 1 = shadow map finish Ortho: 0.2 = Frame buffer debug screen 0.4 = Enitities 0.9 = held item ortho custom renderer 0.95 = sleeping overlay 0.98 = bow/spear aiming reticle 1 = Gui manager 1.02 = crosshair and mouse cursor AfterFinalComposition: 2 = screenshot Done: 0.1 = gui manager 2 = screenshot 0.98 = Cinematic camera camera advancing and frame capture when recording 0.99 = Chunk Tesselator Manager (uploads new/modified chunk meshes) 0.999 = Compress chunks scan 1 = video recorder public double RenderOrder { get; } Property Value double RenderRange Within what range to the player OnRenderFrame() should be called (currently not used!) public int RenderRange { get; } Property Value int RenderTextureId [Obsolete] protected virtual int RenderTextureId { get; } Property Value int Methods AnimationTickServer(float) public void AnimationTickServer(float deltaTime) Parameters deltaTime float Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetAnimator(ICoreAPI, string, Shape) public static AnimatorBase GetAnimator(ICoreAPI api, string cacheDictKey, Shape shape) Parameters api ICoreAPI cacheDictKey string shape Shape Returns AnimatorBase InitializeAnimator(string, MeshData, Shape, Vec3f, EnumRenderStage) public virtual void InitializeAnimator(string cacheDictKey, MeshData meshdata, Shape shape, Vec3f rotation, EnumRenderStage renderStage = EnumRenderStage.Opaque) Parameters cacheDictKey string meshdata MeshData shape Shape rotation Vec3f renderStage EnumRenderStage InitializeAnimator(string, MeshRef, Shape, Vec3f, EnumRenderStage) [Obsolete(\"Use MultiTextureMeshRef initialize instead, standard MeshRef does not support multiple texture atlasses\")] public virtual void InitializeAnimator(string cacheDictKey, MeshRef meshref, Shape blockShape, Vec3f rotation, EnumRenderStage renderStage = EnumRenderStage.Opaque) Parameters cacheDictKey string meshref MeshRef blockShape Shape rotation Vec3f renderStage EnumRenderStage InitializeAnimator(string, MultiTextureMeshRef, Shape, Vec3f, EnumRenderStage) public virtual void InitializeAnimator(string cacheDictKey, MultiTextureMeshRef meshref, Shape blockShape, Vec3f rotation, EnumRenderStage renderStage = EnumRenderStage.Opaque) Parameters cacheDictKey string meshref MultiTextureMeshRef blockShape Shape rotation Vec3f renderStage EnumRenderStage InitializeAnimatorServer(string, Shape) public virtual void InitializeAnimatorServer(string cacheDictKey, Shape blockShape) Parameters cacheDictKey string blockShape Shape InitializeShapeAndAnimator(string, Shape, ITexPositionSource, Vec3f, out MeshData) public virtual void InitializeShapeAndAnimator(string cacheDictKey, Shape shape, ITexPositionSource texSource, Vec3f rotation, out MeshData meshdata) Parameters cacheDictKey string shape Shape texSource ITexPositionSource rotation Vec3f meshdata MeshData OnAnimationsStateChange(bool) protected virtual void OnAnimationsStateChange(bool animsNowActive) Parameters animsNowActive bool OnRenderFrame(float, EnumRenderStage) Called every frame for rendering whatever you need to render public void OnRenderFrame(float deltaTime, EnumRenderStage stage) Parameters deltaTime float stage EnumRenderStage StartAnimation(AnimationMetaData) public virtual bool StartAnimation(AnimationMetaData meta) Parameters meta AnimationMetaData Returns bool StopAnimation(string) public void StopAnimation(string code) Parameters code string"
  },
  "api/Vintagestory.API.Common.AnimatorBase.html": {
    "href": "api/Vintagestory.API.Common.AnimatorBase.html",
    "title": "Class AnimatorBase | VintageStory API",
    "keywords": "Class AnimatorBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Syncs every frame with entity.ActiveAnimationsByAnimCode, starts, progresses and stops animations when necessary Open in GitHub public abstract class AnimatorBase : IAnimator Inheritance object AnimatorBase Implements IAnimator Derived ClientAnimator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AnimatorBase(WalkSpeedSupplierDelegate, Animation[], Action<string>) public AnimatorBase(WalkSpeedSupplierDelegate WalkSpeedSupplier, Animation[] Animations, Action<string> onAnimationStoppedListener = null) Parameters WalkSpeedSupplier WalkSpeedSupplierDelegate Animations Animation[] onAnimationStoppedListener Action<string> Fields AttachmentPointByCode public Dictionary<string, AttachmentPointAndPose> AttachmentPointByCode Field Value Dictionary<string, AttachmentPointAndPose> CurAnims public RunningAnimation[] CurAnims Field Value RunningAnimation[] RootElements public ShapeElement[] RootElements Field Value ShapeElement[] RootPoses public List<ElementPose> RootPoses Field Value List<ElementPose> TransformationMatrices We skip the last row - https://stackoverflow.com/questions/32565827/whats-the-purpose-of-magic-4-of-last-row-in-matrix-4x4-for-3d-graphics public float[] TransformationMatrices Field Value float[] TransformationMatricesDefaultPose The entity's default pose. Meaning for most elements this is the identity matrix, with exception of individually controlled elements such as the head. public float[] TransformationMatricesDefaultPose Field Value float[] activeAnimCount protected int activeAnimCount Field Value int anims A RunningAnimation object for each of the possible Animations for this object public RunningAnimation[] anims Field Value RunningAnimation[] entityForLogging public Entity entityForLogging Field Value Entity identMat public static readonly float[] identMat Field Value float[] logAntiSpam public static readonly HashSet<string> logAntiSpam Field Value HashSet<string> Properties ActiveAnimationCount Amount of currently active animations public int ActiveAnimationCount { get; } Property Value int Animations Holds data over all animations. This list always contains all animations of the creature. You have to check yourself which of them are active public RunningAnimation[] Animations { get; } Property Value RunningAnimation[] CalculateMatrices Whether or not to calculate the animation matrices, required for GetAttachmentPointPose() to deliver correct values. Default on on the client, server side only on when the creature is dead public bool CalculateMatrices { get; set; } Property Value bool Matrices The 30 pose transformation matrices that go to the shader public float[] Matrices { get; } Property Value float[] MaxJointId public abstract int MaxJointId { get; } Property Value int RunningAnimations [Obsolete(\"Use Animations instead\")] public RunningAnimation[] RunningAnimations { get; } Property Value RunningAnimation[] Methods AnimNowActive(RunningAnimation, AnimationMetaData) protected virtual void AnimNowActive(RunningAnimation anim, AnimationMetaData animData) Parameters anim RunningAnimation animData AnimationMetaData DumpCurrentState() public virtual string DumpCurrentState() Returns string GetAnimationState(string) public RunningAnimation GetAnimationState(string code) Parameters code string Returns RunningAnimation GetAttachmentPointPose(string) Gets the attachment point pose. public AttachmentPointAndPose GetAttachmentPointPose(string code) Parameters code string Returns AttachmentPointAndPose GetPosebyName(string, StringComparison) public virtual ElementPose GetPosebyName(string name, StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase) Parameters name string stringComparison StringComparison Returns ElementPose OnFrame(Dictionary<string, AnimationMetaData>, float) The event fired on each frame. public virtual void OnFrame(Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode, float dt) Parameters activeAnimationsByAnimCode Dictionary<string, AnimationMetaData> dt float ReloadAttachmentPoints() public virtual void ReloadAttachmentPoints() calculateMatrices(float) protected abstract void calculateMatrices(float dt) Parameters dt float"
  },
  "api/Vintagestory.API.Common.ArgumentParserBase.html": {
    "href": "api/Vintagestory.API.Common.ArgumentParserBase.html",
    "title": "Class ArgumentParserBase | VintageStory API",
    "keywords": "Class ArgumentParserBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public abstract class ArgumentParserBase : ICommandArgumentParser Inheritance object ArgumentParserBase Implements ICommandArgumentParser Derived BoolArgParser CollectibleArgParser ColorArgParser DatetimeArgParser DirectionArgParser<T> DoubleArgParser EntitiesArgParser EntityTypeArgParser FloatArgParser IntArgParser IsBlockArgParser LongArgParser OnlinePlayerArgParser PlayerRoleArgParser PlayersArgParser PositionArgumentParserBase PrivilegeArgParser StringArgParser UnparsedArg Vec3iArgParser WordArgParser WordRangeArgParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ArgumentParserBase(string, bool) protected ArgumentParserBase(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool Fields argCount protected int argCount Field Value int argName protected string argName Field Value string isMandatoryArg protected bool isMandatoryArg Field Value bool lastErrorMessage protected string lastErrorMessage Field Value string Properties ArgCount Return -1 to ignore arg count checking public int ArgCount { get; } Property Value int ArgumentName public string ArgumentName { get; } Property Value string IsMandatoryArg public bool IsMandatoryArg { get; } Property Value bool IsMissing public bool IsMissing { get; set; } Property Value bool LastErrorMessage public string LastErrorMessage { get; } Property Value string Methods GetLastError() public virtual string GetLastError() Returns string GetSyntax() public virtual string GetSyntax() Returns string GetSyntaxExplanation(string) public virtual string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetSyntaxUnformatted() public virtual string GetSyntaxUnformatted() Returns string GetValidRange(CmdArgs) public virtual string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public abstract object GetValue() Returns object PreProcess(TextCommandCallingArgs) public virtual void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public abstract void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public abstract EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult parseSubArgs(string) protected Dictionary<string, string> parseSubArgs(string strargs) Parameters strargs string Returns Dictionary<string, string>"
  },
  "api/Vintagestory.API.Common.AssetCategory.html": {
    "href": "api/Vintagestory.API.Common.AssetCategory.html",
    "title": "Class AssetCategory | VintageStory API",
    "keywords": "Class AssetCategory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AssetCategory Inheritance object AssetCategory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AssetCategory(string, bool, EnumAppSide) public AssetCategory(string code, bool AffectsGameplay, EnumAppSide SideType) Parameters code string AffectsGameplay bool SideType EnumAppSide Fields blocktypes public static AssetCategory blocktypes Field Value AssetCategory categories public static Dictionary<string, AssetCategory> categories Field Value Dictionary<string, AssetCategory> config public static AssetCategory config Field Value AssetCategory dialog public static AssetCategory dialog Field Value AssetCategory entities public static AssetCategory entities Field Value AssetCategory itemtypes public static AssetCategory itemtypes Field Value AssetCategory lang public static AssetCategory lang Field Value AssetCategory music public static AssetCategory music Field Value AssetCategory patches public static AssetCategory patches Field Value AssetCategory recipes public static AssetCategory recipes Field Value AssetCategory shaderincludes public static AssetCategory shaderincludes Field Value AssetCategory shaders public static AssetCategory shaders Field Value AssetCategory shapes public static AssetCategory shapes Field Value AssetCategory sounds public static AssetCategory sounds Field Value AssetCategory textures public static AssetCategory textures Field Value AssetCategory worldgen public static AssetCategory worldgen Field Value AssetCategory worldproperties public static AssetCategory worldproperties Field Value AssetCategory Properties AffectsGameplay Temporary solution to not change block types. Will be changed public bool AffectsGameplay { get; } Property Value bool Code Path and name public string Code { get; } Property Value string SideType Determines wether it will be used on server, client or both. public EnumAppSide SideType { get; } Property Value EnumAppSide Methods FromCode(string) Gets the asset category by code name public static AssetCategory FromCode(string code) Parameters code string The code name for the asset category. Returns AssetCategory An asset category. ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.AssetLocation.html": {
    "href": "api/Vintagestory.API.Common.AssetLocation.html",
    "title": "Class AssetLocation | VintageStory API",
    "keywords": "Class AssetLocation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a complete path to an assets, including it's domain. Open in GitHub [DocumentAsJson] [TypeConverter(typeof(StringAssetLocationConverter))] [ProtoContract] public class AssetLocation : IEquatable<AssetLocation>, IComparable<AssetLocation> Inheritance object AssetLocation Implements IEquatable<AssetLocation> IComparable<AssetLocation> Derived AssetLocationAndSource Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) AssetLocationExtensions.ToNonNullString(AssetLocation) WildcardUtil.WildCardReplace(AssetLocation, AssetLocation, AssetLocation) Examples In JSON assets, asset locations are represented as single strings in the form \"domain:path\". To access an asset in the vanilla game, use the domain 'game'. \"code\": \"game:vegetable-cookedcattailroot\", Constructors AssetLocation() public AssetLocation() AssetLocation(string) Create a new AssetLocation from a single string (e.g. when parsing an AssetLocation in a JSON file). If no domain is prefixed, the default 'game' domain is used. This ensures the domain and path in the created AssetLocation are lowercase (as the input string could have any case) public AssetLocation(string domainAndPath) Parameters domainAndPath string AssetLocation(string, string) Create a new AssetLocation with given domain and path: for efficiency it is the responsibility of calling code to ensure these are lowercase public AssetLocation(string domain, string path) Parameters domain string path string Fields LocationSeparator public const char LocationSeparator = ':' Field Value char Properties Category Gets the category of the asset. public AssetCategory Category { get; } Property Value AssetCategory Domain public string Domain { get; set; } Property Value string EndsWithWildCard public bool EndsWithWildCard { get; } Property Value bool IsWildCard public bool IsWildCard { get; } Property Value bool Path public string Path { get; set; } Property Value string Valid Returns true if this is a valid path. For an asset location to be valid it needs to have any string as domain, any string as path, the domain may not contain slashes, and the path may not contain 2 consecutive slashes public bool Valid { get; } Property Value bool Methods BeginsWith(string, string) public virtual bool BeginsWith(string domain, string partialPath) Parameters domain string partialPath string Returns bool Clone() Clones this asset. public virtual AssetLocation Clone() Returns AssetLocation the cloned asset. CloneWithoutPrefixAndEnding(int) public virtual AssetLocation CloneWithoutPrefixAndEnding(int prefixLength) Parameters prefixLength int Returns AssetLocation CodePartsAfterSecond() public string CodePartsAfterSecond() Returns string CompareTo(AssetLocation) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(AssetLocation other) Parameters other AssetLocation An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. CopyWithPath(string) Makes a copy of the asset with a modified path. public virtual AssetLocation CopyWithPath(string path) Parameters path string Returns AssetLocation CopyWithPathPrefixAndAppendix(string, string) public virtual AssetLocation CopyWithPathPrefixAndAppendix(string prefix, string appendix) Parameters prefix string appendix string Returns AssetLocation CopyWithPathPrefixAndAppendixOnce(string, string) public virtual AssetLocation CopyWithPathPrefixAndAppendixOnce(string prefix, string appendix) Parameters prefix string appendix string Returns AssetLocation Create(string, string) Create an Asset Location from a string which may optionally have no prefixed domain: - in which case the defaultDomain is used. This may be used to create an AssetLocation from any string (e.g. from custom Attributes in a JSON file). For safety and consistency it ensures the domainAndPath string is lowercase. BUT: the calling code has the responsibility to ensure the defaultDomain parameter is lowercase (normally the defaultDomain will be taken from another existing AssetLocation, in which case it should already be lowercase). public static AssetLocation Create(string domainAndPath, string defaultDomain = \"game\") Parameters domainAndPath string defaultDomain string Returns AssetLocation CreateOrNull(string) Create a new AssetLocation if a non-empty string is provided, otherwise return null. Useful when deserializing packets public static AssetLocation CreateOrNull(string domainAndPath) Parameters domainAndPath string Returns AssetLocation EndVariant() Returns the code of the last variant in the path, for example for a path of \"water-still-7\" it would return \"7\" public string EndVariant() Returns string Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(AssetLocation) Indicates whether the current object is equal to another object of the same type. public bool Equals(AssetLocation other) Parameters other AssetLocation An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. FirstCodePart() public string FirstCodePart() Returns string FirstPathPart(int) Returns the n-th path part public string FirstPathPart(int posFromLeft = 0) Parameters posFromLeft int Returns string GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetName() Gets the name of the asset. public virtual string GetName() Returns string HasDomain() Whether or not the Asset has a domain. public virtual bool HasDomain() Returns bool IsChild(AssetLocation) public virtual bool IsChild(AssetLocation Location) Parameters Location AssetLocation Returns bool PathOmittingPrefixAndSuffix(string, string) public string PathOmittingPrefixAndSuffix(string prefix, string suffix) Parameters prefix string suffix string Returns string PathStartsWith(string) public bool PathStartsWith(string partialPath) Parameters partialPath string Returns bool PermanentClone() Clones this asset in a way which saves RAM, if the calling code created the AssetLocation from JSON/deserialisation. Use for objects expected to be held for a long time - for example, building Blocks at game launch (at the cost of slightly more CPU time when creating the Clone()) public virtual AssetLocation PermanentClone() Returns AssetLocation RemoveEnding() Removes the file ending from the asset path. public virtual void RemoveEnding() SecondCodePart() public string SecondCodePart() Returns string ShortDomain() public string ShortDomain() Returns string ToShortString() public string ToShortString() Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. WildCardMatch(AssetLocation, string) public bool WildCardMatch(AssetLocation other, string pathAsRegex) Parameters other AssetLocation pathAsRegex string Returns bool WithFilename(string) Sets the last part after the last / public virtual AssetLocation WithFilename(string filename) Parameters filename string Returns AssetLocation WithLocationPrefixOnce(AssetLocation) public AssetLocation WithLocationPrefixOnce(AssetLocation prefix) Parameters prefix AssetLocation Returns AssetLocation WithPath(string) Sets the path of the asset location public virtual AssetLocation WithPath(string path) Parameters path string the new path to set. Returns AssetLocation The modified AssetLocation WithPathAppendix(string) public AssetLocation WithPathAppendix(string appendix) Parameters appendix string Returns AssetLocation WithPathAppendixOnce(string) public AssetLocation WithPathAppendixOnce(string appendix) Parameters appendix string Returns AssetLocation WithPathPrefix(string) public AssetLocation WithPathPrefix(string prefix) Parameters prefix string Returns AssetLocation WithPathPrefixOnce(string) public AssetLocation WithPathPrefixOnce(string prefix) Parameters prefix string Returns AssetLocation WithoutPathAppendix(string) public AssetLocation WithoutPathAppendix(string appendix) Parameters appendix string Returns AssetLocation toLocations(string[]) Converts a collection of paths to AssetLocations. public static AssetLocation[] toLocations(string[] names) Parameters names string[] The names of all of the locations Returns AssetLocation[] The AssetLocations for all the names given. Operators operator ==(AssetLocation, AssetLocation) public static bool operator ==(AssetLocation left, AssetLocation right) Parameters left AssetLocation right AssetLocation Returns bool implicit operator AssetLocation(string) public static implicit operator AssetLocation(string code) Parameters code string Returns AssetLocation implicit operator string(AssetLocation) public static implicit operator string(AssetLocation loc) Parameters loc AssetLocation Returns string operator !=(AssetLocation, AssetLocation) public static bool operator !=(AssetLocation left, AssetLocation right) Parameters left AssetLocation right AssetLocation Returns bool"
  },
  "api/Vintagestory.API.Common.AssetLocationAndSource.html": {
    "href": "api/Vintagestory.API.Common.AssetLocationAndSource.html",
    "title": "Class AssetLocationAndSource | VintageStory API",
    "keywords": "Class AssetLocationAndSource Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a complete path to an assets, including it's domain. Includes an extra Source field for debugging. Open in GitHub [TypeConverter(typeof(StringAssetLocationConverter))] public class AssetLocationAndSource : AssetLocation, IComparable<AssetLocation>, IEquatable<AssetLocation> Inheritance object AssetLocation AssetLocationAndSource Implements IComparable<AssetLocation> IEquatable<AssetLocation> Inherited Members AssetLocation.LocationSeparator AssetLocation.Domain AssetLocation.Path AssetLocation.IsWildCard AssetLocation.EndsWithWildCard AssetLocation.CreateOrNull(string) AssetLocation.Create(string, string) AssetLocation.Valid AssetLocation.IsChild(AssetLocation) AssetLocation.BeginsWith(string, string) AssetLocation.PathStartsWith(string) AssetLocation.ToShortString() AssetLocation.ShortDomain() AssetLocation.FirstPathPart(int) AssetLocation.FirstCodePart() AssetLocation.SecondCodePart() AssetLocation.CodePartsAfterSecond() AssetLocation.Category AssetLocation.WithPathPrefix(string) AssetLocation.WithPathPrefixOnce(string) AssetLocation.WithLocationPrefixOnce(AssetLocation) AssetLocation.WithPathAppendix(string) AssetLocation.WithoutPathAppendix(string) AssetLocation.WithPathAppendixOnce(string) AssetLocation.HasDomain() AssetLocation.GetName() AssetLocation.RemoveEnding() AssetLocation.PathOmittingPrefixAndSuffix(string, string) AssetLocation.EndVariant() AssetLocation.Clone() AssetLocation.PermanentClone() AssetLocation.CloneWithoutPrefixAndEnding(int) AssetLocation.CopyWithPath(string) AssetLocation.CopyWithPathPrefixAndAppendix(string, string) AssetLocation.CopyWithPathPrefixAndAppendixOnce(string, string) AssetLocation.WithPath(string) AssetLocation.WithFilename(string) AssetLocation.toLocations(string[]) AssetLocation.GetHashCode() AssetLocation.Equals(AssetLocation) AssetLocation.Equals(object) AssetLocation.ToString() AssetLocation.CompareTo(AssetLocation) AssetLocation.WildCardMatch(AssetLocation, string) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) AssetLocationExtensions.ToNonNullString(AssetLocation) WildcardUtil.WildCardReplace(AssetLocation, AssetLocation, AssetLocation) Constructors AssetLocationAndSource(string) public AssetLocationAndSource(string location) Parameters location string AssetLocationAndSource(string, string, string) [Obsolete(\"For reduced RAM usage please use newer overloads e.g. AssetLocationAndSource(domain, path, message, sourceDomain, sourcePath)\", false)] public AssetLocationAndSource(string domain, string path, string oldStyleSource) Parameters domain string path string oldStyleSource string AssetLocationAndSource(string, string, string, string, string, int) public AssetLocationAndSource(string domain, string path, string message, string sourceDomain, string sourcePath, int alternateNo = -1) Parameters domain string path string message string sourceDomain string sourcePath string alternateNo int AssetLocationAndSource(string, string, SourceStringComponents) public AssetLocationAndSource(string domain, string path, SourceStringComponents source) Parameters domain string path string source SourceStringComponents AssetLocationAndSource(AssetLocation) public AssetLocationAndSource(AssetLocation loc) Parameters loc AssetLocation AssetLocationAndSource(AssetLocation, string) [Obsolete(\"For reduced RAM usage please use newer overloads e.g. AssetLocationAndSource(loc, message, sourceAssetLoc)\", false)] public AssetLocationAndSource(AssetLocation loc, string oldStyleSource) Parameters loc AssetLocation oldStyleSource string AssetLocationAndSource(AssetLocation, string, AssetLocation, int) public AssetLocationAndSource(AssetLocation loc, string message, AssetLocation sourceLoc, int alternateNo = -1) Parameters loc AssetLocation message string sourceLoc AssetLocation alternateNo int AssetLocationAndSource(AssetLocation, SourceStringComponents) public AssetLocationAndSource(AssetLocation loc, SourceStringComponents source) Parameters loc AssetLocation source SourceStringComponents Fields AddToAllAtlasses public bool AddToAllAtlasses Field Value bool Source The source of a given asset. public SourceStringComponents Source Field Value SourceStringComponents loadedAlready Used to avoid duplication when loading colormaps and shapes public volatile int loadedAlready Field Value int"
  },
  "api/Vintagestory.API.Common.AssetLocationExtensions.html": {
    "href": "api/Vintagestory.API.Common.AssetLocationExtensions.html",
    "title": "Class AssetLocationExtensions | VintageStory API",
    "keywords": "Class AssetLocationExtensions Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class AssetLocationExtensions Inheritance object AssetLocationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNonNullString(AssetLocation) Convenience method and aids performance, avoids double field look-up public static string ToNonNullString(this AssetLocation loc) Parameters loc AssetLocation Returns string"
  },
  "api/Vintagestory.API.Common.AssetLocationJsonParser.html": {
    "href": "api/Vintagestory.API.Common.AssetLocationJsonParser.html",
    "title": "Class AssetLocationJsonParser | VintageStory API",
    "keywords": "Class AssetLocationJsonParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AssetLocationJsonParser : JsonConverter Inheritance object JsonConverter AssetLocationJsonParser Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AssetLocationJsonParser(string) public AssetLocationJsonParser(string domain) Parameters domain string Methods CanConvert(Type) public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Vintagestory.API.Common.AsyncParseResults.html": {
    "href": "api/Vintagestory.API.Common.AsyncParseResults.html",
    "title": "Class AsyncParseResults | VintageStory API",
    "keywords": "Class AsyncParseResults Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AsyncParseResults Inheritance object AsyncParseResults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Data public object Data Field Value object Status public EnumParseResultStatus Status Field Value EnumParseResultStatus"
  },
  "api/Vintagestory.API.Common.AttachmentPoint.html": {
    "href": "api/Vintagestory.API.Common.AttachmentPoint.html",
    "title": "Class AttachmentPoint | VintageStory API",
    "keywords": "Class AttachmentPoint Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a spot on the shape that connects to another shape. Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class AttachmentPoint Inheritance object AttachmentPoint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code The json code of this attachment point. [JsonProperty] public string Code Field Value string ParentElement The parent element of this attachment point. public ShapeElement ParentElement Field Value ShapeElement PosX The X position of the attachment point. [JsonProperty] public double PosX Field Value double PosY The Y position of the attachment point. [JsonProperty] public double PosY Field Value double PosZ The Z position of the attachment point. [JsonProperty] public double PosZ Field Value double RotationX The forward vertical rotation of the attachment point. [JsonProperty] public double RotationX Field Value double RotationY The forward horizontal rotation of the attachment point [JsonProperty] public double RotationY Field Value double RotationZ the left/right tilt of the attachment point [JsonProperty] public double RotationZ Field Value double Methods DeDuplicate() public void DeDuplicate()"
  },
  "api/Vintagestory.API.Common.AttachmentPointAndPose.html": {
    "href": "api/Vintagestory.API.Common.AttachmentPointAndPose.html",
    "title": "Class AttachmentPointAndPose | VintageStory API",
    "keywords": "Class AttachmentPointAndPose Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class AttachmentPointAndPose Inheritance object AttachmentPointAndPose Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AttachmentPointAndPose() public AttachmentPointAndPose() Fields AnimModelMatrix The current model matrix for this attachment point for this entity for the current animation frame. public float[] AnimModelMatrix Field Value float[] AttachPoint The attachment point public AttachmentPoint AttachPoint Field Value AttachmentPoint CachedPose The pose shared across all entities using the same shape. Don't use. It's used internally for calculating the animation state. Once calculated, the value is copied over to AnimModelMatrix public ElementPose CachedPose Field Value ElementPose Methods Mul(Matrixf) public Matrixf Mul(Matrixf m) Parameters m Matrixf Returns Matrixf MulUncentered(Matrixf) public Matrixf MulUncentered(Matrixf m) Parameters m Matrixf Returns Matrixf"
  },
  "api/Vintagestory.API.Common.BagInventory.html": {
    "href": "api/Vintagestory.API.Common.BagInventory.html",
    "title": "Class BagInventory | VintageStory API",
    "keywords": "Class BagInventory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The contents of one or more bags Open in GitHub public class BagInventory : IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object BagInventory Implements IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BagInventory(ICoreAPI, ItemSlot[]) public BagInventory(ICoreAPI api, ItemSlot[] bagSlots) Parameters api ICoreAPI bagSlots ItemSlot[] Fields Api protected ICoreAPI Api Field Value ICoreAPI bagContents protected List<ItemSlot> bagContents Field Value List<ItemSlot> Properties BagSlots public ItemSlot[] BagSlots { get; set; } Property Value ItemSlot[] Count Gets the number of elements in the collection. public int Count { get; } Property Value int The number of elements in the collection. this[int] public ItemSlot this[int slotId] { get; set; } Parameters slotId int Property Value ItemSlot Methods GetEnumerator() Gets the enumerator for the inventory. public IEnumerator<ItemSlot> GetEnumerator() Returns IEnumerator<ItemSlot> ReloadBagInventory(InventoryBase, ItemSlot[]) public void ReloadBagInventory(InventoryBase parentinv, ItemSlot[] bagSlots) Parameters parentinv InventoryBase bagSlots ItemSlot[] SaveSlotIntoBag(ItemSlotBagContent) public void SaveSlotIntoBag(ItemSlotBagContent slot) Parameters slot ItemSlotBagContent SaveSlotsIntoBags() public void SaveSlotsIntoBags()"
  },
  "api/Vintagestory.API.Common.BakedBitmap.html": {
    "href": "api/Vintagestory.API.Common.BakedBitmap.html",
    "title": "Class BakedBitmap | VintageStory API",
    "keywords": "Class BakedBitmap Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BakedBitmap : IBitmap Inheritance object BakedBitmap Implements IBitmap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Height public int Height Field Value int TexturePixels public int[] TexturePixels Field Value int[] Width public int Width Field Value int Properties Pixels public int[] Pixels { get; } Property Value int[] Methods GetPixel(int, int) public SKColor GetPixel(int x, int y) Parameters x int y int Returns SKColor GetPixelArgb(int, int) public int GetPixelArgb(int x, int y) Parameters x int y int Returns int GetPixelRel(float, float) public SKColor GetPixelRel(float x, float y) Parameters x float y float Returns SKColor GetPixelsTransformed(int, int) public int[] GetPixelsTransformed(int rot = 0, int alpha = 100) Parameters rot int alpha int Returns int[]"
  },
  "api/Vintagestory.API.Common.BakingProperties.html": {
    "href": "api/Vintagestory.API.Common.BakingProperties.html",
    "title": "Class BakingProperties | VintageStory API",
    "keywords": "Class BakingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Baking Properties are collectible attribute used for baking items in a clay oven. You will need to add these attributes if using Bake inside SmeltingType. Open in GitHub [DocumentAsJson] public class BakingProperties Inheritance object BakingProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples Example taken from bread. Note that the levelTo value in the baking stage is the same as the levelFrom in the next baking stage. \"attributesByType\": { \"*-partbaked\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.25, \"levelTo\": 0.5, \"startScaleY\": 0.95, \"endScaleY\": 1.10, \"resultCode\": \"bread-{type}-perfect\", \"initialCode\": \"dough-{type}\" } }, \"*-perfect\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.5, \"levelTo\": 0.75, \"startScaleY\": 1.10, \"endScaleY\": 1.13, \"resultCode\": \"bread-{type}-charred\", \"initialCode\": \"bread-{type}-partbaked\" } }, \"*-charred\": { \"bakingProperties\": { \"temp\": 160, \"levelFrom\": 0.75, \"levelTo\": 1, \"startScaleY\": 1.13, \"endScaleY\": 1.10, \"initialCode\": \"bread-{type}-perfect\" } } }, Fields EndScaleY The Y scale of this collectible when it has finished cooking. Value will be linearly interpolated between StartScaleY and this. [DocumentAsJson] public float EndScaleY Field Value float InitialCode The code of the initial collectible that is being baked. [DocumentAsJson] public string InitialCode Field Value string LargeItem If true, only one instance of this collectible can be baked at a time. If false, 4 of this collectible can be baked at a time. [DocumentAsJson] public bool LargeItem Field Value bool LevelFrom The initial value, from 0 to 1, that determines how cooked the item is. When cooking an object with numerous cooking stages, these stages can be stacked using these values. Simply set the second stage's LevelFrom to the first stages LevelTo. [DocumentAsJson] public float LevelFrom Field Value float LevelTo The final value, from 0 to 1, that determines how cooked the item is. When the cooking value reaches this value, the collectible will change into the next item. When cooking an object with numerous cooking stages, these stages can be stacked using these values. Simply set the second stage's LevelFrom to the first stages LevelTo. [DocumentAsJson] public float LevelTo Field Value float ResultCode The code of the resulting collectible when this item finishes its cooking stage. [DocumentAsJson] public string ResultCode Field Value string StartScaleY The Y scale of this collectible when it begins cooking. Value will be linearly interpolated between this and EndScaleY. [DocumentAsJson] public float StartScaleY Field Value float Temp The temperature required to bake the item. [DocumentAsJson] public float? Temp Field Value float? Methods ReadFrom(ItemStack) public static BakingProperties ReadFrom(ItemStack stack) Parameters stack ItemStack Returns BakingProperties"
  },
  "api/Vintagestory.API.Common.BitmapExternal.html": {
    "href": "api/Vintagestory.API.Common.BitmapExternal.html",
    "title": "Class BitmapExternal | VintageStory API",
    "keywords": "Class BitmapExternal Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BitmapExternal : BitmapRef, IDisposable, IBitmap Inheritance object BitmapRef BitmapExternal Implements IDisposable IBitmap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BitmapExternal() [Obsolete(\"This requires to manually set the underlying SKBitmap, prefer other overloads.\")] public BitmapExternal() BitmapExternal(SKBitmap) public BitmapExternal(SKBitmap bmp) Parameters bmp SKBitmap BitmapExternal(byte[], int, ILogger) Create a BitmapExternal from a byte array public BitmapExternal(byte[] data, int dataLength, ILogger logger) Parameters data byte[] dataLength int logger ILogger BitmapExternal(MemoryStream, ILogger, AssetLocation?) public BitmapExternal(MemoryStream ms, ILogger logger, AssetLocation? loc = null) Parameters ms MemoryStream logger ILogger loc AssetLocation BitmapExternal(Stream, ILogger?) public BitmapExternal(Stream stream, ILogger? logger = null) Parameters stream Stream logger ILogger BitmapExternal(int, int) public BitmapExternal(int width, int height) Parameters width int height int BitmapExternal(string, ILogger?) public BitmapExternal(string filePath, ILogger? logger = null) Parameters filePath string logger ILogger Fields bmp public SKBitmap bmp Field Value SKBitmap Properties Height public override int Height { get; } Property Value int Pixels public override int[] Pixels { get; } Property Value int[] PixelsPtrAndLock public nint PixelsPtrAndLock { get; } Property Value nint Width public override int Width { get; } Property Value int Methods Decode(ReadOnlySpan<byte>) public static SKBitmap Decode(ReadOnlySpan<byte> buffer) Parameters buffer ReadOnlySpan<byte> Returns SKBitmap Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public override void Dispose() GetPixel(int, int) Retrives the ARGB value from given coordinate public override SKColor GetPixel(int x, int y) Parameters x int y int Returns SKColor GetPixelRel(float, float) Retrives the ARGB value from given coordinate using normalized coordinates (0..1) public override SKColor GetPixelRel(float x, float y) Parameters x float y float Returns SKColor GetPixelsTransformed(int, int) public override int[] GetPixelsTransformed(int rot = 0, int mulAlpha = 255) Parameters rot int mulAlpha int Returns int[] MulAlpha(int) public override void MulAlpha(int alpha = 255) Parameters alpha int Save(string) public override void Save(string filename) Parameters filename string"
  },
  "api/Vintagestory.API.Common.BitmapRef.html": {
    "href": "api/Vintagestory.API.Common.BitmapRef.html",
    "title": "Class BitmapRef | VintageStory API",
    "keywords": "Class BitmapRef Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public abstract class BitmapRef : IDisposable, IBitmap Inheritance object BitmapRef Implements IDisposable IBitmap Derived BitmapExternal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Height public abstract int Height { get; } Property Value int Pixels public abstract int[] Pixels { get; } Property Value int[] Width public abstract int Width { get; } Property Value int Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public abstract void Dispose() GetPixel(int, int) public abstract SKColor GetPixel(int x, int y) Parameters x int y int Returns SKColor GetPixelRel(float, float) public abstract SKColor GetPixelRel(float x, float y) Parameters x float y float Returns SKColor GetPixelsTransformed(int, int) public abstract int[] GetPixelsTransformed(int rot = 0, int mulalpha = 255) Parameters rot int mulalpha int Returns int[] MulAlpha(int) public abstract void MulAlpha(int alpha = 255) Parameters alpha int Save(string) public abstract void Save(string filename) Parameters filename string"
  },
  "api/Vintagestory.API.Common.Block.html": {
    "href": "api/Vintagestory.API.Common.Block.html",
    "title": "Class Block | VintageStory API",
    "keywords": "Class Block Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Basic class for a placeable block Open in GitHub public class Block : CollectibleObject Inheritance object RegistryObject CollectibleObject Block Derived BlockGeneric Inherited Members CollectibleObject.DefaultSize CollectibleObject.MatterState CollectibleObject.IsMissing CollectibleObject.GetHashCode() CollectibleObject.MaxStackSize CollectibleObject.Durability CollectibleObject.Dimensions CollectibleObject.LiquidSelectable CollectibleObject.AttackPower CollectibleObject.HeldPriorityInteract CollectibleObject.AttackRange CollectibleObject.DamagedBy CollectibleObject.MiningSpeed CollectibleObject.ToolTier CollectibleObject.MiningTier CollectibleObject.HeldSounds CollectibleObject.CreativeInventoryTabs CollectibleObject.CreativeInventoryStacks CollectibleObject.RenderAlphaTest CollectibleObject.GuiTransform CollectibleObject.FpHandTransform CollectibleObject.TpHandTransform CollectibleObject.TpOffHandTransform CollectibleObject.GroundTransform CollectibleObject.Attributes CollectibleObject.CombustibleProps CollectibleObject.NutritionProps CollectibleObject.TransitionableProps CollectibleObject.GrindingProps CollectibleObject.CrushingProps CollectibleObject.ParticleProperties CollectibleObject.TopMiddlePos CollectibleObject.Tool CollectibleObject.StorageFlags CollectibleObject.MaterialDensity CollectibleObject.HeldTpHitAnimation CollectibleObject.HeldRightTpIdleAnimation CollectibleObject.HeldLeftTpIdleAnimation CollectibleObject.HeldLeftReadyAnimation CollectibleObject.HeldRightReadyAnimation CollectibleObject.HeldTpUseAnimation CollectibleObject.api CollectibleObject.CollectibleBehaviors CollectibleObject.LightHsv CollectibleObject.OnLoadedNative(ICoreAPI) CollectibleObject.OnUnloaded(ICoreAPI) CollectibleObject.GetLightHsv(IBlockAccessor, BlockPos, ItemStack) CollectibleObject.GetNutritionProperties(IWorldAccessor, ItemStack, Entity) CollectibleObject.GetTransitionableProperties(IWorldAccessor, ItemStack, Entity) CollectibleObject.RequiresTransitionableTicking(IWorldAccessor, ItemStack) CollectibleObject.GetStorageFlags(ItemStack) CollectibleObject.GetItemDamageColor(ItemStack) CollectibleObject.ShouldDisplayItemDamage(ItemStack) CollectibleObject.OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) CollectibleObject.GetDurability(IItemStack) CollectibleObject.GetMaxDurability(ItemStack) CollectibleObject.GetRemainingDurability(ItemStack) CollectibleObject.GetAttackPower(IItemStack) CollectibleObject.GetAttackRange(IItemStack) CollectibleObject.OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int) CollectibleObject.OnModifiedInInventorySlot(IWorldAccessor, ItemSlot, ItemStack) CollectibleObject.OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float) CollectibleObject.GetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer) CollectibleObject.GeldHeldFpHitAnimation(ItemSlot, Entity) CollectibleObject.GetHeldTpHitAnimation(ItemSlot, Entity) CollectibleObject.GetHeldReadyAnimation(ItemSlot, Entity, EnumHand) CollectibleObject.GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand) CollectibleObject.GetHeldTpUseAnimation(ItemSlot, Entity) CollectibleObject.OnAttackingWith(IWorldAccessor, Entity, Entity, ItemSlot) CollectibleObject.MatchesForCrafting(ItemStack, GridRecipe, CraftingRecipeIngredient) CollectibleObject.OnConsumedByCrafting(ItemSlot[], ItemSlot, GridRecipe, CraftingRecipeIngredient, IPlayer, int) CollectibleObject.ConsumeCraftingIngredients(ItemSlot[], ItemSlot, GridRecipe) CollectibleObject.SetDurability(ItemStack, int) CollectibleObject.DamageItem(IWorldAccessor, Entity, ItemSlot, int) CollectibleObject.RefillSlotIfEmpty(ItemSlot, EntityAgent, ActionConsumable<ItemStack>) CollectibleObject.GetToolModes(ItemSlot, IClientPlayer, BlockSelection) CollectibleObject.GetToolMode(ItemSlot, IPlayer, BlockSelection) CollectibleObject.SetToolMode(ItemSlot, IPlayer, BlockSelection, int) CollectibleObject.OnHeldRenderOpaque(ItemSlot, IClientPlayer) CollectibleObject.OnHeldRenderOit(ItemSlot, IClientPlayer) CollectibleObject.OnHeldRenderOrtho(ItemSlot, IClientPlayer) CollectibleObject.OnHeldIdle(ItemSlot, EntityAgent) CollectibleObject.OnHeldActionAnimStart(ItemSlot, EntityAgent, EnumHandInteract) CollectibleObject.OnGroundIdle(EntityItem) CollectibleObject.InGuiIdle(IWorldAccessor, ItemStack) CollectibleObject.OnCollected(ItemStack, Entity) CollectibleObject.OnHeldUseStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract, bool, ref EnumHandHandling) CollectibleObject.OnHeldUseCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.OnHeldUseStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldUseStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract) CollectibleObject.OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling) CollectibleObject.OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling) CollectibleObject.OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.tryEatBegin(ItemSlot, EntityAgent, ref EnumHandHandling, string, int) CollectibleObject.playEatSound(EntityAgent, string, int) CollectibleObject.tryEatStep(float, ItemSlot, EntityAgent, ItemStack) CollectibleObject.tryEatStop(float, ItemSlot, EntityAgent) CollectibleObject.OnHeldDropped(IWorldAccessor, IPlayer, ItemSlot, int, ref EnumHandling) CollectibleObject.GetHeldItemName(ItemStack) CollectibleObject.GetItemDescText() CollectibleObject.GetHeldInteractionHelp(ItemSlot) CollectibleObject.AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor) CollectibleObject.AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor, TransitionState, bool) CollectibleObject.OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) CollectibleObject.GetHandBookStacks(ICoreClientAPI) CollectibleObject.CanBePlacedInto(ItemStack, ItemSlot) CollectibleObject.GetMergableQuantity(ItemStack, ItemStack, EnumMergePriority) CollectibleObject.TryMergeStacks(ItemStackMergeOperation) CollectibleObject.GetMeltingDuration(IWorldAccessor, ISlotProvider, ItemSlot) CollectibleObject.GetMeltingPoint(IWorldAccessor, ISlotProvider, ItemSlot) CollectibleObject.CanSmelt(IWorldAccessor, ISlotProvider, ItemStack, ItemStack) CollectibleObject.DoSmelt(IWorldAccessor, ISlotProvider, ItemSlot, ItemSlot) CollectibleObject.CanSpoil(ItemStack) CollectibleObject.UpdateAndGetTransitionState(IWorldAccessor, ItemSlot, EnumTransitionType) CollectibleObject.SetTransitionState(ItemStack, EnumTransitionType, float) CollectibleObject.GetTransitionRateMul(IWorldAccessor, ItemSlot, EnumTransitionType) CollectibleObject.UpdateAndGetTransitionStates(IWorldAccessor, ItemSlot) CollectibleObject.UpdateAndGetTransitionStatesNative(IWorldAccessor, ItemSlot) CollectibleObject.OnTransitionNow(ItemSlot, TransitionableProperties) CollectibleObject.CarryOverFreshness(ICoreAPI, ItemSlot, ItemStack, TransitionableProperties) CollectibleObject.CarryOverFreshness(ICoreAPI, ItemSlot[], ItemStack[], TransitionableProperties) CollectibleObject.IsReasonablyFresh(IWorldAccessor, ItemStack) CollectibleObject.HasTemperature(IItemStack) CollectibleObject.GetTemperature(IWorldAccessor, ItemStack, double) CollectibleObject.GetTemperature(IWorldAccessor, ItemStack) CollectibleObject.SetTemperature(IWorldAccessor, ItemStack, float, bool) CollectibleObject.Equals(ItemStack, ItemStack, params string[]) CollectibleObject.Satisfies(ItemStack, ItemStack) CollectibleObject.OnStoreCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) CollectibleObject.OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) CollectibleObject.OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) CollectibleObject.IsLiquid() CollectibleObject.GetCollectibleBehavior(Type, bool) CollectibleObject.GetCollectibleBehavior<T>(bool) CollectibleObject.GetBehavior(CollectibleBehavior[], Type, bool) CollectibleObject.GetCollectibleInterface<T>() CollectibleObject.GetBehavior(Type) CollectibleObject.GetBehavior<T>() CollectibleObject.OnSmeltAttempt(InventoryBase) CollectibleObject.IsEmptyBackPack(IItemStack) CollectibleObject.IsBackPack(IItemStack) CollectibleObject.QuantityBackPackSlots(IItemStack) RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Block() Creates a new instance of a block with null model transforms; BlockTypeNet will add default transforms client-side if they are null in the BlockType packet; transforms should not be needed on a server public Block() Fields AllCreaturesAllowed public bool AllCreaturesAllowed Field Value bool AllowSpawnCreatureGroups Defines what creature groups may spawn on this block public string[] AllowSpawnCreatureGroups Field Value string[] AllowStepWhenStuck public bool AllowStepWhenStuck Field Value bool Ambientocclusion Currently not used public bool Ambientocclusion Field Value bool BlockBehaviors Modifiers that can alter the behavior of a block, particularly when being placed or removed public BlockBehavior[] BlockBehaviors Field Value BlockBehavior[] BlockEntityBehaviors Modifiers that can alter the behavior of a block entity public BlockEntityBehaviorType[] BlockEntityBehaviors Field Value BlockEntityBehaviorType[] BlockId Unique number of the block. Same as Id. This number depends on the order in which the blocks are order. The numbering is however always ensured to remain the same on a per world basis. public int BlockId Field Value int BlockMaterial A way to categorize blocks. Used for getting the mining speed for each tool type, amongst other things. Use GetBlockMaterial() to query if not performance critical. public EnumBlockMaterial BlockMaterial Field Value EnumBlockMaterial CanStep public bool CanStep Field Value bool ClimateColorMap The color map for climate color mapping. Leave null for no coloring by climate public string ClimateColorMap Field Value string ClimateColorMapResolved public ColorMap ClimateColorMapResolved Field Value ColorMap Climbable Used for ladders. If true, walking against this blocks collisionbox will make the player climb public bool Climbable Field Value bool CollisionBoxes Defines the area with which the player character collides with. public Cuboidf[] CollisionBoxes Field Value Cuboidf[] CropProps Information about the blocks as a crop public BlockCropProperties CropProps Field Value BlockCropProperties CustomBlockLayerHandler public bool CustomBlockLayerHandler Field Value bool DecorThickness Used to adjust selection box of parent block public float DecorThickness Field Value float DefaultAllowAllSpawns public static readonly string[] DefaultAllowAllSpawns Field Value string[] DefaultCollisionBox Default Full Block Collision Box public static Cuboidf DefaultCollisionBox Field Value Cuboidf DefaultCollisionSelectionBoxes Default Collision boxes (and also Selection boxes) array containing just the Default Collision Box This is standard for most solid blocks in the game. Since it is in practice immutable, all blocks can use a single copy of the same array This will help both RAM performance (avoids duplicate copies) and physics tick performance (this commonly accessed object can be well cached) public static readonly Cuboidf[] DefaultCollisionSelectionBoxes Field Value Cuboidf[] DefaultCubeShape public static readonly CompositeShape DefaultCubeShape Field Value CompositeShape DoNotRenderAtLod2 public bool DoNotRenderAtLod2 Field Value bool DragMultiplier Drag multiplier applied to entities standing on it public float DragMultiplier Field Value float DrawType If not set to JSON it will use an efficient hardcoded model public EnumDrawType DrawType Field Value EnumDrawType Drops The items that should drop from breaking this block public BlockDropItemStack[] Drops Field Value BlockDropItemStack[] EmitSideAo Defines which of the 6 block neighbours should receive AO if this block is in front of them public byte EmitSideAo Field Value byte EntityClass If this block has a block entity attached to it, this will store it's code public string EntityClass Field Value string ExtraColorBits Three extra color / season bits which may have meaning for specific blocks, such as leaves public int ExtraColorBits Field Value int FaceCullMode Determines which sides of the blocks should be rendered public EnumFaceCullMode FaceCullMode Field Value EnumFaceCullMode FastTextureVariants Fast array of texture variants, for use by cube (or similar) tesselators if the block has alternate shapes The outer array is indexed based on the 6 BlockFacing.Index numerals; the inner array is the variants public BakedCompositeTexture[][] FastTextureVariants Field Value BakedCompositeTexture[][] Fertility 0 = nothing can grow, 10 = some tallgrass and small trees can be grow on it, 100 = all grass and trees can grow on it public int Fertility Field Value int Frostable A bit uploaded to the shader to add a frost overlay below freezing temperature public bool Frostable Field Value bool HasAlternates A flag set during texture block shape tesselation public bool HasAlternates Field Value bool HasTiles public bool HasTiles Field Value bool IceCheckOffset To tell the JsonTesselator the offset to use when checking whether this is being rendered in/on ice (Currently only implemented by BlockWaterLily, compare seaweed and other water plants which check whether the block they are inside is ice, so their IceCheckOffset has the default value of 0) public int IceCheckOffset Field Value int InteractionHelpYOffset public float InteractionHelpYOffset Field Value float LightAbsorption For light blocking blocks. Any value above 32 will completely block all light. public int LightAbsorption Field Value int LiquidCode If this block is or contains a liquid, this should be the code (or \"identifier\") of the liquid public string LiquidCode Field Value string LiquidLevel Value between 0..7 for Liquids to determine the height of the liquid public int LiquidLevel Field Value int LoadColorMapAnyway public bool LoadColorMapAnyway Field Value bool Lod0Mesh public MeshData Lod0Mesh Field Value MeshData Lod0Shape The additional shape elements seen only at close distance (\"LOD0\"). For example, see leaves Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public CompositeShape Lod0Shape Field Value CompositeShape Lod2Mesh public MeshData Lod2Mesh Field Value MeshData Lod2Shape The alternative simplified shape seen at far distance (\"LOD2\"). For example, see flowers Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public CompositeShape Lod2Shape Field Value CompositeShape PartialSelection If true, players can target individual selection boxes of the block public bool PartialSelection Field Value bool ParticleCollisionBoxes Defines the area with which particles collide with (if null, will be the same as CollisionBoxes). public Cuboidf[] ParticleCollisionBoxes Field Value Cuboidf[] PlacedPriorityInteract If true, when the player holds the sneak key and right clicks this block, calls the blocks OnBlockInteractStart first, the items OnHeldInteractStart second. Without it the order is reversed. public bool PlacedPriorityInteract Field Value bool RainPermeable Will be used for not rendering rain below this block public bool RainPermeable Field Value bool RandomDrawOffset If true then the block will be randomly offseted by 1/3 of a block when placed public int RandomDrawOffset Field Value int RandomSizeAdjust public float RandomSizeAdjust Field Value float RandomizeAxes Random texture selection - whether or not to use the Y axis during randomization (for multiblock plants) public EnumRandomizeAxes RandomizeAxes Field Value EnumRandomizeAxes RandomizeRotations public bool RandomizeRotations Field Value bool RenderPass During which render pass this block should be rendered public EnumChunkRenderPass RenderPass Field Value EnumChunkRenderPass Replaceable A value usually between 0-9999 that indicates which blocks may be replaced with others. Any block with replaceable value above 5000 will be washed away by water Any block with replaceable value above 6000 will replaced when the player tries to place a block Examples: 0 = Bedrock 6000 = Tallgrass 9000 = Lava 9500 = Water 9999 = Air public int Replaceable Field Value int RequiredMiningTier The mining tier required to break this block public int RequiredMiningTier Field Value int Resistance How long it takes to break this block in seconds. Use GetResistance() to query if not performance critical. public float Resistance Field Value float SeasonColorMap The color map for season color mapping. Leave null for no coloring by season public string SeasonColorMap Field Value string SeasonColorMapResolved public ColorMap SeasonColorMapResolved Field Value ColorMap SelectionBoxes Defines the area which the players mouse pointer collides with for selection. public Cuboidf[] SelectionBoxes Field Value Cuboidf[] Shape The default json block shape to be used when drawtype==JSON public CompositeShape Shape Field Value CompositeShape ShapeInventory The block shape to be used when displayed in the inventory GUI, held in hand or dropped on the ground Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public CompositeShape ShapeInventory Field Value CompositeShape ShapeUsesColormap Internal value that's set during if the block shape has any tint indexes for use in chunk tesselation and stuff O_O public bool ShapeUsesColormap Field Value bool SideAo Defines which of the 6 block side should be shaded with ambient occlusion public SmallBoolArray SideAo Field Value SmallBoolArray SideOpaque Defines which of the 6 block sides are completely opaque. Used to determine which block faces can be culled during tesselation. public SmallBoolArray SideOpaque Field Value SmallBoolArray SideSolid Defines which of the 6 block side are solid. Used to determine if attachable blocks can be attached to this block. Also used to determine if snow can rest on top of this block. public SmallBoolArray SideSolid Field Value SmallBoolArray Sounds The sounds played for this block during step, break, build and walk. Use GetSounds() to query if not performance critical. public BlockSounds Sounds Field Value BlockSounds SplitDropStacks If true, a blocks drops will be split into stacks of stacksize 1 for more game juice. This field is only used in OnBlockBroken() and OnBlockExploded() public bool SplitDropStacks Field Value bool Tags public BlockTagArray Tags Field Value BlockTagArray TextureSubIdForBlockColor public int TextureSubIdForBlockColor Field Value int Textures Default textures to be used for this block. The Dictionary keys are the texture short names, as referenced in this block's shape ShapeElementFaces (may be null on clients, prior to receipt of server assets) Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public IDictionary<string, CompositeTexture> Textures Field Value IDictionary<string, CompositeTexture> TexturesInventory Textures to be used for this block in the inventory GUI, held in hand or dropped on the ground (may be null on clients, prior to receipt of server assets) Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public IDictionary<string, CompositeTexture> TexturesInventory Field Value IDictionary<string, CompositeTexture> VertexFlags Data thats passed on to the graphics card for every vertex of the blocks model public VertexFlags VertexFlags Field Value VertexFlags WalkSpeedMultiplier Walk speed when standing or inside this block public float WalkSpeedMultiplier Field Value float alternatingVOffset If true, the block will render with a UV offset enabling it to use the \"other half\" of a 64 x 64 texture on each alternate block position (e.g. Redwood trunk) public bool alternatingVOffset Field Value bool alternatingVOffsetFaces Bit flags for the direction in which the alternatingVOffset is to be applied e.g. 0x30 to apply alternatingVOffset as the y position moves up and down public int alternatingVOffsetFaces Field Value int decorBehaviorFlags To allow Decor Behavior settings to be accessed through the Block API. See DecorFlags class for interpretation. public byte decorBehaviorFlags Field Value byte miningTierNames protected static string[] miningTierNames Field Value string[] notSnowCovered public Block notSnowCovered Field Value Block snowCovered1 public Block snowCovered1 Field Value Block snowCovered2 public Block snowCovered2 Field Value Block snowCovered3 public Block snowCovered3 Field Value Block snowLevel public float snowLevel Field Value float waveFlagMinY protected float waveFlagMinY Field Value float Properties AllSidesOpaque Sets the whole SideOpaque array to true public bool AllSidesOpaque { get; set; } Property Value bool ClimateColorMapForMap public virtual string ClimateColorMapForMap { get; } Property Value string FirstTextureInventory Returns the first textures in the TexturesInventory dictionary public CompositeTexture FirstTextureInventory { get; } Property Value CompositeTexture ForFluidsLayer Return true if this block should be stored in the fluids layer in chunks instead of the solid blocks layer (e.g. water, flowing water, lake ice) public virtual bool ForFluidsLayer { get; } Property Value bool Id Returns the block id public override int Id { get; } Property Value int ItemClass Returns EnumItemClass.Block public override EnumItemClass ItemClass { get; } Property Value EnumItemClass PushVector Entity pushing while an entity is inside this block. Read from attributes because i'm lazy. public Vec3d PushVector { get; set; } Property Value Vec3d RemapToLiquidsLayer Return non-null if this block should have water (or ice) placed in its position in the fluids layer when updating from 1.16 to 1.17 public virtual string RemapToLiquidsLayer { get; } Property Value string SeasonColorMapForMap public virtual string SeasonColorMapForMap { get; } Property Value string Methods Activate(IWorldAccessor, Caller, BlockSelection, ITreeAttribute) When a Command Block, console command or (perhaps in future) non-player entity wants to activate this placed block public virtual void Activate(IWorldAccessor world, Caller caller, BlockSelection blockSel, ITreeAttribute activationArgs = null) Parameters world IWorldAccessor caller Caller blockSel BlockSelection activationArgs ITreeAttribute AddExtraHeldItemInfoPostMaterial(ItemSlot, StringBuilder, IWorldAccessor) Opportunity for blocks to add additional lines to the Held Item info prior to the behaviors output (such as nutrition properties or block reinforcement) public virtual void AddExtraHeldItemInfoPostMaterial(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor AddMiningTierInfo(StringBuilder) public virtual void AddMiningTierInfo(StringBuilder sb) Parameters sb StringBuilder AllowSnowCoverage(IWorldAccessor, BlockPos) public virtual bool AllowSnowCoverage(IWorldAccessor world, BlockPos blockPos) Parameters world IWorldAccessor blockPos BlockPos Returns bool CanAcceptFallOnto(IWorldAccessor, BlockPos, Block, TreeAttribute) Called on the main main thread or, potentially, on a separate thread if multiple physics threads is enabled. Return true to have OnFallOnto(IWorldAccessor, BlockPos, Block, TreeAttribute)() called, which will always be on the main thread public virtual bool CanAcceptFallOnto(IWorldAccessor world, BlockPos pos, Block fallingBlock, TreeAttribute blockEntityAttributes) Parameters world IWorldAccessor pos BlockPos fallingBlock Block blockEntityAttributes TreeAttribute Returns bool CanAttachBlockAt(IBlockAccessor, Block, BlockPos, BlockFacing, Cuboidi) Used by torches and other blocks to check if it can attach itself to that block public virtual bool CanAttachBlockAt(IBlockAccessor blockAccessor, Block block, BlockPos pos, BlockFacing blockFace, Cuboidi attachmentArea = null) Parameters blockAccessor IBlockAccessor block Block pos BlockPos blockFace BlockFacing attachmentArea Cuboidi Area of attachment of given face in voxel dimensions (0..15) Returns bool CanCreatureSpawnOn(IBlockAccessor, BlockPos, EntityProperties, BaseSpawnConditions) Should return if supplied entitytype is allowed to spawn on this block public virtual bool CanCreatureSpawnOn(IBlockAccessor blockAccessor, BlockPos pos, EntityProperties type, BaseSpawnConditions sc) Parameters blockAccessor IBlockAccessor pos BlockPos type EntityProperties sc BaseSpawnConditions Returns bool CanPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ref string) Checks if this block does not intersect with something at given position public virtual bool CanPlaceBlock(IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ref string failureCode) Parameters world IWorldAccessor byPlayer IPlayer blockSel BlockSelection failureCode string Returns bool Clone() Creates a deep copy of the block public Block Clone() Returns Block DetermineTopMiddlePos() Used as base position for particles. public virtual void DetermineTopMiddlePos() DisplacesLiquids(IBlockAccessor, BlockPos) Called for example when the player places a block inside a liquid block. Needs to return true if the liquid should get removed. public virtual bool DisplacesLiquids(IBlockAccessor blockAccess, BlockPos pos) Parameters blockAccess IBlockAccessor pos BlockPos Returns bool DoEmitSideAo(IGeometryTester, BlockFacing) public virtual bool DoEmitSideAo(IGeometryTester caller, BlockFacing facing) Parameters caller IGeometryTester facing BlockFacing Returns bool DoEmitSideAoByFlag(IGeometryTester, Vec3iAndFacingFlags, int) public virtual bool DoEmitSideAoByFlag(IGeometryTester caller, Vec3iAndFacingFlags vec, int flags) Parameters caller IGeometryTester vec Vec3iAndFacingFlags flags int Returns bool DoParticalSelection(IWorldAccessor, BlockPos) If true, the player can select invdividual selection boxes of this block public virtual bool DoParticalSelection(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns bool DoPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ItemStack) Called by TryPlaceBlock if placement is possible public virtual bool DoPlaceBlock(IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ItemStack byItemStack) Parameters world IWorldAccessor byPlayer IPlayer blockSel BlockSelection byItemStack ItemStack Might be null Returns bool ExplosionDropChance(IWorldAccessor, BlockPos, EnumBlastType) Should return the chance of the block dropping its upon upon being exploded. Default behavior is to return BlockMaterialUtil.MaterialBlastDropChances(blastType, BlockMaterial); public virtual double ExplosionDropChance(IWorldAccessor world, BlockPos pos, EnumBlastType blastType) Parameters world IWorldAccessor pos BlockPos blastType EnumBlastType Returns double FreeRAMServer() public virtual void FreeRAMServer() GetAmbientSoundStrength(IWorldAccessor, BlockPos) If this block defines an ambient sounds, the intensity the ambient should be played at. Between 0 and 1. Return 0 to not play the ambient sound. public virtual float GetAmbientSoundStrength(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns float GetAttributes(IBlockAccessor, BlockPos) Position-aware version of Attributes, for example can be used by BlockMultiblock public virtual JsonObject GetAttributes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns JsonObject GetBEBehavior<T>(BlockPos) Alias of api.World.BlockAccessor.GetBlockEntity(pos)?.GetBehavior<T>() public virtual T GetBEBehavior<T>(BlockPos pos) where T : BlockEntityBehavior Parameters pos BlockPos Returns T Type Parameters T GetBehavior(Type, bool) Returns the blocks behavior of given type, if it has such behavior public BlockBehavior GetBehavior(Type type, bool withInheritance) Parameters type Type withInheritance bool Returns BlockBehavior GetBlastResistance(IWorldAccessor, BlockPos, Vec3f, EnumBlastType) Should return the blocks blast resistance. Default behavior is to return BlockMaterialUtil.MaterialBlastResistance(blastType, BlockMaterial); public virtual double GetBlastResistance(IWorldAccessor world, BlockPos pos, Vec3f blastDirectionVector, EnumBlastType blastType) Parameters world IWorldAccessor pos BlockPos blastDirectionVector Vec3f blastType EnumBlastType Returns double GetBlockEntity<T>(BlockSelection) Alias of api.World.BlockAccessor.GetBlockEntity(blockSel.Position) as T public virtual T GetBlockEntity<T>(BlockSelection blockSel) where T : BlockEntity Parameters blockSel BlockSelection Returns T Type Parameters T GetBlockEntity<T>(BlockPos) Alias of api.World.BlockAccessor.GetBlockEntity(position) as T public virtual T GetBlockEntity<T>(BlockPos position) where T : BlockEntity Parameters position BlockPos Returns T Type Parameters T GetBlockMaterial(IBlockAccessor, BlockPos, ItemStack) Should return the blocks material Warning: This method is may get called in a background thread. Please make sure your code in here is thread safe. public virtual EnumBlockMaterial GetBlockMaterial(IBlockAccessor blockAccessor, BlockPos pos, ItemStack stack = null) Parameters blockAccessor IBlockAccessor pos BlockPos May be null and therfore stack is non-null stack ItemStack Returns EnumBlockMaterial GetCollisionBoxes(IBlockAccessor, BlockPos) Returns the blocks collision box. Warning: This method may get called by different threads, so it has to be thread safe. public virtual Cuboidf[] GetCollisionBoxes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Cuboidf[] GetColor(ICoreClientAPI, BlockPos) Should return an RGB color for this block. Current use: In the world map. Default behavior: The 2 averaged pixels at 40%/40% ad 60%/60% position public virtual int GetColor(ICoreClientAPI capi, BlockPos pos) Parameters capi ICoreClientAPI pos BlockPos Returns int GetColorWithoutTint(ICoreClientAPI, BlockPos) Tint less version of GetColor. Used for map color export public virtual int GetColorWithoutTint(ICoreClientAPI capi, BlockPos pos) Parameters capi ICoreClientAPI pos BlockPos Returns int GetDecal(IWorldAccessor, BlockPos, ITexPositionSource, ref MeshData, ref MeshData) Called before a decal is created. public virtual void GetDecal(IWorldAccessor world, BlockPos pos, ITexPositionSource decalTexSource, ref MeshData decalModelData, ref MeshData blockModelData) Parameters world IWorldAccessor pos BlockPos decalTexSource ITexPositionSource decalModelData MeshData The block model which need UV values for the decal texture blockModelData MeshData The original block model GetDrops(IWorldAccessor, BlockPos, IPlayer, float) Is called before a block is broken, should return what items this block should drop. Return null or empty array for no drops. public virtual ItemStack[] GetDrops(IWorldAccessor world, BlockPos pos, IPlayer byPlayer, float dropQuantityMultiplier = 1) Parameters world IWorldAccessor pos BlockPos byPlayer IPlayer dropQuantityMultiplier float Returns ItemStack[] GetDropsForHandbook(ItemStack, IPlayer) Should return all of the blocks drops for display in the handbook public virtual BlockDropItemStack[] GetDropsForHandbook(ItemStack handbookStack, IPlayer forPlayer) Parameters handbookStack ItemStack forPlayer IPlayer Returns BlockDropItemStack[] GetHandbookDropsFromBreakDrops(ItemStack, IPlayer) Helper method for a number of blocks protected virtual BlockDropItemStack[] GetHandbookDropsFromBreakDrops(ItemStack handbookStack, IPlayer forPlayer) Parameters handbookStack ItemStack forPlayer IPlayer Returns BlockDropItemStack[] GetHeatRetention(BlockPos, BlockFacing) Return a positive integer if the block retains heat (for warm rooms or greenhouses) or a negative integer if it preserves cool (for cellars) [Obsolete(\"Use GetRetention() instead\")] public virtual int GetHeatRetention(BlockPos pos, BlockFacing facing) Parameters pos BlockPos facing BlockFacing Returns int GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) Called by the inventory system when you hover over an item stack. This is the text that is getting displayed. public override void GetHeldItemInfo(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, bool withDebugInfo) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor withDebugInfo bool GetHorizontallyFlippedBlockCode(EnumAxis) For any block that can be flipped vertically, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations public virtual AssetLocation GetHorizontallyFlippedBlockCode(EnumAxis axis) Parameters axis EnumAxis Returns AssetLocation GetInterface<T>(IWorldAccessor, BlockPos) Returns instance of class that implements this interface in the following order Block (returns itself) BlockBehavior (returns on of our own behavior) BlockEntity BlockEntityBehavior public virtual T GetInterface<T>(IWorldAccessor world, BlockPos pos) where T : class Parameters world IWorldAccessor pos BlockPos Returns T Type Parameters T GetLightAbsorption(IBlockAccessor, BlockPos) public virtual int GetLightAbsorption(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns int GetLightAbsorption(IWorldChunk, BlockPos) public virtual int GetLightAbsorption(IWorldChunk chunk, BlockPos pos) Parameters chunk IWorldChunk pos BlockPos Returns int GetLiquidBarrierHeightOnSide(BlockFacing, BlockPos) Return a decimal between 0.0 and 1.0 indicating - if this block is solid enough to block liquid flow on that side - how high the barrier is public virtual float GetLiquidBarrierHeightOnSide(BlockFacing face, BlockPos pos) Parameters face BlockFacing pos BlockPos Returns float GetLiquidCode(IBlockAccessor, BlockPos) If this block is or contains a liquid, it should return the code of it. Used for example by farmland to check if a nearby block is water public virtual string GetLiquidCode(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns string GetParticleBreakBox(IBlockAccessor, BlockPos, BlockFacing) The cuboid used to determine where to spawn particles when breaking the block public virtual Cuboidf GetParticleBreakBox(IBlockAccessor blockAccess, BlockPos pos, BlockFacing facing) Parameters blockAccess IBlockAccessor pos BlockPos facing BlockFacing Returns Cuboidf GetParticleCollisionBoxes(IBlockAccessor, BlockPos) Returns the blocks particle collision box. Warning: This method may get called by different threads, so it has to be thread safe. public virtual Cuboidf[] GetParticleCollisionBoxes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Cuboidf[] GetPlacedBlockInfo(IWorldAccessor, BlockPos, IPlayer) Called by the block info HUD for displaying additional information public virtual string GetPlacedBlockInfo(IWorldAccessor world, BlockPos pos, IPlayer forPlayer) Parameters world IWorldAccessor pos BlockPos forPlayer IPlayer Returns string GetPlacedBlockInteractionHelp(IWorldAccessor, BlockSelection, IPlayer) Called by the block info HUD for display the interaction help besides the crosshair public virtual WorldInteraction[] GetPlacedBlockInteractionHelp(IWorldAccessor world, BlockSelection selection, IPlayer forPlayer) Parameters world IWorldAccessor selection BlockSelection forPlayer IPlayer Returns WorldInteraction[] GetPlacedBlockName(IWorldAccessor, BlockPos) Called by the block info HUD for displaying the blocks name public virtual string GetPlacedBlockName(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns string GetRandomColor(ICoreClientAPI, ItemStack) Should return a random pixel within the items/blocks texture public override int GetRandomColor(ICoreClientAPI capi, ItemStack stack) Parameters capi ICoreClientAPI stack ItemStack Returns int GetRandomColor(ICoreClientAPI, BlockPos, BlockFacing, int) Should return the color to be used for the block particle coloring public virtual int GetRandomColor(ICoreClientAPI capi, BlockPos pos, BlockFacing facing, int rndIndex = -1) Parameters capi ICoreClientAPI pos BlockPos facing BlockFacing rndIndex int Returns int GetResistance(IBlockAccessor, BlockPos) Should return the blocks resistance to breaking public virtual float GetResistance(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns float GetRetention(BlockPos, BlockFacing, EnumRetentionType) Return a positive integer if the block retains something, e.g. (for warm rooms or greenhouses) or a negative integer if something can pass through, e.g. cool for cellars public virtual int GetRetention(BlockPos pos, BlockFacing facing, EnumRetentionType type) Parameters pos BlockPos facing BlockFacing type EnumRetentionType Returns int GetRotatedBlockCode(int) For any block that can be rotated, this method should be implemented to return the correct rotated block code. It is used by the world edit tool for allowing block data rotations public virtual AssetLocation GetRotatedBlockCode(int angle) Parameters angle int Returns AssetLocation GetSelectionBoxes(IBlockAccessor, BlockPos) Returns the blocks selection boxes at this position in the world. public virtual Cuboidf[] GetSelectionBoxes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Cuboidf[] GetSelectionColor(ICoreClientAPI, BlockPos) public virtual Vec4f GetSelectionColor(ICoreClientAPI capi, BlockPos pos) Parameters capi ICoreClientAPI pos BlockPos Returns Vec4f GetSnowCoveredVariant(BlockPos, float) Should return the snow covered block code for given snow level. Return null if snow cover is not supported for this block. If not overridden, it will check if Variant[\"cover\"] exists and return its snow covered variant. public virtual Block GetSnowCoveredVariant(BlockPos pos, float snowLevel) Parameters pos BlockPos snowLevel float Returns Block GetSnowLevel(BlockPos) public virtual float GetSnowLevel(BlockPos pos) Parameters pos BlockPos Returns float GetSounds(IBlockAccessor, BlockSelection, ItemStack) Should returns the blocks sounds public virtual BlockSounds GetSounds(IBlockAccessor blockAccessor, BlockSelection blockSel, ItemStack stack = null) Parameters blockAccessor IBlockAccessor blockSel BlockSelection stack ItemStack Returns BlockSounds GetSounds(IBlockAccessor, BlockPos, ItemStack) [Obsolete(\"Use GetSounds with BlockSelection instead\")] public virtual BlockSounds GetSounds(IBlockAccessor blockAccessor, BlockPos pos, ItemStack stack = null) Parameters blockAccessor IBlockAccessor pos BlockPos stack ItemStack Returns BlockSounds GetTraversalCost(BlockPos, EnumAICreatureType) The cost of traversing this block as part of the AI pathfinding system. Return a negative value to prefer traversal of a block, return a positive value to avoid traversal of this block. A value over 10000f is considered impassable. Default value is 0 public virtual float GetTraversalCost(BlockPos pos, EnumAICreatureType creatureType) Parameters pos BlockPos creatureType EnumAICreatureType Returns float GetVerticallyFlippedBlockCode() For any block that can be flipped upside down, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations public virtual AssetLocation GetVerticallyFlippedBlockCode() Returns AssetLocation HasBehavior(string, IClassRegistryAPI) Returns true if the block has given behavior public override bool HasBehavior(string type, IClassRegistryAPI classRegistry) Parameters type string classRegistry IClassRegistryAPI Returns bool HasBehavior(Type, bool) Returns true if the block has given behavior public override bool HasBehavior(Type type, bool withInheritance = false) Parameters type Type withInheritance bool Returns bool HasBehavior<T>(bool) Returns true if the block has given block behavior OR collectible behavior public override bool HasBehavior<T>(bool withInheritance = false) where T : CollectibleBehavior Parameters withInheritance bool Returns bool Type Parameters T HasBlockBehavior<T>(bool) Returns true if the block has given block behavior public bool HasBlockBehavior<T>(bool withInheritance = false) where T : BlockBehavior Parameters withInheritance bool Returns bool Type Parameters T IsClimbable(BlockPos) public virtual bool IsClimbable(BlockPos pos) Parameters pos BlockPos Returns bool IsReplacableBy(Block) Used to determine if a block should be treated like air when placing blocks. (e.g. used for tallgrass) public virtual bool IsReplacableBy(Block block) Parameters block Block Returns bool LoadTextureSubIdForBlockColor() public virtual void LoadTextureSubIdForBlockColor() OnAsyncClientParticleTick(IAsyncParticleManager, BlockPos, float, float) Called evey 25ms if the block is in range (32 blocks) and block returned true on ShouldReceiveClientGameTicks(). Takes a few seconds for the game to register the block. public virtual void OnAsyncClientParticleTick(IAsyncParticleManager manager, BlockPos pos, float windAffectednessAtPos, float secondsTicking) Parameters manager IAsyncParticleManager pos BlockPos windAffectednessAtPos float secondsTicking float OnBeingLookedAt(IPlayer, BlockSelection, bool) Called by the server and the client when the player currently looks at this block. Gets called continously every tick. public virtual void OnBeingLookedAt(IPlayer byPlayer, BlockSelection blockSel, bool firstTick) Parameters byPlayer IPlayer blockSel BlockSelection firstTick bool True when previous tick the player looked at a different block. You can use it to make an efficient, single-event lookat trigger OnBlockBroken(IWorldAccessor, BlockPos, IPlayer, float) Called when a survival player has broken the block. This method needs to remove the block. public virtual void OnBlockBroken(IWorldAccessor world, BlockPos pos, IPlayer byPlayer, float dropQuantityMultiplier = 1) Parameters world IWorldAccessor pos BlockPos byPlayer IPlayer dropQuantityMultiplier float OnBlockExploded(IWorldAccessor, BlockPos, BlockPos, EnumBlastType) [Obsolete(\"Please use OnBlockExploded() with parameter ignitedByPlayerUid\")] public virtual void OnBlockExploded(IWorldAccessor world, BlockPos pos, BlockPos explosionCenter, EnumBlastType blastType) Parameters world IWorldAccessor pos BlockPos explosionCenter BlockPos blastType EnumBlastType OnBlockExploded(IWorldAccessor, BlockPos, BlockPos, EnumBlastType, string) Called when the block was blown up by explosives public virtual void OnBlockExploded(IWorldAccessor world, BlockPos pos, BlockPos explosionCenter, EnumBlastType blastType, string ignitedByPlayerUid) Parameters world IWorldAccessor pos BlockPos explosionCenter BlockPos blastType EnumBlastType ignitedByPlayerUid string OnBlockInteractCancel(float, IWorldAccessor, IPlayer, BlockSelection, EnumItemUseCancelReason) When the player released the right mouse button. Return false to deny the cancellation (= will keep using the block until OnBlockInteractStep returns false). public virtual bool OnBlockInteractCancel(float secondsUsed, IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, EnumItemUseCancelReason cancelReason) Parameters secondsUsed float world IWorldAccessor byPlayer IPlayer blockSel BlockSelection cancelReason EnumItemUseCancelReason Returns bool OnBlockInteractStart(IWorldAccessor, IPlayer, BlockSelection) When a player does a right click while targeting this placed block. Should return true if the event is handled, so that other events can occur, e.g. eating a held item if the block is not interactable with. public virtual bool OnBlockInteractStart(IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel) Parameters world IWorldAccessor byPlayer IPlayer blockSel BlockSelection Returns bool False if the interaction should be stopped. True if the interaction should continue. If you return false, the interaction will not be synced to the server. OnBlockInteractStep(float, IWorldAccessor, IPlayer, BlockSelection) Called every frame while the player is using this block. Return false to stop the interaction. public virtual bool OnBlockInteractStep(float secondsUsed, IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel) Parameters secondsUsed float world IWorldAccessor byPlayer IPlayer blockSel BlockSelection Returns bool OnBlockInteractStop(float, IWorldAccessor, IPlayer, BlockSelection) Called when the player successfully completed the using action, always called once an interaction is over public virtual void OnBlockInteractStop(float secondsUsed, IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel) Parameters secondsUsed float world IWorldAccessor byPlayer IPlayer blockSel BlockSelection OnBlockPlaced(IWorldAccessor, BlockPos, ItemStack) Always called when a block has been placed through whatever method, except during worldgen or via ExchangeBlock() Spawns the associated block entity, remember to call the base method! For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal public virtual void OnBlockPlaced(IWorldAccessor world, BlockPos blockPos, ItemStack byItemStack = null) Parameters world IWorldAccessor blockPos BlockPos byItemStack ItemStack May be null! OnBlockRemoved(IWorldAccessor, BlockPos) Always called when a block has been removed through whatever method, except during worldgen or via ExchangeBlock() For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal public virtual void OnBlockRemoved(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos OnBrokenAsDecor(IWorldAccessor, BlockPos, BlockFacing) public virtual void OnBrokenAsDecor(IWorldAccessor world, BlockPos pos, BlockFacing side) Parameters world IWorldAccessor pos BlockPos side BlockFacing OnCollectTextures(ICoreAPI, ITextureLocationDictionary) Called by the texture atlas manager when building up the block atlas. Has to add all of the blocks texture public virtual void OnCollectTextures(ICoreAPI api, ITextureLocationDictionary textureDict) Parameters api ICoreAPI textureDict ITextureLocationDictionary OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe) Called when a matching grid recipe has been found and an item is placed into the crafting output slot (which is still before the player clicks on the output slot to actually craft the item and consume the ingredients) public override void OnCreatedByCrafting(ItemSlot[] allInputslots, ItemSlot outputSlot, GridRecipe byRecipe) Parameters allInputslots ItemSlot[] outputSlot ItemSlot byRecipe GridRecipe OnDecalTesselation(IWorldAccessor, MeshData, BlockPos) public virtual void OnDecalTesselation(IWorldAccessor world, MeshData decalMesh, BlockPos pos) Parameters world IWorldAccessor decalMesh MeshData pos BlockPos OnEntityCollide(IWorldAccessor, Entity, BlockPos, BlockFacing, Vec3d, bool) Whenever an entity collides with the collision box of the block public virtual void OnEntityCollide(IWorldAccessor world, Entity entity, BlockPos pos, BlockFacing facing, Vec3d collideSpeed, bool isImpact) Parameters world IWorldAccessor entity Entity pos BlockPos facing BlockFacing collideSpeed Vec3d isImpact bool OnEntityInside(IWorldAccessor, Entity, BlockPos) When an entity is inside a block 1x1x1 space, independent of of its selection box or collision box public virtual void OnEntityInside(IWorldAccessor world, Entity entity, BlockPos pos) Parameters world IWorldAccessor entity Entity pos BlockPos OnFallOnto(IWorldAccessor, BlockPos, Block, TreeAttribute) Called when a falling block falls onto this one. Return true to cancel default behavior. Note: From game version 1.20.4, if overriding this you should also override CanAcceptFallOnto(IWorldAccessor, BlockPos, Block, TreeAttribute)(). See BlockCoalPile for an example. If CanAcceptFallOnto() is not implemented, then this OnFallOnto() method will most likely never be called public virtual bool OnFallOnto(IWorldAccessor world, BlockPos pos, Block block, TreeAttribute blockEntityAttributes) Parameters world IWorldAccessor pos BlockPos block Block blockEntityAttributes TreeAttribute Returns bool OnGettingBroken(IPlayer, BlockSelection, ItemSlot, float, float, int) Player is breaking this block. Has to reduce remainingResistance by the amount of time it should be broken. This method is called only client side, every 40ms during breaking. public virtual float OnGettingBroken(IPlayer player, BlockSelection blockSel, ItemSlot itemslot, float remainingResistance, float dt, int counter) Parameters player IPlayer blockSel BlockSelection itemslot ItemSlot The item the player currently has in his hands remainingResistance float how many seconds was left until the block breaks fully dt float seconds passed since last render frame counter int Total count of hits (every 40ms) Returns float how many seconds now left until the block breaks fully. If a value equal to or below 0 is returned, OnBlockBroken() will get called. OnJsonTesselation(ref MeshData, ref int[], BlockPos, Block[], int) If this block uses drawtype json, this method will be called everytime a chunk containing this block is tesselated. public virtual void OnJsonTesselation(ref MeshData sourceMesh, ref int[] lightRgbsByCorner, BlockPos pos, Block[] chunkExtBlocks, int extIndex3d) Parameters sourceMesh MeshData lightRgbsByCorner int[] Emitted light from this block pos BlockPos chunkExtBlocks Block[] Optional, fast way to look up a direct neighbouring block. This is an array of the current chunk blocks, also including all direct neighbours, so it's a 34 x 34 x 34 block list. extIndex3d is the index of the current Block in this array. Use extIndex3d+TileSideEnum.MoveIndex[tileSide] to move around in the array. extIndex3d int See description of chunkExtBlocks OnLoaded(ICoreAPI) Called when this block was loaded by the server or the client public override void OnLoaded(ICoreAPI api) Parameters api ICoreAPI OnNeighbourBlockChange(IWorldAccessor, BlockPos, BlockPos) Called when any of its 6 neighbour blocks has been changed public virtual void OnNeighbourBlockChange(IWorldAccessor world, BlockPos pos, BlockPos neibpos) Parameters world IWorldAccessor pos BlockPos neibpos BlockPos OnPickBlock(IWorldAccessor, BlockPos) When the player has presed the middle mouse click on the block public virtual ItemStack OnPickBlock(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns ItemStack OnServerGameTick(IWorldAccessor, BlockPos, object) Called by the main server thread if and only if this block returned true in ShouldReceiveServerGameTicks. public virtual void OnServerGameTick(IWorldAccessor world, BlockPos pos, object extra = null) Parameters world IWorldAccessor pos BlockPos The position of this block extra object The value set for the 'extra' parameter when ShouldReceiveGameTicks was called. PerformSnowLevelUpdate(IBulkBlockAccessor, BlockPos, Block, float) Called in the servers main thread public virtual void PerformSnowLevelUpdate(IBulkBlockAccessor ba, BlockPos pos, Block newBlock, float snowLevel) Parameters ba IBulkBlockAccessor pos BlockPos newBlock Block The block as returned by your GetSnowLevelUpdateBlock() method snowLevel float RandomSoundPitch(IWorldAccessor) public virtual float RandomSoundPitch(IWorldAccessor world) Parameters world IWorldAccessor Returns float ShouldMergeFace(int, Block, int) This method gets called when facecull mode is set to 'Callback'. Curently used for custom behaviors when merging ice public virtual bool ShouldMergeFace(int facingIndex, Block neighbourBlock, int intraChunkIndex3d) Parameters facingIndex int The index of the BlockFacing face of this block being tested neighbourBlock Block The neighbouring block intraChunkIndex3d int The position index within the chunk (z * 32 * 32 + y * 32 + x): the BlockEntity can be obtained using this if necessary Returns bool ShouldPlayAmbientSound(IWorldAccessor, BlockPos) [Obsolete(\"Use GetAmbientsoundStrength() instead. Method will be removed in 1.21\")] public virtual bool ShouldPlayAmbientSound(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns bool ShouldReceiveClientParticleTicks(IWorldAccessor, IPlayer, BlockPos, out bool) Everytime the player moves by 8 blocks (or rather leaves the current 8-grid), a scan of all blocks 32x32x32 blocks around the player is initiated and this method is called. If the method returns true, the block is registered to a client side game ticking for spawning particles and such. This method will be called everytime the player left his current 8-grid area. public virtual bool ShouldReceiveClientParticleTicks(IWorldAccessor world, IPlayer player, BlockPos pos, out bool isWindAffected) Parameters world IWorldAccessor player IPlayer pos BlockPos isWindAffected bool Returns bool ShouldReceiveServerGameTicks(IWorldAccessor, BlockPos, Random, out object) Called every interval specified in Server.Config.RandomTickInterval. Defaults to 50ms. This method is called on a separate server thread. This should be considered when deciding how to access blocks. If true is returned, the server will call OnServerGameTick on the main thread passing the BlockPos and the 'extra' object if specified. The 'extra' parameter is meant to prevent duplicating lookups and other calculations when OnServerGameTick is called. public virtual bool ShouldReceiveServerGameTicks(IWorldAccessor world, BlockPos pos, Random offThreadRandom, out object extra) Parameters world IWorldAccessor pos BlockPos The position of this block offThreadRandom Random If you do anything with random inside this method, don't use world.Rand because Random its not thread safe, use this or create your own instance extra object Optional parameter to set if you need to pass additional data to the OnServerGameTick method Returns bool SideIsSolid(IBlockAccessor, BlockPos, int) Is the side solid or almost fully solid (in the case of chiselled blocks)? Called for example when deciding to place loose stones or boulders above this during worldgen public virtual bool SideIsSolid(IBlockAccessor blockAccess, BlockPos pos, int faceIndex) Parameters blockAccess IBlockAccessor pos BlockPos faceIndex int Returns bool SideIsSolid(BlockPos, int) Does the side APPEAR fully solid? Called for example when deciding to render water edges at a position, or not Note: Worldgen code uses the blockAccessor-aware overload of this method public virtual bool SideIsSolid(BlockPos pos, int faceIndex) Parameters pos BlockPos faceIndex int Returns bool SpawnBlockBrokenParticles(BlockPos, IPlayer) public void SpawnBlockBrokenParticles(BlockPos pos, IPlayer plr = null) Parameters pos BlockPos plr IPlayer SuggestedHVOrientation(IPlayer, BlockSelection) Returns a horizontal and vertical orientation which should be used for oriented blocks like stairs during placement. public static BlockFacing[] SuggestedHVOrientation(IPlayer byPlayer, BlockSelection blockSel) Parameters byPlayer IPlayer blockSel BlockSelection Returns BlockFacing[] ToString() Simple string representation for debugging public override string ToString() Returns string TryPlaceBlock(IWorldAccessor, IPlayer, ItemStack, BlockSelection, ref string) Called when the player attempts to place this block public virtual bool TryPlaceBlock(IWorldAccessor world, IPlayer byPlayer, ItemStack itemstack, BlockSelection blockSel, ref string failureCode) Parameters world IWorldAccessor byPlayer IPlayer itemstack ItemStack blockSel BlockSelection failureCode string If you return false, set this value to a code why it cannot be placed. Its used for the ingame error overlay. Set to \"ignore\" to not trigger an error Returns bool TryPlaceBlockForWorldGen(IBlockAccessor, BlockPos, BlockFacing, IRandom, BlockPatchAttributes) Currently used for wildvines and saguaro cactus public virtual bool TryPlaceBlockForWorldGen(IBlockAccessor blockAccessor, BlockPos pos, BlockFacing onBlockFace, IRandom worldgenRandom, BlockPatchAttributes attributes = null) Parameters blockAccessor IBlockAccessor pos BlockPos onBlockFace BlockFacing worldgenRandom IRandom attributes BlockPatchAttributes Returns bool TryPlaceBlockForWorldGenUnderwater(IBlockAccessor, BlockPos, BlockFacing, IRandom, int, int, BlockPatchAttributes) public virtual bool TryPlaceBlockForWorldGenUnderwater(IBlockAccessor blockAccessor, BlockPos pos, BlockFacing onBlockFace, IRandom worldgenRandom, int minWaterDepth, int maxWaterDepth, BlockPatchAttributes attributes = null) Parameters blockAccessor IBlockAccessor pos BlockPos onBlockFace BlockFacing worldgenRandom IRandom minWaterDepth int maxWaterDepth int attributes BlockPatchAttributes Returns bool"
  },
  "api/Vintagestory.API.Common.BlockBehavior.html": {
    "href": "api/Vintagestory.API.Common.BlockBehavior.html",
    "title": "Class BlockBehavior | VintageStory API",
    "keywords": "Class BlockBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows for definitions of behaviors of a block that can be applied to any block See the derived types for a list of all documented block behaviors. Open in GitHub [DocumentAsJson] public abstract class BlockBehavior : CollectibleBehavior Inheritance object CollectibleBehavior BlockBehavior Derived StrongBlockBehavior Inherited Members CollectibleBehavior.collObj CollectibleBehavior.propertiesAtString CollectibleBehavior.ClientSideOptional CollectibleBehavior.Initialize(JsonObject) CollectibleBehavior.OnLoaded(ICoreAPI) CollectibleBehavior.OnUnloaded(ICoreAPI) CollectibleBehavior.GetStorageFlags(ItemStack, ref EnumHandling) CollectibleBehavior.OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling, ref EnumHandling) CollectibleBehavior.OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason, ref EnumHandling) CollectibleBehavior.OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling, ref EnumHandling) CollectibleBehavior.OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason, ref EnumHandling) CollectibleBehavior.OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) CollectibleBehavior.GetHeldInteractionHelp(ItemSlot, ref EnumHandling) CollectibleBehavior.GetToolModes(ItemSlot, IClientPlayer, BlockSelection) CollectibleBehavior.GetToolMode(ItemSlot, IPlayer, BlockSelection) CollectibleBehavior.SetToolMode(ItemSlot, IPlayer, BlockSelection, int) CollectibleBehavior.GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) CollectibleBehavior.GetHeldItemName(StringBuilder, ItemStack) CollectibleBehavior.OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float, ref EnumHandling) CollectibleBehavior.OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int, ref EnumHandling) CollectibleBehavior.GetHeldTpHitAnimation(ItemSlot, Entity, ref EnumHandling) CollectibleBehavior.GetHeldReadyAnimation(ItemSlot, Entity, EnumHand, ref EnumHandling) CollectibleBehavior.GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand, ref EnumHandling) CollectibleBehavior.GetHeldTpUseAnimation(ItemSlot, Entity, ref EnumHandling) CollectibleBehavior.OnCreatedByCrafting(ItemSlot[], ItemSlot, ref EnumHandling) CollectibleBehavior.OnGetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer, ref EnumHandling) CollectibleBehavior.OnGetMaxDurability(ItemStack, ref EnumHandling) CollectibleBehavior.OnGetRemainingDurability(ItemStack, ref EnumHandling) CollectibleBehavior.OnDamageItem(IWorldAccessor, Entity, ItemSlot, ref int, ref EnumHandling) CollectibleBehavior.OnSetDurability(ItemStack, ref int, ref EnumHandling) CollectibleBehavior.OnTransitionNow(ItemSlot, TransitionableProperties, ref EnumHandling) CollectibleBehavior.OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockBehavior(Block) public BlockBehavior(Block block) Parameters block Block Fields block The block for this behavior instance. public Block block Field Value Block Methods Activate(IWorldAccessor, Caller, BlockSelection, ITreeAttribute, ref EnumHandling) public virtual void Activate(IWorldAccessor world, Caller caller, BlockSelection blockSel, ITreeAttribute activationArgs, ref EnumHandling handled) Parameters world IWorldAccessor caller Caller blockSel BlockSelection activationArgs ITreeAttribute handled EnumHandling CanAttachBlockAt(IBlockAccessor, Block, BlockPos, BlockFacing, ref EnumHandling, Cuboidi) Used by torches and other blocks to check if it can attach itself to that block. The default behavior tests for SideSolid[blockFace.Index] public virtual bool CanAttachBlockAt(IBlockAccessor world, Block block, BlockPos pos, BlockFacing blockFace, ref EnumHandling handling, Cuboidi attachmentArea = null) Parameters world IBlockAccessor block Block pos BlockPos blockFace BlockFacing handling EnumHandling attachmentArea Cuboidi Returns bool CanCreatureSpawnOn(IBlockAccessor, BlockPos, EntityProperties, BaseSpawnConditions, ref EnumHandling) Should return if supplied entitytype is allowed to spawn on this block public virtual bool CanCreatureSpawnOn(IBlockAccessor blockAccessor, BlockPos pos, EntityProperties type, BaseSpawnConditions sc, ref EnumHandling handling) Parameters blockAccessor IBlockAccessor pos BlockPos type EntityProperties sc BaseSpawnConditions handling EnumHandling Returns bool CanPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling, ref string) Step 2: Test if the block can be placed public virtual bool CanPlaceBlock(IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ref EnumHandling handling, ref string failureCode) Parameters world IWorldAccessor byPlayer IPlayer blockSel BlockSelection handling EnumHandling failureCode string Returns bool DoPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ItemStack, ref EnumHandling) Step 3: Place the block. Return false if it cannot be placed (but you should rather return false in CanPlaceBlock). public virtual bool DoPlaceBlock(IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ItemStack byItemStack, ref EnumHandling handling) Parameters world IWorldAccessor byPlayer IPlayer blockSel BlockSelection byItemStack ItemStack handling EnumHandling Returns bool GetDrops(IWorldAccessor, BlockPos, IPlayer, ref float, ref EnumHandling) Is called before a block is broken, should return what items this block should drop. Return null or empty array for no drops. The default behavior drops whatever block.Drops is set to. public virtual ItemStack[] GetDrops(IWorldAccessor world, BlockPos pos, IPlayer byPlayer, ref float dropChanceMultiplier, ref EnumHandling handling) Parameters world IWorldAccessor pos BlockPos byPlayer IPlayer dropChanceMultiplier float handling EnumHandling Returns ItemStack[] GetHeatRetention(BlockPos, BlockFacing, ref EnumHandling) [Obsolete(\"Use GetRetention() instead\")] public virtual int GetHeatRetention(BlockPos pos, BlockFacing facing, ref EnumHandling handled) Parameters pos BlockPos facing BlockFacing handled EnumHandling Returns int GetHeldBlockInfo(IWorldAccessor, ItemSlot) public virtual string GetHeldBlockInfo(IWorldAccessor world, ItemSlot inSlot) Parameters world IWorldAccessor inSlot ItemSlot Returns string GetHorizontallyFlippedBlockCode(EnumAxis, ref EnumHandling) For any block that can be flipped vertically, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations public virtual AssetLocation GetHorizontallyFlippedBlockCode(EnumAxis axis, ref EnumHandling handling) Parameters axis EnumAxis handling EnumHandling Returns AssetLocation GetLiquidBarrierHeightOnSide(BlockFacing, BlockPos, ref EnumHandling) public virtual float GetLiquidBarrierHeightOnSide(BlockFacing face, BlockPos pos, ref EnumHandling handled) Parameters face BlockFacing pos BlockPos handled EnumHandling Returns float GetMiningSpeedModifier(IWorldAccessor, BlockPos, IPlayer) If this is less than 1.0, will slow down mining of the given block (e.g. used for reinforced blocks) public virtual float GetMiningSpeedModifier(IWorldAccessor world, BlockPos pos, IPlayer byPlayer) Parameters world IWorldAccessor pos BlockPos byPlayer IPlayer Returns float GetPlacedBlockInfo(IWorldAccessor, BlockPos, IPlayer) Called by the block info HUD for displaying additional information public virtual string GetPlacedBlockInfo(IWorldAccessor world, BlockPos pos, IPlayer forPlayer) Parameters world IWorldAccessor pos BlockPos forPlayer IPlayer Returns string GetPlacedBlockInteractionHelp(IWorldAccessor, BlockSelection, IPlayer, ref EnumHandling) public virtual WorldInteraction[] GetPlacedBlockInteractionHelp(IWorldAccessor world, BlockSelection selection, IPlayer forPlayer, ref EnumHandling handling) Parameters world IWorldAccessor selection BlockSelection forPlayer IPlayer handling EnumHandling Returns WorldInteraction[] GetPlacedBlockName(StringBuilder, IWorldAccessor, BlockPos) public virtual void GetPlacedBlockName(StringBuilder sb, IWorldAccessor world, BlockPos pos) Parameters sb StringBuilder world IWorldAccessor pos BlockPos GetRetention(BlockPos, BlockFacing, EnumRetentionType, ref EnumHandling) public virtual int GetRetention(BlockPos pos, BlockFacing facing, EnumRetentionType type, ref EnumHandling handled) Parameters pos BlockPos facing BlockFacing type EnumRetentionType handled EnumHandling Returns int GetRotatedBlockCode(int, ref EnumHandling) For any block that can be rotated, this method should be implemented to return the correct rotated block code. It is used by the world edit tool for allowing block data rotations public virtual AssetLocation GetRotatedBlockCode(int angle, ref EnumHandling handling) Parameters angle int handling EnumHandling Returns AssetLocation GetSnowCoveredBlockCode(float) public virtual AssetLocation GetSnowCoveredBlockCode(float snowLevel) Parameters snowLevel float Returns AssetLocation GetVerticallyFlippedBlockCode(ref EnumHandling) For any block that can be flipped upside down, this method should be implemented to return the correctly flipped block code. It is used by the world edit tool for allowing block data rotations public virtual AssetLocation GetVerticallyFlippedBlockCode(ref EnumHandling handling) Parameters handling EnumHandling Returns AssetLocation IsReplacableBy(Block, ref EnumHandling) Used to determine if a block should be treated like air when placing blocks. (e.g. used for tallgrass) public virtual bool IsReplacableBy(Block block, ref EnumHandling handling) Parameters block Block handling EnumHandling Returns bool OnAsyncClientParticleTick(IAsyncParticleManager, BlockPos, float, float) public virtual void OnAsyncClientParticleTick(IAsyncParticleManager manager, BlockPos pos, float windAffectednessAtPos, float secondsTicking) Parameters manager IAsyncParticleManager pos BlockPos windAffectednessAtPos float secondsTicking float OnBlockBroken(IWorldAccessor, BlockPos, IPlayer, ref EnumHandling) Called when a survival player has broken the block. The default behavior removes the block and spawns the block drops. public virtual void OnBlockBroken(IWorldAccessor world, BlockPos pos, IPlayer byPlayer, ref EnumHandling handling) Parameters world IWorldAccessor pos BlockPos byPlayer IPlayer handling EnumHandling OnBlockExploded(IWorldAccessor, BlockPos, BlockPos, EnumBlastType, ref EnumHandling) public virtual void OnBlockExploded(IWorldAccessor world, BlockPos pos, BlockPos explosionCenter, EnumBlastType blastType, ref EnumHandling handling) Parameters world IWorldAccessor pos BlockPos explosionCenter BlockPos blastType EnumBlastType handling EnumHandling OnBlockInteractCancel(float, IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) public virtual bool OnBlockInteractCancel(float secondsUsed, IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ref EnumHandling handling) Parameters secondsUsed float world IWorldAccessor byPlayer IPlayer blockSel BlockSelection handling EnumHandling Returns bool OnBlockInteractStart(IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) When a player does a right click while targeting this placed block. Should return true if the event is handled, so that other events can occur, e.g. eating a held item if the block is not interactable with. public virtual bool OnBlockInteractStart(IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ref EnumHandling handling) Parameters world IWorldAccessor byPlayer IPlayer blockSel BlockSelection handling EnumHandling Returns bool OnBlockInteractStep(float, IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) public virtual bool OnBlockInteractStep(float secondsUsed, IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ref EnumHandling handling) Parameters secondsUsed float world IWorldAccessor byPlayer IPlayer blockSel BlockSelection handling EnumHandling Returns bool OnBlockInteractStop(float, IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) public virtual void OnBlockInteractStop(float secondsUsed, IWorldAccessor world, IPlayer byPlayer, BlockSelection blockSel, ref EnumHandling handling) Parameters secondsUsed float world IWorldAccessor byPlayer IPlayer blockSel BlockSelection handling EnumHandling OnBlockPlaced(IWorldAccessor, BlockPos, ref EnumHandling) Step 4: Block was placed. Always called when a block has been placed through whatever method, except during worldgen or via ExchangeBlock() Until 1.20: The BlockEntity (if the block has one) does not exist yet at this point and will not be generated if handling is not PassThrough 1.21+: The BlockEntity (if the block has one) exists at this point. Setting handling to PreventDefault or PreventSubsequent has no effect on BlockEntity creation, but may affect/prevent later behaviors public virtual void OnBlockPlaced(IWorldAccessor world, BlockPos blockPos, ref EnumHandling handling) Parameters world IWorldAccessor blockPos BlockPos handling EnumHandling OnBlockRemoved(IWorldAccessor, BlockPos, ref EnumHandling) Always called when a block has been removed through whatever method, except during worldgen or via ExchangeBlock() For Worldgen you might be able to use TryPlaceBlockForWorldGen() to attach custom behaviors during placement/removal The default behavior is to delete the block entity, if this block has any public virtual void OnBlockRemoved(IWorldAccessor world, BlockPos pos, ref EnumHandling handling) Parameters world IWorldAccessor pos BlockPos handling EnumHandling OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe, ref EnumHandling) public override void OnCreatedByCrafting(ItemSlot[] allInputslots, ItemSlot outputSlot, GridRecipe byRecipe, ref EnumHandling handled) Parameters allInputslots ItemSlot[] outputSlot ItemSlot byRecipe GridRecipe handled EnumHandling OnNeighbourBlockChange(IWorldAccessor, BlockPos, BlockPos, ref EnumHandling) Called when any of it's 6 neighbour blocks has been changed public virtual void OnNeighbourBlockChange(IWorldAccessor world, BlockPos pos, BlockPos neibpos, ref EnumHandling handling) Parameters world IWorldAccessor pos BlockPos neibpos BlockPos handling EnumHandling OnPickBlock(IWorldAccessor, BlockPos, ref EnumHandling) When the player has presed the middle mouse click on the block. The default behavior returns an itemstack with the block itself public virtual ItemStack OnPickBlock(IWorldAccessor world, BlockPos pos, ref EnumHandling handling) Parameters world IWorldAccessor pos BlockPos handling EnumHandling Returns ItemStack ShouldReceiveClientParticleTicks(IWorldAccessor, IPlayer, BlockPos, ref EnumHandling) Everytime the player moves by 8 blocks (or rather leaves the current 8-grid), a scan of all blocks 32x32x32 blocks around the player is initiated and this method is called. If the method returns true, the block is registered to a client side game ticking for spawning particles and such. This method will be called everytime the player left his current 8-grid area. The default behavior is to return true if block.ParticleProperties are set public virtual bool ShouldReceiveClientParticleTicks(IWorldAccessor world, IPlayer byPlayer, BlockPos pos, ref EnumHandling handling) Parameters world IWorldAccessor byPlayer IPlayer pos BlockPos handling EnumHandling Returns bool TryPlaceBlock(IWorldAccessor, IPlayer, ItemStack, BlockSelection, ref EnumHandling, ref string) Step 1: Called when the player attempts to place this block. The default behavior calls Block.DoPlaceBlock(). If returned true and default behavior has not been prevented, the game will next call CanPlaceBlock(). If that method also returns true and default behavior has not been overriden, DoPlaceBlock() will get called. public virtual bool TryPlaceBlock(IWorldAccessor world, IPlayer byPlayer, ItemStack itemstack, BlockSelection blockSel, ref EnumHandling handling, ref string failureCode) Parameters world IWorldAccessor byPlayer IPlayer itemstack ItemStack blockSel BlockSelection handling EnumHandling failureCode string Returns bool"
  },
  "api/Vintagestory.API.Common.BlockBehaviorDelegate.html": {
    "href": "api/Vintagestory.API.Common.BlockBehaviorDelegate.html",
    "title": "Delegate BlockBehaviorDelegate | VintageStory API",
    "keywords": "Delegate BlockBehaviorDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void BlockBehaviorDelegate(BlockBehavior behavior, ref EnumHandling handling) Parameters behavior BlockBehavior handling EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.BlockBreakDelegate.html": {
    "href": "api/Vintagestory.API.Common.BlockBreakDelegate.html",
    "title": "Delegate BlockBreakDelegate | VintageStory API",
    "keywords": "Delegate BlockBreakDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void BlockBreakDelegate(IServerPlayer byPlayer, BlockSelection blockSel, ref float dropQuantityMultiplier, ref EnumHandling handling) Parameters byPlayer IServerPlayer blockSel BlockSelection dropQuantityMultiplier float handling EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.BlockBreakingParticleProps.html": {
    "href": "api/Vintagestory.API.Common.BlockBreakingParticleProps.html",
    "title": "Class BlockBreakingParticleProps | VintageStory API",
    "keywords": "Class BlockBreakingParticleProps Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockBreakingParticleProps : CollectibleParticleProperties, IParticlePropertiesProvider Inheritance object CollectibleParticleProperties BlockBreakingParticleProps Implements IParticlePropertiesProvider Derived BlockBrokenParticleProps Inherited Members CollectibleParticleProperties.rand CollectibleParticleProperties.Async CollectibleParticleProperties.Bounciness CollectibleParticleProperties.DieOnRainHeightmap CollectibleParticleProperties.RandomVelocityChange CollectibleParticleProperties.DieInLiquid CollectibleParticleProperties.DieInAir CollectibleParticleProperties.LightEmission CollectibleParticleProperties.api CollectibleParticleProperties.SelfPropelled CollectibleParticleProperties.TerrainCollision CollectibleParticleProperties.GravityEffect CollectibleParticleProperties.UseLighting() CollectibleParticleProperties.RandomBlockPos(IBlockAccessor, BlockPos, Block, BlockFacing) CollectibleParticleProperties.OpacityEvolve CollectibleParticleProperties.RedEvolve CollectibleParticleProperties.GreenEvolve CollectibleParticleProperties.BlueEvolve CollectibleParticleProperties.ColorByBlock() CollectibleParticleProperties.BeginParticle() CollectibleParticleProperties.VelocityEvolve CollectibleParticleProperties.SecondaryParticles CollectibleParticleProperties.DeathParticles CollectibleParticleProperties.SecondarySpawnInterval CollectibleParticleProperties.PrepareForSecondarySpawn(ParticleBase) CollectibleParticleProperties.Init(ICoreAPI) CollectibleParticleProperties.ParentVelocity CollectibleParticleProperties.ParentVelocityWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields boyant public bool boyant Field Value bool Properties LifeLength How long the particle should live (default = 1) public override float LifeLength { get; } Property Value float ParticleModel Cube or Quad? public override EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public override Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public override float Quantity { get; } Property Value float Size Size of the particle public override float Size { get; } Property Value float SizeEvolve Size change over time public override EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public override bool SwimOnLiquid { get; } Property Value bool VertexFlags See also VertexFlags public override int VertexFlags { get; } Property Value int Methods FromBytes(BinaryReader, IWorldAccessor) For reading from the network public override void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public override int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f ToBytes(BinaryWriter) For sending over the network public override void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.BlockBrokenDelegate.html": {
    "href": "api/Vintagestory.API.Common.BlockBrokenDelegate.html",
    "title": "Delegate BlockBrokenDelegate | VintageStory API",
    "keywords": "Delegate BlockBrokenDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void BlockBrokenDelegate(IServerPlayer byPlayer, int oldblockId, BlockSelection blockSel) Parameters byPlayer IServerPlayer oldblockId int blockSel BlockSelection Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.BlockBrokenParticleProps.html": {
    "href": "api/Vintagestory.API.Common.BlockBrokenParticleProps.html",
    "title": "Class BlockBrokenParticleProps | VintageStory API",
    "keywords": "Class BlockBrokenParticleProps Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockBrokenParticleProps : BlockBreakingParticleProps, IParticlePropertiesProvider Inheritance object CollectibleParticleProperties BlockBreakingParticleProps BlockBrokenParticleProps Implements IParticlePropertiesProvider Inherited Members BlockBreakingParticleProps.boyant BlockBreakingParticleProps.GetRgbaColor(ICoreClientAPI) BlockBreakingParticleProps.ParticleModel BlockBreakingParticleProps.ToBytes(BinaryWriter) BlockBreakingParticleProps.FromBytes(BinaryReader, IWorldAccessor) CollectibleParticleProperties.rand CollectibleParticleProperties.Async CollectibleParticleProperties.Bounciness CollectibleParticleProperties.DieOnRainHeightmap CollectibleParticleProperties.RandomVelocityChange CollectibleParticleProperties.DieInLiquid CollectibleParticleProperties.DieInAir CollectibleParticleProperties.LightEmission CollectibleParticleProperties.api CollectibleParticleProperties.SelfPropelled CollectibleParticleProperties.TerrainCollision CollectibleParticleProperties.GravityEffect CollectibleParticleProperties.UseLighting() CollectibleParticleProperties.RandomBlockPos(IBlockAccessor, BlockPos, Block, BlockFacing) CollectibleParticleProperties.OpacityEvolve CollectibleParticleProperties.RedEvolve CollectibleParticleProperties.GreenEvolve CollectibleParticleProperties.BlueEvolve CollectibleParticleProperties.ColorByBlock() CollectibleParticleProperties.BeginParticle() CollectibleParticleProperties.VelocityEvolve CollectibleParticleProperties.SecondaryParticles CollectibleParticleProperties.DeathParticles CollectibleParticleProperties.SecondarySpawnInterval CollectibleParticleProperties.PrepareForSecondarySpawn(ParticleBase) CollectibleParticleProperties.Init(ICoreAPI) CollectibleParticleProperties.ParentVelocity CollectibleParticleProperties.ParentVelocityWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties LifeLength How long the particle should live (default = 1) public override float LifeLength { get; } Property Value float Pos Position in the world where the particle should spawn public override Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public override float Quantity { get; } Property Value float Size Size of the particle public override float Size { get; } Property Value float SizeEvolve Size change over time public override EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public override bool SwimOnLiquid { get; } Property Value bool VertexFlags See also VertexFlags public override int VertexFlags { get; } Property Value int Methods GetVelocity(Vec3d) In what direction should the particle fly/fall public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f"
  },
  "api/Vintagestory.API.Common.BlockCropProperties.html": {
    "href": "api/Vintagestory.API.Common.BlockCropProperties.html",
    "title": "Class BlockCropProperties | VintageStory API",
    "keywords": "Class BlockCropProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [ProtoContract] public class BlockCropProperties Inheritance object BlockCropProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Behaviors Allows customization of crop growth behavior. BlockEntityFarmland calls methods on all behaviors to allow greater control. public CropBehavior[] Behaviors Field Value CropBehavior[] ColdDamageBelow [ProtoMember(7)] public float ColdDamageBelow Field Value float ColdDamageRipeMul [ProtoMember(9)] public float ColdDamageRipeMul Field Value float DamageGrowthStuntMul [ProtoMember(8)] public float DamageGrowthStuntMul Field Value float GrowthStages Amount of growth stages this crop has [ProtoMember(3)] public int GrowthStages Field Value int HarvestGrowthStageLoss When multiple harvets is true, this is the amount of growth stages the crop should go back when harvested [ProtoMember(6)] public int HarvestGrowthStageLoss Field Value int HeatDamageAbove [ProtoMember(10)] public float HeatDamageAbove Field Value float MultipleHarvests If true, the player may harvests from the crop multiple times [ProtoMember(5)] public bool MultipleHarvests Field Value bool NutrientConsumption Total amount of nutrient consumed to reach full maturity. (100 is the maximum available for farmland) [ProtoMember(2)] public float NutrientConsumption Field Value float RequiredNutrient Which nutrient category this crop requires to grow [ProtoMember(1)] public EnumSoilNutrient RequiredNutrient Field Value EnumSoilNutrient TotalGrowthDays Total time in ingame days required for the crop to reach full maturity assuming full nutrient levels [ProtoMember(4)] public float TotalGrowthDays Field Value float TotalGrowthMonths Total time in ingame months required for the crop to reach full maturity assuming full nutrient levels [ProtoMember(11)] public float TotalGrowthMonths Field Value float"
  },
  "api/Vintagestory.API.Common.BlockCubeParticles.html": {
    "href": "api/Vintagestory.API.Common.BlockCubeParticles.html",
    "title": "Class BlockCubeParticles | VintageStory API",
    "keywords": "Class BlockCubeParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockCubeParticles : CollectibleParticleProperties, IParticlePropertiesProvider Inheritance object CollectibleParticleProperties BlockCubeParticles Implements IParticlePropertiesProvider Inherited Members CollectibleParticleProperties.rand CollectibleParticleProperties.Async CollectibleParticleProperties.Bounciness CollectibleParticleProperties.DieOnRainHeightmap CollectibleParticleProperties.RandomVelocityChange CollectibleParticleProperties.SwimOnLiquid CollectibleParticleProperties.DieInAir CollectibleParticleProperties.LightEmission CollectibleParticleProperties.api CollectibleParticleProperties.SelfPropelled CollectibleParticleProperties.TerrainCollision CollectibleParticleProperties.GravityEffect CollectibleParticleProperties.UseLighting() CollectibleParticleProperties.RandomBlockPos(IBlockAccessor, BlockPos, Block, BlockFacing) CollectibleParticleProperties.OpacityEvolve CollectibleParticleProperties.RedEvolve CollectibleParticleProperties.GreenEvolve CollectibleParticleProperties.BlueEvolve CollectibleParticleProperties.SizeEvolve CollectibleParticleProperties.ColorByBlock() CollectibleParticleProperties.BeginParticle() CollectibleParticleProperties.VelocityEvolve CollectibleParticleProperties.DeathParticles CollectibleParticleProperties.SecondarySpawnInterval CollectibleParticleProperties.PrepareForSecondarySpawn(ParticleBase) CollectibleParticleProperties.ParentVelocity CollectibleParticleProperties.ParentVelocityWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockCubeParticles() public BlockCubeParticles() BlockCubeParticles(IWorldAccessor, BlockPos, Vec3d, float, int, float, Vec3f) public BlockCubeParticles(IWorldAccessor world, BlockPos blockpos, Vec3d particlePos, float radius, int quantity, float scale, Vec3f velocity = null) Parameters world IWorldAccessor blockpos BlockPos particlePos Vec3d radius float quantity int scale float velocity Vec3f Fields particlePos The position of the particle public Vec3d particlePos Field Value Vec3d quantity The amount of particles. public int quantity Field Value int radius The radius of the particle emission. public float radius Field Value float scale The scale of the particles. public float scale Field Value float velocity public Vec3f velocity Field Value Vec3f Properties DieInLiquid Whether the particle should despawn when in contact with liquids public override bool DieInLiquid { get; } Property Value bool LifeLength How long the particle should live (default = 1) public override float LifeLength { get; } Property Value float ParticleModel Cube or Quad? public override EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public override Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public override float Quantity { get; } Property Value float SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. public override IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] Size Size of the particle public override float Size { get; } Property Value float VertexFlags See also VertexFlags public override int VertexFlags { get; } Property Value int Methods FromBytes(BinaryReader, IWorldAccessor) For reading from the network public override void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public override int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation public override void Init(ICoreAPI api) Parameters api ICoreAPI ToBytes(BinaryWriter) For sending over the network public override void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.BlockDamage.html": {
    "href": "api/Vintagestory.API.Common.BlockDamage.html",
    "title": "Class BlockDamage | VintageStory API",
    "keywords": "Class BlockDamage Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockDamage Inheritance object BlockDamage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BeginBreakEllapsedMs public long BeginBreakEllapsedMs Field Value long Block public Block Block Field Value Block BreakingCounter public int BreakingCounter Field Value int ByPlayer public IPlayer ByPlayer Field Value IPlayer DecalId public int DecalId Field Value int Facing public BlockFacing Facing Field Value BlockFacing LastBreakEllapsedMs public long LastBreakEllapsedMs Field Value long Position public BlockPos Position Field Value BlockPos RemainingResistance public float RemainingResistance Field Value float Tool public EnumTool? Tool Field Value EnumTool?"
  },
  "api/Vintagestory.API.Common.BlockDropItemStack.html": {
    "href": "api/Vintagestory.API.Common.BlockDropItemStack.html",
    "title": "Class BlockDropItemStack | VintageStory API",
    "keywords": "Class BlockDropItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents an itemstack that is dropped when breaking a block, with a potentially random quantity. Open in GitHub [DocumentAsJson] public class BlockDropItemStack Inheritance object BlockDropItemStack Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"drops\": [ { \"type\": \"item\", \"code\": \"bone\", \"quantity\": { \"avg\": 4, \"var\": 2 } } ] Constructors BlockDropItemStack() public BlockDropItemStack() BlockDropItemStack(ItemStack, float) public BlockDropItemStack(ItemStack stack, float chance = 1) Parameters stack ItemStack chance float Fields Attributes Tree Attributes that should be attached to the resulting itemstack [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject Code Code of the block or item [DocumentAsJson] public AssetLocation Code Field Value AssetLocation DropModbyStat If set, the drop quantity will be modified by the collecting entity stat code - entity.Stats.GetBlended(code). [DocumentAsJson] public string DropModbyStat Field Value string LastDrop If true, and this drop occurs, no further drops will happen. [DocumentAsJson] public bool LastDrop Field Value bool Quantity Quantity to be dropped [DocumentAsJson] public NatFloat Quantity Field Value NatFloat ResolvedItemstack The resulting ItemStack for this block being broken by a tool. public ItemStack ResolvedItemstack Field Value ItemStack Tool If set, then the given tool is required to make this block drop anything. [DocumentAsJson] public EnumTool? Tool Field Value EnumTool? Type Block or Item? [DocumentAsJson] public EnumItemClass Type Field Value EnumItemClass Methods Clone() Creates a deep copy of this object public BlockDropItemStack Clone() Returns BlockDropItemStack FromBytes(BinaryReader, IClassRegistryAPI) Reads the contents of the block bytes and converts it into a block. public virtual void FromBytes(BinaryReader reader, IClassRegistryAPI instancer) Parameters reader BinaryReader The reader of the block instancer IClassRegistryAPI The block registry GetNextItemStack(float) Returns an itemstack with random quantity as configured via the Quantity field public ItemStack GetNextItemStack(float dropQuantityMultiplier = 1) Parameters dropQuantityMultiplier float Returns ItemStack Resolve(IWorldAccessor, string, AssetLocation) Sets itemstack.block or itemstack.item public bool Resolve(IWorldAccessor resolver, string sourceForErrorLogging, AssetLocation assetLoc) Parameters resolver IWorldAccessor sourceForErrorLogging string assetLoc AssetLocation Returns bool ToBytes(BinaryWriter) The save data writer. public virtual void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter The writer to write blocks to. ToRandomItemstackForPlayer(IPlayer, IWorldAccessor, float) public ItemStack ToRandomItemstackForPlayer(IPlayer byPlayer, IWorldAccessor world, float dropQuantityMultiplier) Parameters byPlayer IPlayer world IWorldAccessor dropQuantityMultiplier float Returns ItemStack"
  },
  "api/Vintagestory.API.Common.BlockEntity.html": {
    "href": "api/Vintagestory.API.Common.BlockEntity.html",
    "title": "Class BlockEntity | VintageStory API",
    "keywords": "Class BlockEntity Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents Open in GitHub public abstract class BlockEntity Inheritance object BlockEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockEntity() Creats an empty instance. Use initialize to initialize it with the api. public BlockEntity() Fields Api The core API added to the block. Accessable after initialization. public ICoreAPI Api Field Value ICoreAPI Behaviors List of block entity behaviors associated with this block entity public List<BlockEntityBehavior> Behaviors Field Value List<BlockEntityBehavior> CallbackHandlers protected List<long> CallbackHandlers Field Value List<long> Pos Position of the block for this block entity public BlockPos Pos Field Value BlockPos TickHandlers protected List<long> TickHandlers Field Value List<long> Properties Block The block type at the position of the block entity. This poperty is updated by the engine if ExchangeBlock is called public Block Block { get; set; } Property Value Block Methods CreateBehaviors(Block, IWorldAccessor) public virtual void CreateBehaviors(Block block, IWorldAccessor worldForResolve) Parameters block Block worldForResolve IWorldAccessor FromTreeAttributes(ITreeAttribute, IWorldAccessor) Called when loading the world or when receiving block entity from the server. When overriding, make sure to still call the base method. FromTreeAttributes is always called before Initialize() is called, so the this.api field is not yet set! public virtual void FromTreeAttributes(ITreeAttribute tree, IWorldAccessor worldAccessForResolve) Parameters tree ITreeAttribute worldAccessForResolve IWorldAccessor Use this api if you need to resolve blocks/items. Not suggested for other purposes, as the residing chunk may not be loaded at this point GetBehavior<T>() public T GetBehavior<T>() where T : class Returns T Type Parameters T GetBlockInfo(IPlayer, StringBuilder) Called by the block info HUD for displaying additional information public virtual void GetBlockInfo(IPlayer forPlayer, StringBuilder dsc) Parameters forPlayer IPlayer dsc StringBuilder HistoryStateRestore() Called by the undo/redo system, after calling FromTreeAttributes public virtual void HistoryStateRestore() Initialize(ICoreAPI) This method is called right after the block entity was spawned or right after it was loaded from a newly loaded chunk. You do have access to the world and its blocks at this point. However if this block entity already existed then FromTreeAttributes is called first! You should still call the base method to sets the this.api field public virtual void Initialize(ICoreAPI api) Parameters api ICoreAPI MarkDirty(bool, IPlayer) When called on Server: Will resync the block entity with all its TreeAttribute to the client, but will not resend or redraw the block unless specified. When called on Client: Triggers a block changed event on the client, but will not redraw the block unless specified. public virtual void MarkDirty(bool redrawOnClient = false, IPlayer skipPlayer = null) Parameters redrawOnClient bool When true, the block is also marked dirty and thus redrawn. When called serverside a dirty block packet is sent to the client for it to be redrawn skipPlayer IPlayer OnBlockBroken(IPlayer) Called when the block was broken in survival mode or through explosions and similar. Generally in situations where you probably want to drop the block entity contents, if it has any public virtual void OnBlockBroken(IPlayer byPlayer = null) Parameters byPlayer IPlayer OnBlockPlaced(ItemStack) Called when the block entity just got placed, not called when it was previously placed and the chunk is loaded. Always called after Initialize() public virtual void OnBlockPlaced(ItemStack byItemStack = null) Parameters byItemStack ItemStack OnBlockRemoved() Called when the block at this position was removed in some way. Removes the game tick listeners, so still call the base method public virtual void OnBlockRemoved() OnBlockUnloaded() Called when the chunk the block entity resides in was unloaded. Removes the game tick listeners, so still call the base method public virtual void OnBlockUnloaded() OnExchanged(Block) Called when blockAccessor.ExchangeBlock() is used to exchange this block. Make sure to call the base method when overriding. public virtual void OnExchanged(Block block) Parameters block Block OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int) Called by the blockschematic loader so that you may fix any blockid/itemid mappings against the mapping of the savegame, if you store any collectibles in this blockentity. Note: Some vanilla blocks resolve randomized contents in this method. Hint: Use itemstack.FixMapping() to do the job for you. [Obsolete(\"Use the variant with resolveImports parameter\")] public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForNewMappings, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, int schematicSeed) Parameters worldForNewMappings IWorldAccessor oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> schematicSeed int If you need some sort of randomness consistency accross an imported schematic, you can use this value OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Called by the blockschematic loader so that you may fix any blockid/itemid mappings against the mapping of the savegame, if you store any collectibles in this blockentity. Note: Some vanilla blocks resolve randomized contents in this method. Hint: Use itemstack.FixMapping() to do the job for you. public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForNewMappings, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, int schematicSeed, bool resolveImports) Parameters worldForNewMappings IWorldAccessor oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> schematicSeed int If you need some sort of randomness consistency accross an imported schematic, you can use this value resolveImports bool Turn it off to spawn structures as they are. For example, in this mode, instead of traders, their meta spawners will spawn OnPlacementBySchematic(ICoreServerAPI, IBlockAccessor, BlockPos, Dictionary<int, Dictionary<int, int>>, int, Block, bool) Called when this block entity was placed by a schematic, either through world edit or by worldgen public virtual void OnPlacementBySchematic(ICoreServerAPI api, IBlockAccessor blockAccessor, BlockPos pos, Dictionary<int, Dictionary<int, int>> replaceBlocks, int centerrockblockid, Block layerBlock, bool resolveImports) Parameters api ICoreServerAPI blockAccessor IBlockAccessor pos BlockPos replaceBlocks Dictionary<int, Dictionary<int, int>> centerrockblockid int layerBlock Block If block.CustomBlockLayerHandler is true and the block is below the surface, this value is set resolveImports bool Turn it off to spawn structures as they are. For example, in this mode, instead of traders, their meta spawners will spawn OnReceivedClientPacket(IPlayer, int, byte[]) Called whenever a blockentity packet at the blocks position has been received from the client public virtual void OnReceivedClientPacket(IPlayer fromPlayer, int packetid, byte[] data) Parameters fromPlayer IPlayer packetid int data byte[] OnReceivedServerPacket(int, byte[]) Called whenever a blockentity packet at the blocks position has been received from the server public virtual void OnReceivedServerPacket(int packetid, byte[] data) Parameters packetid int data byte[] OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Called by the worldedit schematic exporter so that it can also export the mappings of items/blocks stored inside blockentities public virtual void OnStoreCollectibleMappings(Dictionary<int, AssetLocation> blockIdMapping, Dictionary<int, AssetLocation> itemIdMapping) Parameters blockIdMapping Dictionary<int, AssetLocation> itemIdMapping Dictionary<int, AssetLocation> OnTesselation(ITerrainMeshPool, ITesselatorAPI) Let's you add your own meshes to a chunk. Don't reuse the meshdata instance anywhere in your code. Return true to skip the default mesh. WARNING! The Tesselator runs in a seperate thread, so you have to make sure the fields and methods you access inside this method are thread safe. public virtual bool OnTesselation(ITerrainMeshPool mesher, ITesselatorAPI tessThreadTesselator) Parameters mesher ITerrainMeshPool The chunk mesh, add your stuff here tessThreadTesselator ITesselatorAPI If you need to tesselate something, you should use this tesselator, since using the main thread tesselator can cause race conditions and crash the game Returns bool True to skip default mesh, false to also add the default mesh RegisterDelayedCallback(Action<float>, int) Registers a delayed callback that does the disposing for you when the Block is removed public virtual long RegisterDelayedCallback(Action<float> OnDelayedCallbackTick, int millisecondInterval) Parameters OnDelayedCallbackTick Action<float> millisecondInterval int Returns long RegisterGameTickListener(Action<float>, int, int) Registers a game tick listener that does the disposing for you when the Block is removed public virtual long RegisterGameTickListener(Action<float> onGameTick, int millisecondInterval, int initialDelayOffsetMs = 0) Parameters onGameTick Action<float> millisecondInterval int initialDelayOffsetMs int Returns long TickingExceptionHandler(Exception) public virtual void TickingExceptionHandler(Exception e) Parameters e Exception ToTreeAttributes(ITreeAttribute) Called when saving the world or when sending the block entity data to the client. When overriding, make sure to still call the base method. public virtual void ToTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute UnregisterAllTickListeners() public virtual void UnregisterAllTickListeners() UnregisterDelayedCallback(long) Unregisters a callback. This is usually done automatically. public virtual void UnregisterDelayedCallback(long listenerId) Parameters listenerId long The ID of the callback listiner. UnregisterGameTickListener(long) Removes a registered game tick listener from the game. public virtual void UnregisterGameTickListener(long listenerId) Parameters listenerId long the ID of the listener to unregister."
  },
  "api/Vintagestory.API.Common.BlockEntityBehavior.html": {
    "href": "api/Vintagestory.API.Common.BlockEntityBehavior.html",
    "title": "Class BlockEntityBehavior | VintageStory API",
    "keywords": "Class BlockEntityBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents Open in GitHub public abstract class BlockEntityBehavior Inheritance object BlockEntityBehavior Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockEntityBehavior(BlockEntity) public BlockEntityBehavior(BlockEntity blockentity) Parameters blockentity BlockEntity Fields Api public ICoreAPI Api Field Value ICoreAPI Blockentity The block for this behavior instance. public BlockEntity Blockentity Field Value BlockEntity properties The properties of this block behavior. public JsonObject properties Field Value JsonObject Properties Block Alias of BlockEntity.Block public Block Block { get; } Property Value Block Pos Alias of Blockentity.Pos public BlockPos Pos { get; } Property Value BlockPos Methods FromTreeAttributes(ITreeAttribute, IWorldAccessor) public virtual void FromTreeAttributes(ITreeAttribute tree, IWorldAccessor worldAccessForResolve) Parameters tree ITreeAttribute worldAccessForResolve IWorldAccessor GetBlockInfo(IPlayer, StringBuilder) public virtual void GetBlockInfo(IPlayer forPlayer, StringBuilder dsc) Parameters forPlayer IPlayer dsc StringBuilder Initialize(ICoreAPI, JsonObject) Called right after the block behavior was created public virtual void Initialize(ICoreAPI api, JsonObject properties) Parameters api ICoreAPI properties JsonObject OnBlockBroken(IPlayer) public virtual void OnBlockBroken(IPlayer byPlayer = null) Parameters byPlayer IPlayer OnBlockPlaced(ItemStack) public virtual void OnBlockPlaced(ItemStack byItemStack = null) Parameters byItemStack ItemStack OnBlockRemoved() public virtual void OnBlockRemoved() OnBlockUnloaded() public virtual void OnBlockUnloaded() OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int) [Obsolete(\"Use the variant with resolveImports parameter\")] public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForNewMappings, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, int schematicSeed) Parameters worldForNewMappings IWorldAccessor oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> schematicSeed int OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForNewMappings, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, int schematicSeed, bool resolveImports) Parameters worldForNewMappings IWorldAccessor oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> schematicSeed int resolveImports bool OnPlacementBySchematic(ICoreServerAPI, IBlockAccessor, BlockPos, Dictionary<int, Dictionary<int, int>>, int, Block, bool) public virtual void OnPlacementBySchematic(ICoreServerAPI api, IBlockAccessor blockAccessor, BlockPos pos, Dictionary<int, Dictionary<int, int>> replaceBlocks, int centerrockblockid, Block layerBlock, bool resolveImports) Parameters api ICoreServerAPI blockAccessor IBlockAccessor pos BlockPos replaceBlocks Dictionary<int, Dictionary<int, int>> centerrockblockid int layerBlock Block resolveImports bool OnReceivedClientPacket(IPlayer, int, byte[]) public virtual void OnReceivedClientPacket(IPlayer fromPlayer, int packetid, byte[] data) Parameters fromPlayer IPlayer packetid int data byte[] OnReceivedServerPacket(int, byte[]) public virtual void OnReceivedServerPacket(int packetid, byte[] data) Parameters packetid int data byte[] OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) public virtual void OnStoreCollectibleMappings(Dictionary<int, AssetLocation> blockIdMapping, Dictionary<int, AssetLocation> itemIdMapping) Parameters blockIdMapping Dictionary<int, AssetLocation> itemIdMapping Dictionary<int, AssetLocation> OnTesselation(ITerrainMeshPool, ITesselatorAPI) public virtual bool OnTesselation(ITerrainMeshPool mesher, ITesselatorAPI tessThreadTesselator) Parameters mesher ITerrainMeshPool tessThreadTesselator ITesselatorAPI Returns bool ToTreeAttributes(ITreeAttribute) public virtual void ToTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute"
  },
  "api/Vintagestory.API.Common.BlockEntityBehaviorType.html": {
    "href": "api/Vintagestory.API.Common.BlockEntityBehaviorType.html",
    "title": "Class BlockEntityBehaviorType | VintageStory API",
    "keywords": "Class BlockEntityBehaviorType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows adding behaviors for block entities. Remember, block entities are specific instances of blocks placed within the world. Open in GitHub [DocumentAsJson] public class BlockEntityBehaviorType Inheritance object BlockEntityBehaviorType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"entityClass\": \"Brake\", \"entityBehaviors\": [ { \"name\": \"MPBrake\" }, { \"name\": \"Animatable\" } ], Fields Name The ID for this block entity behavior. [JsonProperty] public string Name Field Value string properties A set of properties specific to the block entity behavior class. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject properties Field Value JsonObject"
  },
  "api/Vintagestory.API.Common.BlockGeneric.html": {
    "href": "api/Vintagestory.API.Common.BlockGeneric.html",
    "title": "Class BlockGeneric | VintageStory API",
    "keywords": "Class BlockGeneric Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockGeneric : Block Inheritance object RegistryObject CollectibleObject Block BlockGeneric Inherited Members Block.DefaultCubeShape Block.DefaultAllowAllSpawns Block.DefaultCollisionBox Block.DefaultCollisionSelectionBoxes Block.Id Block.Tags Block.ItemClass Block.ForFluidsLayer Block.RemapToLiquidsLayer Block.BlockId Block.DrawType Block.RenderPass Block.Ambientocclusion Block.WalkSpeedMultiplier Block.DragMultiplier Block.PartialSelection Block.Sounds Block.VertexFlags Block.Frostable Block.LightAbsorption Block.PlacedPriorityInteract Block.Replaceable Block.Fertility Block.RequiredMiningTier Block.Resistance Block.BlockMaterial Block.RandomizeAxes Block.RandomDrawOffset Block.RandomizeRotations Block.RandomSizeAdjust Block.alternatingVOffset Block.alternatingVOffsetFaces Block.ShapeInventory Block.Shape Block.Lod0Shape Block.Lod2Shape Block.Lod0Mesh Block.Lod2Mesh Block.DoNotRenderAtLod2 Block.Textures Block.FastTextureVariants Block.TexturesInventory Block.FirstTextureInventory Block.SideOpaque Block.SideSolid Block.SideAo Block.EmitSideAo Block.AllowSpawnCreatureGroups Block.AllCreaturesAllowed Block.FaceCullMode Block.ClimateColorMap Block.ClimateColorMapResolved Block.SeasonColorMap Block.SeasonColorMapResolved Block.ShapeUsesColormap Block.LoadColorMapAnyway Block.ExtraColorBits Block.CollisionBoxes Block.SelectionBoxes Block.ParticleCollisionBoxes Block.Climbable Block.RainPermeable Block.LiquidLevel Block.LiquidCode Block.HasAlternates Block.HasTiles Block.BlockBehaviors Block.BlockEntityBehaviors Block.Drops Block.SplitDropStacks Block.CropProps Block.EntityClass Block.CustomBlockLayerHandler Block.PushVector Block.CanStep Block.AllowStepWhenStuck Block.decorBehaviorFlags Block.DecorThickness Block.InteractionHelpYOffset Block.TextureSubIdForBlockColor Block.IceCheckOffset Block.ClimateColorMapForMap Block.SeasonColorMapForMap Block.miningTierNames Block.OnLoaded(ICoreAPI) Block.LoadTextureSubIdForBlockColor() Block.notSnowCovered Block.snowCovered1 Block.snowCovered2 Block.snowCovered3 Block.snowLevel Block.AllSidesOpaque Block.DisplacesLiquids(IBlockAccessor, BlockPos) Block.SideIsSolid(BlockPos, int) Block.SideIsSolid(IBlockAccessor, BlockPos, int) Block.ShouldMergeFace(int, Block, int) Block.GetBlockMaterial(IBlockAccessor, BlockPos, ItemStack) Block.GetResistance(IBlockAccessor, BlockPos) Block.GetSounds(IBlockAccessor, BlockPos, ItemStack) Block.GetSounds(IBlockAccessor, BlockSelection, ItemStack) Block.GetAttributes(IBlockAccessor, BlockPos) Block.DoEmitSideAo(IGeometryTester, BlockFacing) Block.DoEmitSideAoByFlag(IGeometryTester, Vec3iAndFacingFlags, int) Block.GetLightAbsorption(IBlockAccessor, BlockPos) Block.GetLightAbsorption(IWorldChunk, BlockPos) Block.GetLiquidCode(IBlockAccessor, BlockPos) Block.CanAttachBlockAt(IBlockAccessor, Block, BlockPos, BlockFacing, Cuboidi) Block.CanCreatureSpawnOn(IBlockAccessor, BlockPos, EntityProperties, BaseSpawnConditions) Block.TryPlaceBlockForWorldGenUnderwater(IBlockAccessor, BlockPos, BlockFacing, IRandom, int, int, BlockPatchAttributes) Block.TryPlaceBlock(IWorldAccessor, IPlayer, ItemStack, BlockSelection, ref string) Block.CanPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ref string) Block.DoPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ItemStack) Block.OnBeingLookedAt(IPlayer, BlockSelection, bool) Block.OnGettingBroken(IPlayer, BlockSelection, ItemSlot, float, float, int) Block.RandomSoundPitch(IWorldAccessor) Block.OnBlockBroken(IWorldAccessor, BlockPos, IPlayer, float) Block.SpawnBlockBrokenParticles(BlockPos, IPlayer) Block.OnBrokenAsDecor(IWorldAccessor, BlockPos, BlockFacing) Block.OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe) Block.GetDropsForHandbook(ItemStack, IPlayer) Block.GetHandbookDropsFromBreakDrops(ItemStack, IPlayer) Block.GetDrops(IWorldAccessor, BlockPos, IPlayer, float) Block.OnPickBlock(IWorldAccessor, BlockPos) Block.OnBlockRemoved(IWorldAccessor, BlockPos) Block.OnBlockPlaced(IWorldAccessor, BlockPos, ItemStack) Block.OnNeighbourBlockChange(IWorldAccessor, BlockPos, BlockPos) Block.OnBlockInteractStart(IWorldAccessor, IPlayer, BlockSelection) Block.Activate(IWorldAccessor, Caller, BlockSelection, ITreeAttribute) Block.OnBlockInteractStep(float, IWorldAccessor, IPlayer, BlockSelection) Block.OnBlockInteractStop(float, IWorldAccessor, IPlayer, BlockSelection) Block.OnBlockInteractCancel(float, IWorldAccessor, IPlayer, BlockSelection, EnumItemUseCancelReason) Block.OnEntityInside(IWorldAccessor, Entity, BlockPos) Block.OnEntityCollide(IWorldAccessor, Entity, BlockPos, BlockFacing, Vec3d, bool) Block.OnFallOnto(IWorldAccessor, BlockPos, Block, TreeAttribute) Block.CanAcceptFallOnto(IWorldAccessor, BlockPos, Block, TreeAttribute) Block.ShouldReceiveClientParticleTicks(IWorldAccessor, IPlayer, BlockPos, out bool) Block.ShouldPlayAmbientSound(IWorldAccessor, BlockPos) Block.GetAmbientSoundStrength(IWorldAccessor, BlockPos) Block.OnAsyncClientParticleTick(IAsyncParticleManager, BlockPos, float, float) Block.ShouldReceiveServerGameTicks(IWorldAccessor, BlockPos, Random, out object) Block.OnServerGameTick(IWorldAccessor, BlockPos, object) Block.waveFlagMinY Block.OnJsonTesselation(ref MeshData, ref int[], BlockPos, Block[], int) Block.DetermineTopMiddlePos() Block.IsReplacableBy(Block) Block.SuggestedHVOrientation(IPlayer, BlockSelection) Block.PerformSnowLevelUpdate(IBulkBlockAccessor, BlockPos, Block, float) Block.GetSnowCoveredVariant(BlockPos, float) Block.GetSnowLevel(BlockPos) Block.GetHeatRetention(BlockPos, BlockFacing) Block.GetRetention(BlockPos, BlockFacing, EnumRetentionType) Block.IsClimbable(BlockPos) Block.GetTraversalCost(BlockPos, EnumAICreatureType) Block.GetRotatedBlockCode(int) Block.GetVerticallyFlippedBlockCode() Block.GetHorizontallyFlippedBlockCode(EnumAxis) Block.GetBehavior(Type, bool) Block.GetPlacedBlockInteractionHelp(IWorldAccessor, BlockSelection, IPlayer) Block.GetPlacedBlockName(IWorldAccessor, BlockPos) Block.GetPlacedBlockInfo(IWorldAccessor, BlockPos, IPlayer) Block.AddMiningTierInfo(StringBuilder) Block.GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) Block.AddExtraHeldItemInfoPostMaterial(ItemSlot, StringBuilder, IWorldAccessor) Block.GetSelectionColor(ICoreClientAPI, BlockPos) Block.OnCollectTextures(ICoreAPI, ITextureLocationDictionary) Block.GetBlastResistance(IWorldAccessor, BlockPos, Vec3f, EnumBlastType) Block.ExplosionDropChance(IWorldAccessor, BlockPos, EnumBlastType) Block.OnBlockExploded(IWorldAccessor, BlockPos, BlockPos, EnumBlastType) Block.OnBlockExploded(IWorldAccessor, BlockPos, BlockPos, EnumBlastType, string) Block.GetRandomColor(ICoreClientAPI, BlockPos, BlockFacing, int) Block.GetRandomColor(ICoreClientAPI, ItemStack) Block.GetColor(ICoreClientAPI, BlockPos) Block.GetColorWithoutTint(ICoreClientAPI, BlockPos) Block.AllowSnowCoverage(IWorldAccessor, BlockPos) Block.GetBlockEntity<T>(BlockSelection) Block.GetBlockEntity<T>(BlockPos) Block.GetBEBehavior<T>(BlockPos) Block.GetInterface<T>(IWorldAccessor, BlockPos) Block.Clone() Block.HasBlockBehavior<T>(bool) Block.HasBehavior<T>(bool) Block.HasBehavior(string, IClassRegistryAPI) Block.HasBehavior(Type, bool) Block.GetLiquidBarrierHeightOnSide(BlockFacing, BlockPos) Block.ToString() Block.FreeRAMServer() CollectibleObject.DefaultSize CollectibleObject.MatterState CollectibleObject.IsMissing CollectibleObject.GetHashCode() CollectibleObject.MaxStackSize CollectibleObject.Durability CollectibleObject.Dimensions CollectibleObject.LiquidSelectable CollectibleObject.AttackPower CollectibleObject.HeldPriorityInteract CollectibleObject.AttackRange CollectibleObject.DamagedBy CollectibleObject.MiningSpeed CollectibleObject.ToolTier CollectibleObject.MiningTier CollectibleObject.HeldSounds CollectibleObject.CreativeInventoryTabs CollectibleObject.CreativeInventoryStacks CollectibleObject.RenderAlphaTest CollectibleObject.GuiTransform CollectibleObject.FpHandTransform CollectibleObject.TpHandTransform CollectibleObject.TpOffHandTransform CollectibleObject.GroundTransform CollectibleObject.Attributes CollectibleObject.CombustibleProps CollectibleObject.NutritionProps CollectibleObject.TransitionableProps CollectibleObject.GrindingProps CollectibleObject.CrushingProps CollectibleObject.ParticleProperties CollectibleObject.TopMiddlePos CollectibleObject.Tool CollectibleObject.StorageFlags CollectibleObject.MaterialDensity CollectibleObject.HeldTpHitAnimation CollectibleObject.HeldRightTpIdleAnimation CollectibleObject.HeldLeftTpIdleAnimation CollectibleObject.HeldLeftReadyAnimation CollectibleObject.HeldRightReadyAnimation CollectibleObject.HeldTpUseAnimation CollectibleObject.api CollectibleObject.CollectibleBehaviors CollectibleObject.LightHsv CollectibleObject.OnLoadedNative(ICoreAPI) CollectibleObject.OnUnloaded(ICoreAPI) CollectibleObject.GetLightHsv(IBlockAccessor, BlockPos, ItemStack) CollectibleObject.GetNutritionProperties(IWorldAccessor, ItemStack, Entity) CollectibleObject.GetTransitionableProperties(IWorldAccessor, ItemStack, Entity) CollectibleObject.RequiresTransitionableTicking(IWorldAccessor, ItemStack) CollectibleObject.GetStorageFlags(ItemStack) CollectibleObject.GetItemDamageColor(ItemStack) CollectibleObject.ShouldDisplayItemDamage(ItemStack) CollectibleObject.OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) CollectibleObject.GetDurability(IItemStack) CollectibleObject.GetMaxDurability(ItemStack) CollectibleObject.GetRemainingDurability(ItemStack) CollectibleObject.GetAttackPower(IItemStack) CollectibleObject.GetAttackRange(IItemStack) CollectibleObject.OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int) CollectibleObject.OnModifiedInInventorySlot(IWorldAccessor, ItemSlot, ItemStack) CollectibleObject.OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float) CollectibleObject.GetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer) CollectibleObject.GeldHeldFpHitAnimation(ItemSlot, Entity) CollectibleObject.GetHeldTpHitAnimation(ItemSlot, Entity) CollectibleObject.GetHeldReadyAnimation(ItemSlot, Entity, EnumHand) CollectibleObject.GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand) CollectibleObject.GetHeldTpUseAnimation(ItemSlot, Entity) CollectibleObject.OnAttackingWith(IWorldAccessor, Entity, Entity, ItemSlot) CollectibleObject.MatchesForCrafting(ItemStack, GridRecipe, CraftingRecipeIngredient) CollectibleObject.OnConsumedByCrafting(ItemSlot[], ItemSlot, GridRecipe, CraftingRecipeIngredient, IPlayer, int) CollectibleObject.ConsumeCraftingIngredients(ItemSlot[], ItemSlot, GridRecipe) CollectibleObject.SetDurability(ItemStack, int) CollectibleObject.DamageItem(IWorldAccessor, Entity, ItemSlot, int) CollectibleObject.RefillSlotIfEmpty(ItemSlot, EntityAgent, ActionConsumable<ItemStack>) CollectibleObject.GetToolModes(ItemSlot, IClientPlayer, BlockSelection) CollectibleObject.GetToolMode(ItemSlot, IPlayer, BlockSelection) CollectibleObject.SetToolMode(ItemSlot, IPlayer, BlockSelection, int) CollectibleObject.OnHeldRenderOpaque(ItemSlot, IClientPlayer) CollectibleObject.OnHeldRenderOit(ItemSlot, IClientPlayer) CollectibleObject.OnHeldRenderOrtho(ItemSlot, IClientPlayer) CollectibleObject.OnHeldIdle(ItemSlot, EntityAgent) CollectibleObject.OnHeldActionAnimStart(ItemSlot, EntityAgent, EnumHandInteract) CollectibleObject.OnGroundIdle(EntityItem) CollectibleObject.InGuiIdle(IWorldAccessor, ItemStack) CollectibleObject.OnCollected(ItemStack, Entity) CollectibleObject.OnHeldUseStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract, bool, ref EnumHandHandling) CollectibleObject.OnHeldUseCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.OnHeldUseStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldUseStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract) CollectibleObject.OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling) CollectibleObject.OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling) CollectibleObject.OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.tryEatBegin(ItemSlot, EntityAgent, ref EnumHandHandling, string, int) CollectibleObject.playEatSound(EntityAgent, string, int) CollectibleObject.tryEatStep(float, ItemSlot, EntityAgent, ItemStack) CollectibleObject.tryEatStop(float, ItemSlot, EntityAgent) CollectibleObject.OnHeldDropped(IWorldAccessor, IPlayer, ItemSlot, int, ref EnumHandling) CollectibleObject.GetHeldItemName(ItemStack) CollectibleObject.GetItemDescText() CollectibleObject.GetHeldInteractionHelp(ItemSlot) CollectibleObject.AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor) CollectibleObject.AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor, TransitionState, bool) CollectibleObject.OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) CollectibleObject.GetHandBookStacks(ICoreClientAPI) CollectibleObject.CanBePlacedInto(ItemStack, ItemSlot) CollectibleObject.GetMergableQuantity(ItemStack, ItemStack, EnumMergePriority) CollectibleObject.TryMergeStacks(ItemStackMergeOperation) CollectibleObject.GetMeltingDuration(IWorldAccessor, ISlotProvider, ItemSlot) CollectibleObject.GetMeltingPoint(IWorldAccessor, ISlotProvider, ItemSlot) CollectibleObject.CanSmelt(IWorldAccessor, ISlotProvider, ItemStack, ItemStack) CollectibleObject.DoSmelt(IWorldAccessor, ISlotProvider, ItemSlot, ItemSlot) CollectibleObject.CanSpoil(ItemStack) CollectibleObject.UpdateAndGetTransitionState(IWorldAccessor, ItemSlot, EnumTransitionType) CollectibleObject.SetTransitionState(ItemStack, EnumTransitionType, float) CollectibleObject.GetTransitionRateMul(IWorldAccessor, ItemSlot, EnumTransitionType) CollectibleObject.UpdateAndGetTransitionStates(IWorldAccessor, ItemSlot) CollectibleObject.UpdateAndGetTransitionStatesNative(IWorldAccessor, ItemSlot) CollectibleObject.OnTransitionNow(ItemSlot, TransitionableProperties) CollectibleObject.CarryOverFreshness(ICoreAPI, ItemSlot, ItemStack, TransitionableProperties) CollectibleObject.CarryOverFreshness(ICoreAPI, ItemSlot[], ItemStack[], TransitionableProperties) CollectibleObject.IsReasonablyFresh(IWorldAccessor, ItemStack) CollectibleObject.HasTemperature(IItemStack) CollectibleObject.GetTemperature(IWorldAccessor, ItemStack, double) CollectibleObject.GetTemperature(IWorldAccessor, ItemStack) CollectibleObject.SetTemperature(IWorldAccessor, ItemStack, float, bool) CollectibleObject.Equals(ItemStack, ItemStack, params string[]) CollectibleObject.Satisfies(ItemStack, ItemStack) CollectibleObject.OnStoreCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) CollectibleObject.OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) CollectibleObject.OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) CollectibleObject.IsLiquid() CollectibleObject.GetCollectibleBehavior(Type, bool) CollectibleObject.GetCollectibleBehavior<T>(bool) CollectibleObject.GetBehavior(CollectibleBehavior[], Type, bool) CollectibleObject.GetCollectibleInterface<T>() CollectibleObject.GetBehavior(Type) CollectibleObject.GetBehavior<T>() CollectibleObject.OnSmeltAttempt(InventoryBase) CollectibleObject.IsEmptyBackPack(IItemStack) CollectibleObject.IsBackPack(IItemStack) CollectibleObject.QuantityBackPackSlots(IItemStack) RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods DoParticalSelection(IWorldAccessor, BlockPos) If true, the player can select invdividual selection boxes of this block public override bool DoParticalSelection(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns bool GetCollisionBoxes(IBlockAccessor, BlockPos) Returns the blocks collision box. Warning: This method may get called by different threads, so it has to be thread safe. public override Cuboidf[] GetCollisionBoxes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Cuboidf[] GetDecal(IWorldAccessor, BlockPos, ITexPositionSource, ref MeshData, ref MeshData) Called before a decal is created. public override void GetDecal(IWorldAccessor world, BlockPos pos, ITexPositionSource decalTexSource, ref MeshData decalModelData, ref MeshData blockModelData) Parameters world IWorldAccessor pos BlockPos decalTexSource ITexPositionSource decalModelData MeshData The block model which need UV values for the decal texture blockModelData MeshData The original block model GetParticleBreakBox(IBlockAccessor, BlockPos, BlockFacing) The cuboid used to determine where to spawn particles when breaking the block public override Cuboidf GetParticleBreakBox(IBlockAccessor blockAccess, BlockPos pos, BlockFacing facing) Parameters blockAccess IBlockAccessor pos BlockPos facing BlockFacing Returns Cuboidf GetParticleCollisionBoxes(IBlockAccessor, BlockPos) Returns the blocks particle collision box. Warning: This method may get called by different threads, so it has to be thread safe. public override Cuboidf[] GetParticleCollisionBoxes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Cuboidf[] GetSelectionBoxes(IBlockAccessor, BlockPos) Returns the blocks selection boxes at this position in the world. public override Cuboidf[] GetSelectionBoxes(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Cuboidf[] OnDecalTesselation(IWorldAccessor, MeshData, BlockPos) public override void OnDecalTesselation(IWorldAccessor world, MeshData decalMesh, BlockPos pos) Parameters world IWorldAccessor decalMesh MeshData pos BlockPos TryPlaceBlockForWorldGen(IBlockAccessor, BlockPos, BlockFacing, IRandom, BlockPatchAttributes) Currently used for wildvines and saguaro cactus public override bool TryPlaceBlockForWorldGen(IBlockAccessor blockAccessor, BlockPos pos, BlockFacing onBlockFace, IRandom worldgenRandom, BlockPatchAttributes attributes = null) Parameters blockAccessor IBlockAccessor pos BlockPos onBlockFace BlockFacing worldgenRandom IRandom attributes BlockPatchAttributes Returns bool"
  },
  "api/Vintagestory.API.Common.BlockLayersAccess.html": {
    "href": "api/Vintagestory.API.Common.BlockLayersAccess.html",
    "title": "Class BlockLayersAccess | VintageStory API",
    "keywords": "Class BlockLayersAccess Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Constants used for GetBlock or GetBlockId calls throughout the engine, to guide whether the block should be read from the solid blocks layer, the fluids layer, or perhaps both. The game engine supports different block layers in 1.17+. Currently there is a solid blocks layer (e.g. terrain, loose stones, plants, reeds) and a fluid layer (e.g. still water, flowing water, lava, lake ice). Both layers can contain a block at the same position. Use the .Default value for getting blocks in the general case, use the .Solid/.Fluid value to read from the solid blocks or fluid layer specifically Open in GitHub public class BlockLayersAccess Inheritance object BlockLayersAccess Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Default GetBlock: Returns the contents of the solid blocks layer. If the solid blocks layer is completely empty, returns the value from the fluid layer instead. Keep in mind, the fluid layer might contain ice! If this returns air (block id 0) then it really is an air block: there is nothing in either the solid blocks layer or the fluid layer SetBlock: Sets supplied block id. If that blocks property ForFluidsLayer is true, it will be placed in the fluids layer instead and the solid block layer will be cleared. public const int Default = 0 Field Value int Fluid Returns a block from the fluid layer only, which might contain ice. A return value of air (block id 0) signifies no fluid is present at this position public const int Fluid = 2 Field Value int FluidOrSolid Returns the contents of the fluid layer, unless it is empty in which case returns the solid blocks layer - useful for generating the RainHeightMap for example public const int FluidOrSolid = 3 Field Value int MostSolid Returns the most solid block, in the following order: Ice in the fluid layer Whichever block is in the solid blocks layer Air (block id 0) if neither is present - note this access may therefore return 0 even if liquid water or lava is present in the fluid layer. Useful for block collision checks, side solid checks (can a block attach here?) and similar physics public const int MostSolid = 4 Field Value int Solid Returns a block from the solid blocks layer only. Same as SolidBlocks public const int Solid = 1 Field Value int SolidBlocks Returns a block from the solid blocks layer only. A return value of air (block id 0) signifies no solid block is present but there may still be a fluid block, for example still water public const int SolidBlocks = 1 Field Value int"
  },
  "api/Vintagestory.API.Common.BlockMaterialUtil.html": {
    "href": "api/Vintagestory.API.Common.BlockMaterialUtil.html",
    "title": "Class BlockMaterialUtil | VintageStory API",
    "keywords": "Class BlockMaterialUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class BlockMaterialUtil Inheritance object BlockMaterialUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MaterialBlastDropChances(EnumBlastType, EnumBlockMaterial) Calculates the blast drop chance of a given material. public static double MaterialBlastDropChances(EnumBlastType blastType, EnumBlockMaterial material) Parameters blastType EnumBlastType The blast type the material is being it with. material EnumBlockMaterial The material of the block. Returns double the resulting drop chance. MaterialBlastResistance(EnumBlastType, EnumBlockMaterial) Calculates the blast resistance of a given material. public static double MaterialBlastResistance(EnumBlastType blastType, EnumBlockMaterial material) Parameters blastType EnumBlastType The blast type the material is being it with. material EnumBlockMaterial The material of the block. Returns double the resulting blast resistance."
  },
  "api/Vintagestory.API.Common.BlockOffsetAndNumber.html": {
    "href": "api/Vintagestory.API.Common.BlockOffsetAndNumber.html",
    "title": "Class BlockOffsetAndNumber | VintageStory API",
    "keywords": "Class BlockOffsetAndNumber Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockOffsetAndNumber : Vec4i, IEquatable<Vec4i> Inheritance object Vec4i BlockOffsetAndNumber Implements IEquatable<Vec4i> Inherited Members Vec4i.X Vec4i.Y Vec4i.Z Vec4i.W Vec4i.Equals(Vec4i) Vec4i.GetHashCode() Vec4i.HorDistanceSqTo(double, double) object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockOffsetAndNumber() public BlockOffsetAndNumber() BlockOffsetAndNumber(int, int, int, int) public BlockOffsetAndNumber(int x, int y, int z, int w) Parameters x int y int z int w int Properties BlockNumber public int BlockNumber { get; } Property Value int"
  },
  "api/Vintagestory.API.Common.BlockPatchAttributes.html": {
    "href": "api/Vintagestory.API.Common.BlockPatchAttributes.html",
    "title": "Class BlockPatchAttributes | VintageStory API",
    "keywords": "Class BlockPatchAttributes Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockPatchAttributes Inheritance object BlockPatchAttributes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Coral List of asset codes for the coral types of a coral reef blockpatch coral-brain, coral-fan ... public string[]? Coral Field Value string[] CoralBase List of asset codes for the base (coralblock) types of a coral reef blockpatch public string[]? CoralBase Field Value string[] CoralBaseBlock [JsonIgnore] public Block[]? CoralBaseBlock Field Value Block[] CoralBaseHeight How thick the base coral full block layer should be for this patch (goes down into the ground, helpful for cliffs) 1 -> replace the gravel with coral 2 -> go 1 block below gravel and also replace and so on public int CoralBaseHeight Field Value int CoralBlock [JsonIgnore] public Block[]? CoralBlock Field Value Block[] CoralChance Chance to spawn a coral [brain, fan] on top of base blocks or structures public float CoralChance Field Value float CoralDecor List of asset codes for the coral decor of a coral reef blockpatch These will be placed on solid surfaces around coral base blocks and on top of structures public string[]? CoralDecor Field Value string[] CoralDecorBlock [JsonIgnore] public Block[]? CoralDecorBlock Field Value Block[] CoralDecorChance When a coral [brain, fan] gets spawned also try if a decor should spawn below it Also on vertical growth we try to spawn decors cliffs public float CoralDecorChance Field Value float CoralMinSize Defines the minimum 2D size of the coral reef public int CoralMinSize Field Value int CoralPlants Specifiy which plants should spawn for this blockpatch and their heigh and how often a specific plant should be chosen public Dictionary<string, CoralPlantConfig>? CoralPlants Field Value Dictionary<string, CoralPlantConfig> CoralPlantsChance Chance that any Plant will spawn public float CoralPlantsChance Field Value float CoralRandomSize Defines the random size between 0 - X that will be added additionally to the reef public int CoralRandomSize Field Value int CoralReplaceOtherPatches Chance that coral generating will replace all other block patches in its area public float CoralReplaceOtherPatches Field Value float CoralShelve List of asset codes for the coral shelved types of a coral reef blockpatch These need to have HorizontalOrientable behaviour and only specify one side in here \"coralshelf-north\" public string[]? CoralShelve Field Value string[] CoralShelveBlock [JsonIgnore] public Block[][]? CoralShelveBlock Field Value Block[][] CoralShelveChance Chance that a shelf will spawn instead of a structure on top of a coralblock public float CoralShelveChance Field Value float CoralStructure List of asset codes for the coral structure types of a coral reef blockpatch public string[]? CoralStructure Field Value string[] CoralStructureBlock [JsonIgnore] public Block[]? CoralStructureBlock Field Value Block[] CoralStructureChance If no shelf was spawned this chance controls how likely a structure will spawn instead of a coral. If a structure is spawned then a coral will spawn on top If no shelve nor structure was spawned then also a coral will be spawned public float CoralStructureChance Field Value float CoralVerticalGrowChance Chance for a shelf block to spawn on a under water cliff. The chance is rolled for each height The patch will try to spawn them until it reaches minWaterDepth public float CoralVerticalGrowChance Field Value float FlowerChance Chance that a BlockCrowfoot will spawn a flower when it reaches the water surface public float FlowerChance Field Value float Height Heigh distribution for BlockSeaweed and BlockCrowfoot types public NatFloat? Height Field Value NatFloat StructureDecor public string[]? StructureDecor Field Value string[] StructureDecorBlock [JsonIgnore] public Block[]? StructureDecorBlock Field Value Block[] Methods Init(ICoreServerAPI, int) public void Init(ICoreServerAPI sapi, int i) Parameters sapi ICoreServerAPI i int"
  },
  "api/Vintagestory.API.Common.BlockPlacedDelegate.html": {
    "href": "api/Vintagestory.API.Common.BlockPlacedDelegate.html",
    "title": "Delegate BlockPlacedDelegate | VintageStory API",
    "keywords": "Delegate BlockPlacedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void BlockPlacedDelegate(IServerPlayer byPlayer, int oldblockId, BlockSelection blockSel, ItemStack withItemStack) Parameters byPlayer IServerPlayer oldblockId int blockSel BlockSelection withItemStack ItemStack Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.BlockSchematic.html": {
    "href": "api/Vintagestory.API.Common.BlockSchematic.html",
    "title": "Class BlockSchematic | VintageStory API",
    "keywords": "Class BlockSchematic Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class BlockSchematic Inheritance object BlockSchematic Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockSchematic() public BlockSchematic() BlockSchematic(IServerWorldAccessor, IBlockAccessor, BlockPos, BlockPos, bool) public BlockSchematic(IServerWorldAccessor world, IBlockAccessor blockAccess, BlockPos start, BlockPos end, bool notLiquids) Parameters world IServerWorldAccessor blockAccess IBlockAccessor start BlockPos end BlockPos notLiquids bool BlockSchematic(IServerWorldAccessor, BlockPos, BlockPos, bool) Construct a schematic from a specified area in the specified world public BlockSchematic(IServerWorldAccessor world, BlockPos start, BlockPos end, bool notLiquids) Parameters world IServerWorldAccessor start BlockPos end BlockPos notLiquids bool Fields AbovegroundBlockId public static int AbovegroundBlockId Field Value int AbovegroundCheckPositions public BlockPos[] AbovegroundCheckPositions Field Value BlockPos[] BlockCodes [JsonProperty] public Dictionary<int, AssetLocation> BlockCodes Field Value Dictionary<int, AssetLocation> BlockEntities [JsonProperty] public Dictionary<uint, string> BlockEntities Field Value Dictionary<uint, string> BlockEntitiesUnpacked public Dictionary<BlockPos, string> BlockEntitiesUnpacked Field Value Dictionary<BlockPos, string> BlockIds [JsonProperty] public List<int> BlockIds Field Value List<int> BlocksUnpacked public Dictionary<BlockPos, int> BlocksUnpacked Field Value Dictionary<BlockPos, int> DecorIds [JsonProperty] public List<long> DecorIds Field Value List<long> DecorIndices [JsonProperty] public List<uint> DecorIndices Field Value List<uint> DecorsUnpacked public Dictionary<BlockPos, Dictionary<int, Block>> DecorsUnpacked Field Value Dictionary<BlockPos, Dictionary<int, Block>> Entities [JsonProperty] public List<string> Entities Field Value List<string> EntitiesUnpacked public List<Entity> EntitiesUnpacked Field Value List<Entity> EntranceRotation [JsonProperty] public int EntranceRotation Field Value int FillerBlockId public static int FillerBlockId Field Value int FluidsLayerUnpacked public Dictionary<BlockPos, int> FluidsLayerUnpacked Field Value Dictionary<BlockPos, int> GameVersion [JsonProperty] public string GameVersion Field Value string Indices [JsonProperty] public List<uint> Indices Field Value List<uint> ItemCodes [JsonProperty] public Dictionary<int, AssetLocation> ItemCodes Field Value Dictionary<int, AssetLocation> OmitLiquids public bool OmitLiquids Field Value bool OriginalPos [JsonProperty] public BlockPos OriginalPos Field Value BlockPos PackedOffset public FastVec3i PackedOffset Field Value FastVec3i PathwayBlockId public static int PathwayBlockId Field Value int PathwayBlocksUnpacked public List<BlockPosFacing> PathwayBlocksUnpacked Field Value List<BlockPosFacing> PathwayOffsets Distance from the bottom left door block, so the bottom left door block is always at 0,0,0 public BlockPos[][] PathwayOffsets Field Value BlockPos[][] PathwaySides public BlockFacing[] PathwaySides Field Value BlockFacing[] PathwayStarts Distance positions from bottom left corner of the schematic. Only the first door block. public BlockPos[] PathwayStarts Field Value BlockPos[] PosBitMask This bitmask for the position in schematics public const uint PosBitMask = 1023 Field Value uint ReplaceMode [JsonProperty] public EnumReplaceMode ReplaceMode Field Value EnumReplaceMode SizeX [JsonProperty] public int SizeX Field Value int SizeY [JsonProperty] public int SizeY Field Value int SizeZ [JsonProperty] public int SizeZ Field Value int UndergroundBlockId public static int UndergroundBlockId Field Value int UndergroundCheckPositions public BlockPos[] UndergroundCheckPositions Field Value BlockPos[] empty protected ushort empty Field Value ushort Properties BlockRemaps Set by the RemapperAssistant in OnFinalizeAssets Heads up!: This is unordered, it will iterate through the different game versions' remaps not necessarily in the order they originally appear in remaps.json config. If any block remaps over the years have duplicate original block names, behavior for those ones may be unpredictable public static Dictionary<string, Dictionary<string, string>> BlockRemaps { get; set; } Property Value Dictionary<string, Dictionary<string, string>> ItemRemaps Set by the RemapperAssistant in OnFinalizeAssets public static Dictionary<string, Dictionary<string, string>> ItemRemaps { get; set; } Property Value Dictionary<string, Dictionary<string, string>> Methods AddArea(IWorldAccessor, IBlockAccessor, BlockPos, BlockPos) public virtual void AddArea(IWorldAccessor world, IBlockAccessor blockAccess, BlockPos start, BlockPos end) Parameters world IWorldAccessor blockAccess IBlockAccessor start BlockPos end BlockPos AddArea(IWorldAccessor, BlockPos, BlockPos) Adds an area to the schematic. public virtual void AddArea(IWorldAccessor world, BlockPos start, BlockPos end) Parameters world IWorldAccessor The world the blocks are in start BlockPos The start position of all the blocks. end BlockPos The end position of all the blocks. AdjustStartPos(BlockPos, EnumOrigin) Adjusts the starting position of the schemtic. public virtual BlockPos AdjustStartPos(BlockPos startpos, EnumOrigin origin) Parameters startpos BlockPos origin EnumOrigin Returns BlockPos ClonePacked() Makes a deep copy of the packed schematic. Unpacked data and loaded meta information is not cloned. public virtual BlockSchematic ClonePacked() Returns BlockSchematic DecodeBlockEntityData(string) Imports the tree data from a string. public virtual TreeAttribute DecodeBlockEntityData(string data) Parameters data string Returns TreeAttribute EncodeBlockEntityData(BlockEntity) Exports the block entity data to a string. public virtual string EncodeBlockEntityData(BlockEntity be) Parameters be BlockEntity Returns string EncodeBlockEntityData(BlockEntity, FastMemoryStream) public virtual string EncodeBlockEntityData(BlockEntity be, FastMemoryStream ms) Parameters be BlockEntity ms FastMemoryStream Returns string GetJustPositions(BlockPos) Gets just the positions of the blocks. public virtual BlockPos[] GetJustPositions(BlockPos origin) Parameters origin BlockPos The origin point to start from Returns BlockPos[] An array containing the BlockPos of each block in the area. GetRotatedPos(EnumOrigin, int, int, int, int) public BlockPos GetRotatedPos(EnumOrigin aroundOrigin, int angle, int dx, int dy, int dz) Parameters aroundOrigin EnumOrigin angle int dx int dy int dz int Returns BlockPos GetStartPos(BlockPos, EnumOrigin) Gets the starting position of the schematic. public virtual BlockPos GetStartPos(BlockPos pos, EnumOrigin origin) Parameters pos BlockPos origin EnumOrigin Returns BlockPos Init(IBlockAccessor) public virtual void Init(IBlockAccessor blockAccessor) Parameters blockAccessor IBlockAccessor IsFillerOrPath(Block) public bool IsFillerOrPath(Block newBlock) Parameters newBlock Block Returns bool LoadFromFile(string, ref string) Loads the schematic from a file. public static BlockSchematic LoadFromFile(string infilepath, ref string error) Parameters infilepath string error string Returns BlockSchematic LoadFromString(string, ref string) Loads a schematic from a string. public static BlockSchematic LoadFromString(string jsoncode, ref string error) Parameters jsoncode string error string Returns BlockSchematic LoadMetaInformationAndValidate(IBlockAccessor, IWorldAccessor, string) Loads the meta information for each block in the schematic. public void LoadMetaInformationAndValidate(IBlockAccessor blockAccessor, IWorldAccessor worldForResolve, string fileNameForLogging) Parameters blockAccessor IBlockAccessor worldForResolve IWorldAccessor fileNameForLogging string Pack(IWorldAccessor, BlockPos) public virtual bool Pack(IWorldAccessor world, BlockPos startPos) Parameters world IWorldAccessor startPos BlockPos Returns bool PasteToMiniDimension(ICoreServerAPI, IBlockAccessor, IMiniDimension, BlockPos, bool) public void PasteToMiniDimension(ICoreServerAPI sapi, IBlockAccessor blockAccess, IMiniDimension miniDimension, BlockPos originPos, bool replaceMetaBlocks) Parameters sapi ICoreServerAPI blockAccess IBlockAccessor miniDimension IMiniDimension originPos BlockPos replaceMetaBlocks bool Place(IBlockAccessor, IWorldAccessor, BlockPos, bool) Will place all blocks using the configured replace mode. Note: If you use a revertable or bulk block accessor you will have to call PlaceBlockEntities() after the Commit() public virtual int Place(IBlockAccessor blockAccessor, IWorldAccessor worldForCollectibleResolve, BlockPos startPos, bool replaceMetaBlocks = true) Parameters blockAccessor IBlockAccessor worldForCollectibleResolve IWorldAccessor startPos BlockPos replaceMetaBlocks bool Returns int Place(IBlockAccessor, IWorldAccessor, BlockPos, EnumReplaceMode, bool) Will place all blocks using the supplied replace mode. Note: If you use a revertable or bulk block accessor you will have to call PlaceBlockEntities() after the Commit() public virtual int Place(IBlockAccessor blockAccessor, IWorldAccessor worldForCollectibleResolve, BlockPos startPos, EnumReplaceMode mode, bool replaceMetaBlocks = true) Parameters blockAccessor IBlockAccessor worldForCollectibleResolve IWorldAccessor startPos BlockPos mode EnumReplaceMode replaceMetaBlocks bool Returns int PlaceDecors(IBlockAccessor, BlockPos) public virtual void PlaceDecors(IBlockAccessor blockAccessor, BlockPos startPos) Parameters blockAccessor IBlockAccessor startPos BlockPos PlaceDecors(IBlockAccessor, BlockPos, Rectanglei) public virtual void PlaceDecors(IBlockAccessor blockAccessor, BlockPos startPos, Rectanglei rect) Parameters blockAccessor IBlockAccessor startPos BlockPos rect Rectanglei PlaceEntitiesAndBlockEntities(IBlockAccessor, IWorldAccessor, BlockPos, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool, Dictionary<int, Dictionary<int, int>>, int, Dictionary<BlockPos, Block>, bool) Places all the entities and blocks in the schematic at the position. public void PlaceEntitiesAndBlockEntities(IBlockAccessor blockAccessor, IWorldAccessor worldForCollectibleResolve, BlockPos startPos, Dictionary<int, AssetLocation> blockCodes, Dictionary<int, AssetLocation> itemCodes, bool replaceBlockEntities = false, Dictionary<int, Dictionary<int, int>> replaceBlocks = null, int centerrockblockid = 0, Dictionary<BlockPos, Block> layerBlockForBlockEntities = null, bool resolveImports = true) Parameters blockAccessor IBlockAccessor worldForCollectibleResolve IWorldAccessor startPos BlockPos blockCodes Dictionary<int, AssetLocation> itemCodes Dictionary<int, AssetLocation> replaceBlockEntities bool replaceBlocks Dictionary<int, Dictionary<int, int>> centerrockblockid int layerBlockForBlockEntities Dictionary<BlockPos, Block> resolveImports bool Turn it off to spawn structures as they are. For example, in this mode, instead of traders, their meta spawners will spawn PlaceReplaceAll(IBlockAccessor, BlockPos, Block, bool) protected virtual int PlaceReplaceAll(IBlockAccessor blockAccessor, BlockPos pos, Block newBlock, bool replaceMeta) Parameters blockAccessor IBlockAccessor pos BlockPos newBlock Block replaceMeta bool Returns int PlaceReplaceAllNoAir(IBlockAccessor, BlockPos, Block, bool) protected virtual int PlaceReplaceAllNoAir(IBlockAccessor blockAccessor, BlockPos pos, Block newBlock, bool replaceMeta) Parameters blockAccessor IBlockAccessor pos BlockPos newBlock Block replaceMeta bool Returns int PlaceReplaceOnlyAir(IBlockAccessor, BlockPos, Block, bool) protected virtual int PlaceReplaceOnlyAir(IBlockAccessor blockAccessor, BlockPos pos, Block newBlock, bool replaceMeta) Parameters blockAccessor IBlockAccessor pos BlockPos newBlock Block replaceMeta bool Returns int PlaceReplaceable(IBlockAccessor, BlockPos, Block, bool) protected virtual int PlaceReplaceable(IBlockAccessor blockAccessor, BlockPos pos, Block newBlock, bool replaceMeta) Parameters blockAccessor IBlockAccessor pos BlockPos newBlock Block replaceMeta bool Returns int Remap() public void Remap() Save(string) Saves a schematic to a file. public virtual string Save(string outfilepath) Parameters outfilepath string Returns string StringEncodeTreeAttribute(ITreeAttribute) Exports the tree attribute data to a string. public virtual string StringEncodeTreeAttribute(ITreeAttribute tree) Parameters tree ITreeAttribute Returns string StringEncodeTreeAttribute(ITreeAttribute, FastMemoryStream) public virtual string StringEncodeTreeAttribute(ITreeAttribute tree, FastMemoryStream ms) Parameters tree ITreeAttribute ms FastMemoryStream Returns string ToJson() public virtual string ToJson() Returns string TransformWhilePacked(IWorldAccessor, EnumOrigin, int, EnumAxis?, bool) Attempts to transform each block as they are placed in directions different from the schematic. public virtual void TransformWhilePacked(IWorldAccessor worldForResolve, EnumOrigin aroundOrigin, int angle, EnumAxis? flipAxis = null, bool isDungeon = false) Parameters worldForResolve IWorldAccessor aroundOrigin EnumOrigin angle int flipAxis EnumAxis? isDungeon bool TryGetVersionFromRemapKey(string, out SemVer) public bool TryGetVersionFromRemapKey(string remapKey, out SemVer remapVersion) Parameters remapKey string remapVersion SemVer Returns bool"
  },
  "api/Vintagestory.API.Common.BlockSelection.html": {
    "href": "api/Vintagestory.API.Common.BlockSelection.html",
    "title": "Class BlockSelection | VintageStory API",
    "keywords": "Class BlockSelection Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Contains all the information for a players block selection event Open in GitHub public class BlockSelection Inheritance object BlockSelection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockSelection() public BlockSelection() BlockSelection(BlockPos, BlockFacing, Block) Creates a basic BlockSelection from limited data public BlockSelection(BlockPos pos, BlockFacing face, Block block) Parameters pos BlockPos face BlockFacing block Block Fields Block The block actually being looked at! public Block Block Field Value Block DidOffset Always false during block use. True during placement if the Position value was offseted. Example: When trying to place planks while aiming at rock, the Position is the one in front of the Rock and DidOffset is True When trying to place planks while aiming at tallgrass, the Position is where the tall grass is and DidOffset is false (because tallgrass is replacable) public bool DidOffset Field Value bool Face The face the player aimed at public BlockFacing Face Field Value BlockFacing HitPosition The coordinate of the exact aimed position, relative to the Block Position public Vec3d HitPosition Field Value Vec3d Position The position the player wants to place/break something at public BlockPos Position Field Value BlockPos SelectionBoxIndex Which selection box was aimed at. The index corresponds to the array returned by Block.GetSelectionBoxes() public int SelectionBoxIndex Field Value int Properties FullPosition public Vec3d FullPosition { get; } Property Value Vec3d Methods AddPosCopy(int, int, int) public BlockSelection AddPosCopy(int x, int y, int z) Parameters x int y int z int Returns BlockSelection AddPosCopy(Vec3i) public BlockSelection AddPosCopy(Vec3i vec) Parameters vec Vec3i Returns BlockSelection Clone() Creates a deep copy public BlockSelection Clone() Returns BlockSelection GetDecorIndex(BlockFacing) [Obsolete(\"Use (int)new DecorBits(face) instead, which has the same functionality\")] public static int GetDecorIndex(BlockFacing face) Parameters face BlockFacing Returns int GetDecorIndex(BlockFacing, int, int, int) [Obsolete(\"Use (int)new DecorBits(face, x, y, z) instead, which has the same functionality\")] public static int GetDecorIndex(BlockFacing face, int x, int y, int z) Parameters face BlockFacing x int y int z int Returns int SetPos(int, int, int) public BlockSelection SetPos(int x, int y, int z) Parameters x int y int z int Returns BlockSelection ToDecorIndex() Returns a subposition index for use addressing decor subpositions on a block public int ToDecorIndex() Returns int"
  },
  "api/Vintagestory.API.Common.BlockSounds.html": {
    "href": "api/Vintagestory.API.Common.BlockSounds.html",
    "title": "Class BlockSounds | VintageStory API",
    "keywords": "Class BlockSounds Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A set of sounds that are defined for a block. All fields use default or empty sounds if not set. Open in GitHub [DocumentAsJson] public class BlockSounds Inheritance object BlockSounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"sounds\": { \"place\": \"block/dirt\", \"break\": \"block/dirt\", \"hit\": \"block/dirt\", \"walk\": \"walk/grass\" }, Fields Ambient Played in ambience for this block. [DocumentAsJson] public AssetLocation Ambient Field Value AssetLocation AmbientBlockCount Amount of nearby ambient sound blocks in order to reach full ambient sound volume [DocumentAsJson] public float AmbientBlockCount Field Value float AmbientMaxDistanceMerge Adjacent ambient sound sources are merged to avoid playing too many sounds too loudly. This is the maximum distance a sound source can be from another to allow a merge. [DocumentAsJson] public float AmbientMaxDistanceMerge Field Value float AmbientSoundType The type of sound for this block's ambient sound. [DocumentAsJson] public EnumSoundType AmbientSoundType Field Value EnumSoundType Properties Break Played when this block is broken. [DocumentAsJson] public virtual AssetLocation Break { get; set; } Property Value AssetLocation ByTool Gets the sound that occurs when a specific tool hits a block. (Note for coders: if none specified in the JSON, this will be null from version 1.20.4 onwards) [DocumentAsJson] public virtual Dictionary<EnumTool, BlockSounds> ByTool { get; set; } Property Value Dictionary<EnumTool, BlockSounds> Hit Played when this block is hit. Will be overridden by ByTool if an appropriate tool is set. [DocumentAsJson] public virtual AssetLocation Hit { get; set; } Property Value AssetLocation Inside Played when an entity moves inside this block. Primarily used for liquids. [DocumentAsJson] public virtual AssetLocation Inside { get; set; } Property Value AssetLocation Place Played when this block is placed. [DocumentAsJson] public virtual AssetLocation Place { get; set; } Property Value AssetLocation Walk Played when an entity walks on this block. [DocumentAsJson] public virtual AssetLocation Walk { get; set; } Property Value AssetLocation Methods Clone() Clones the block sounds. public BlockSounds Clone() Returns BlockSounds GetBreakSound(EnumTool) Gets the break sound either by the tool or by the block if the tool does not have a break sound. public AssetLocation GetBreakSound(EnumTool tool) Parameters tool EnumTool The Tool used. Returns AssetLocation The resulting sound GetBreakSound(IPlayer) Gets the breaking sound, either provided by the tool or by this sound. public AssetLocation GetBreakSound(IPlayer byPlayer) Parameters byPlayer IPlayer Returns AssetLocation GetHitSound(EnumTool) Gets the hit sound either by the tool or by the block if the tool does not have a hit sound. public AssetLocation GetHitSound(EnumTool tool) Parameters tool EnumTool Returns AssetLocation GetHitSound(IPlayer) Gets the hit sound either provided by the tool or by the block. public AssetLocation GetHitSound(IPlayer byPlayer) Parameters byPlayer IPlayer Returns AssetLocation OnDeserializedMethod(StreamingContext) [OnDeserialized] public void OnDeserializedMethod(StreamingContext context) Parameters context StreamingContext"
  },
  "api/Vintagestory.API.Common.BlockUpdate.html": {
    "href": "api/Vintagestory.API.Common.BlockUpdate.html",
    "title": "Class BlockUpdate | VintageStory API",
    "keywords": "Class BlockUpdate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BlockUpdate Inheritance object BlockUpdate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ByStack public ItemStack ByStack Field Value ItemStack Decors public List<DecorUpdate> Decors Field Value List<DecorUpdate> ExchangeOnly public bool ExchangeOnly Field Value bool NewBlockEntityData public byte[] NewBlockEntityData Field Value byte[] NewFluidBlockId If this value is negative, it indicates no change to the fluids layer block (neither air block nor anything else) because only the solid block is being updated public int NewFluidBlockId Field Value int NewSolidBlockId If this value is negative, it indicates no change to the block (neither air block nor anything else) because only the fluid is being updated public int NewSolidBlockId Field Value int OldBlockEntityData public byte[] OldBlockEntityData Field Value byte[] OldBlockId Contains either liquid layer of solid layer block public int OldBlockId Field Value int OldDecors public List<DecorUpdate> OldDecors Field Value List<DecorUpdate> OldFluidBlockId Contains liquid layer of block public int OldFluidBlockId Field Value int Pos public BlockPos Pos Field Value BlockPos"
  },
  "api/Vintagestory.API.Common.BlockUsedDelegate.html": {
    "href": "api/Vintagestory.API.Common.BlockUsedDelegate.html",
    "title": "Delegate BlockUsedDelegate | VintageStory API",
    "keywords": "Delegate BlockUsedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void BlockUsedDelegate(IServerPlayer byPlayer, BlockSelection blockSel) Parameters byPlayer IServerPlayer blockSel BlockSelection Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.BoolArgParser.html": {
    "href": "api/Vintagestory.API.Common.BoolArgParser.html",
    "title": "Class BoolArgParser | VintageStory API",
    "keywords": "Class BoolArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class BoolArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase BoolArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BoolArgParser(string, string, bool) public BoolArgParser(string argName, string trueAlias, bool isMandatoryArg) Parameters argName string trueAlias string isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.Caller.html": {
    "href": "api/Vintagestory.API.Common.Caller.html",
    "title": "Class Caller | VintageStory API",
    "keywords": "Class Caller Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class Caller Inheritance object Caller Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CallerPrivileges public string[] CallerPrivileges Field Value string[] CallerRole public string CallerRole Field Value string FromChatGroupId public int FromChatGroupId Field Value int Pos public Vec3d Pos Field Value Vec3d Type public EnumCallerType Type Field Value EnumCallerType Properties Entity public Entity Entity { get; set; } Property Value Entity Player public IPlayer Player { get; set; } Property Value IPlayer Methods GetName() public string GetName() Returns string GetRole(ICoreServerAPI) public IPlayerRole GetRole(ICoreServerAPI sapi) Parameters sapi ICoreServerAPI Returns IPlayerRole HasPrivilege(string) public bool HasPrivilege(string privilege) Parameters privilege string Returns bool"
  },
  "api/Vintagestory.API.Common.CanPlaceOrBreakDelegate.html": {
    "href": "api/Vintagestory.API.Common.CanPlaceOrBreakDelegate.html",
    "title": "Delegate CanPlaceOrBreakDelegate | VintageStory API",
    "keywords": "Delegate CanPlaceOrBreakDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Test if a player has the privilege to modify a block at given block selection public delegate bool CanPlaceOrBreakDelegate(IServerPlayer byPlayer, BlockSelection blockSel, out string claimant) Parameters byPlayer IServerPlayer blockSel BlockSelection claimant string Needs to be set when false is returned. Is used to display the reason why the placement was denied. Either it needs to be the name of a player/npc who owns this block, or it needs to be prefixed with custommessage- for a custom error message, e.g. \"custommessage-nobuildprivilege\": \"No build privilege\" Returns bool False to deny placement Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.CanSpawnNearbyDelegate.html": {
    "href": "api/Vintagestory.API.Common.CanSpawnNearbyDelegate.html",
    "title": "Delegate CanSpawnNearbyDelegate | VintageStory API",
    "keywords": "Delegate CanSpawnNearbyDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate bool CanSpawnNearbyDelegate(EntityProperties type, Vec3d spawnPosition, RuntimeSpawnConditions sc) Parameters type EntityProperties spawnPosition Vec3d sc RuntimeSpawnConditions Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.CanUseDelegate.html": {
    "href": "api/Vintagestory.API.Common.CanUseDelegate.html",
    "title": "Delegate CanUseDelegate | VintageStory API",
    "keywords": "Delegate CanUseDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate bool CanUseDelegate(IServerPlayer byPlayer, BlockSelection blockSel) Parameters byPlayer IServerPlayer blockSel BlockSelection Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ChatCommand.html": {
    "href": "api/Vintagestory.API.Common.ChatCommand.html",
    "title": "Class ChatCommand | VintageStory API",
    "keywords": "Class ChatCommand Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A base class for all chat commands. Open in GitHub public abstract class ChatCommand Inheritance object ChatCommand Derived ClientChatCommand ServerChatCommand Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Command the command calling name. public string Command Field Value string Description The description of the command. public string Description Field Value string RequiredPrivilege The required privilage for the command to be ran. public string RequiredPrivilege Field Value string Syntax The syntax of the command. public string Syntax Field Value string Methods CallHandler(IPlayer, int, CmdArgs) The call handler for the command. public abstract void CallHandler(IPlayer player, int groupId, CmdArgs args) Parameters player IPlayer The player calling the command. groupId int The groupID of the player. args CmdArgs The arguments of the command. GetDescription() gets the description of the command. public virtual string GetDescription() Returns string GetHelpMessage() Gets the help message of the command. public virtual string GetHelpMessage() Returns string GetSyntax() Gets the syntax of the command. public virtual string GetSyntax() Returns string"
  },
  "api/Vintagestory.API.Common.ChatCommandComparer.html": {
    "href": "api/Vintagestory.API.Common.ChatCommandComparer.html",
    "title": "Class ChatCommandComparer | VintageStory API",
    "keywords": "Class ChatCommandComparer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ChatCommandComparer : IEqualityComparer<IChatCommand> Inheritance object ChatCommandComparer Implements IEqualityComparer<IChatCommand> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Comparer public static ChatCommandComparer Comparer { get; } Property Value ChatCommandComparer Methods Equals(IChatCommand, IChatCommand) Determines whether the specified objects are equal. public bool Equals(IChatCommand x, IChatCommand y) Parameters x IChatCommand The first object of type T to compare. y IChatCommand The second object of type T to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(IChatCommand) Returns a hash code for the specified object. public int GetHashCode(IChatCommand obj) Parameters obj IChatCommand The object for which a hash code is to be returned. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null."
  },
  "api/Vintagestory.API.Common.ChatLine.html": {
    "href": "api/Vintagestory.API.Common.ChatLine.html",
    "title": "Class ChatLine | VintageStory API",
    "keywords": "Class ChatLine Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll an internal control containing the properties of a chat message. Open in GitHub public class ChatLine Inheritance object ChatLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ByPlayerUID The UID of the player who sent the message. public string ByPlayerUID Field Value string ChatType The type of chat the message was sent as. public EnumChatType ChatType Field Value EnumChatType Message The message that was sent. public string Message Field Value string"
  },
  "api/Vintagestory.API.Common.ChunkColumnBeginLoadChunkThread.html": {
    "href": "api/Vintagestory.API.Common.ChunkColumnBeginLoadChunkThread.html",
    "title": "Delegate ChunkColumnBeginLoadChunkThread | VintageStory API",
    "keywords": "Delegate ChunkColumnBeginLoadChunkThread Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Triggered immediately when the server loads a chunk column from disk or generates a new one, in the SupplyChunks thread (not the main thread) public delegate void ChunkColumnBeginLoadChunkThread(IServerMapChunk mapChunk, int chunkX, int chunkZ, IWorldChunk[] chunks) Parameters mapChunk IServerMapChunk chunkX int chunkZ int chunks IWorldChunk[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ChunkColumnGenerationDelegate.html": {
    "href": "api/Vintagestory.API.Common.ChunkColumnGenerationDelegate.html",
    "title": "Delegate ChunkColumnGenerationDelegate | VintageStory API",
    "keywords": "Delegate ChunkColumnGenerationDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void ChunkColumnGenerationDelegate(IChunkColumnGenerateRequest request) Parameters request IChunkColumnGenerateRequest Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ChunkColumnLoadedDelegate.html": {
    "href": "api/Vintagestory.API.Common.ChunkColumnLoadedDelegate.html",
    "title": "Delegate ChunkColumnLoadedDelegate | VintageStory API",
    "keywords": "Delegate ChunkColumnLoadedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Triggered when the server loaded a chunk column from disk or generated a new one public delegate void ChunkColumnLoadedDelegate(Vec2i chunkCoord, IWorldChunk[] chunks) Parameters chunkCoord Vec2i chunks IWorldChunk[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ChunkColumnUnloadDelegate.html": {
    "href": "api/Vintagestory.API.Common.ChunkColumnUnloadDelegate.html",
    "title": "Delegate ChunkColumnUnloadDelegate | VintageStory API",
    "keywords": "Delegate ChunkColumnUnloadDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Triggered just before a chunk column gets unloaded public delegate void ChunkColumnUnloadDelegate(Vec3i chunkCoord) Parameters chunkCoord Vec3i chunkX and chunkZ of the column (multiply with chunksize to get position). The Y component is zero Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ChunkDirtyDelegate.html": {
    "href": "api/Vintagestory.API.Common.ChunkDirtyDelegate.html",
    "title": "Delegate ChunkDirtyDelegate | VintageStory API",
    "keywords": "Delegate ChunkDirtyDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll For handling dirty chunks public delegate void ChunkDirtyDelegate(Vec3i chunkCoord, IWorldChunk chunk, EnumChunkDirtyReason reason) Parameters chunkCoord Vec3i chunk IWorldChunk reason EnumChunkDirtyReason Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ClientAnimator.html": {
    "href": "api/Vintagestory.API.Common.ClientAnimator.html",
    "title": "Class ClientAnimator | VintageStory API",
    "keywords": "Class ClientAnimator Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Syncs every frame with entity.ActiveAnimationsByAnimCode, starts and stops animations when necessary and does recursive interpolation on the rotation, position and scale value for each frame, for each element and for each active element this produces always correctly blended animations but is significantly more costly for the cpu when compared to the technique used by the AnimatorBase. Open in GitHub public class ClientAnimator : AnimatorBase, IAnimator Inheritance object AnimatorBase ClientAnimator Implements IAnimator Derived ServerAnimator Inherited Members AnimatorBase.identMat AnimatorBase.logAntiSpam AnimatorBase.activeAnimCount AnimatorBase.RootElements AnimatorBase.RootPoses AnimatorBase.anims AnimatorBase.TransformationMatrices AnimatorBase.TransformationMatricesDefaultPose AnimatorBase.AttachmentPointByCode AnimatorBase.CurAnims AnimatorBase.entityForLogging AnimatorBase.CalculateMatrices AnimatorBase.Matrices AnimatorBase.ActiveAnimationCount AnimatorBase.RunningAnimations AnimatorBase.Animations AnimatorBase.GetAnimationState(string) AnimatorBase.GetAttachmentPointPose(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ClientAnimator(WalkSpeedSupplierDelegate, List<ElementPose>, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>, Action<string>, Action<AnimationSound>) public ClientAnimator(WalkSpeedSupplierDelegate walkSpeedSupplier, List<ElementPose> rootPoses, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, Action<string> onAnimationStoppedListener = null, Action<AnimationSound> onShouldPlaySoundListener = null) Parameters walkSpeedSupplier WalkSpeedSupplierDelegate rootPoses List<ElementPose> animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> onAnimationStoppedListener Action<string> onShouldPlaySoundListener Action<AnimationSound> ClientAnimator(WalkSpeedSupplierDelegate, Animation[], Action<string>, Action<AnimationSound>) public ClientAnimator(WalkSpeedSupplierDelegate walkSpeedSupplier, Animation[] animations, Action<string> onAnimationStoppedListener = null, Action<AnimationSound> onShouldPlaySoundListener = null) Parameters walkSpeedSupplier WalkSpeedSupplierDelegate animations Animation[] onAnimationStoppedListener Action<string> onShouldPlaySoundListener Action<AnimationSound> ClientAnimator(WalkSpeedSupplierDelegate, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>, Action<string>, Action<AnimationSound>) public ClientAnimator(WalkSpeedSupplierDelegate walkSpeedSupplier, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, Action<string> onAnimationStoppedListener = null, Action<AnimationSound> onShouldPlaySoundListener = null) Parameters walkSpeedSupplier WalkSpeedSupplierDelegate animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> onAnimationStoppedListener Action<string> onShouldPlaySoundListener Action<AnimationSound> Fields MaxConcurrentAnimations public static int MaxConcurrentAnimations Field Value int jointsById public Dictionary<int, AnimationJoint> jointsById Field Value Dictionary<int, AnimationJoint> jointsDone protected HashSet<int> jointsDone Field Value HashSet<int> Properties MaxJointId public override int MaxJointId { get; } Property Value int Methods AnimNowActive(RunningAnimation, AnimationMetaData) protected override void AnimNowActive(RunningAnimation anim, AnimationMetaData animData) Parameters anim RunningAnimation animData AnimationMetaData CreateForEntity(Entity, List<ElementPose>, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>) public static ClientAnimator CreateForEntity(Entity entity, List<ElementPose> rootPoses, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById) Parameters entity Entity rootPoses List<ElementPose> animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> Returns ClientAnimator CreateForEntity(Entity, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>) public static ClientAnimator CreateForEntity(Entity entity, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById) Parameters entity Entity animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> Returns ClientAnimator DumpCurrentState() public override string DumpCurrentState() Returns string GetPosebyName(string, StringComparison) public override ElementPose GetPosebyName(string name, StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase) Parameters name string stringComparison StringComparison Returns ElementPose LoadAttachmentPoints(List<ElementPose>) protected virtual void LoadAttachmentPoints(List<ElementPose> cachedPoses) Parameters cachedPoses List<ElementPose> LoadPosesAndAttachmentPoints(ShapeElement[], List<ElementPose>) protected virtual void LoadPosesAndAttachmentPoints(ShapeElement[] elements, List<ElementPose> intoPoses) Parameters elements ShapeElement[] intoPoses List<ElementPose> OnFrame(Dictionary<string, AnimationMetaData>, float) The event fired on each frame. public override void OnFrame(Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode, float dt) Parameters activeAnimationsByAnimCode Dictionary<string, AnimationMetaData> dt float ReloadAttachmentPoints() public override void ReloadAttachmentPoints() calculateMatrices(float) protected override void calculateMatrices(float dt) Parameters dt float initFields() protected virtual void initFields() initMatrices(int) protected virtual void initMatrices(int maxJointId) Parameters maxJointId int"
  },
  "api/Vintagestory.API.Common.ClientChatCommand.html": {
    "href": "api/Vintagestory.API.Common.ClientChatCommand.html",
    "title": "Class ClientChatCommand | VintageStory API",
    "keywords": "Class ClientChatCommand Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A handle for creating client commands. Open in GitHub public class ClientChatCommand : ChatCommand Inheritance object ChatCommand ClientChatCommand Inherited Members ChatCommand.Command ChatCommand.Syntax ChatCommand.Description ChatCommand.RequiredPrivilege ChatCommand.GetDescription() ChatCommand.GetSyntax() ChatCommand.GetHelpMessage() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields handler public ClientChatCommandDelegate handler Field Value ClientChatCommandDelegate Methods CallHandler(IPlayer, int, CmdArgs) The call handler for the command. public override void CallHandler(IPlayer player, int groupId, CmdArgs args) Parameters player IPlayer The player calling the command. groupId int The groupID of the player. args CmdArgs The arguments of the command."
  },
  "api/Vintagestory.API.Common.ClientChatCommandDelegate.html": {
    "href": "api/Vintagestory.API.Common.ClientChatCommandDelegate.html",
    "title": "Delegate ClientChatCommandDelegate | VintageStory API",
    "keywords": "Delegate ClientChatCommandDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void ClientChatCommandDelegate(int groupId, CmdArgs args) Parameters groupId int args CmdArgs Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Climate.html": {
    "href": "api/Vintagestory.API.Common.Climate.html",
    "title": "Class Climate | VintageStory API",
    "keywords": "Class Climate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class Climate Inheritance object Climate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Sealevel This value is update once the config is loaded and the Sealevel is known public static int Sealevel Field Value int TemperatureScaleConversion Temperature conversion factor used to get real temperatures from the climate's temperature int Used to convert from real temperature range float [-50 , 40] to int [0 , 255] public static float TemperatureScaleConversion Field Value float Methods DescaleTemperature(float) Convert from real temperature range float [-50 , 40] to int [0 , 255] public static int DescaleTemperature(float temperature) Parameters temperature float Returns int GetAdjustedTemperature(int, int) Convert from int [0 , 255] range to real temperature range int [-20 , 40] The distToSealevel/1.5f is also hardcoded in shaderincluds/colormap.vsh public static int GetAdjustedTemperature(int unscaledTemp, int distToSealevel) Parameters unscaledTemp int distToSealevel int Returns int GetFertility(int, float, float) public static int GetFertility(int rain, float scaledTemp, float posYRel) Parameters rain int scaledTemp float posYRel float Returns int GetFertilityFromUnscaledTemp(int, int, float) public static int GetFertilityFromUnscaledTemp(int rain, int unscaledTemp, float posYRel) Parameters rain int unscaledTemp int posYRel float Returns int GetRainFall(int, int) public static int GetRainFall(int rainfall, int y) Parameters rainfall int y int Returns int GetScaledAdjustedTemperature(int, int) Convert from int [0 , 255] range to real temperature range float [-20 , 40] The distToSealevel/1.5f is also hardcoded in shaderincluds/colormap.vsh public static int GetScaledAdjustedTemperature(int unscaledTemp, int distToSealevel) Parameters unscaledTemp int distToSealevel int Returns int GetScaledAdjustedTemperatureFloat(int, int) Convert from int [0 , 255] range to real temperature range float [-20 , 40] The distToSealevel/1.5f is also hardcoded in shaderincluds/colormap.vsh public static float GetScaledAdjustedTemperatureFloat(int unscaledTemp, int distToSealevel) Parameters unscaledTemp int distToSealevel int Returns float GetScaledAdjustedTemperatureFloatClient(int, int) Convert from int [0 , 255] range to real temperature range float [-50 , 40] The distToSealevel/1.5f is also hardcoded in shaderincluds/colormap.vsh This exists since the client had a different value for min public static float GetScaledAdjustedTemperatureFloatClient(int unscaledTemp, int distToSealevel) Parameters unscaledTemp int distToSealevel int Returns float"
  },
  "api/Vintagestory.API.Common.ClimateCondition.html": {
    "href": "api/Vintagestory.API.Common.ClimateCondition.html",
    "title": "Class ClimateCondition | VintageStory API",
    "keywords": "Class ClimateCondition Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ClimateCondition Inheritance object ClimateCondition Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Fertility Nomalized value between 0..1 public float Fertility Field Value float ForestDensity Nomalized value between 0..1 public float ForestDensity Field Value float GeologicActivity Nomalized value between 0..1. Static value determined on world generation public float GeologicActivity Field Value float RainCloudOverlay public float RainCloudOverlay Field Value float Rainfall Nomalized value between 0..1. When loading the now values, this is set to the current precipitation value, otherwise to \"yearly averages\" or the values generated during worldgen public float Rainfall Field Value float ShrubDensity Nomalized value between 0..1 public float ShrubDensity Field Value float Temperature Between -20 and +40 degrees public float Temperature Field Value float WorldGenTemperature If you read the now values, you can still get the world gen temp from this value public float WorldGenTemperature Field Value float WorldgenRainfall If you read the now values, you can still get the world gen rain fall from this value. Between 0..1 public float WorldgenRainfall Field Value float Methods SetLerped(ClimateCondition, ClimateCondition, float) public void SetLerped(ClimateCondition left, ClimateCondition right, float w) Parameters left ClimateCondition right ClimateCondition w float"
  },
  "api/Vintagestory.API.Common.CmdArgs.html": {
    "href": "api/Vintagestory.API.Common.CmdArgs.html",
    "title": "Class CmdArgs | VintageStory API",
    "keywords": "Class CmdArgs Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The arguments from a client or sever command Open in GitHub public class CmdArgs Inheritance object CmdArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CmdArgs() Creates a new instance of the CmdArgs util with no arguments public CmdArgs() CmdArgs(string) Creates a new instance of the CmdArgs util public CmdArgs(string joinedargs) Parameters joinedargs string CmdArgs(string[]) Creates a new instance of the CmdArgs util public CmdArgs(string[] args) Parameters args string[] Properties this[int] Returns the n-th arugment public string this[int index] { get; set; } Parameters index int Property Value string Length Amount of arguments passed public int Length { get; } Property Value int Methods AppendSingle(string) Adds an arg to the end public void AppendSingle(string arg) Parameters arg string Clone() public CmdArgs Clone() Returns CmdArgs PeekChar(char?) Returns the first char of the first argument public char? PeekChar(char? defaultValue = null) Parameters defaultValue char? Returns char? PeekWord(string) Removes the first argument and returns it public string PeekWord(string defaultValue = null) Parameters defaultValue string Returns string PopAll() Returns all remaining arguments as single merged string, concatenated with spaces public string PopAll() Returns string PopBool(bool?, string) Tries to retrieve arg at given index as boolean, or null if not enough arguments or not an integer 'true', 'yes' and '1' will all be interpreted as true. Parameter trueAlias (with default value 'on') allows one additional word to be used to signify true. Anything else will return false. public bool? PopBool(bool? defaultValue = null, string trueAlias = \"on\") Parameters defaultValue bool? trueAlias string Returns bool? PopChar(char?) Remove the first character from the first argument and returns it public char? PopChar(char? defaultValue = null) Parameters defaultValue char? Returns char? PopCodeBlock(char, char, out string) public string PopCodeBlock(char blockOpenChar, char blockCloseChar, out string parseErrorMsg) Parameters blockOpenChar char blockCloseChar char parseErrorMsg string Returns string PopDouble(double?) Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer public double? PopDouble(double? defaultValue = null) Parameters defaultValue double? Returns double? PopEnum<T>(T) Tries to retrieve arg at given index as enum value or default if not enough arguments or not part of the enum public T PopEnum<T>(T defaultValue = default) Parameters defaultValue T Returns T Type Parameters T PopFlexiblePos(Vec3d, Vec3d) Retrieves a player position with following syntax: [coord] [coord] [coord] whereas [coord] may be ~[decimal] or =[decimal] or [decimal] ~ denotes a position relative to the player = denotes an absolute position no prefix denots a position relative to the map middle public Vec3d PopFlexiblePos(Vec3d playerPos, Vec3d mapMiddle) Parameters playerPos Vec3d mapMiddle Vec3d Returns Vec3d PopFlexiblePos2D(Vec3d, Vec3d) Retrieves a player position with following syntax: [coord] [coord] [coord] whereas [coord] may be ~[decimal] or =[decimal] or [decimal] ~ denotes a position relative to the player = denotes an absolute position no prefix denots a position relative to the map middle public Vec2i PopFlexiblePos2D(Vec3d playerPos, Vec3d mapMiddle) Parameters playerPos Vec3d mapMiddle Vec3d Returns Vec2i PopFloat(float?) Tries to retrieve arg at given index as float, or null if not enough arguments or not a float public float? PopFloat(float? defaultValue = null) Parameters defaultValue float? Returns float? PopInt(int?) Tries to retrieve arg at given index as int, or null if not enough arguments or not an integer public int? PopInt(int? defaultValue = null) Parameters defaultValue int? Returns int? PopLong(long?) Tries to retrieve arg at given index as long, or null if not enough arguments or not a long public long? PopLong(long? defaultValue = null) Parameters defaultValue long? Returns long? PopUntil(char) public string PopUntil(char endChar) Parameters endChar char Returns string PopVec3d(Vec3d) public Vec3d PopVec3d(Vec3d defaultValue = null) Parameters defaultValue Vec3d Returns Vec3d PopVec3i(Vec3i) Tries to retrieve 3 int coordinates from the next 3 arguments public Vec3i PopVec3i(Vec3i defaultValue = null) Parameters defaultValue Vec3i Returns Vec3i PopWord(string) Removes the first argument and returns it, scans until it encounters a white space public string PopWord(string defaultValue = null) Parameters defaultValue string Returns string Push(string) public void Push(string joinedargs) Parameters joinedargs string PushSingle(string) Adds an arg to the beginning public void PushSingle(string arg) Parameters arg string"
  },
  "api/Vintagestory.API.Common.CollectibleArgParser.html": {
    "href": "api/Vintagestory.API.Common.CollectibleArgParser.html",
    "title": "Class CollectibleArgParser | VintageStory API",
    "keywords": "Class CollectibleArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class CollectibleArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase CollectibleArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CollectibleArgParser(string, ICoreAPI, EnumItemClass, bool) public CollectibleArgParser(string argName, ICoreAPI api, EnumItemClass itemclass, bool isMandatoryArg) Parameters argName string api ICoreAPI itemclass EnumItemClass isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.CollectibleBehavior.html": {
    "href": "api/Vintagestory.API.Common.CollectibleBehavior.html",
    "title": "Class CollectibleBehavior | VintageStory API",
    "keywords": "Class CollectibleBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A behavior object which can be added to any collectible. See the derived types for a list of documented collectible behaviors. Open in GitHub [DocumentAsJson] public abstract class CollectibleBehavior Inheritance object CollectibleBehavior Derived BlockBehavior Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CollectibleBehavior(CollectibleObject) public CollectibleBehavior(CollectibleObject collObj) Parameters collObj CollectibleObject Fields collObj The collectible object (item or block) for this behavior instance. public CollectibleObject collObj Field Value CollectibleObject propertiesAtString The properties of this block behavior. public string propertiesAtString Field Value string Properties ClientSideOptional If true, this behavior is not required on the client. This is here because copygirl doesn't stop asking for it. Probably breaks things. If it breaks things, complain to copygirl please :p public virtual bool ClientSideOptional { get; } Property Value bool Methods GetHeldInteractionHelp(ItemSlot, ref EnumHandling) Interaction help that is shown when selecting the item in the hotbar slot public virtual WorldInteraction[] GetHeldInteractionHelp(ItemSlot inSlot, ref EnumHandling handling) Parameters inSlot ItemSlot handling EnumHandling Returns WorldInteraction[] GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) public virtual void GetHeldItemInfo(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, bool withDebugInfo) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor withDebugInfo bool GetHeldItemName(StringBuilder, ItemStack) public virtual void GetHeldItemName(StringBuilder sb, ItemStack itemStack) Parameters sb StringBuilder itemStack ItemStack GetHeldReadyAnimation(ItemSlot, Entity, EnumHand, ref EnumHandling) public virtual string GetHeldReadyAnimation(ItemSlot activeHotbarSlot, Entity forEntity, EnumHand hand, ref EnumHandling bhHandling) Parameters activeHotbarSlot ItemSlot forEntity Entity hand EnumHand bhHandling EnumHandling Returns string GetHeldTpHitAnimation(ItemSlot, Entity, ref EnumHandling) public virtual string GetHeldTpHitAnimation(ItemSlot slot, Entity byEntity, ref EnumHandling bhHandling) Parameters slot ItemSlot byEntity Entity bhHandling EnumHandling Returns string GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand, ref EnumHandling) public virtual string GetHeldTpIdleAnimation(ItemSlot activeHotbarSlot, Entity forEntity, EnumHand hand, ref EnumHandling bhHandling) Parameters activeHotbarSlot ItemSlot forEntity Entity hand EnumHand bhHandling EnumHandling Returns string GetHeldTpUseAnimation(ItemSlot, Entity, ref EnumHandling) public virtual string GetHeldTpUseAnimation(ItemSlot activeHotbarSlot, Entity forEntity, ref EnumHandling bhHandling) Parameters activeHotbarSlot ItemSlot forEntity Entity bhHandling EnumHandling Returns string GetStorageFlags(ItemStack, ref EnumHandling) public virtual EnumItemStorageFlags GetStorageFlags(ItemStack itemstack, ref EnumHandling handling) Parameters itemstack ItemStack handling EnumHandling Returns EnumItemStorageFlags GetToolMode(ItemSlot, IPlayer, BlockSelection) Should return the current items tool mode. public virtual int GetToolMode(ItemSlot slot, IPlayer byPlayer, BlockSelection blockSelection) Parameters slot ItemSlot byPlayer IPlayer blockSelection BlockSelection Returns int GetToolModes(ItemSlot, IClientPlayer, BlockSelection) Called when the tool mode (F) key is pressed to generate the GUI public virtual SkillItem[] GetToolModes(ItemSlot slot, IClientPlayer forPlayer, BlockSelection blockSel) Parameters slot ItemSlot forPlayer IClientPlayer blockSel BlockSelection Returns SkillItem[] Initialize(JsonObject) Called right after the block behavior was created, must call base method public virtual void Initialize(JsonObject properties) Parameters properties JsonObject OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) Called when the collectible is rendered in hands, inventory or on the ground public virtual void OnBeforeRender(ICoreClientAPI capi, ItemStack itemstack, EnumItemRenderTarget target, ref ItemRenderInfo renderinfo) Parameters capi ICoreClientAPI itemstack ItemStack target EnumItemRenderTarget renderinfo ItemRenderInfo OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int, ref EnumHandling) Player is holding this collectible and breaks the targeted block public virtual float OnBlockBreaking(IPlayer player, BlockSelection blockSel, ItemSlot itemslot, float remainingResistance, float dt, int counter, ref EnumHandling handled) Parameters player IPlayer blockSel BlockSelection itemslot ItemSlot remainingResistance float dt float counter int handled EnumHandling Returns float OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float, ref EnumHandling) Player has broken a block while holding this collectible. Return false if you want to cancel the block break event. public virtual bool OnBlockBrokenWith(IWorldAccessor world, Entity byEntity, ItemSlot itemslot, BlockSelection blockSel, float dropQuantityMultiplier, ref EnumHandling bhHandling) Parameters world IWorldAccessor byEntity Entity itemslot ItemSlot blockSel BlockSelection dropQuantityMultiplier float bhHandling EnumHandling Returns bool OnCreatedByCrafting(ItemSlot[], ItemSlot, ref EnumHandling) [Obsolete(\"Use OnCreatedByCrafting(ItemSlot[] allInputslots, ItemSlot outputSlot, GridRecipe byRecipe, ref EnumHandling bhHandling) instead\")] public virtual void OnCreatedByCrafting(ItemSlot[] allInputslots, ItemSlot outputSlot, ref EnumHandling bhHandling) Parameters allInputslots ItemSlot[] outputSlot ItemSlot bhHandling EnumHandling OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe, ref EnumHandling) public virtual void OnCreatedByCrafting(ItemSlot[] allInputslots, ItemSlot outputSlot, GridRecipe byRecipe, ref EnumHandling bhHandling) Parameters allInputslots ItemSlot[] outputSlot ItemSlot byRecipe GridRecipe bhHandling EnumHandling OnDamageItem(IWorldAccessor, Entity, ItemSlot, ref int, ref EnumHandling) Called when item is damaged via 'CollectibleObject.DamageItem' public virtual void OnDamageItem(IWorldAccessor world, Entity byEntity, ItemSlot itemslot, ref int amount, ref EnumHandling bhHandling) Parameters world IWorldAccessor byEntity Entity itemslot ItemSlot amount int bhHandling EnumHandling OnGetMaxDurability(ItemStack, ref EnumHandling) Adds return value to resulted durability if 'bhHandling' is not equal to 'PassThrough'. If 'bhHandling' is not set to 'PreventDefault', standard item durability will be added to result. public virtual int OnGetMaxDurability(ItemStack itemstack, ref EnumHandling bhHandling) Parameters itemstack ItemStack bhHandling EnumHandling Returns int Additional durability OnGetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer, ref EnumHandling) Multiplies resulted mining speed of the item by return value if 'bhHandling' is not equal to 'PassThrough'. If 'bhHandling' is not set to 'PreventDefault', the mining speed will be multiplied by standard item mining speed. public virtual float OnGetMiningSpeed(IItemStack itemstack, BlockSelection blockSel, Block block, IPlayer forPlayer, ref EnumHandling bhHandling) Parameters itemstack IItemStack blockSel BlockSelection block Block forPlayer IPlayer bhHandling EnumHandling Returns float Mining speed multiplier OnGetRemainingDurability(ItemStack, ref EnumHandling) Adds return value to resulted durability if 'bhHandling' is not equal to 'PassThrough'. If 'bhHandling' is not set to 'PreventDefault', standard item durability will be added to result. public virtual int OnGetRemainingDurability(ItemStack itemstack, ref EnumHandling bhHandling) Parameters itemstack ItemStack bhHandling EnumHandling Returns int Additional durability OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) public virtual void OnHandbookRecipeRender(ICoreClientAPI capi, GridRecipe recipe, ItemSlot slot, double x, double y, double z, double size) Parameters capi ICoreClientAPI recipe GridRecipe slot ItemSlot x double y double z double size double OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason, ref EnumHandling) When the player has canceled a custom attack action. Return false to deny action cancellation. public virtual bool OnHeldAttackCancel(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSelection, EntitySelection entitySel, EnumItemUseCancelReason cancelReason, ref EnumHandling handling) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSelection BlockSelection entitySel EntitySelection cancelReason EnumItemUseCancelReason handling EnumHandling Returns bool OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling, ref EnumHandling) When the player has begun using this item for attacking (left mouse click). Return true to play a custom action. public virtual void OnHeldAttackStart(ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, ref EnumHandHandling handHandling, ref EnumHandling handling) Parameters slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection handHandling EnumHandHandling handling EnumHandling OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) Called continously when a custom attack action is playing. Return false to stop the action. public virtual bool OnHeldAttackStep(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSelection, EntitySelection entitySel, ref EnumHandling handling) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSelection BlockSelection entitySel EntitySelection handling EnumHandling Returns bool OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) Called when a custom attack action is finished public virtual void OnHeldAttackStop(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSelection, EntitySelection entitySel, ref EnumHandling handling) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSelection BlockSelection entitySel EntitySelection handling EnumHandling OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason, ref EnumHandling) When the player released the right mouse button. Return false to deny the cancellation (= will keep using the item until OnHeldInteractStep returns false). public virtual bool OnHeldInteractCancel(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, EnumItemUseCancelReason cancelReason, ref EnumHandling handled) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection cancelReason EnumItemUseCancelReason handled EnumHandling Returns bool OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling, ref EnumHandling) Called when the player right clicks while holding this block/item in his hands public virtual void OnHeldInteractStart(ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, bool firstEvent, ref EnumHandHandling handHandling, ref EnumHandling handling) Parameters slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection firstEvent bool handHandling EnumHandHandling Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server. handling EnumHandling Set to PreventDefault to not try eating the item, set to PreventSubsequent to ignore any subsequent calls to OnHeldInteractStart() of other behaviors OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) Called every frame while the player is using this collectible public virtual bool OnHeldInteractStep(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, ref EnumHandling handling) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection handling EnumHandling Returns bool OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) Called when the player successfully completed the using action, not called when successfully cancelled public virtual void OnHeldInteractStop(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, ref EnumHandling handling) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection handling EnumHandling OnLoaded(ICoreAPI) Server Side: Called once the collectible has been registered Client Side: Called once the collectible has been loaded from server packet public virtual void OnLoaded(ICoreAPI api) Parameters api ICoreAPI OnSetDurability(ItemStack, ref int, ref EnumHandling) Called when item durability is set via 'CollectibleObject.SetDurability' public virtual void OnSetDurability(ItemStack itemstack, ref int amount, ref EnumHandling bhHandling) Parameters itemstack ItemStack amount int bhHandling EnumHandling OnTransitionNow(ItemSlot, TransitionableProperties, ref EnumHandling) Called when any of its TransitionableProperties causes the stack to transition to another stack. Default behavior is to return props.TransitionedStack.ResolvedItemstack and set the stack size according to the transition rtio public virtual ItemStack OnTransitionNow(ItemSlot slot, TransitionableProperties props, ref EnumHandling handling) Parameters slot ItemSlot props TransitionableProperties handling EnumHandling Returns ItemStack The stack it should transition into OnUnloaded(ICoreAPI) public virtual void OnUnloaded(ICoreAPI api) Parameters api ICoreAPI SetToolMode(ItemSlot, IPlayer, BlockSelection, int) Should set given toolmode public virtual void SetToolMode(ItemSlot slot, IPlayer byPlayer, BlockSelection blockSelection, int toolMode) Parameters slot ItemSlot byPlayer IPlayer blockSelection BlockSelection toolMode int"
  },
  "api/Vintagestory.API.Common.CollectibleBehaviorDelegate.html": {
    "href": "api/Vintagestory.API.Common.CollectibleBehaviorDelegate.html",
    "title": "Delegate CollectibleBehaviorDelegate | VintageStory API",
    "keywords": "Delegate CollectibleBehaviorDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void CollectibleBehaviorDelegate(CollectibleBehavior behavior, ref EnumHandling handling) Parameters behavior CollectibleBehavior handling EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.CollectibleObject.html": {
    "href": "api/Vintagestory.API.Common.CollectibleObject.html",
    "title": "Class CollectibleObject | VintageStory API",
    "keywords": "Class CollectibleObject Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Contains all properties shared by Blocks and Items Open in GitHub public abstract class CollectibleObject : RegistryObject Inheritance object RegistryObject CollectibleObject Derived Block Item Inherited Members RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AttackPower How much damage this collectible deals when used as a weapon public float AttackPower Field Value float AttackRange Until how for away can you attack entities using this collectibe public float AttackRange Field Value float Attributes Custom Attributes that's always assiociated with this item public JsonObject Attributes Field Value JsonObject CollectibleBehaviors Modifiers that can alter the behavior of the item or block, mostly for held interaction public CollectibleBehavior[] CollectibleBehaviors Field Value CollectibleBehavior[] CombustibleProps Information about the burnable states public CombustibleProperties CombustibleProps Field Value CombustibleProperties CreativeInventoryStacks If you want to add itemstacks with custom attributes to the creative inventory, add them to this list public CreativeTabAndStackList[] CreativeInventoryStacks Field Value CreativeTabAndStackList[] CreativeInventoryTabs List of creative tabs in which this collectible should appear in public string[] CreativeInventoryTabs Field Value string[] CrushingProps If set, the collectible can be crushed into something else public CrushingProperties CrushingProps Field Value CrushingProperties DamagedBy From which damage sources does the item takes durability damage public EnumItemDamageSource[] DamagedBy Field Value EnumItemDamageSource[] DefaultSize public static readonly Size3f DefaultSize Field Value Size3f Dimensions Physical size of this collectible when held or (notionally) in a container. 0.5 x 0.5 x 0.5 meters by default. Note, if all three dimensions are set to zero, the default will be used. public Size3f Dimensions Field Value Size3f Durability How many uses does this collectible has when being used. Item disappears at durability 0 public int Durability Field Value int FpHandTransform Used for scaling, rotation or offseting the block when rendered in the first person mode hand public ModelTransform FpHandTransform Field Value ModelTransform GrindingProps If set, the collectible can be ground into something else public GrindingProperties GrindingProps Field Value GrindingProperties GroundTransform Used for scaling, rotation or offseting the rendered as a dropped item on the ground public ModelTransform GroundTransform Field Value ModelTransform GuiTransform Used for scaling, rotation or offseting the block when rendered in guis public ModelTransform GuiTransform Field Value ModelTransform HeldLeftReadyAnimation public string HeldLeftReadyAnimation Field Value string HeldLeftTpIdleAnimation The animation to play in 3rd person mod when holding this collectible in the left hand public string HeldLeftTpIdleAnimation Field Value string HeldPriorityInteract If true, when the player holds the sneak key and right clicks with this item in hand, calls OnHeldInteractStart first. Without it, the order is reversed. Takes precedence over priority interact placed blocks. public bool HeldPriorityInteract Field Value bool HeldRightReadyAnimation public string HeldRightReadyAnimation Field Value string HeldRightTpIdleAnimation The animation to play in 3rd person mod when holding this collectible in the right hand public string HeldRightTpIdleAnimation Field Value string HeldSounds public HeldSounds HeldSounds Field Value HeldSounds HeldTpHitAnimation The animation to play in 3rd person mod when hitting with this collectible public string HeldTpHitAnimation Field Value string HeldTpUseAnimation The animation to play in 3rd person mod when using this collectible public string HeldTpUseAnimation Field Value string LightHsv For light emitting collectibles: hue, saturation and brightness value public ThreeBytes LightHsv Field Value ThreeBytes LiquidSelectable When true, liquids become selectable to the player when being held in hands public bool LiquidSelectable Field Value bool MaterialDensity Determines on whether an object floats on liquids or not. Water has a density of 1000 public int MaterialDensity Field Value int MatterState Liquids are handled and rendered differently than solid blocks. public EnumMatterState MatterState Field Value EnumMatterState MaxStackSize Max amount of collectible that one default inventory slot can hold public int MaxStackSize Field Value int MiningSpeed Modifies how fast the player can break a block when holding this item public Dictionary<EnumBlockMaterial, float> MiningSpeed Field Value Dictionary<EnumBlockMaterial, float> NutritionProps Information about the nutrition states public FoodNutritionProperties NutritionProps Field Value FoodNutritionProperties ParticleProperties Particles that should spawn in regular intervals from this block or item when held in hands public AdvancedParticleProperties[] ParticleProperties Field Value AdvancedParticleProperties[] RenderAlphaTest Alpha test value for rendering in gui, fp hand, tp hand or on the ground public float RenderAlphaTest Field Value float StorageFlags Determines in which kind of bags the item can be stored in public EnumItemStorageFlags StorageFlags Field Value EnumItemStorageFlags Tool If set, this item will be classified as given tool public EnumTool? Tool Field Value EnumTool? ToolTier What tier this block can mine when held in hands public int ToolTier Field Value int TopMiddlePos The origin point from which particles are being spawned public Vec3f TopMiddlePos Field Value Vec3f TpHandTransform Used for scaling, rotation or offseting the block when rendered in the third person mode hand public ModelTransform TpHandTransform Field Value ModelTransform TpOffHandTransform Used for scaling, rotation or offseting the block when rendered in the third person mode offhand public ModelTransform TpOffHandTransform Field Value ModelTransform TransitionableProps Information about the transitionable states public TransitionableProperties[] TransitionableProps Field Value TransitionableProperties[] api The api object, assigned during OnLoaded protected ICoreAPI api Field Value ICoreAPI Properties Id The block or item id public abstract int Id { get; } Property Value int IsMissing This value is set the the BlockId or ItemId-Remapper if it encounters a block/item in the savegame, but no longer exists as a loaded block/item public bool IsMissing { get; set; } Property Value bool ItemClass Block or Item? public abstract EnumItemClass ItemClass { get; } Property Value EnumItemClass MiningTier [Obsolete(\"Use tool tier\")] public int MiningTier { get; set; } Property Value int Methods AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor) public virtual float AppendPerishableInfoText(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor Returns float AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor, TransitionState, bool) protected virtual float AppendPerishableInfoText(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, TransitionState state, bool nowSpoiling) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor state TransitionState nowSpoiling bool Returns float CanBePlacedInto(ItemStack, ItemSlot) Should return true if the stack can be placed into given slot public virtual bool CanBePlacedInto(ItemStack stack, ItemSlot slot) Parameters stack ItemStack slot ItemSlot Returns bool CanSmelt(IWorldAccessor, ISlotProvider, ItemStack, ItemStack) Should return true if this collectible is smeltable in an open fire public virtual bool CanSmelt(IWorldAccessor world, ISlotProvider cookingSlotsProvider, ItemStack inputStack, ItemStack outputStack) Parameters world IWorldAccessor cookingSlotsProvider ISlotProvider inputStack ItemStack outputStack ItemStack Returns bool CanSpoil(ItemStack) Returns true if the stack can spoil public virtual bool CanSpoil(ItemStack itemstack) Parameters itemstack ItemStack Returns bool CarryOverFreshness(ICoreAPI, ItemSlot, ItemStack, TransitionableProperties) public static void CarryOverFreshness(ICoreAPI api, ItemSlot inputSlot, ItemStack outputStack, TransitionableProperties perishProps) Parameters api ICoreAPI inputSlot ItemSlot outputStack ItemStack perishProps TransitionableProperties CarryOverFreshness(ICoreAPI, ItemSlot[], ItemStack[], TransitionableProperties) public static void CarryOverFreshness(ICoreAPI api, ItemSlot[] inputSlots, ItemStack[] outStacks, TransitionableProperties perishProps) Parameters api ICoreAPI inputSlots ItemSlot[] outStacks ItemStack[] perishProps TransitionableProperties ConsumeCraftingIngredients(ItemSlot[], ItemSlot, GridRecipe) Called after the player has taken out the item from the output slot public virtual bool ConsumeCraftingIngredients(ItemSlot[] slots, ItemSlot outputSlot, GridRecipe matchingRecipe) Parameters slots ItemSlot[] outputSlot ItemSlot matchingRecipe GridRecipe Returns bool true to prevent default ingredient consumption DamageItem(IWorldAccessor, Entity, ItemSlot, int) Causes the item to be damaged. Will play a breaking sound and removes the itemstack if no more durability is left public virtual void DamageItem(IWorldAccessor world, Entity byEntity, ItemSlot itemslot, int amount = 1) Parameters world IWorldAccessor byEntity Entity itemslot ItemSlot amount int Amount of damage DoSmelt(IWorldAccessor, ISlotProvider, ItemSlot, ItemSlot) Transform the item to it's smelted variant public virtual void DoSmelt(IWorldAccessor world, ISlotProvider cookingSlotsProvider, ItemSlot inputSlot, ItemSlot outputSlot) Parameters world IWorldAccessor cookingSlotsProvider ISlotProvider inputSlot ItemSlot outputSlot ItemSlot Equals(ItemStack, ItemStack, params string[]) Should return true if given stacks are equal, ignoring their stack size. public virtual bool Equals(ItemStack thisStack, ItemStack otherStack, params string[] ignoreAttributeSubTrees) Parameters thisStack ItemStack otherStack ItemStack ignoreAttributeSubTrees string[] Returns bool GeldHeldFpHitAnimation(ItemSlot, Entity) Not implemented yet [Obsolete] public virtual ModelTransformKeyFrame[] GeldHeldFpHitAnimation(ItemSlot slot, Entity byEntity) Parameters slot ItemSlot byEntity Entity Returns ModelTransformKeyFrame[] GetAttackPower(IItemStack) The amount of damage dealt when used as a weapon public virtual float GetAttackPower(IItemStack withItemStack) Parameters withItemStack IItemStack Returns float GetAttackRange(IItemStack) The the attack range when used as a weapon public virtual float GetAttackRange(IItemStack withItemStack) Parameters withItemStack IItemStack Returns float GetBehavior(Type) Returns the blocks behavior of given type, if it has such behavior public CollectibleBehavior GetBehavior(Type type) Parameters type Type Returns CollectibleBehavior GetBehavior(CollectibleBehavior[], Type, bool) protected virtual CollectibleBehavior GetBehavior(CollectibleBehavior[] fromList, Type type, bool withInheritance) Parameters fromList CollectibleBehavior[] type Type withInheritance bool Returns CollectibleBehavior GetBehavior<T>() Returns the blocks behavior of given type, if it has such behavior public T GetBehavior<T>() where T : CollectibleBehavior Returns T Type Parameters T GetCollectibleBehavior(Type, bool) Returns the blocks behavior of given type, if it has such behavior public CollectibleBehavior GetCollectibleBehavior(Type type, bool withInheritance) Parameters type Type withInheritance bool Returns CollectibleBehavior GetCollectibleBehavior<T>(bool) public T GetCollectibleBehavior<T>(bool withInheritance) where T : CollectibleBehavior Parameters withInheritance bool Returns T Type Parameters T GetCollectibleInterface<T>() Returns instance of class that implements this interface in the following order Collectible (returns itself) CollectibleBlockBehavior (returns on of our own behavior) public virtual T GetCollectibleInterface<T>() where T : class Returns T Type Parameters T GetDurability(IItemStack) [Obsolete(\"Use GetMaxDurability instead\")] public virtual int GetDurability(IItemStack itemstack) Parameters itemstack IItemStack Returns int GetHandBookStacks(ICoreClientAPI) public virtual List<ItemStack> GetHandBookStacks(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns List<ItemStack> GetHashCode() For blocks and items, the hashcode is the id - useful when building HashSets public override int GetHashCode() Returns int GetHeldInteractionHelp(ItemSlot) Interaction help thats displayed above the hotbar, when the player puts this item/block in his active hand slot public virtual WorldInteraction[] GetHeldInteractionHelp(ItemSlot inSlot) Parameters inSlot ItemSlot Returns WorldInteraction[] GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) Called by the inventory system when you hover over an item stack. This is the text that is getting displayed. public virtual void GetHeldItemInfo(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, bool withDebugInfo) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor withDebugInfo bool GetHeldItemName(ItemStack) Called by the inventory system when you hover over an item stack. This is the item stack name that is getting displayed. public virtual string GetHeldItemName(ItemStack itemStack) Parameters itemStack ItemStack Returns string GetHeldReadyAnimation(ItemSlot, Entity, EnumHand) Called when an entity holds this item in hands in 3rd person mode public virtual string GetHeldReadyAnimation(ItemSlot activeHotbarSlot, Entity forEntity, EnumHand hand) Parameters activeHotbarSlot ItemSlot forEntity Entity hand EnumHand Returns string GetHeldTpHitAnimation(ItemSlot, Entity) Called when an entity uses this item to hit something in 3rd person mode public virtual string GetHeldTpHitAnimation(ItemSlot slot, Entity byEntity) Parameters slot ItemSlot byEntity Entity Returns string GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand) Called when an entity holds this item in hands in 3rd person mode public virtual string GetHeldTpIdleAnimation(ItemSlot activeHotbarSlot, Entity forEntity, EnumHand hand) Parameters activeHotbarSlot ItemSlot forEntity Entity hand EnumHand Returns string GetHeldTpUseAnimation(ItemSlot, Entity) Called when an entity holds this item in hands in 3rd person mode public virtual string GetHeldTpUseAnimation(ItemSlot activeHotbarSlot, Entity forEntity) Parameters activeHotbarSlot ItemSlot forEntity Entity Returns string GetItemDamageColor(ItemStack) Returns a hardcoded rgb color (green->yellow->red) that is representative for its remaining durability vs total durability public virtual int GetItemDamageColor(ItemStack itemstack) Parameters itemstack ItemStack Returns int GetItemDescText() public virtual string GetItemDescText() Returns string GetLightHsv(IBlockAccessor, BlockPos, ItemStack) Should return the light HSV values. Warning: This method is likely to get called in a background thread. Please make sure your code in here is thread safe. public virtual byte[] GetLightHsv(IBlockAccessor blockAccessor, BlockPos pos, ItemStack stack = null) Parameters blockAccessor IBlockAccessor pos BlockPos May be null stack ItemStack Set if its an itemstack for which the engine wants to check the light level Returns byte[] GetMaxDurability(ItemStack) Returns the items total durability public virtual int GetMaxDurability(ItemStack itemstack) Parameters itemstack ItemStack Returns int GetMeltingDuration(IWorldAccessor, ISlotProvider, ItemSlot) If the item is smeltable, this is the time it takes to smelt at smelting point public virtual float GetMeltingDuration(IWorldAccessor world, ISlotProvider cookingSlotsProvider, ItemSlot inputSlot) Parameters world IWorldAccessor cookingSlotsProvider ISlotProvider inputSlot ItemSlot Returns float GetMeltingPoint(IWorldAccessor, ISlotProvider, ItemSlot) If the item is smeltable, this is its melting point public virtual float GetMeltingPoint(IWorldAccessor world, ISlotProvider cookingSlotsProvider, ItemSlot inputSlot) Parameters world IWorldAccessor cookingSlotsProvider ISlotProvider inputSlot ItemSlot Returns float GetMergableQuantity(ItemStack, ItemStack, EnumMergePriority) Should return the max. number of items that can be placed from sourceStack into the sinkStack public virtual int GetMergableQuantity(ItemStack sinkStack, ItemStack sourceStack, EnumMergePriority priority) Parameters sinkStack ItemStack sourceStack ItemStack priority EnumMergePriority Returns int GetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer) Called every game tick when the player breaks a block with this item in his hands. Returns the mining speed for given block. public virtual float GetMiningSpeed(IItemStack itemstack, BlockSelection blockSel, Block block, IPlayer forPlayer) Parameters itemstack IItemStack blockSel BlockSelection block Block forPlayer IPlayer Returns float GetNutritionProperties(IWorldAccessor, ItemStack, Entity) Should return the nutrition properties of the item/block public virtual FoodNutritionProperties GetNutritionProperties(IWorldAccessor world, ItemStack itemstack, Entity forEntity) Parameters world IWorldAccessor itemstack ItemStack forEntity Entity Returns FoodNutritionProperties GetRandomColor(ICoreClientAPI, ItemStack) Should return a random pixel within the items/blocks texture public virtual int GetRandomColor(ICoreClientAPI capi, ItemStack stack) Parameters capi ICoreClientAPI stack ItemStack Returns int GetRemainingDurability(ItemStack) public virtual int GetRemainingDurability(ItemStack itemstack) Parameters itemstack ItemStack Returns int GetStorageFlags(ItemStack) Should return in which storage containers this item can be placed in public virtual EnumItemStorageFlags GetStorageFlags(ItemStack itemstack) Parameters itemstack ItemStack Returns EnumItemStorageFlags GetTemperature(IWorldAccessor, ItemStack) Returns the stacks item temperature in degree celsius public virtual float GetTemperature(IWorldAccessor world, ItemStack itemstack) Parameters world IWorldAccessor itemstack ItemStack Returns float GetTemperature(IWorldAccessor, ItemStack, double) Returns the stacks item temperature in degree celsius public virtual float GetTemperature(IWorldAccessor world, ItemStack itemstack, double didReceiveHeat) Parameters world IWorldAccessor itemstack ItemStack didReceiveHeat double The amount of time it did receive heat since last update/call to this methode Returns float GetToolMode(ItemSlot, IPlayer, BlockSelection) Should return the current items tool mode. public virtual int GetToolMode(ItemSlot slot, IPlayer byPlayer, BlockSelection blockSelection) Parameters slot ItemSlot byPlayer IPlayer blockSelection BlockSelection Returns int The tool mode to display or -1 to not display the current mode GetToolModes(ItemSlot, IClientPlayer, BlockSelection) public virtual SkillItem[] GetToolModes(ItemSlot slot, IClientPlayer forPlayer, BlockSelection blockSel) Parameters slot ItemSlot forPlayer IClientPlayer blockSel BlockSelection Returns SkillItem[] GetTransitionRateMul(IWorldAccessor, ItemSlot, EnumTransitionType) public virtual float GetTransitionRateMul(IWorldAccessor world, ItemSlot inSlot, EnumTransitionType transType) Parameters world IWorldAccessor inSlot ItemSlot transType EnumTransitionType Returns float GetTransitionableProperties(IWorldAccessor, ItemStack, Entity) Should return the transition properties of the item/block when in itemstack form public virtual TransitionableProperties[] GetTransitionableProperties(IWorldAccessor world, ItemStack itemstack, Entity forEntity) Parameters world IWorldAccessor itemstack ItemStack forEntity Entity Returns TransitionableProperties[] HasBehavior(string, IClassRegistryAPI) Returns true if the block has given behavior public virtual bool HasBehavior(string type, IClassRegistryAPI classRegistry) Parameters type string classRegistry IClassRegistryAPI Returns bool HasBehavior(Type, bool) Returns true if the block has given behavior public virtual bool HasBehavior(Type type, bool withInheritance = false) Parameters type Type withInheritance bool Returns bool HasBehavior<T>(bool) Returns true if the block has given behavior public virtual bool HasBehavior<T>(bool withInheritance = false) where T : CollectibleBehavior Parameters withInheritance bool Returns bool Type Parameters T HasTemperature(IItemStack) Returns true if the stack has a temperature attribute public virtual bool HasTemperature(IItemStack itemstack) Parameters itemstack IItemStack Returns bool InGuiIdle(IWorldAccessor, ItemStack) Called every frame when this item is being displayed in the gui public virtual void InGuiIdle(IWorldAccessor world, ItemStack stack) Parameters world IWorldAccessor stack ItemStack IsBackPack(IItemStack) [Obsolete] public static bool IsBackPack(IItemStack itemstack) Parameters itemstack IItemStack Returns bool IsEmptyBackPack(IItemStack) [Obsolete] public static bool IsEmptyBackPack(IItemStack itemstack) Parameters itemstack IItemStack Returns bool IsLiquid() Returns true if this blocks matterstate is liquid. (Liquid blocks should also implement IBlockFlowing) IMPORTANT: Calling code should have looked up the block using IBlockAccessor.GetBlock(pos, BlockLayersAccess.Fluid) public virtual bool IsLiquid() Returns bool IsReasonablyFresh(IWorldAccessor, ItemStack) Test is failed for Perish-able items which have less than 50% of their fresh state remaining (or are already starting to spoil) public virtual bool IsReasonablyFresh(IWorldAccessor world, ItemStack itemstack) Parameters world IWorldAccessor itemstack ItemStack Returns bool MatchesForCrafting(ItemStack, GridRecipe, CraftingRecipeIngredient) Called when this collectible is attempted to being used as part of a crafting recipe and should get consumed now. Return false if it doesn't match the ingredient public virtual bool MatchesForCrafting(ItemStack inputStack, GridRecipe gridRecipe, CraftingRecipeIngredient ingredient) Parameters inputStack ItemStack gridRecipe GridRecipe ingredient CraftingRecipeIngredient Returns bool OnAttackingWith(IWorldAccessor, Entity, Entity, ItemSlot) An entity used this collectibe to attack something public virtual void OnAttackingWith(IWorldAccessor world, Entity byEntity, Entity attackedEntity, ItemSlot itemslot) Parameters world IWorldAccessor byEntity Entity attackedEntity Entity itemslot ItemSlot OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) This method is called before rendering the item stack into GUI, first person hand, third person hand and/or on the ground The renderinfo object is pre-filled with default values. public virtual void OnBeforeRender(ICoreClientAPI capi, ItemStack itemstack, EnumItemRenderTarget target, ref ItemRenderInfo renderinfo) Parameters capi ICoreClientAPI itemstack ItemStack target EnumItemRenderTarget renderinfo ItemRenderInfo OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int) Player is holding this collectible and breaks the targeted block public virtual float OnBlockBreaking(IPlayer player, BlockSelection blockSel, ItemSlot itemslot, float remainingResistance, float dt, int counter) Parameters player IPlayer blockSel BlockSelection itemslot ItemSlot remainingResistance float dt float counter int Returns float OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float) Player has broken a block while holding this collectible. Return false if you want to cancel the block break event. public virtual bool OnBlockBrokenWith(IWorldAccessor world, Entity byEntity, ItemSlot itemslot, BlockSelection blockSel, float dropQuantityMultiplier = 1) Parameters world IWorldAccessor byEntity Entity itemslot ItemSlot blockSel BlockSelection dropQuantityMultiplier float Returns bool OnCollected(ItemStack, Entity) Called when this item was collected by an entity public virtual void OnCollected(ItemStack stack, Entity entity) Parameters stack ItemStack entity Entity OnConsumedByCrafting(ItemSlot[], ItemSlot, GridRecipe, CraftingRecipeIngredient, IPlayer, int) Called when this collectible is being used as part of a crafting recipe and should get consumed now public virtual void OnConsumedByCrafting(ItemSlot[] allInputSlots, ItemSlot stackInSlot, GridRecipe gridRecipe, CraftingRecipeIngredient fromIngredient, IPlayer byPlayer, int quantity) Parameters allInputSlots ItemSlot[] stackInSlot ItemSlot gridRecipe GridRecipe fromIngredient CraftingRecipeIngredient byPlayer IPlayer quantity int OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe) Called when a matching grid recipe has been found and an item is placed into the crafting output slot (which is still before the player clicks on the output slot to actually craft the item and consume the ingredients) public virtual void OnCreatedByCrafting(ItemSlot[] allInputslots, ItemSlot outputSlot, GridRecipe byRecipe) Parameters allInputslots ItemSlot[] outputSlot ItemSlot byRecipe GridRecipe OnGroundIdle(EntityItem) Called every game tick when this collectible is in dropped form in the world (i.e. as EntityItem) public virtual void OnGroundIdle(EntityItem entityItem) Parameters entityItem EntityItem OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) public virtual void OnHandbookRecipeRender(ICoreClientAPI capi, GridRecipe recipe, ItemSlot slot, double x, double y, double z, double size) Parameters capi ICoreClientAPI recipe GridRecipe slot ItemSlot x double y double z double size double OnHeldActionAnimStart(ItemSlot, EntityAgent, EnumHandInteract) public virtual void OnHeldActionAnimStart(ItemSlot slot, EntityAgent byEntity, EnumHandInteract type) Parameters slot ItemSlot byEntity EntityAgent type EnumHandInteract OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) When the player has canceled a custom attack action. Return false to deny action cancellation. public virtual bool OnHeldAttackCancel(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSelection, EntitySelection entitySel, EnumItemUseCancelReason cancelReason) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSelection BlockSelection entitySel EntitySelection cancelReason EnumItemUseCancelReason Returns bool OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling) When the player has begun using this item for attacking (left mouse click). Return true to play a custom action. public virtual void OnHeldAttackStart(ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, ref EnumHandHandling handling) Parameters slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection handling EnumHandHandling Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server. OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) Called continously when a custom attack action is playing. Return false to stop the action. public virtual bool OnHeldAttackStep(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSelection, EntitySelection entitySel) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSelection BlockSelection entitySel EntitySelection Returns bool OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) Called when a custom attack action is finished public virtual void OnHeldAttackStop(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSelection, EntitySelection entitySel) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSelection BlockSelection entitySel EntitySelection OnHeldDropped(IWorldAccessor, IPlayer, ItemSlot, int, ref EnumHandling) Callback when the player dropped this item from his inventory. You can set handling to PreventDefault to prevent dropping this item. You can also check if the entityplayer of this player is dead to check if dropping of this item was due the players death public virtual void OnHeldDropped(IWorldAccessor world, IPlayer byPlayer, ItemSlot slot, int quantity, ref EnumHandling handling) Parameters world IWorldAccessor byPlayer IPlayer slot ItemSlot quantity int Amount of items the player wants to drop handling EnumHandling OnHeldIdle(ItemSlot, EntityAgent) Called every frame when the player is holding this collectible in his hands. Is not called during OnUsing() or OnAttacking() public virtual void OnHeldIdle(ItemSlot slot, EntityAgent byEntity) Parameters slot ItemSlot byEntity EntityAgent OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) When the player released the right mouse button. Return false to deny the cancellation (= will keep using the item until OnHeldInteractStep returns false). public virtual bool OnHeldInteractCancel(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, EnumItemUseCancelReason cancelReason) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection cancelReason EnumItemUseCancelReason Returns bool OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling) Called when the player right clicks while holding this block/item in his hands public virtual void OnHeldInteractStart(ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, bool firstEvent, ref EnumHandHandling handling) Parameters slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection firstEvent bool True when the player pressed the right mouse button on this block. Every subsequent call, while the player holds right mouse down will be false, it gets called every second while right mouse is down handling EnumHandHandling Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server. OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) Called every frame while the player is using this collectible. Return false to stop the interaction. public virtual bool OnHeldInteractStep(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection Returns bool False if the interaction should be stopped. True if the interaction should continue OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) Called when the player successfully completed the using action, always called once an interaction is over public virtual void OnHeldInteractStop(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection OnHeldRenderOit(ItemSlot, IClientPlayer) This method is called during the order independent transparency render pass when this item or block is being held in hands public virtual void OnHeldRenderOit(ItemSlot inSlot, IClientPlayer byPlayer) Parameters inSlot ItemSlot byPlayer IClientPlayer OnHeldRenderOpaque(ItemSlot, IClientPlayer) This method is called during the opaque render pass when this item or block is being held in hands public virtual void OnHeldRenderOpaque(ItemSlot inSlot, IClientPlayer byPlayer) Parameters inSlot ItemSlot byPlayer IClientPlayer OnHeldRenderOrtho(ItemSlot, IClientPlayer) This method is called during the ortho (for 2D GUIs) render pass when this item or block is being held in hands public virtual void OnHeldRenderOrtho(ItemSlot inSlot, IClientPlayer byPlayer) Parameters inSlot ItemSlot byPlayer IClientPlayer OnHeldUseCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) General cancel use access. Override OnHeldAttackCancel or OnHeldInteractCancel to alter the behavior. public EnumHandInteract OnHeldUseCancel(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, EnumItemUseCancelReason cancelReason) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection cancelReason EnumItemUseCancelReason Returns EnumHandInteract OnHeldUseStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract, bool, ref EnumHandHandling) General begin use access. Override OnHeldAttackStart or OnHeldInteractStart to alter the behavior. public virtual void OnHeldUseStart(ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, EnumHandInteract useType, bool firstEvent, ref EnumHandHandling handling) Parameters slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection useType EnumHandInteract firstEvent bool True on first mouse down handling EnumHandHandling Whether or not to do any subsequent actions. If not set or set to NotHandled, the action will not called on the server. OnHeldUseStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) General using access. Override OnHeldAttackStep or OnHeldInteractStep to alter the behavior. public EnumHandInteract OnHeldUseStep(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection Returns EnumHandInteract OnHeldUseStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract) General use over access. Override OnHeldAttackStop or OnHeldInteractStop to alter the behavior. public void OnHeldUseStop(float secondsPassed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, EnumHandInteract useType) Parameters secondsPassed float slot ItemSlot byEntity EntityAgent blockSel BlockSelection entitySel EntitySelection useType EnumHandInteract OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) This method is called after a block/item like this has been imported as part of a block schematic. Has to restore fix the block/item id mappings as they are probably different compared to the world from where they were exported. By default iterates over all the itemstacks attributes and searches for attribute sof type ItenStackAttribute and calls .FixMapping() on them. [Obsolete(\"Use the variant with resolveImports parameter\")] public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForResolve, ItemSlot inSlot, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping) Parameters worldForResolve IWorldAccessor inSlot ItemSlot oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) This method is called after a block/item like this has been imported as part of a block schematic. Has to restore fix the block/item id mappings as they are probably different compared to the world from where they were exported. By default iterates over all the itemstacks attributes and searches for attribute sof type ItenStackAttribute and calls .FixMapping() on them. public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForResolve, ItemSlot inSlot, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, bool resolveImports) Parameters worldForResolve IWorldAccessor inSlot ItemSlot oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> resolveImports bool Turn it off to spawn structures as they are. For example, in this mode, instead of traders, their meta spawners will spawn OnLoaded(ICoreAPI) Server Side: Called one the collectible has been registered Client Side: Called once the collectible has been loaded from server packet public virtual void OnLoaded(ICoreAPI api) Parameters api ICoreAPI OnLoadedNative(ICoreAPI) public void OnLoadedNative(ICoreAPI api) Parameters api ICoreAPI OnModifiedInInventorySlot(IWorldAccessor, ItemSlot, ItemStack) Whenever the collectible was modified while inside a slot, usually when it was moved, split or merged. public virtual void OnModifiedInInventorySlot(IWorldAccessor world, ItemSlot slot, ItemStack extractedStack = null) Parameters world IWorldAccessor slot ItemSlot The slot the item is or was in extractedStack ItemStack Non null if the itemstack was removed from this slot OnSmeltAttempt(InventoryBase) Called immediately prior to a firepit or similar testing whether this Collectible can be smelted Returns true if the caller should be marked dirty public virtual bool OnSmeltAttempt(InventoryBase inventorySmelting) Parameters inventorySmelting InventoryBase Returns bool OnStoreCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) This method is for example called by chests when they are being exported as part of a block schematic. Has to store all the currents block/item id mappings so it can be correctly imported again. By default it puts itself into the mapping and searches the itemstack attributes for attributes of type ItemStackAttribute and adds those to the mapping as well. public virtual void OnStoreCollectibleMappings(IWorldAccessor world, ItemSlot inSlot, Dictionary<int, AssetLocation> blockIdMapping, Dictionary<int, AssetLocation> itemIdMapping) Parameters world IWorldAccessor inSlot ItemSlot blockIdMapping Dictionary<int, AssetLocation> itemIdMapping Dictionary<int, AssetLocation> OnTransitionNow(ItemSlot, TransitionableProperties) Called when any of its TransitionableProperties causes the stack to transition to another stack. Default behavior is to return props.TransitionedStack.ResolvedItemstack and set the stack size according to the transition rtio public virtual ItemStack OnTransitionNow(ItemSlot slot, TransitionableProperties props) Parameters slot ItemSlot props TransitionableProperties Returns ItemStack The stack it should transition into OnUnloaded(ICoreAPI) Called when the client/server is shutting down public virtual void OnUnloaded(ICoreAPI api) Parameters api ICoreAPI QuantityBackPackSlots(IItemStack) [Obsolete] public static int QuantityBackPackSlots(IItemStack itemstack) Parameters itemstack IItemStack Returns int RefillSlotIfEmpty(ItemSlot, EntityAgent, ActionConsumable<ItemStack>) public virtual void RefillSlotIfEmpty(ItemSlot slot, EntityAgent byEntity, ActionConsumable<ItemStack> matcher) Parameters slot ItemSlot byEntity EntityAgent matcher ActionConsumable<ItemStack> RequiresTransitionableTicking(IWorldAccessor, ItemStack) Should returns true if this collectible requires UpdateAndGetTransitionStates() to be called when ticking. Typical usage: true if this collectible itself has transitionable properties, or true for collectibles which hold other itemstacks with transitionable properties (for example, a cooked food container) public virtual bool RequiresTransitionableTicking(IWorldAccessor world, ItemStack itemstack) Parameters world IWorldAccessor itemstack ItemStack Returns bool Satisfies(ItemStack, ItemStack) Should return true if thisStack is a satisfactory replacement of otherStack. It's bascially an Equals() test, but it ignores any additional attributes that exist in otherStack public virtual bool Satisfies(ItemStack thisStack, ItemStack otherStack) Parameters thisStack ItemStack otherStack ItemStack Returns bool SetDurability(ItemStack, int) Sets the items durability public virtual void SetDurability(ItemStack itemstack, int amount) Parameters itemstack ItemStack amount int SetTemperature(IWorldAccessor, ItemStack, float, bool) Sets the stacks item temperature in degree celsius public virtual void SetTemperature(IWorldAccessor world, ItemStack itemstack, float temperature, bool delayCooldown = true) Parameters world IWorldAccessor itemstack ItemStack temperature float delayCooldown bool SetToolMode(ItemSlot, IPlayer, BlockSelection, int) Should set given toolmode public virtual void SetToolMode(ItemSlot slot, IPlayer byPlayer, BlockSelection blockSelection, int toolMode) Parameters slot ItemSlot byPlayer IPlayer blockSelection BlockSelection toolMode int SetTransitionState(ItemStack, EnumTransitionType, float) public virtual void SetTransitionState(ItemStack stack, EnumTransitionType type, float transitionedHours) Parameters stack ItemStack type EnumTransitionType transitionedHours float ShouldDisplayItemDamage(ItemStack) Return true if remaining durability != total durability public virtual bool ShouldDisplayItemDamage(ItemStack itemstack) Parameters itemstack ItemStack Returns bool TryMergeStacks(ItemStackMergeOperation) Is always called on the sink slots item public virtual void TryMergeStacks(ItemStackMergeOperation op) Parameters op ItemStackMergeOperation UpdateAndGetTransitionState(IWorldAccessor, ItemSlot, EnumTransitionType) Returns the transition state of given transition type public virtual TransitionState UpdateAndGetTransitionState(IWorldAccessor world, ItemSlot inslot, EnumTransitionType type) Parameters world IWorldAccessor inslot ItemSlot type EnumTransitionType Returns TransitionState UpdateAndGetTransitionStates(IWorldAccessor, ItemSlot) Returns a list of the current transition states of this item, redirects to UpdateAndGetTransitionStatesNative public virtual TransitionState[] UpdateAndGetTransitionStates(IWorldAccessor world, ItemSlot inslot) Parameters world IWorldAccessor inslot ItemSlot Returns TransitionState[] UpdateAndGetTransitionStatesNative(IWorldAccessor, ItemSlot) Returns a list of the current transition states of this item. Seperate from UpdateAndGetTransitionStates() so that you can call still call this methods several inheritances down, i.e. there is no base.base.Method() syntax in C# protected virtual TransitionState[] UpdateAndGetTransitionStatesNative(IWorldAccessor world, ItemSlot inslot) Parameters world IWorldAccessor inslot ItemSlot Returns TransitionState[] playEatSound(EntityAgent, string, int) protected void playEatSound(EntityAgent byEntity, string eatSound = \"eat\", int eatSoundRepeats = 1) Parameters byEntity EntityAgent eatSound string eatSoundRepeats int tryEatBegin(ItemSlot, EntityAgent, ref EnumHandHandling, string, int) Tries to eat the contents in the slot, first call protected virtual void tryEatBegin(ItemSlot slot, EntityAgent byEntity, ref EnumHandHandling handling, string eatSound = \"eat\", int eatSoundRepeats = 1) Parameters slot ItemSlot byEntity EntityAgent handling EnumHandHandling eatSound string eatSoundRepeats int tryEatStep(float, ItemSlot, EntityAgent, ItemStack) Tries to eat the contents in the slot, eat step call protected virtual bool tryEatStep(float secondsUsed, ItemSlot slot, EntityAgent byEntity, ItemStack spawnParticleStack = null) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent spawnParticleStack ItemStack Returns bool tryEatStop(float, ItemSlot, EntityAgent) Finished eating the contents in the slot, final call protected virtual void tryEatStop(float secondsUsed, ItemSlot slot, EntityAgent byEntity) Parameters secondsUsed float slot ItemSlot byEntity EntityAgent"
  },
  "api/Vintagestory.API.Common.CollectibleParticleProperties.html": {
    "href": "api/Vintagestory.API.Common.CollectibleParticleProperties.html",
    "title": "Class CollectibleParticleProperties | VintageStory API",
    "keywords": "Class CollectibleParticleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Abstract class used for BlockVoxelParticles and ItemVoxelParticles Open in GitHub public abstract class CollectibleParticleProperties : IParticlePropertiesProvider Inheritance object CollectibleParticleProperties Implements IParticlePropertiesProvider Derived BlockBreakingParticleProps BlockCubeParticles EntityCubeParticles StackCubeParticles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields api public ICoreAPI api Field Value ICoreAPI rand public Random rand Field Value Random Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often public bool Async { get; } Property Value bool BlueEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public virtual EvolvingNatFloat BlueEvolve { get; } Property Value EvolvingNatFloat Bounciness public float Bounciness { get; set; } Property Value float DeathParticles The particle to spawn upon the particle death. public IParticlePropertiesProvider[] DeathParticles { get; } Property Value IParticlePropertiesProvider[] DieInAir Whether the particle should despawn when in contact with air (e.g. for water bubbles) public virtual bool DieInAir { get; } Property Value bool DieInLiquid Whether the particle should despawn when in contact with liquids public virtual bool DieInLiquid { get; } Property Value bool DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location public bool DieOnRainHeightmap { get; set; } Property Value bool GravityEffect How strongly the particle is affected by gravity (0 = no gravity applied) public virtual float GravityEffect { get; } Property Value float GreenEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public virtual EvolvingNatFloat GreenEvolve { get; } Property Value EvolvingNatFloat LifeLength How long the particle should live (default = 1) public virtual float LifeLength { get; } Property Value float LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark public int LightEmission { get; set; } Property Value int OpacityEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public virtual EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat ParentVelocity public Vec3f ParentVelocity { get; set; } Property Value Vec3f ParentVelocityWeight public float ParentVelocityWeight { get; set; } Property Value float ParticleModel Cube or Quad? public abstract EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public abstract Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public abstract float Quantity { get; } Property Value float RandomVelocityChange public virtual bool RandomVelocityChange { get; set; } Property Value bool RedEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public virtual EvolvingNatFloat RedEvolve { get; } Property Value EvolvingNatFloat SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. public virtual IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] SecondarySpawnInterval Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn. This is only honored if this particle is defined as a secondary particle. public virtual float SecondarySpawnInterval { get; } Property Value float SelfPropelled If true, a particle will restore it's initial velocity once it's obstruction has been cleared e.g. Smokes will start flying upwards again if is currently stuck under a block and the block is removed public virtual bool SelfPropelled { get; } Property Value bool Size Size of the particle public virtual float Size { get; } Property Value float SizeEvolve Size change over time public virtual EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public virtual bool SwimOnLiquid { get; } Property Value bool TerrainCollision If true, the particle will collide with the terrain public virtual bool TerrainCollision { get; } Property Value bool VelocityEvolve Velocity change over time (acts as a multiplier to the velocity) public virtual EvolvingNatFloat[] VelocityEvolve { get; } Property Value EvolvingNatFloat[] VertexFlags See also VertexFlags public abstract int VertexFlags { get; } Property Value int Methods BeginParticle() Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles public void BeginParticle() ColorByBlock() public virtual Block ColorByBlock() Returns Block FromBytes(BinaryReader, IWorldAccessor) For reading from the network public virtual void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public abstract int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public abstract Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation public virtual void Init(ICoreAPI api) Parameters api ICoreAPI PrepareForSecondarySpawn(ParticleBase) Updates instance related state for secondary particles based on the given parent particle instance public virtual void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase The parent IParticleInstance from which this secondary particle is being spawned RandomBlockPos(IBlockAccessor, BlockPos, Block, BlockFacing) public Vec3d RandomBlockPos(IBlockAccessor blockAccess, BlockPos pos, Block block, BlockFacing facing = null) Parameters blockAccess IBlockAccessor pos BlockPos block Block facing BlockFacing Returns Vec3d ToBytes(BinaryWriter) For sending over the network public virtual void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter UseLighting() public virtual bool UseLighting() Returns bool"
  },
  "api/Vintagestory.API.Common.ColorArgParser.html": {
    "href": "api/Vintagestory.API.Common.ColorArgParser.html",
    "title": "Class ColorArgParser | VintageStory API",
    "keywords": "Class ColorArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ColorArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase ColorArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ColorArgParser(string, bool) public ColorArgParser(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.ColorMap.html": {
    "href": "api/Vintagestory.API.Common.ColorMap.html",
    "title": "Class ColorMap | VintageStory API",
    "keywords": "Class ColorMap Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ColorMap Inheritance object ColorMap Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlockAtlasTextureSubId public int BlockAtlasTextureSubId Field Value int Code public string Code Field Value string ColorMapLoadedFlag public const int ColorMapLoadedFlag = 2 Field Value int ExtraFlags public int ExtraFlags Field Value int LoadIntoBlockTextureAtlas public bool LoadIntoBlockTextureAtlas Field Value bool OuterSize public Size2i OuterSize Field Value Size2i Padding public int Padding Field Value int Pixels public int[] Pixels Field Value int[] RectIndex public int RectIndex Field Value int Texture public CompositeTexture Texture Field Value CompositeTexture"
  },
  "api/Vintagestory.API.Common.CombustibleProperties.html": {
    "href": "api/Vintagestory.API.Common.CombustibleProperties.html",
    "title": "Class CombustibleProperties | VintageStory API",
    "keywords": "Class CombustibleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Marks an item as combustible, either by cooking, smelting or firing. This can either imply it is used as a fuel, or can be cooked into another object. Open in GitHub [DocumentAsJson] public class CombustibleProperties Inheritance object CombustibleProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples Cooking: \"combustiblePropsByType\": { \"bushmeat-raw\": { \"meltingPoint\": 150, \"meltingDuration\": 30, \"smeltedRatio\": 1, \"smeltingType\": \"cook\", \"smeltedStack\": { \"type\": \"item\", \"code\": \"bushmeat-cooked\" }, \"requiresContainer\": false } }, Clay Firing: \"combustiblePropsByType\": { \"bowl-raw\": { \"meltingPoint\": 650, \"meltingDuration\": 45, \"smeltedRatio\": 1, \"smeltingType\": \"fire\", \"smeltedStack\": { \"type\": \"block\", \"code\": \"bowl-fired\" }, \"requiresContainer\": false } }, Fuel Source: \"combustibleProps\": { \"burnTemperature\": 1300, \"burnDuration\": 40 }, Fields BurnDuration The duration, in real life seconds, that this collectible burns for when used as a fuel. [DocumentAsJson] public float BurnDuration Field Value float BurnTemperature The temperature at which this collectible burns when used as a fuel. [DocumentAsJson] public int BurnTemperature Field Value int HeatResistance How many degrees celsius it can resists before it ignites [DocumentAsJson] public int HeatResistance Field Value int MaxTemperature If there is a melting point, the max temperature it can reach. A value of 0 implies no limit. [DocumentAsJson] public int MaxTemperature Field Value int MeltingDuration For how many seconds the temperature has to be above the melting point until the item is smelted. Recommended if SmeltedStack is set. [DocumentAsJson] public float MeltingDuration Field Value float MeltingPoint How many degrees celsius it takes to smelt/transform this collectible into another. Required if SmeltedStack is set. [DocumentAsJson] public int MeltingPoint Field Value int RequiresContainer If true, a container is required to smelt this item. [DocumentAsJson] public bool RequiresContainer Field Value bool SmeltedRatio How many of this collectible are needed to smelt into SmeltedStack. [DocumentAsJson] public int SmeltedRatio Field Value int SmeltedStack If set, this is the resulting itemstack once the MeltingPoint has been reached for the supplied duration. [DocumentAsJson] public JsonItemStack SmeltedStack Field Value JsonItemStack SmeltingType Some smelt types have specific functionality, and are also used for correct naming in the tool tip. If using Bake, you will need to include BakingProperties in your item attributes. [DocumentAsJson] public EnumSmeltType SmeltingType Field Value EnumSmeltType SmokeLevel How much smoke this item produces when being used as fuel [DocumentAsJson] public float SmokeLevel Field Value float Methods Clone() Creates a deep copy public CombustibleProperties Clone() Returns CombustibleProperties"
  },
  "api/Vintagestory.API.Common.CommandAbbr.CmdUtil.EntityEachDelegate.html": {
    "href": "api/Vintagestory.API.Common.CommandAbbr.CmdUtil.EntityEachDelegate.html",
    "title": "Delegate CmdUtil.EntityEachDelegate | VintageStory API",
    "keywords": "Delegate CmdUtil.EntityEachDelegate Namespace Vintagestory.API.Common.CommandAbbr Assembly VintagestoryAPI.dll public delegate TextCommandResult CmdUtil.EntityEachDelegate(Entity entity) Parameters entity Entity Returns TextCommandResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.CommandAbbr.CmdUtil.html": {
    "href": "api/Vintagestory.API.Common.CommandAbbr.CmdUtil.html",
    "title": "Class CmdUtil | VintageStory API",
    "keywords": "Class CmdUtil Namespace Vintagestory.API.Common.CommandAbbr Assembly VintagestoryAPI.dll public static class CmdUtil Inheritance object CmdUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EntityEach(TextCommandCallingArgs, EntityEachDelegate, int) public static TextCommandResult EntityEach(TextCommandCallingArgs args, CmdUtil.EntityEachDelegate onEntity, int index = 0) Parameters args TextCommandCallingArgs onEntity CmdUtil.EntityEachDelegate index int Returns TextCommandResult"
  },
  "api/Vintagestory.API.Common.CommandAbbr.IChatCommandExt.html": {
    "href": "api/Vintagestory.API.Common.CommandAbbr.IChatCommandExt.html",
    "title": "Class IChatCommandExt | VintageStory API",
    "keywords": "Class IChatCommandExt Namespace Vintagestory.API.Common.CommandAbbr Assembly VintagestoryAPI.dll ChatCommand Abbreviations public static class IChatCommandExt Inheritance object IChatCommandExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BeginSub(IChatCommand, string) Alias for BeginSubCommand public static IChatCommand BeginSub(this IChatCommand cmd, string name) Parameters cmd IChatCommand name string Returns IChatCommand BeginSubs(IChatCommand, params string[]) Alias for BeginSubCommands public static IChatCommand BeginSubs(this IChatCommand cmd, params string[] name) Parameters cmd IChatCommand name string[] Returns IChatCommand EndSub(IChatCommand) Alias for EndSubCommand public static IChatCommand EndSub(this IChatCommand cmd) Parameters cmd IChatCommand Returns IChatCommand WithDesc(IChatCommand, string) Alias of WithDescription() public static IChatCommand WithDesc(this IChatCommand cmd, string description) Parameters cmd IChatCommand description string Returns IChatCommand"
  },
  "api/Vintagestory.API.Common.CommandAbbr.html": {
    "href": "api/Vintagestory.API.Common.CommandAbbr.html",
    "title": "Namespace Vintagestory.API.Common.CommandAbbr | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Common.CommandAbbr Classes CmdUtil IChatCommandExt ChatCommand Abbreviations Delegates CmdUtil.EntityEachDelegate"
  },
  "api/Vintagestory.API.Common.CommandArgumentParsers.html": {
    "href": "api/Vintagestory.API.Common.CommandArgumentParsers.html",
    "title": "Class CommandArgumentParsers | VintageStory API",
    "keywords": "Class CommandArgumentParsers Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class CommandArgumentParsers Inheritance object CommandArgumentParsers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CommandArgumentParsers(ICoreAPI) public CommandArgumentParsers(ICoreAPI api) Parameters api ICoreAPI Methods All(string) All remaining arguments together public StringArgParser All(string argName) Parameters argName string Returns StringArgParser Block(string) public CollectibleArgParser Block(string argName) Parameters argName string Returns CollectibleArgParser Bool(string, string) public BoolArgParser Bool(string argName, string trueAlias = \"on\") Parameters argName string trueAlias string Returns BoolArgParser Color(string) Parses a string which is either a color name or a hex value as a Color public ColorArgParser Color(string argName) Parameters argName string Returns ColorArgParser DateTime(string) Currently only supports time spans (i.e. now + time) public DatetimeArgParser DateTime(string argName) Parameters argName string Returns DatetimeArgParser Double(string) public DoubleArgParser Double(string argName) Parameters argName string Returns DoubleArgParser DoubleRange(string, double, double) public DoubleArgParser DoubleRange(string argName, double min, double max) Parameters argName string min double max double Returns DoubleArgParser Entities(string) public EntitiesArgParser Entities(string argName) Parameters argName string Returns EntitiesArgParser EntityType(string) public EntityTypeArgParser EntityType(string argName) Parameters argName string Returns EntityTypeArgParser Float(string) public FloatArgParser Float(string argName) Parameters argName string Returns FloatArgParser Int(string) public IntArgParser Int(string argName) Parameters argName string Returns IntArgParser IntDirection(string) public DirectionArgParser<Vec3i> IntDirection(string argName) Parameters argName string Returns DirectionArgParser<Vec3i> IntRange(string, int, int) public IntArgParser IntRange(string argName, int min, int max) Parameters argName string min int max int Returns IntArgParser Item(string) public CollectibleArgParser Item(string argName) Parameters argName string Returns CollectibleArgParser Long(string) public LongArgParser Long(string argName) Parameters argName string Returns LongArgParser OnlinePlayer(string) A currently online player public OnlinePlayerArgParser OnlinePlayer(string argName) Parameters argName string Returns OnlinePlayerArgParser OptionalAll(string) All remaining arguments together public StringArgParser OptionalAll(string argName) Parameters argName string Returns StringArgParser OptionalBool(string, string) public BoolArgParser OptionalBool(string argName, string trueAlias = \"on\") Parameters argName string trueAlias string Returns BoolArgParser OptionalColor(string) Parses a string which is either a color name or a hex value as a Color public ColorArgParser OptionalColor(string argName) Parameters argName string Returns ColorArgParser OptionalDouble(string, double) public DoubleArgParser OptionalDouble(string argName, double defaultvalue = 0) Parameters argName string defaultvalue double Returns DoubleArgParser OptionalEntities(string) Defaults to caller entity public EntitiesArgParser OptionalEntities(string argName) Parameters argName string Returns EntitiesArgParser OptionalFloat(string, float) public FloatArgParser OptionalFloat(string argName, float defaultvalue = 0) Parameters argName string defaultvalue float Returns FloatArgParser OptionalInt(string, int) public IntArgParser OptionalInt(string argName, int defaultValue = 0) Parameters argName string defaultValue int Returns IntArgParser OptionalIntRange(string, int, int, int) public IntArgParser OptionalIntRange(string argName, int min, int max, int defaultValue = 0) Parameters argName string min int max int defaultValue int Returns IntArgParser OptionalLong(string, int) public LongArgParser OptionalLong(string argName, int defaultValue = 0) Parameters argName string defaultValue int Returns LongArgParser OptionalPlayerRole(string) Parses IPlayerRole, only works on Serverside since it needs the Serverconfig public PlayerRoleArgParser OptionalPlayerRole(string argName) Parameters argName string Returns PlayerRoleArgParser OptionalPlayerUids(string) All selected players public PlayersArgParser OptionalPlayerUids(string argName) Parameters argName string Returns PlayersArgParser OptionalPrivilege(string) public PrivilegeArgParser OptionalPrivilege(string privilege) Parameters privilege string Returns PrivilegeArgParser OptionalVec3i(string) public Vec3iArgParser OptionalVec3i(string argName) Parameters argName string Returns Vec3iArgParser OptionalWord(string) public WordArgParser OptionalWord(string argName) Parameters argName string Returns WordArgParser OptionalWordRange(string, params string[]) public WordRangeArgParser OptionalWordRange(string argName, params string[] words) Parameters argName string words string[] Returns WordRangeArgParser OptionalWorldPosition(string) Defaults to caller position public WorldPositionArgParser OptionalWorldPosition(string argName) Parameters argName string Returns WorldPositionArgParser PlayerRole(string) Parses IPlayerRole, only works on Serverside since it needs the Serverconfig public PlayerRoleArgParser PlayerRole(string argName) Parameters argName string Returns PlayerRoleArgParser PlayerUids(string) All selected players public PlayersArgParser PlayerUids(string argName) Parameters argName string Returns PlayersArgParser Privilege(string) public PrivilegeArgParser Privilege(string privilege) Parameters privilege string Returns PrivilegeArgParser Unparsed(string, params string[]) public UnparsedArg Unparsed(string argname, params string[] validRange) Parameters argname string validRange string[] Returns UnparsedArg Vec3i(string) public Vec3iArgParser Vec3i(string argName) Parameters argName string Returns Vec3iArgParser Word(string) public WordArgParser Word(string argName) Parameters argName string Returns WordArgParser Word(string, string[]) public WordArgParser Word(string argName, string[] wordSuggestions) Parameters argName string wordSuggestions string[] Returns WordArgParser WordRange(string, params string[]) public WordRangeArgParser WordRange(string argName, params string[] words) Parameters argName string words string[] Returns WordRangeArgParser WorldPosition(string) public WorldPositionArgParser WorldPosition(string argName) Parameters argName string Returns WorldPositionArgParser WorldPosition2D(string) public WorldPosition2DArgParser WorldPosition2D(string argName) Parameters argName string Returns WorldPosition2DArgParser"
  },
  "api/Vintagestory.API.Common.CommandPreconditionDelegate.html": {
    "href": "api/Vintagestory.API.Common.CommandPreconditionDelegate.html",
    "title": "Delegate CommandPreconditionDelegate | VintageStory API",
    "keywords": "Delegate CommandPreconditionDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TextCommandResult CommandPreconditionDelegate(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs Returns TextCommandResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.CompositeShape.html": {
    "href": "api/Vintagestory.API.Common.CompositeShape.html",
    "title": "Class CompositeShape | VintageStory API",
    "keywords": "Class CompositeShape Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Holds shape data to create 3D representations of objects. Also allows shapes to be overlayed on top of one another recursively. Open in GitHub [DocumentAsJson] public class CompositeShape Inheritance object CompositeShape Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"shape\": { \"base\": \"block/basic/cube\" }, \"shapeInventory\": { \"base\": \"block/plant/bamboo/{color}/{part}-1\", \"overlays\": [ { \"base\": \"block/plant/bamboo/{color}/{part}lod0-1\" } ] }, Fields Alternates The block shape may consists of any amount of alternatives, one of which will be randomly chosen when the shape is chosen. [DocumentAsJson] public CompositeShape[] Alternates Field Value CompositeShape[] BakedAlternates Includes the base shape public CompositeShape[] BakedAlternates Field Value CompositeShape[] Base The path to this shape file. [DocumentAsJson] public AssetLocation Base Field Value AssetLocation Format The format/filetype of this shape. [DocumentAsJson] public EnumShapeFormat Format Field Value EnumShapeFormat IgnoreElements If set will not tesselate elements with given name public string[] IgnoreElements Field Value string[] InsertBakedTextures Whether or not to insert baked in textures for mesh formats such as gltf into the texture atlas. [DocumentAsJson] public bool InsertBakedTextures Field Value bool Overlays The shape will render all overlays on top of this shape. Can be used to group multiple shapes into one composite shape. [DocumentAsJson] public CompositeShape[] Overlays Field Value CompositeShape[] QuantityElements If non zero will only tesselate the first n elements of the shape [DocumentAsJson] public int? QuantityElements Field Value int? Scale The scale of this shape on all axes. [DocumentAsJson] public float Scale Field Value float SelectiveElements If set will only tesselate elements with given name [DocumentAsJson] public string[] SelectiveElements Field Value string[] VoxelizeTexture If true, the shape is created from a voxelized version of the first defined texture [DocumentAsJson] public bool VoxelizeTexture Field Value bool offsetX How much should this shape be offset on X axis? [DocumentAsJson] public float offsetX Field Value float offsetY How much should this shape be offset on Y axis? [DocumentAsJson] public float offsetY Field Value float offsetZ How much should this shape be offset on Z axis? [DocumentAsJson] public float offsetZ Field Value float rotateX How much, in degrees, should this shape be rotated around the X axis? [DocumentAsJson] public float rotateX Field Value float rotateY How much, in degrees, should this shape be rotated around the Y axis? [DocumentAsJson] public float rotateY Field Value float rotateZ How much, in degrees, should this shape be rotated around the Z axis? [DocumentAsJson] public float rotateZ Field Value float Properties OffsetXYZCopy public Vec3f OffsetXYZCopy { get; } Property Value Vec3f RotateXYZCopy public Vec3f RotateXYZCopy { get; } Property Value Vec3f Methods Bake(IAssetManager, ILogger) Alias to LoadAlternates public void Bake(IAssetManager assetManager, ILogger logger) Parameters assetManager IAssetManager logger ILogger Clone() Creates a deep copy of the composite shape public CompositeShape Clone() Returns CompositeShape CloneWithoutAlternates() Creates a deep copy of the shape, but omitting its alternates (used to populate the alternates) public CompositeShape CloneWithoutAlternates() Returns CompositeShape GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. LoadAlternates(IAssetManager, ILogger) Expands the Composite Shape and populates the Baked field public void LoadAlternates(IAssetManager assetManager, ILogger logger) Parameters assetManager IAssetManager logger ILogger ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.CoralPlantConfig.html": {
    "href": "api/Vintagestory.API.Common.CoralPlantConfig.html",
    "title": "Class CoralPlantConfig | VintageStory API",
    "keywords": "Class CoralPlantConfig Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class CoralPlantConfig Inheritance object CoralPlantConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Block [JsonIgnore] public required Block[] Block Field Value Block[] Chance chance for this plant to spawn in a reef if public float Chance Field Value float Height Height distribution for plants inside the coral reef public required NatFloat Height Field Value NatFloat"
  },
  "api/Vintagestory.API.Common.CraftingRecipeIngredient.html": {
    "href": "api/Vintagestory.API.Common.CraftingRecipeIngredient.html",
    "title": "Class CraftingRecipeIngredient | VintageStory API",
    "keywords": "Class CraftingRecipeIngredient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A crafting recipe ingredient Open in GitHub [DocumentAsJson] public class CraftingRecipeIngredient : IRecipeIngredient Inheritance object CraftingRecipeIngredient Implements IRecipeIngredient Derived GridRecipeIngredient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AllowedVariants When using a wildcard in the item/block code, setting this field will limit the allowed variants [DocumentAsJson] public string[] AllowedVariants Field Value string[] Attributes What attributes this itemstack must have to be a valid ingredient [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject IsAdvancedWildCard public bool IsAdvancedWildCard Field Value bool IsBasicWildCard public bool IsBasicWildCard Field Value bool IsRegex public bool IsRegex Field Value bool IsTool Whether this crafting recipe ingredient should be regarded as a tool required to build this item. If true, the recipe will not consume the item but reduce its durability. [DocumentAsJson] public bool IsTool Field Value bool IsWildCard Whether this recipe contains a wildcard, populated by the engine public bool IsWildCard Field Value bool Quantity The quantity of the itemstack required for the recipe. [DocumentAsJson] public int Quantity Field Value int RecipeAttributes Optional attribute data that you can attach any data to. Used for some specific instances in code mods. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject RecipeAttributes Field Value JsonObject ResolvedItemstack The itemstack made from Code, Quantity and Attributes, populated by the engine public ItemStack ResolvedItemstack Field Value ItemStack ReturnedStack If set, the crafting recipe will give back the consumed stack to be player upon crafting. Can also be used to produce multiple outputs for a recipe. [DocumentAsJson] public JsonItemStack ReturnedStack Field Value JsonItemStack SkipVariants When using a wildcard in the item/block code, setting this field will skip these variants [DocumentAsJson] public string[] SkipVariants Field Value string[] ToolDurabilityCost If IsTool is set, this is the durability cost when the recipe is created. [DocumentAsJson] public int ToolDurabilityCost Field Value int Type Is the itemstack an item or a block? [DocumentAsJson] public EnumItemClass Type Field Value EnumItemClass Properties Code The code of the item or block [DocumentAsJson] public AssetLocation Code { get; set; } Property Value AssetLocation Name Attaches a name to a wildcard in an ingredient. This is used to substitute the value into the output. Only required if using a wildcard. [DocumentAsJson] public string Name { get; set; } Property Value string Methods Clone() public CraftingRecipeIngredient Clone() Returns CraftingRecipeIngredient CloneTo<T>() public T CloneTo<T>() where T : CraftingRecipeIngredient, new() Returns T Type Parameters T FillPlaceHolder(string, string) Fills in the placeholder ingredients for the crafting recipe. public void FillPlaceHolder(string key, string value) Parameters key string value string FromBytes(BinaryReader, IWorldAccessor) public virtual void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor Resolve(IWorldAccessor, string) Turns Type, Code and Attributes into an IItemStack public bool Resolve(IWorldAccessor resolver, string sourceForErrorLogging) Parameters resolver IWorldAccessor sourceForErrorLogging string Returns bool SatisfiesAsIngredient(ItemStack, bool) Checks whether or not the input satisfies as an ingredient for the recipe. public bool SatisfiesAsIngredient(ItemStack inputStack, bool checkStacksize = true) Parameters inputStack ItemStack checkStacksize bool Returns bool ToBytes(BinaryWriter) public virtual void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.CreativeInventoryTab.html": {
    "href": "api/Vintagestory.API.Common.CreativeInventoryTab.html",
    "title": "Class CreativeInventoryTab | VintageStory API",
    "keywords": "Class CreativeInventoryTab Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class CreativeInventoryTab : InventoryGeneric, IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object InventoryBase InventoryGeneric CreativeInventoryTab Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Inherited Members InventoryGeneric.slots InventoryGeneric.TransitionableSpeedMulByType InventoryGeneric.PerishableFactorByFoodCategory InventoryGeneric.OnGetSuitability InventoryGeneric.OnGetAutoPushIntoSlot InventoryGeneric.OnGetAutoPullFromSlot InventoryGeneric.BaseWeight InventoryGeneric.Init(int, string, string, NewSlotDelegate) InventoryGeneric.Count InventoryGeneric.this[int] InventoryGeneric.GetSuitability(ItemSlot, ItemSlot, bool) InventoryGeneric.FromTreeAttributes(ITreeAttribute) InventoryGeneric.AddSlots(int) InventoryGeneric.ToTreeAttributes(ITreeAttribute) InventoryGeneric.GetAutoPullFromSlot(BlockFacing) InventoryGeneric.GetAutoPushIntoSlot(BlockFacing, ItemSlot) InventoryBase.Api InventoryBase.Pos InventoryBase.MaxContentDimensions InventoryBase.baseWeight InventoryBase.className InventoryBase.instanceID InventoryBase.lastChangedSinceServerStart InventoryBase.openedByPlayerGUIds InventoryBase.InvNetworkUtil InventoryBase.dirtySlots InventoryBase.InventoryID InventoryBase.ClassName InventoryBase.LastChanged InventoryBase.CountForNetworkPacket InventoryBase.IsDirty InventoryBase.DirtySlots InventoryBase.TakeLocked InventoryBase.PutLocked InventoryBase.RemoveOnClose InventoryBase.SlotModified InventoryBase.SlotNotified InventoryBase.OnInventoryOpened InventoryBase.OnInventoryClosed InventoryBase.OnAcquireTransitionSpeed InventoryBase.Empty InventoryBase.FirstNonEmptySlot InventoryBase.AuditLogAccess InventoryBase.LateInitialize(string, ICoreAPI) InventoryBase.AfterBlocksLoaded(IWorldAccessor) InventoryBase.ResolveBlocksOrItems() InventoryBase.GetSlotId(ItemSlot) InventoryBase.GetBestSuitedSlot(ItemSlot, List<ItemSlot>) InventoryBase.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) InventoryBase.CanContain(ItemSlot, ItemSlot) InventoryBase.TryFlipItems(int, ItemSlot) InventoryBase.CanPlayerAccess(IPlayer, EntityPos) InventoryBase.CanPlayerModify(IPlayer, EntityPos) InventoryBase.OnSearchTerm(string) InventoryBase.ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) InventoryBase.OnItemSlotModified(ItemSlot) InventoryBase.DidModifyItemSlot(ItemSlot, ItemStack) InventoryBase.PerformNotifySlot(int) InventoryBase.TryFlipItemStack(IPlayer, string[], int[], long[]) InventoryBase.TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) InventoryBase.GetSlotsIfExists(IPlayer, string[], int[]) InventoryBase.SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) InventoryBase.SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) InventoryBase.GenEmptySlots(int) InventoryBase.MarkSlotDirty(int) InventoryBase.DiscardAll() InventoryBase.DropSlotIfHot(ItemSlot, IPlayer) InventoryBase.DropSlots(Vec3d, params int[]) InventoryBase.DropAll(Vec3d, int) InventoryBase.Clear() InventoryBase.OnOwningEntityDeath(Vec3d) InventoryBase.InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) InventoryBase.GetDefaultTransitionSpeedMul(EnumTransitionType) InventoryBase.Open(IPlayer) InventoryBase.Close(IPlayer) InventoryBase.HasOpened(IPlayer) InventoryBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CreativeInventoryTab(int, string, string, ICoreAPI) public CreativeInventoryTab(int quantitySlots, string className, string instanceId, ICoreAPI api) Parameters quantitySlots int className string instanceId string api ICoreAPI CreativeInventoryTab(int, string, ICoreAPI) public CreativeInventoryTab(int quantitySlots, string invId, ICoreAPI api) Parameters quantitySlots int invId string api ICoreAPI Fields TabIndex public int TabIndex Field Value int Methods GetTransitionSpeedMul(EnumTransitionType, ItemStack) Does this inventory speed up or slow down a transition for given itemstack? (Default: 1 for perish and 0 otherwise) public override float GetTransitionSpeedMul(EnumTransitionType transType, ItemStack stack) Parameters transType EnumTransitionType stack ItemStack Returns float NewSlot(int) Called when initializing the inventory or when loading the contents protected override ItemSlot NewSlot(int slotId) Parameters slotId int Returns ItemSlot"
  },
  "api/Vintagestory.API.Common.CreativeTabAndStackList.html": {
    "href": "api/Vintagestory.API.Common.CreativeTabAndStackList.html",
    "title": "Class CreativeTabAndStackList | VintageStory API",
    "keywords": "Class CreativeTabAndStackList Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows you to add a list of item stacks to put various into creative menu tabs. Open in GitHub [DocumentAsJson] public class CreativeTabAndStackList Inheritance object CreativeTabAndStackList Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"creativeinventoryStacksByType\": { \"*-fired\": [ { \"tabs\": [ \"general\", \"decorative\" ], \"stacks\": [ { \"type\": \"block\", \"code\": \"bowl-fired\", \"attributes\": { \"ucontents\": [ { \"type\": \"item\", \"code\": \"waterportion\", \"makefull\": true } ] } }, { \"type\": \"block\", \"code\": \"bowl-fired\", \"attributes\": { \"ucontents\": [ { \"type\": \"item\", \"code\": \"honeyportion\", \"makefull\": true } ] } }, { \"type\": \"block\", \"code\": \"bowl-fired\" }, { \"type\": \"block\", \"code\": \"bowl-raw\" } ] } ] }, Fields Stacks A list of item stacks to put in tabs. Note that every itemstack here will be placed in every Tabs entry. [DocumentAsJson] public JsonItemStack[] Stacks Field Value JsonItemStack[] Tabs A list of creative tabs to put items into. Note that all itemstacks in Stacks will be placed in all tabs. [DocumentAsJson] public string[] Tabs Field Value string[] Methods FromBytes(BinaryReader, IClassRegistryAPI) Reads the blocks and items from the Json files and converts them to an array of tabs which contain those blocks and items. public void FromBytes(BinaryReader reader, IClassRegistryAPI registry) Parameters reader BinaryReader The reader to read the json. registry IClassRegistryAPI The registry of blocks and items. ToBytes(BinaryWriter, IClassRegistryAPI) Writes all the data to the BinaryWriter. public void ToBytes(BinaryWriter writer, IClassRegistryAPI registry) Parameters writer BinaryWriter The writer to write the save data registry IClassRegistryAPI The registry of blocks and items."
  },
  "api/Vintagestory.API.Common.CropBehavior.html": {
    "href": "api/Vintagestory.API.Common.CropBehavior.html",
    "title": "Class CropBehavior | VintageStory API",
    "keywords": "Class CropBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public abstract class CropBehavior Inheritance object CropBehavior Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CropBehavior(Block) public CropBehavior(Block block) Parameters block Block Fields block public Block block Field Value Block Methods Initialize(JsonObject) Initializes the crop with additional properties. public virtual void Initialize(JsonObject properties) Parameters properties JsonObject OnPlanted(ICoreAPI, ItemSlot, EntityAgent, BlockSelection) The event fired when the crop is planted. public virtual void OnPlanted(ICoreAPI api, ItemSlot itemslot, EntityAgent byEntity, BlockSelection blockSel) Parameters api ICoreAPI The core API. itemslot ItemSlot The itemslot that the plant was planted with. byEntity EntityAgent The entity that planted the plant. blockSel BlockSelection The block selection used when the seed was planted. TryGrowCrop(ICoreAPI, IFarmlandBlockEntity, double, int, ref EnumHandling) Attempts to grow the crop. public virtual bool TryGrowCrop(ICoreAPI api, IFarmlandBlockEntity farmland, double currentTotalHours, int newGrowthStage, ref EnumHandling handling) Parameters api ICoreAPI The Core API farmland IFarmlandBlockEntity The farmland below the crop. currentTotalHours double newGrowthStage int The next growth stage. handling EnumHandling Whether or not this event was handled. Returns bool Whether or not the crop grew."
  },
  "api/Vintagestory.API.Common.CrushingProperties.html": {
    "href": "api/Vintagestory.API.Common.CrushingProperties.html",
    "title": "Class CrushingProperties | VintageStory API",
    "keywords": "Class CrushingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of properties that allow an object to be ground in a quern. Open in GitHub [DocumentAsJson] public class CrushingProperties Inheritance object CrushingProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"crushingPropsByType\": { \"ore-poor-ilmenite-*\": { \"crushedStack\": { \"type\": \"item\", \"code\": \"crushed-ilmenite\" }, \"quantity\": { \"avg\": 1 }, \"hardnessTier\": 4 }, \"ore-poor-cassiterite-*\": { \"crushedStack\": { \"type\": \"item\", \"code\": \"crushed-cassiterite\" }, \"quantity\": { \"avg\": \".33\" }, \"hardnessTier\": 1 }, }, Fields CrushedStack If set, the block/item is crusable in a pulverizer and this is the resulting itemstack once the crushing time is over. [DocumentAsJson] public JsonItemStack CrushedStack Field Value JsonItemStack HardnessTier The hardness tier for this collectible. Affects what pounder cap must be used for pulverization. 0 = stone 1 = copper 2 = bronze 3 = iron 4 = steel [DocumentAsJson] public int HardnessTier Field Value int Quantity The random quantity of item to return. Note that this value is multiplied by CrushedStack's quantity. [DocumentAsJson] public NatFloat Quantity Field Value NatFloat Methods Clone() Makes a deep copy of the properties. public CrushingProperties Clone() Returns CrushingProperties"
  },
  "api/Vintagestory.API.Common.CustomGetTransitionSpeedMulDelegate.html": {
    "href": "api/Vintagestory.API.Common.CustomGetTransitionSpeedMulDelegate.html",
    "title": "Delegate CustomGetTransitionSpeedMulDelegate | VintageStory API",
    "keywords": "Delegate CustomGetTransitionSpeedMulDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Custom transition speed handler public delegate float CustomGetTransitionSpeedMulDelegate(EnumTransitionType transType, ItemStack stack, float mulByConfig) Parameters transType EnumTransitionType stack ItemStack mulByConfig float Multiplier set by other configuration, if any, otherwise 1 Returns float Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.DamageSource.html": {
    "href": "api/Vintagestory.API.Common.DamageSource.html",
    "title": "Class DamageSource | VintageStory API",
    "keywords": "Class DamageSource Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class DamageSource Inheritance object DamageSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CauseEntity The entity that caused this damage, e.g. the entity that threw the SourceEntity projectile, if any NOTE: will be null for non-projectile damage e.g. melee attacks: to get the attacking entity properly for both melee and projectile damage, use GetCauseEntity() public Entity CauseEntity Field Value Entity DamageOverTimeType If Duration greater than zero, this damage will be turned into damage overt time effect with this type. This is used to look for specific types of DoT effects. For example it can be used to stop bleeding with bandages. public int DamageOverTimeType Field Value int DamageTier Tier of the weapon used to damage the entity, if any public int DamageTier Field Value int Duration If is greater than zero, damage will be turned into damage over time and will be fully applied over this time. If TicksPerDuration is set to 1, it will mean that damage will just be delayed by Duration. public TimeSpan Duration Field Value TimeSpan HitPosition The relative hit position of where the damage occured. public Vec3d HitPosition Field Value Vec3d IgnoreInvFrames public bool IgnoreInvFrames Field Value bool KnockbackStrength The amount of knockback this damage will incur public float KnockbackStrength Field Value float Source The type of source the damage came from. public EnumDamageSource Source Field Value EnumDamageSource SourceBlock The source block the damage came from, if any public Block SourceBlock Field Value Block SourceEntity The source entity the damage came from, if any public Entity SourceEntity Field Value Entity SourcePos the location of the damage source. public Vec3d SourcePos Field Value Vec3d TicksPerDuration If Duration greater than zero, total damage will be split into this many portions, each applied in Duration/TicksPerDuration time after another. public int TicksPerDuration Field Value int Type The type of damage that was taken. public EnumDamageType Type Field Value EnumDamageType YDirKnockbackDiv public float YDirKnockbackDiv Field Value float Properties DamageOverTimeTypeEnum public EnumDamageOverTimeEffectType DamageOverTimeTypeEnum { get; set; } Property Value EnumDamageOverTimeEffectType Methods GetAttackAngle(Vec3d, out double, out double) If we have a hitposition this returns the pitch between the attacker and the attacked position public bool GetAttackAngle(Vec3d attackedPos, out double attackYaw, out double attackPitch) Parameters attackedPos Vec3d attackYaw double attackPitch double Returns bool GetCauseEntity() Get the entity that caused the damage. If a projectile like a stone was thrown this will return the entity that threw the stone instead of the stone. public Entity GetCauseEntity() Returns Entity The entity that caused the damage GetSourcePosition() Fetches the location of the damage source from either SourcePos or SourceEntity public Vec3d GetSourcePosition() Returns Vec3d"
  },
  "api/Vintagestory.API.Common.DatetimeArgParser.html": {
    "href": "api/Vintagestory.API.Common.DatetimeArgParser.html",
    "title": "Class DatetimeArgParser | VintageStory API",
    "keywords": "Class DatetimeArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class DatetimeArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase DatetimeArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DatetimeArgParser(string, bool) public DatetimeArgParser(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.DecorBits.html": {
    "href": "api/Vintagestory.API.Common.DecorBits.html",
    "title": "Struct DecorBits | VintageStory API",
    "keywords": "Struct DecorBits Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll An actual instance of this struct is the 'faceAndSubposition' data. The struct also provides various static methods to convert elements to and from a PackedIndex used in WorldChunk storage public struct DecorBits Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DecorBits(int) public DecorBits(int value) Parameters value int DecorBits(BlockFacing) Simplest case, we supply just a face (no subposition for cave-art, and no rotation) public DecorBits(BlockFacing face) Parameters face BlockFacing DecorBits(BlockFacing, int, int, int) Turn both face and local voxel position to a decor faceAndSubposition index public DecorBits(BlockFacing face, int vx, int vy, int vz) Parameters face BlockFacing vx int 0..15 vy int 0..15 vz int 0..15 Fields maskRotationData A bit mask to select the three rotation data bits; this is also the maxvalue of the rotationData public const int maskRotationData = 7 Field Value int Properties Face public int Face { get; } Property Value int Rotation public int Rotation { get; set; } Property Value int SubPosition public int SubPosition { get; } Property Value int Methods FaceAndSubpositionFromIndex(int) public static int FaceAndSubpositionFromIndex(int packedIndex) Parameters packedIndex int Returns int FaceAndSubpositionToIndex(int) The packedIndex works like this: [radfast 7 Dec 2024, 1.20-rc.2] The packedIndex has four components: index3d for the block's local x,y,z value within the chunk, each in the range 0-31, for 15 bits in total faceindex for the face of the block this decor is on (corresponding to BlockFacing.Index), range 0-5 optionally, a subposition in the range 0-256, where 0 means no subposition, and values 1-256 give a subposition in the 16x16 subgrid, used for ArtPigment or similar optionally, 3 bits of rotation data These are packed into bits in the following way, it has to be this way for backwards compatibility reasons (assuming we do not want to add a new chunk dataversion) 31 - 24 (the five Least Significant Bits of the subposition) * 6 + faceindex 23 - 21 (the three Most Significant Bits of the subposition) 20 - 19 (unused) 18 - 16 rotation data 15 (unused) 14 - 0 index3d (Exceptionally, the value in bits 31-24 has the magic value of (0x20 * 6 + faceindex), and the value in bits 23-16 is 0xE0, if a subposition value of 256 is intended: this works within the existing algorithms because 0xE0 + 0x20 == 0x100 i.e. 256. If necessary we can have values up to 0x2A there, so the range of possible subpositions is up to 266) 0000 0000 0000 0000 0000 0000 0000 0000 public static int FaceAndSubpositionToIndex(int faceAndSubposition) Parameters faceAndSubposition int Returns int FaceFromIndex(int) public static int FaceFromIndex(int packedIndex) Parameters packedIndex int Returns int FaceToIndex(BlockFacing) public static int FaceToIndex(BlockFacing face) Parameters face BlockFacing Returns int FacingFromIndex(int) public static BlockFacing FacingFromIndex(int packedIndex) Parameters packedIndex int Returns BlockFacing Index3dFromIndex(int) public static int Index3dFromIndex(int packedIndex) Parameters packedIndex int Returns int RotationFromIndex(int) public static int RotationFromIndex(int packedIndex) Parameters packedIndex int Returns int SubpositionFromIndex(int) public static int SubpositionFromIndex(int packedIndex) Parameters packedIndex int Returns int Operators implicit operator int(DecorBits) public static implicit operator int(DecorBits a) Parameters a DecorBits Returns int"
  },
  "api/Vintagestory.API.Common.DecorFlags.html": {
    "href": "api/Vintagestory.API.Common.DecorFlags.html",
    "title": "Class DecorFlags | VintageStory API",
    "keywords": "Class DecorFlags Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class DecorFlags Inheritance object DecorFlags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AlternateZOffset If true, alternates z-offset vertexflag by 1 in odd/even XZ positions to reduce z-fighting (used e.g. for medium carpets overlaying neighbours) public const int AlternateZOffset = 4 Field Value int DrawIfCulled If true, do not cull even if parent face was culled (used e.g. for medium carpet, which stick out beyond the parent face) public const int DrawIfCulled = 2 Field Value int HasSidedVariants If true, this decor supplies its own different models for NSEWUD placement, if false the code will auto-rotate the model public const int HasSidedVariants = 32 Field Value int IsDecor Set to 1 for all decor blocks, or else they will not be rendered. (This intentionally prevents unloaded / unknown decor blocks from rendering) public const int IsDecor = 1 Field Value int NotFullFace IF true, this decor is NOT (at least) a full opaque face so that the parent block face still needs to be drawn public const int NotFullFace = 8 Field Value int Removable If true, this decor is removable using the players hands, without breaking the parent block public const int Removable = 16 Field Value int"
  },
  "api/Vintagestory.API.Common.DecorUpdate.html": {
    "href": "api/Vintagestory.API.Common.DecorUpdate.html",
    "title": "Struct DecorUpdate | VintageStory API",
    "keywords": "Struct DecorUpdate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public struct DecorUpdate Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields decorId public int decorId Field Value int faceAndSubposition public int faceAndSubposition Field Value int"
  },
  "api/Vintagestory.API.Common.DialogClickDelegate.html": {
    "href": "api/Vintagestory.API.Common.DialogClickDelegate.html",
    "title": "Delegate DialogClickDelegate | VintageStory API",
    "keywords": "Delegate DialogClickDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The delegate for a dialogue click. public delegate void DialogClickDelegate(IServerPlayer byPlayer, string widgetId) Parameters byPlayer IServerPlayer The player that clicked the dialogue. widgetId string The internal name of the Widget. Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.DirectionArgParser-1.html": {
    "href": "api/Vintagestory.API.Common.DirectionArgParser-1.html",
    "title": "Class DirectionArgParser<T> | VintageStory API",
    "keywords": "Class DirectionArgParser<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public class DirectionArgParser<T> : ArgumentParserBase, ICommandArgumentParser where T : IVec3, new() Type Parameters T Inheritance object ArgumentParserBase DirectionArgParser<T> Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DirectionArgParser(string, bool) public DirectionArgParser(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool Methods GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.DoubleArgParser.html": {
    "href": "api/Vintagestory.API.Common.DoubleArgParser.html",
    "title": "Class DoubleArgParser | VintageStory API",
    "keywords": "Class DoubleArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class DoubleArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase DoubleArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DoubleArgParser(string, double, bool) public DoubleArgParser(string argName, double defaultvalue, bool isMandatoryArg) Parameters argName string defaultvalue double isMandatoryArg bool DoubleArgParser(string, double, double, bool) public DoubleArgParser(string argName, double min, double max, bool isMandatoryArg) Parameters argName string min double max double isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.DummyInventory.html": {
    "href": "api/Vintagestory.API.Common.DummyInventory.html",
    "title": "Class DummyInventory | VintageStory API",
    "keywords": "Class DummyInventory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A place holder inventory, useful, e.g., for when you want to render an itemstack and not have it spoil Open in GitHub public class DummyInventory : InventoryBase, IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object InventoryBase DummyInventory Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Inherited Members InventoryBase.Api InventoryBase.Pos InventoryBase.MaxContentDimensions InventoryBase.baseWeight InventoryBase.className InventoryBase.instanceID InventoryBase.lastChangedSinceServerStart InventoryBase.openedByPlayerGUIds InventoryBase.InvNetworkUtil InventoryBase.dirtySlots InventoryBase.InventoryID InventoryBase.ClassName InventoryBase.LastChanged InventoryBase.CountForNetworkPacket InventoryBase.IsDirty InventoryBase.DirtySlots InventoryBase.TakeLocked InventoryBase.PutLocked InventoryBase.RemoveOnClose InventoryBase.SlotModified InventoryBase.SlotNotified InventoryBase.OnInventoryOpened InventoryBase.OnInventoryClosed InventoryBase.OnAcquireTransitionSpeed InventoryBase.Empty InventoryBase.FirstNonEmptySlot InventoryBase.AuditLogAccess InventoryBase.LateInitialize(string, ICoreAPI) InventoryBase.AfterBlocksLoaded(IWorldAccessor) InventoryBase.ResolveBlocksOrItems() InventoryBase.GetSlotId(ItemSlot) InventoryBase.GetBestSuitedSlot(ItemSlot, List<ItemSlot>) InventoryBase.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) InventoryBase.GetSuitability(ItemSlot, ItemSlot, bool) InventoryBase.CanContain(ItemSlot, ItemSlot) InventoryBase.TryFlipItems(int, ItemSlot) InventoryBase.CanPlayerAccess(IPlayer, EntityPos) InventoryBase.CanPlayerModify(IPlayer, EntityPos) InventoryBase.OnSearchTerm(string) InventoryBase.ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) InventoryBase.OnItemSlotModified(ItemSlot) InventoryBase.DidModifyItemSlot(ItemSlot, ItemStack) InventoryBase.PerformNotifySlot(int) InventoryBase.TryFlipItemStack(IPlayer, string[], int[], long[]) InventoryBase.TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) InventoryBase.GetSlotsIfExists(IPlayer, string[], int[]) InventoryBase.SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) InventoryBase.SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) InventoryBase.GenEmptySlots(int) InventoryBase.NewSlot(int) InventoryBase.MarkSlotDirty(int) InventoryBase.DiscardAll() InventoryBase.DropSlotIfHot(ItemSlot, IPlayer) InventoryBase.DropSlots(Vec3d, params int[]) InventoryBase.DropAll(Vec3d, int) InventoryBase.Clear() InventoryBase.OnOwningEntityDeath(Vec3d) InventoryBase.InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) InventoryBase.GetDefaultTransitionSpeedMul(EnumTransitionType) InventoryBase.Open(IPlayer) InventoryBase.Close(IPlayer) InventoryBase.HasOpened(IPlayer) InventoryBase.GetEnumerator() InventoryBase.GetAutoPushIntoSlot(BlockFacing, ItemSlot) InventoryBase.GetAutoPullFromSlot(BlockFacing) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DummyInventory(ICoreAPI, int) public DummyInventory(ICoreAPI api, int quantitySlots = 1) Parameters api ICoreAPI quantitySlots int Properties Count Returns the number of slots in this inventory. public override int Count { get; } Property Value int this[int] Gets or sets the slot at the given slot number. Returns null for invalid slot number (below 0 or above Count-1). The setter allows for replacing slots with custom ones, though caution is advised. public override ItemSlot this[int slotId] { get; set; } Parameters slotId int Property Value ItemSlot Slots public ItemSlot[] Slots { get; } Property Value ItemSlot[] Methods FromTreeAttributes(ITreeAttribute) Called when the game is loaded or loaded from server public override void FromTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute GetTransitionSpeedMul(EnumTransitionType, ItemStack) Does this inventory speed up or slow down a transition for given itemstack? (Default: 1 for perish and 0 otherwise) public override float GetTransitionSpeedMul(EnumTransitionType transType, ItemStack stack) Parameters transType EnumTransitionType stack ItemStack Returns float ToTreeAttributes(ITreeAttribute) Called when the game is saved or sent to client public override void ToTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute"
  },
  "api/Vintagestory.API.Common.DummyLoggerException.html": {
    "href": "api/Vintagestory.API.Common.DummyLoggerException.html",
    "title": "Class DummyLoggerException | VintageStory API",
    "keywords": "Class DummyLoggerException Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class DummyLoggerException : Exception, ISerializable Inheritance object Exception DummyLoggerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DummyLoggerException(string) public DummyLoggerException(string message) Parameters message string"
  },
  "api/Vintagestory.API.Common.DummySlot.html": {
    "href": "api/Vintagestory.API.Common.DummySlot.html",
    "title": "Class DummySlot | VintageStory API",
    "keywords": "Class DummySlot Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A single slot not attached to a given inventory. Open in GitHub public class DummySlot : ItemSlot Inheritance object ItemSlot DummySlot Derived EntityItemSlot Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.StorageType ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DummySlot() public DummySlot() DummySlot(ItemStack) public DummySlot(ItemStack stack) Parameters stack ItemStack DummySlot(ItemStack, InventoryBase) public DummySlot(ItemStack stack, InventoryBase inv) Parameters stack ItemStack inv InventoryBase"
  },
  "api/Vintagestory.API.Common.ElementPose.html": {
    "href": "api/Vintagestory.API.Common.ElementPose.html",
    "title": "Class ElementPose | VintageStory API",
    "keywords": "Class ElementPose Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The position of an element. Open in GitHub public class ElementPose Inheritance object ElementPose Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AnimModelMatrix The model matrix of this element. public float[] AnimModelMatrix Field Value float[] ChildElementPoses public List<ElementPose> ChildElementPoses Field Value List<ElementPose> ForElement The element this positioning is for. public ShapeElement ForElement Field Value ShapeElement RotShortestDistanceX public bool RotShortestDistanceX Field Value bool RotShortestDistanceY public bool RotShortestDistanceY Field Value bool RotShortestDistanceZ public bool RotShortestDistanceZ Field Value bool degOffX public float degOffX Field Value float degOffY public float degOffY Field Value float degOffZ public float degOffZ Field Value float degX public float degX Field Value float degY public float degY Field Value float degZ public float degZ Field Value float scaleX public float scaleX Field Value float scaleY public float scaleY Field Value float scaleZ public float scaleZ Field Value float translateX public float translateX Field Value float translateY public float translateY Field Value float translateZ public float translateZ Field Value float Methods Add(ElementPose, ElementPose, float, float) public void Add(ElementPose tf, ElementPose tfNext, float l, float weight) Parameters tf ElementPose tfNext ElementPose l float weight float Clear() public void Clear() ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.Entities.BaseSpawnConditions.html": {
    "href": "api/Vintagestory.API.Common.Entities.BaseSpawnConditions.html",
    "title": "Class BaseSpawnConditions | VintageStory API",
    "keywords": "Class BaseSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A base class for entities spawning conditions. Open in GitHub [DocumentAsJson] public class BaseSpawnConditions : ClimateSpawnCondition Inheritance object ClimateSpawnCondition BaseSpawnConditions Derived RuntimeSpawnConditions WorldGenSpawnConditions Inherited Members ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs ClimateSpawnCondition.SetFrom(ClimateSpawnCondition) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ClimateValueMode Whether the rain and temperature values are referring to the worldgen values (i.e. yearly averages) or the current values at the moment of spawning. [DocumentAsJson] public EnumGetClimateMode ClimateValueMode Field Value EnumGetClimateMode Companions Additional companions for the spawn. [DocumentAsJson] public AssetLocation[] Companions Field Value AssetLocation[] Group The group of the spawn conditions. Vanilla groups are: hostile neutral passive Hostile creatures should be defined as such here. This will automatically stop them spawning with a grace timer, and in locations where hostiles should not spawn. [DocumentAsJson] public string Group Field Value string HerdSize the group size for the spawn. [DocumentAsJson] public NatFloat HerdSize Field Value NatFloat InsideBlockCodes The blocks that the object will spawn in. [DocumentAsJson] public AssetLocation[] InsideBlockCodes Field Value AssetLocation[] InsideBlockCodesBeginsWith protected string[] InsideBlockCodesBeginsWith Field Value string[] InsideBlockCodesExact protected string[] InsideBlockCodesExact Field Value string[] InsideBlockCodesResolved protected HashSet<Block> InsideBlockCodesResolved Field Value HashSet<Block> InsideBlockFirstLetters protected string InsideBlockFirstLetters Field Value string LightLevelType The type of light counted for spawning purposes. [DocumentAsJson] public EnumLightLevelType LightLevelType Field Value EnumLightLevelType MaxLightLevel The maximum light level for an object to spawn. [DocumentAsJson] public int MaxLightLevel Field Value int MinLightLevel The minimum light level for an object to spawn. [DocumentAsJson] public int MinLightLevel Field Value int RequireSolidGround Checks to see if the object requires solid ground. [DocumentAsJson] public bool RequireSolidGround Field Value bool TryOnlySurface checks to see if the object can only spawn in the surface. [DocumentAsJson] public bool TryOnlySurface Field Value bool Properties GroupSize Obsolete. Use HerdSize instead. [DocumentAsJson] [Obsolete(\"Use HerdSize instead\")] public NatFloat GroupSize { get; set; } Property Value NatFloat Methods CanSpawnInside(Block) public bool CanSpawnInside(Block testBlock) Parameters testBlock Block Returns bool Initialise(IServerWorldAccessor, string, Dictionary<AssetLocation, Block[]>) public void Initialise(IServerWorldAccessor server, string entityName, Dictionary<AssetLocation, Block[]> searchCache) Parameters server IServerWorldAccessor entityName string searchCache Dictionary<AssetLocation, Block[]>"
  },
  "api/Vintagestory.API.Common.Entities.ClimateSpawnCondition.html": {
    "href": "api/Vintagestory.API.Common.Entities.ClimateSpawnCondition.html",
    "title": "Class ClimateSpawnCondition | VintageStory API",
    "keywords": "Class ClimateSpawnCondition Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A list of conditions based on climate. Open in GitHub [DocumentAsJson] public class ClimateSpawnCondition Inheritance object ClimateSpawnCondition Derived BaseSpawnConditions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields MaxForest The maximum amount of forest cover needed for the object to spawn. [DocumentAsJson] public float MaxForest Field Value float MaxRain The maximum amount of rain for the object to spawn. [DocumentAsJson] public float MaxRain Field Value float MaxShrubs The maximum amount of shrubbery needed for the object to spawn. [DocumentAsJson] public float MaxShrubs Field Value float MaxTemp The maximum tempurature for the object to spawn. [DocumentAsJson] public float MaxTemp Field Value float MaxY Won't span above maxY. 0...1 is world bottom to sea level, 1...2 is sea level to world top [DocumentAsJson] public float MaxY Field Value float MinForest The minimum amount of forest cover needed for the object to spawn. [DocumentAsJson] public float MinForest Field Value float MinForestOrShrubs The minimum amount of forest or shrubs for the object to spawn. [DocumentAsJson] public float MinForestOrShrubs Field Value float MinRain The minimum amount of rain for the object to spawn. [DocumentAsJson] public float MinRain Field Value float MinShrubs The minimum amount of shrubbery needed for the object to spawn. [DocumentAsJson] public float MinShrubs Field Value float MinTemp The minimum tempurature for the object to spawn. [DocumentAsJson] public float MinTemp Field Value float MinY Won't span below minY. 0...1 is world bottom to sea level, 1...2 is sea level to world top [DocumentAsJson] public float MinY Field Value float Methods SetFrom(ClimateSpawnCondition) public void SetFrom(ClimateSpawnCondition conds) Parameters conds ClimateSpawnCondition"
  },
  "api/Vintagestory.API.Common.Entities.Entity.html": {
    "href": "api/Vintagestory.API.Common.Entities.Entity.html",
    "title": "Class Entity | VintageStory API",
    "keywords": "Class Entity Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll The basic class for all entities in the game Open in GitHub public abstract class Entity : RegistryObject Inheritance object RegistryObject Entity Derived EntityAgent EntityChunky EntityItem Inherited Members RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Entity() Creates a new instance of an entity public Entity() Entity(int) Creates a minimally populated entity with configurable tracking range, no Stats, no AnimManager and no animations attribute. Currently used by EntityItem. protected Entity(int trackingRange) Parameters trackingRange int Fields ActivityTimers An uptime value running activities. Available on the game client and server. Not synchronized. public Dictionary<string, long> ActivityTimers Field Value Dictionary<string, long> AfterPhysicsTick Invoked once per server tick, immediately following the physics ticking, if this Entity has any of the Physics behaviors. Example use, anything which requires an update of the entity's current position, such as BehaviorRepulseAgents public Action AfterPhysicsTick Field Value Action AirBubbleParticleProps public static AirBubbleParticles AirBubbleParticleProps Field Value AirBubbleParticles Api The api, if you need it. Available on the game client and server. public ICoreAPI Api Field Value ICoreAPI Attributes Permanently stored entity attributes that are only client or only server side public SyncedTreeAttribute Attributes Field Value SyncedTreeAttribute BHRepulseAgents The Entity's BehaviorRepulseAgents, if it has one - here for critical performance reasons. This may also be accessed from Physics ticking public EntityBehavior BHRepulseAgents Field Value EntityBehavior ClimbingIntoFace public BlockFacing ClimbingIntoFace Field Value BlockFacing ClimbingOnCollBox Set by the game client and server. public Cuboidf ClimbingOnCollBox Field Value Cuboidf ClimbingOnFace The face the entity is climbing on. Null if the entity is not climbing. Set by the game client and server. public BlockFacing ClimbingOnFace Field Value BlockFacing CollidedHorizontally True if the entity is in touch with something solid on both horizontal axes. Set by the game client and server. public bool CollidedHorizontally Field Value bool CollidedVertically True if the entity is in touch with something solid on the vertical axis. Set by the game client and server. public bool CollidedVertically Field Value bool CollisionBox The entities collision box. Offseted by the animation system when necessary. Set by the game client and server. public Cuboidf CollisionBox Field Value Cuboidf DebugAttributes If entity debug mode is on, this info will be transitted to client and displayed above the entities head public SyncedTreeAttribute DebugAttributes Field Value SyncedTreeAttribute DespawnReason public EntityDespawnData DespawnReason Field Value EntityDespawnData EntityId A unique identifier for this entity. Set by the game client and server. public long EntityId Field Value long FeetInLiquid True if the bottom of the collisionbox is inside a liquid. Set by the game client and server. public bool FeetInLiquid Field Value bool FireParticleProps public static AdvancedParticleProperties[] FireParticleProps Field Value AdvancedParticleProperties[] FloatingSedimentParticles public static FloatingSedimentParticles FloatingSedimentParticles Field Value FloatingSedimentParticles HurtColor Color used when the entity is being attacked protected int HurtColor Field Value int InChunkIndex3d public long InChunkIndex3d Field Value long InLava public bool InLava Field Value bool InLavaBeginTotalMs public long InLavaBeginTotalMs Field Value long IsRendered Set by the client renderer when the entity was rendered last frame public bool IsRendered Field Value bool IsShadowRendered Set by the client renderer when the entity shadow was rendered last frame public bool IsShadowRendered Field Value bool IsTeleport Used by the PhysicsManager to tell connected clients that the next entity position packet should not have its position change get interpolated. Gets set to false after the packet was sent public bool IsTeleport Field Value bool IsTracked Used by PhysicsManager. Added here to increase performance 0 = not tracked, 1 = lowResTracked, 2 = fullyTracked public byte IsTracked Field Value byte NearestPlayerDistance public float NearestPlayerDistance Field Value float OnFireBeginTotalMs public long OnFireBeginTotalMs Field Value long OnGround True if this entity is in touch with the ground. Set by the game client and server. public bool OnGround Field Value bool OriginCollisionBox The entities collision box. Not Offseted. Set by the game client and server. public Cuboidf OriginCollisionBox Field Value Cuboidf OriginSelectionBox The entities selection box. Not Offseted. Set by the game client and server. public Cuboidf OriginSelectionBox Field Value Cuboidf PhysicsUpdateWatcher The vanilla physics systems will call this method if a physics behavior was assigned to it. The game client for example requires this to be called for the current player to properly render the player. Available on the game client and server. public PhysicsTickDelegate PhysicsUpdateWatcher Field Value PhysicsTickDelegate Pos Client position public EntityPos Pos Field Value EntityPos PositionBeforeFalling The position where the entity last had contact with the ground. Set by the game client and server. public Vec3d PositionBeforeFalling Field Value Vec3d PositionTicked Used by PhysicsManager. Added here to increase performance Set to true when position packet prepared during physics ticking, set to false following AfterPhysicsTick() public bool PositionTicked Field Value bool PreviousServerPos Server simulated position copy. Needed by Entities server system to send pos updatess only if ServerPos differs noticably from PreviousServerPos public EntityPos PreviousServerPos Field Value EntityPos SelectionBox The entities selection box. Offseted by the animation system when necessary. Set by the game client and server. public Cuboidf SelectionBox Field Value Cuboidf ServerBehaviorsMainThread Used for efficiency in multi-player servers, to speed up iterating over relevant behaviors only. These are the behaviors returning Threadsafe == false (which is the default) public EntityBehavior[] ServerBehaviorsMainThread Field Value EntityBehavior[] ServerBehaviorsThreadsafe Used for efficiency in multi-player servers, to speed up iterating over relevant behaviors only. These are the behaviors returning Threadsafe == true; These behaviors may have their regular ticking (including ShouldExecute() etc) called EITHER from the main thread OR from another physics thread, depending on PhysicsManager logic public EntityBehavior[] ServerBehaviorsThreadsafe Field Value EntityBehavior[] ServerPos Server simulated position. May not exactly match the client positon public EntityPos ServerPos Field Value EntityPos SimulationRange The range in blocks the entity has to be to a client to do physics and AI. When outside range, then State will be set to inactive public int SimulationRange Field Value int SplashParticleProps public static WaterSplashParticles SplashParticleProps Field Value WaterSplashParticles State The current entity state. NOT stored in WatchedAttributes in from/tobytes when sending to client as always set to Active on client-side Initialize(). Server-side if saved it would likely initially be Despawned when an entity is first loaded from the save due to entities being despawned during the UnloadChunks process, so let's make it always Despawned for consistent behavior (it will be set to Active/Inactive during Initialize() anyhow) public EnumEntityState State Field Value EnumEntityState Stats public EntityStats Stats Field Value EntityStats Swimming True if the collisionbox is 2/3rds submerged in liquid. Set by the game client and server. public bool Swimming Field Value bool Tags List of current entity tags. Synced after initialization. Synchronization can be triggered by calling 'MarkTagDirty()' method. Dont set on client side, unless you setting it to the same value on server side at the same time. If set only on server side, 'MarkTagDirty()' should be called to sync value with clients. This will trigger full entity synchronization, which can be performance heavy. Tags are not saved into save file, and always loaded from entity type when entity is created. Indexes of tags are dynamically assigned on game start, and are not consistent between saves. public EntityTagArray Tags Field Value EntityTagArray Teleporting Used by the teleporter block public bool Teleporting Field Value bool WatchedAttributes Permanently stored entity attributes that are sent to client everytime they have been changed public SyncedTreeAttribute WatchedAttributes Field Value SyncedTreeAttribute World World where the entity is spawned in. Available on the game client and server. public IWorldAccessor World Field Value IWorldAccessor alive protected bool alive Field Value bool bioLumiNoise public static NormalizedSimplexNoise bioLumiNoise Field Value NormalizedSimplexNoise bioLumiParticles public static SimpleParticleProperties bioLumiParticles Field Value SimpleParticleProperties customRepulseBehavior [Obsolete(\"Unused but retained for mod API backwards compatibility\")] public bool customRepulseBehavior Field Value bool fireDamageAccum protected float fireDamageAccum Field Value float hasRepulseBehavior [Obsolete(\"Unused but retained for mod API backwards compatibility\")] public bool hasRepulseBehavior Field Value bool packet Used for efficiency in multi-player servers, to avoid regenerating the packet again for each connected client public object packet Field Value object requirePosesOnServer If true, will fully simulate animations on the server so one has access to the positions of all attachment points. If false, only root level attachment points will be available server side public bool requirePosesOnServer Field Value bool resetLightHsv protected bool resetLightHsv Field Value bool shapeFresh protected bool shapeFresh Field Value bool touchDistance Set during initialization by calling Entity.GetTouchDistance(). A mod wishing to change the value returned by .GetTouchDistance() dynamically should probably call .updateColSelBoxes() or update this field directly public double touchDistance Field Value double touchDistanceSq public double touchDistanceSq Field Value double trickleDownRayIntersects If true, will call EntityBehavior.IntersectsRay. Default off to increase performance. public bool trickleDownRayIntersects Field Value bool Properties AdjustCollisionBoxToAnimation public virtual bool AdjustCollisionBoxToAnimation { get; } Property Value bool Alive True if the entity is in state active or inactive, or generally not dead (for non-living entities, 'dead' means ready to despawn) public virtual bool Alive { get; set; } Property Value bool AllowOutsideLoadedRange public virtual bool AllowOutsideLoadedRange { get; } Property Value bool AlwaysActive Whether this entity should always stay in Active model, regardless on how far away other player are public virtual bool AlwaysActive { get; set; } Property Value bool AnimManager Server simulated animations. Only takes care of stopping animations once they're done Set and Called by the Entities ServerSystem public virtual IAnimationManager AnimManager { get; set; } Property Value IAnimationManager ApplyGravity If gravity should applied to this entity public virtual bool ApplyGravity { get; } Property Value bool CanStepPitch public virtual bool CanStepPitch { get; } Property Value bool CanSwivel public virtual bool CanSwivel { get; } Property Value bool CanSwivelNow public virtual bool CanSwivelNow { get; } Property Value bool Collided CollidedVertically || CollidedHorizontally public bool Collided { get; } Property Value bool FrustumSphereRadius public virtual double FrustumSphereRadius { get; } Property Value double IdleSoundChanceModifier public float IdleSoundChanceModifier { get; set; } Property Value float ImpactBlockUpdateChance The chance that this entity, walking or jumping on or falling onto a block, will trigger a block-update - so potentially unstable dirt or sand falling, avalanche etc. public virtual float ImpactBlockUpdateChance { get; set; } Property Value float IsCreature Used by AItasks for perfomance. When searching for nearby entities we distinguish between (A) Creatures and (B) Inanimate entitie. Inanimate entities are items on the ground, projectiles, armor stands, rafts, falling blocks etc Note 1: Dead creatures / corpses count as a Creature. EntityPlayer is a Creature of course. Note 2: Straw Dummy we count as a Creature, because weapons can target it and bees can attack it. In contrast, Armor Stand we count as Inanimate, because nothing should ever attack or target it. public virtual bool IsCreature { get; } Property Value bool IsInteractable Should return true when this entity should be interactable by a player or other entities public virtual bool IsInteractable { get; } Property Value bool IsOnFire public bool IsOnFire { get; set; } Property Value bool LadderFixDelta A small offset used to prevent players from clipping through the blocks above ladders: relevant if the entity's collision box is sometimes adjusted by the game code public virtual double LadderFixDelta { get; } Property Value double LightHsv If set, the entity will emit dynamic light public virtual byte[] LightHsv { get; set; } Property Value byte[] LocalEyePos The height of the eyes for the given entity. public virtual Vec3d LocalEyePos { get; set; } Property Value Vec3d MaterialDensity Determines on whether an entity floats on liquids or not and how strongly items get pushed by water. Water has a density of 1000. A density below 1000 means the entity floats on top of water if has a physics simulation behavior attached to it. public virtual float MaterialDensity { get; } Property Value float Properties public EntityProperties Properties { get; protected set; } Property Value EntityProperties RenderColor Used by some renderers to apply an overal color tint on the entity public int RenderColor { get; set; } Property Value int ShapeFresh public bool ShapeFresh { get; } Property Value bool ShouldDespawn If the entity should despawn next server tick. By default returns !Alive for non-creatures and creatures that don't have a Decay behavior public virtual bool ShouldDespawn { get; } Property Value bool SidedPos ServerPos on server, Pos on client public EntityPos SidedPos { get; } Property Value EntityPos SidedProperties public EntitySidedProperties SidedProperties { get; } Property Value EntitySidedProperties StoreWithChunk Players and whatever the player rides on will be stored seperatly public virtual bool StoreWithChunk { get; } Property Value bool SwimmingOffsetY Used for passive physics simulation, together with the MaterialDensity to check how deep in the water the entity should float public virtual double SwimmingOffsetY { get; } Property Value double Methods AddBehavior(EntityBehavior) Adds given behavior to the entities list of active behaviors public virtual void AddBehavior(EntityBehavior behavior) Parameters behavior EntityBehavior AfterInitialized(bool) public virtual void AfterInitialized(bool onFirstSpawn) Parameters onFirstSpawn bool ApplyFireDamage(float) protected void ApplyFireDamage(float dt) Parameters dt float CacheServerBehaviors() Create the cached arrays of thread-safe and mainthread behaviors, for ticking performance public void CacheServerBehaviors() CanCollect(Entity) Should return true if this item can be picked up as an itemstack public virtual bool CanCollect(Entity byEntity) Parameters byEntity Entity Returns bool DidImportOrExport(BlockPos) This method is called by the BlockSchematic class a moment after a schematic containing this entity has been exported. Since a schematic can be placed anywhere in the world, this method has to make sure the entities position is set to the correct position in relation to the target position of the schematic to be imported. public virtual void DidImportOrExport(BlockPos startPos) Parameters startPos BlockPos Die(EnumDespawnReason, DamageSource) Makes the entity despawn. Entities only drop something on EnumDespawnReason.Death public virtual void Die(EnumDespawnReason reason = EnumDespawnReason.Death, DamageSource damageSourceForDeath = null) Parameters reason EnumDespawnReason damageSourceForDeath DamageSource DieInLava() protected void DieInLava() DoInitialActiveCheck(ICoreAPI) protected void DoInitialActiveCheck(ICoreAPI api) Parameters api ICoreAPI FromBytes(BinaryReader, bool) Loads the entity from a stored byte array from the SaveGame public virtual void FromBytes(BinaryReader reader, bool isSync) Parameters reader BinaryReader isSync bool True if this is a sync operation, not a chunk read operation FromBytes(BinaryReader, bool, Dictionary<string, string>) In order to maintain legacy mod API compatibility of FromBytes(BinaryReader reader, bool isSync), we create an overload which server-side calling code will actually call, and store the remaps parameter in a field public virtual void FromBytes(BinaryReader reader, bool isSync, Dictionary<string, string> serversideRemaps) Parameters reader BinaryReader isSync bool serversideRemaps Dictionary<string, string> GetBehavior(string) Returns the behavior instance for given entity. Returns null if it doesn't exist. public virtual EntityBehavior? GetBehavior(string name) Parameters name string Returns EntityBehavior GetBehavior<T>() Returns the first behavior instance for given entity of given type. Returns null if it doesn't exist. public virtual T? GetBehavior<T>() where T : EntityBehavior Returns T Type Parameters T GetDrops(IWorldAccessor, BlockPos, IPlayer) Is called before the entity is killed, should return what items this entity should drop. Return null or empty array for no drops. public virtual ItemStack[] GetDrops(IWorldAccessor world, BlockPos pos, IPlayer byPlayer) Parameters world IWorldAccessor pos BlockPos byPlayer IPlayer Returns ItemStack[] GetHeadPositionFromWatchedAttributes() Relevant only for entities with heads, implemented in EntityAgent. Other sub-classes of Entity (if not EntityAgent) should similarly override this if the headYaw/headPitch are relevant to them protected virtual void GetHeadPositionFromWatchedAttributes() GetInfoText() gets the info text for the entity. public virtual string GetInfoText() Returns string GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer) Called when a player looks at the entity with interaction help enabled public virtual WorldInteraction[] GetInteractionHelp(IClientWorldAccessor world, EntitySelection es, IClientPlayer player) Parameters world IClientWorldAccessor es EntitySelection player IClientPlayer Returns WorldInteraction[] GetInterface<T>() Returns itself or the first behavior that implements the interface T public virtual T GetInterface<T>() where T : class Returns T Type Parameters T GetInterfaces<T>() Returns itself and any behaviors that implement the interface T as a List public virtual List<T> GetInterfaces<T>() where T : class Returns List<T> Type Parameters T GetName() Gets the name for this entity public virtual string GetName() Returns string GetTextureSource() public virtual ITexPositionSource GetTextureSource() Returns ITexPositionSource GetTouchDistance() The distance at which entities are counted as \"touching\" each other, for example used by EntityPartitioning and RepulseAgents Note: from 1.20.4 this is gathered and cached in a field when each entity is Initialized, if for any reason a mod or behavior needs to change the result later than Initialization then you should also update the Entity field .touchDistance public virtual double GetTouchDistance() Returns double HasBehavior(string) Returns true if the entity has given active behavior public virtual bool HasBehavior(string behaviorName) Parameters behaviorName string Returns bool HasBehavior<T>() public virtual bool HasBehavior<T>() where T : EntityBehavior Returns bool Type Parameters T Ignite() public virtual void Ignite() InRangeOf(Vec3d, float, float) public virtual bool InRangeOf(Vec3d position, float horRangeSq, float vertRange) Parameters position Vec3d horRangeSq float vertRange float Returns bool Initialize(EntityProperties, ICoreAPI, long) Called when this entity got created or loaded public virtual void Initialize(EntityProperties properties, ICoreAPI api, long InChunkIndex3d) Parameters properties EntityProperties api ICoreAPI InChunkIndex3d long IntersectsRay(Ray, AABBIntersectionTest, out double, ref int) To test for player->entity selection. public virtual bool IntersectsRay(Ray ray, AABBIntersectionTest interesectionTester, out double intersectionDistance, ref int selectionBoxIndex) Parameters ray Ray interesectionTester AABBIntersectionTest Is already preloaded with the ray intersectionDistance double selectionBoxIndex int Returns bool IsActivityRunning(string) Returns true if given activity is running public virtual bool IsActivityRunning(string key) Parameters key string Returns bool IsFirstTick() public bool IsFirstTick() Returns bool MarkShapeModified() public virtual void MarkShapeModified() MarkTagsDirty() Triggers full entity synchronization, including entity tags. Should not be called too frequently. public void MarkTagsDirty() Notify(string, object) This method pings the Notify() method of all behaviors and ai tasks. Can be used to spread information to other creatures. public virtual void Notify(string key, object data) Parameters key string data object OnAsyncParticleTick(float, IAsyncParticleManager) public virtual void OnAsyncParticleTick(float dt, IAsyncParticleManager manager) Parameters dt float manager IAsyncParticleManager OnCollected(Entity) Called by BehaviorCollectEntities of nearby entities. Should return the itemstack that should be collected. If the item stack was fully picked up, BehaviorCollectEntities will kill this entity public virtual ItemStack OnCollected(Entity byEntity) Parameters byEntity Entity Returns ItemStack OnCollideWithLiquid() Called when the entity got in touch with a liquid public virtual void OnCollideWithLiquid() OnCollided() Called when the entity collided with something solid and Collided was false before public virtual void OnCollided() OnEntityDespawn(EntityDespawnData) Called when the entity despawns public virtual void OnEntityDespawn(EntityDespawnData despawn) Parameters despawn EntityDespawnData OnEntityLoaded() Called when after the got loaded from the savegame (not called during spawn) public virtual void OnEntityLoaded() OnEntitySpawn() Called when the entity spawns (not called when loaded from the savegame). public virtual void OnEntitySpawn() OnExitedLiquid() Called when the entity has left a liquid public virtual void OnExitedLiquid() OnFallToGround(double) Called when the entity collided vertically public virtual void OnFallToGround(double motionY) Parameters motionY double OnGameTick(float) Called every 1/75 second public virtual void OnGameTick(float dt) Parameters dt float OnHurt(DamageSource, float) Called when the entity got hurt. On the client side, dmgSource is null public virtual void OnHurt(DamageSource dmgSource, float damage) Parameters dmgSource DamageSource damage float OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode) Called when an entity has interacted with this entity public virtual void OnInteract(EntityAgent byEntity, ItemSlot itemslot, Vec3d hitPosition, EnumInteractMode mode) Parameters byEntity EntityAgent itemslot ItemSlot If being interacted with a block/item, this should be the slot the item is being held in hitPosition Vec3d Relative position on the entites hitbox where the entity interacted at mode EnumInteractMode 0 = attack, 1 = interact OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Called by the blockschematic loader so that you may fix any blockid/itemid mappings against the mapping of the savegame, if you store any collectibles in this blockentity. Note: Some vanilla blocks resolve randomized contents in this method. Hint: Use itemstack.FixMapping() to do the job for you. public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForNewMappings, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, int schematicSeed, bool resolveImports) Parameters worldForNewMappings IWorldAccessor oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> schematicSeed int If you need some sort of randomness consistency accross an imported schematic, you can use this value resolveImports bool Turn it off to spawn structures as they are. For example, in this mode, instead of traders, their meta spawners will spawn OnReceivedClientPacket(IServerPlayer, int, byte[]) Called when on the client side something called capi.Network.SendEntityPacket() public virtual void OnReceivedClientPacket(IServerPlayer player, int packetid, byte[] data) Parameters player IServerPlayer packetid int data byte[] OnReceivedServerAnimations(int[], int, float[]) public virtual void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] activeAnimationsCount int activeAnimationSpeeds float[] OnReceivedServerPacket(int, byte[]) Called when on the server side something called sapi.Network.SendEntityPacket() Packetid = 1 is used for teleporting Packetid = 2 is used for BehaviorHarvestable public virtual void OnReceivedServerPacket(int packetid, byte[] data) Parameters packetid int data byte[] OnReceivedServerPos(bool) Called by client when a new server pos arrived public virtual void OnReceivedServerPos(bool isTeleport) Parameters isTeleport bool OnStateChanged(EnumEntityState) Called on the server when the entity was changed from active to inactive state or vice versa public virtual void OnStateChanged(EnumEntityState beforeState) Parameters beforeState EnumEntityState OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Called by the worldedit schematic exporter so that it can also export the mappings of items/blocks stored inside blockentities public virtual void OnStoreCollectibleMappings(Dictionary<int, AssetLocation> blockIdMapping, Dictionary<int, AssetLocation> itemIdMapping) Parameters blockIdMapping Dictionary<int, AssetLocation> itemIdMapping Dictionary<int, AssetLocation> OnTesselated() public virtual void OnTesselated() OnTesselation(ref Shape, string) Called by EntityShapeRenderer.cs before tesselating the entity shape public virtual void OnTesselation(ref Shape entityShape, string shapePathForLogging) Parameters entityShape Shape shapePathForLogging string OnTesselation(ref Shape, string, ref bool) protected virtual void OnTesselation(ref Shape entityShape, string shapePathForLogging, ref bool shapeIsCloned) Parameters entityShape Shape shapePathForLogging string shapeIsCloned bool PlayEntitySound(string, IPlayer, bool, float) Assumes that it is only called on the server public virtual void PlayEntitySound(string type, IPlayer dualCallByPlayer = null, bool randomizePitch = true, float range = 24) Parameters type string dualCallByPlayer IPlayer randomizePitch bool range float ReceiveDamage(DamageSource, float) Called when the entity should be receiving damage from given source public virtual bool ReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool True if the entity actually received damage RemainingActivityTime(string) Returns the remaining time on an activity in milliesconds public virtual int RemainingActivityTime(string key) Parameters key string Returns int RemoveBehavior(EntityBehavior) Removes given behavior to the entities list of active behaviors. Does nothing if the behavior has already been removed public virtual void RemoveBehavior(EntityBehavior behavior) Parameters behavior EntityBehavior Revive() Revives the entity and heals for 9999. public virtual void Revive() SetActivityRunning(string, int) Starts an activity for a given duration public virtual void SetActivityRunning(string key, int milliseconds) Parameters key string milliseconds int SetCollisionBox(float, float) Helper method to set the CollisionBox public virtual void SetCollisionBox(float length, float height) Parameters length float height float SetHeadPositionToWatchedAttributes() Relevant only for entities with heads, implemented in EntityAgent. Other sub-classes of Entity (if not EntityAgent) should similarly override this if the headYaw/headPitch are relevant to them protected virtual void SetHeadPositionToWatchedAttributes() SetSelectionBox(float, float) public virtual void SetSelectionBox(float length, float height) Parameters length float height float ShouldReceiveDamage(DamageSource, float) Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage. public virtual bool ShouldReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool SpawnWaterMovementParticles(float, double, double, double) protected virtual void SpawnWaterMovementParticles(float quantityMul, double offx = 0, double offy = 0, double offz = 0) Parameters quantityMul float offx double offy double offz double StartAnimation(string) Starts the animation for the entity. public virtual void StartAnimation(string code) Parameters code string StopAnimation(string) stops the animation for the entity. public virtual void StopAnimation(string code) Parameters code string TeleportTo(int, int, int) Teleports the entity to given position public virtual void TeleportTo(int x, int y, int z) Parameters x int y int z int TeleportTo(EntityPos, Action) Teleports the entity to given position public virtual void TeleportTo(EntityPos position, Action onTeleported = null) Parameters position EntityPos onTeleported Action TeleportTo(BlockPos) Teleports the entity to given position public virtual void TeleportTo(BlockPos position) Parameters position BlockPos TeleportTo(Vec3d) Teleports the entity to given position public virtual void TeleportTo(Vec3d position) Parameters position Vec3d TeleportToDouble(double, double, double, Action) Teleports the entity to given position. Actual teleport is delayed until target chunk is loaded. public virtual void TeleportToDouble(double x, double y, double z, Action onTeleported = null) Parameters x double y double z double onTeleported Action ToBytes(BinaryWriter, bool) Serializes the slots contents to be stored in the SaveGame public virtual void ToBytes(BinaryWriter writer, bool forClient) Parameters writer BinaryWriter forClient bool True when being used to send an entity to the client TriggerOnInitialized() protected void TriggerOnInitialized() TryGiveItemStack(ItemStack) Called when something tries to given an itemstack to this entity public virtual bool TryGiveItemStack(ItemStack itemstack) Parameters itemstack ItemStack Returns bool UpdateAnimationDebugAttributes() protected virtual void UpdateAnimationDebugAttributes() UpdateDebugAttributes() Updates the DebugAttributes tree public virtual void UpdateDebugAttributes() WillExport(BlockPos) This method is called by the BlockSchematic class a moment before a schematic containing this entity is getting exported. Since a schematic can be placed anywhere in the world, this method has to make sure the entities position is set to a value relative of the schematic origin point defined by startPos Right after calling this method, the world edit system will call .ToBytes() to serialize the entity public virtual void WillExport(BlockPos startPos) Parameters startPos BlockPos updateColSelBoxes() protected void updateColSelBoxes() updateOnFire() protected void updateOnFire() Events OnInitialized public event Action OnInitialized Event Type Action"
  },
  "api/Vintagestory.API.Common.Entities.EntityBehavior.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityBehavior.html",
    "title": "Class EntityBehavior | VintageStory API",
    "keywords": "Class EntityBehavior Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Defines a basic entity behavior that can be attached to entities Open in GitHub public abstract class EntityBehavior Inheritance object EntityBehavior Derived PhysicsBehaviorBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityBehavior(Entity) public EntityBehavior(Entity entity) Parameters entity Entity Fields entity public Entity entity Field Value Entity Properties ProfilerName public string ProfilerName { get; } Property Value string ThreadSafe An implementing behavior can return true if it is thread-safe: allows the behavior to be multi-threaded for better multiplayer performance public virtual bool ThreadSafe { get; } Property Value bool Methods AfterInitialized(bool) Called after initializing all the behaviors in case they need to cross-refer to each other or set some initial values only at spawn-time public virtual void AfterInitialized(bool onFirstSpawn) Parameters onFirstSpawn bool DidAttack(DamageSource, EntityAgent, ref EnumHandling) public virtual void DidAttack(DamageSource source, EntityAgent targetEntity, ref EnumHandling handled) Parameters source DamageSource targetEntity EntityAgent handled EnumHandling FromBytes(bool) This method is not called on the server side public virtual void FromBytes(bool isSync) Parameters isSync bool GetDrops(IWorldAccessor, BlockPos, IPlayer, ref EnumHandling) gets the drops for this specific entity. public virtual ItemStack[] GetDrops(IWorldAccessor world, BlockPos pos, IPlayer byPlayer, ref EnumHandling handling) Parameters world IWorldAccessor The world of this entity pos BlockPos The block position of the entity. byPlayer IPlayer The player this entity was killed by. handling EnumHandling How this event was handled. Returns ItemStack[] the items dropped from this entity GetInfoText(StringBuilder) Gets the information text when highlighting this entity. public virtual void GetInfoText(StringBuilder infotext) Parameters infotext StringBuilder The supplied stringbuilder information. GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer, ref EnumHandling) Called when a player looks at the entity with interaction help enabled public virtual WorldInteraction[] GetInteractionHelp(IClientWorldAccessor world, EntitySelection es, IClientPlayer player, ref EnumHandling handled) Parameters world IClientWorldAccessor es EntitySelection player IClientPlayer handled EnumHandling Returns WorldInteraction[] GetName(ref EnumHandling) public virtual string GetName(ref EnumHandling handling) Parameters handling EnumHandling Returns string GetTextureSource(ref EnumHandling) public virtual ITexPositionSource GetTextureSource(ref EnumHandling handling) Parameters handling EnumHandling Returns ITexPositionSource GetTouchDistance(ref EnumHandling) The distance at which entities are counted as \"touching\" each other, for example used by EntityPartitioning and RepulseAgents Note: from 1.20.4 this is gathered and cached in a field when each entity is Initialized, if for any reason a mod or behavior needs to change the result later than Initialization then you should also update the Entity field .touchDistance public virtual float GetTouchDistance(ref EnumHandling handling) Parameters handling EnumHandling Returns float Initialize(EntityProperties, JsonObject) Initializes the entity. If your code modifies the supplied attributes (not recommended!), then your changes will apply to all entities of the same type. public virtual void Initialize(EntityProperties properties, JsonObject attributes) Parameters properties EntityProperties The properties of this entity. attributes JsonObject The attributes of this entity. IntersectsRay(Ray, AABBIntersectionTest, out double, ref int, ref EnumHandling) public virtual bool IntersectsRay(Ray ray, AABBIntersectionTest interesectionTester, out double intersectionDistance, ref int selectionBoxIndex, ref EnumHandling handled) Parameters ray Ray interesectionTester AABBIntersectionTest intersectionDistance double selectionBoxIndex int handled EnumHandling Returns bool Notify(string, object) The notify method bubbled up from entity.Notify() public virtual void Notify(string key, object data) Parameters key string data object OnEntityDeath(DamageSource) The event fired when the entity dies. public virtual void OnEntityDeath(DamageSource damageSourceForDeath) Parameters damageSourceForDeath DamageSource The source of damage for the entity. OnEntityDespawn(EntityDespawnData) The event fired when the entity is despawned. public virtual void OnEntityDespawn(EntityDespawnData despawn) Parameters despawn EntityDespawnData The reason the entity despawned. OnEntityLoaded() The event fired when the entity is loaded from disk (not called during spawn) public virtual void OnEntityLoaded() OnEntityReceiveDamage(DamageSource, ref float) The event fired when the entity recieves damage. public virtual void OnEntityReceiveDamage(DamageSource damageSource, ref float damage) Parameters damageSource DamageSource The source of the damage damage float The amount of the damage. OnEntityReceiveSaturation(float, EnumFoodCategory, float, float) The event fired when the entity recieves saturation. public virtual void OnEntityReceiveSaturation(float saturation, EnumFoodCategory foodCat = EnumFoodCategory.Unknown, float saturationLossDelay = 10, float nutritionGainMultiplier = 1) Parameters saturation float The amount of saturation recieved. foodCat EnumFoodCategory The category of food recieved. saturationLossDelay float The delay before the loss of saturation. nutritionGainMultiplier float OnEntityRevive() When the entity got revived (only for players and traders currently) public virtual void OnEntityRevive() OnEntitySpawn() The event fired when the entity is spawned (not called when loaded from the savegame). public virtual void OnEntitySpawn() OnFallToGround(Vec3d, double) The event fired when the entity falls to the ground. public virtual void OnFallToGround(Vec3d lastTerrainContact, double withYMotion) Parameters lastTerrainContact Vec3d the point which the entity was previously on the ground. withYMotion double The vertical motion the entity had before landing on the ground. OnGameTick(float) The event fired when a game ticks over. public virtual void OnGameTick(float deltaTime) Parameters deltaTime float OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode, ref EnumHandling) The event fired when the entity is interacted with by the player. public virtual void OnInteract(EntityAgent byEntity, ItemSlot itemslot, Vec3d hitPosition, EnumInteractMode mode, ref EnumHandling handled) Parameters byEntity EntityAgent The entity it was interacted with. itemslot ItemSlot The item slot involved (if any) hitPosition Vec3d The hit position of the entity. mode EnumInteractMode The interaction mode for the entity. handled EnumHandling How this event is handled. OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) public virtual void OnLoadCollectibleMappings(IWorldAccessor worldForNewMappings, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, bool resolveImports) Parameters worldForNewMappings IWorldAccessor oldBlockIdMapping Dictionary<int, AssetLocation> oldItemIdMapping Dictionary<int, AssetLocation> resolveImports bool OnReceivedClientPacket(IServerPlayer, int, byte[], ref EnumHandling) The event fired when the server receives a packet. public virtual void OnReceivedClientPacket(IServerPlayer player, int packetid, byte[] data, ref EnumHandling handled) Parameters player IServerPlayer The server player. packetid int the packet id. data byte[] The data contents. handled EnumHandling How this event is handled. OnReceivedServerPacket(int, byte[], ref EnumHandling) The event fired when the client receives a packet. public virtual void OnReceivedServerPacket(int packetid, byte[] data, ref EnumHandling handled) Parameters packetid int data byte[] handled EnumHandling OnReceivedServerPos(bool, ref EnumHandling) The event fired when the server position is changed. public virtual void OnReceivedServerPos(bool isTeleport, ref EnumHandling handled) Parameters isTeleport bool Whether or not this entity was teleported. handled EnumHandling How this event is handled. OnStateChanged(EnumEntityState, ref EnumHandling) The event fired when the state of the entity is changed. public virtual void OnStateChanged(EnumEntityState beforeState, ref EnumHandling handling) Parameters beforeState EnumEntityState The previous state. handling EnumHandling How this event was handled. OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) public virtual void OnStoreCollectibleMappings(Dictionary<int, AssetLocation> blockIdMapping, Dictionary<int, AssetLocation> itemIdMapping) Parameters blockIdMapping Dictionary<int, AssetLocation> itemIdMapping Dictionary<int, AssetLocation> OnTesselated() public virtual void OnTesselated() OnTesselation(ref Shape, string, ref bool, ref string[]) public virtual void OnTesselation(ref Shape entityShape, string shapePathForLogging, ref bool shapeIsCloned, ref string[] willDeleteElements) Parameters entityShape Shape shapePathForLogging string shapeIsCloned bool willDeleteElements string[] PropertyName() The name of the property tied to this entity behavior. public abstract string PropertyName() Returns string TestCommand(object) Can be used by the /entity command or maybe other commands, to test behaviors The argument will be an object provided by TextCommandCallingArgs, which can then be cast to the desired type e.g. int public virtual void TestCommand(object arg) Parameters arg object ToBytes(bool) public virtual void ToBytes(bool forClient) Parameters forClient bool ToleratesDamageFrom(Entity, ref EnumHandling) If true, then this entity will not retaliate if attacked by the specified eOther If false, then this entity will always retaliate (disregarding subsequent) public virtual bool ToleratesDamageFrom(Entity eOther, ref EnumHandling handling) Parameters eOther Entity handling EnumHandling Returns bool TryGiveItemStack(ItemStack, ref EnumHandling) public virtual bool TryGiveItemStack(ItemStack itemstack, ref EnumHandling handling) Parameters itemstack ItemStack handling EnumHandling Returns bool UpdateColSelBoxes() public virtual void UpdateColSelBoxes()"
  },
  "api/Vintagestory.API.Common.Entities.EntityClientProperties.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityClientProperties.html",
    "title": "Class EntityClientProperties | VintageStory API",
    "keywords": "Class EntityClientProperties Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class EntityClientProperties : EntitySidedProperties Inheritance object EntitySidedProperties EntityClientProperties Inherited Members EntitySidedProperties.Attributes EntitySidedProperties.BehaviorsAsJsonObj EntitySidedProperties.Behaviors EntitySidedProperties.loadBehaviors(Entity, EntityProperties, IWorldAccessor) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityClientProperties(JsonObject[], Dictionary<string, JsonObject>) public EntityClientProperties(JsonObject[] behaviors, Dictionary<string, JsonObject> commonConfigs) Parameters behaviors JsonObject[] commonConfigs Dictionary<string, JsonObject> Fields Animations The animations of the entity. public AnimationMetaData[] Animations Field Value AnimationMetaData[] AnimationsByCrc32 public Dictionary<uint, AnimationMetaData> AnimationsByCrc32 Field Value Dictionary<uint, AnimationMetaData> AnimationsByMetaCode public Dictionary<string, AnimationMetaData> AnimationsByMetaCode Field Value Dictionary<string, AnimationMetaData> GlowLevel The glow level for the entity. public int GlowLevel Field Value int LoadedAlternateShapes public Shape[] LoadedAlternateShapes Field Value Shape[] LoadedShape Only loaded for World.EntityTypes instances of EntityProperties, because it makes no sense to have 1000 loaded entities needing to load 1000 shapes. During entity load/spawn this value is assigned however. On the client it gets set by the EntityTextureAtlasManager. On the server by the EntitySimulation system public Shape LoadedShape Field Value Shape LoadedShapeForEntity The shape for this particular entity who owns this properties object public Shape LoadedShapeForEntity Field Value Shape PitchStep Makes entities pitch forward and backwards when stepping public bool PitchStep Field Value bool Renderer Set by the game client public EntityRenderer Renderer Field Value EntityRenderer RendererName Name of there renderer system that draws this entity public string RendererName Field Value string Shape The shape of the entity public CompositeShape Shape Field Value CompositeShape ShapeForEntity public CompositeShape ShapeForEntity Field Value CompositeShape Size The size of the entity (default: 1f) public float Size Field Value float SizeGrowthFactor The rate at which the entity's size grows with age - used for chicks and other small baby animals public float SizeGrowthFactor Field Value float Textures Directory of all available textures. First one will be default one Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public IDictionary<string, CompositeTexture> Textures Field Value IDictionary<string, CompositeTexture> TexturesAlternatesCount Set by a server at the end of asset loading, immediately prior to setting Textures to null; relevant to spawning entities with variant textures public int TexturesAlternatesCount Field Value int Properties FirstTexture Returns the first texture in Textures dict public CompositeTexture FirstTexture { get; } Property Value CompositeTexture Texture Used by various renderers to retrieve the entities texture it should be drawn with public virtual CompositeTexture Texture { get; } Property Value CompositeTexture Methods Clone() Does not clone textures, but does clone Shape Note: This method does not clone the LoadedShape (nor the LoadedAlternateShapes, if present). The LoadedShape (and any alternate) is not normally modified after entityType loading. An Entity created at runtime (each Entity carries a clone of its EntityProperties) should not normally require its own unique copy of the LoadedShape or the LoadedAlternateShapes. Exceptionally, an entity needing to clone and modify LoadedShape or one of the LoadedAlternateShapes (e.g. EntityDressedHumanoid, or a boat furling and unfurling sails) should do so in its own custom OnTesselation() method, likely accessing the shape via EntityClientProperties.LoadedShapeForEntity. public override EntitySidedProperties Clone() Returns EntitySidedProperties DetermineLoadedShape(long) public void DetermineLoadedShape(long forEntityId) Parameters forEntityId long FreeRAMServer() public virtual void FreeRAMServer() Init(AssetLocation, IWorldAccessor) Initializes the client properties. public void Init(AssetLocation entityTypeCode, IWorldAccessor world) Parameters entityTypeCode AssetLocation world IWorldAccessor"
  },
  "api/Vintagestory.API.Common.Entities.EntityDespawnData.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityDespawnData.html",
    "title": "Class EntityDespawnData | VintageStory API",
    "keywords": "Class EntityDespawnData Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class EntityDespawnData Inheritance object EntityDespawnData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DamageSourceForDeath In the case of death, this was the damage source. public DamageSource DamageSourceForDeath Field Value DamageSource Reason The reason this entity despawned. public EnumDespawnReason Reason Field Value EnumDespawnReason"
  },
  "api/Vintagestory.API.Common.Entities.EntityPos.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityPos.html",
    "title": "Class EntityPos | VintageStory API",
    "keywords": "Class EntityPos Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Represents all positional information of an entity, such as coordinates, motion and angles Open in GitHub [ProtoContract] public class EntityPos Inheritance object EntityPos Derived FuzzyEntityPos SyncedEntityPos Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityPos() public EntityPos() EntityPos(double, double, double, float, float, float) public EntityPos(double x, double y, double z, float heading = 0, float pitch = 0, float roll = 0) Parameters x double y double z double heading float pitch float roll float Fields Dimension [ProtoMember(4)] public int Dimension Field Value int HeadPitch The pitch of the agents head [ProtoMember(10)] public float HeadPitch Field Value float HeadYaw The yaw of the agents head [ProtoMember(9)] public float HeadYaw Field Value float Motion [ProtoMember(11)] public Vec3d Motion Field Value Vec3d pitch [ProtoMember(7)] protected float pitch Field Value float roll [ProtoMember(5)] protected float roll Field Value float stance [ProtoMember(8)] protected int stance Field Value int x [ProtoMember(1)] protected double x Field Value double y [ProtoMember(2)] protected double y Field Value double yaw [ProtoMember(6)] protected float yaw Field Value float z [ProtoMember(3)] protected double z Field Value double Properties AsBlockPos Returns the position as BlockPos object public BlockPos AsBlockPos { get; } Property Value BlockPos DimensionYAdjustment public virtual int DimensionYAdjustment { get; } Property Value int InternalY Dimension unaware Y position of the Entity. public virtual double InternalY { get; } Property Value double Pitch The rotation around the Z axis, in radians. public virtual float Pitch { get; set; } Property Value float Roll The rotation around the X axis, in radians. public virtual float Roll { get; set; } Property Value float X The X position of the Entity. public virtual double X { get; set; } Property Value double XYZ Returns the position as a Vec3d object. Note, dimension aware public Vec3d XYZ { get; } Property Value Vec3d XYZFloat Returns the position as a Vec3f object public Vec3f XYZFloat { get; } Property Value Vec3f XYZInt Returns the position as a Vec3i object public Vec3i XYZInt { get; } Property Value Vec3i Y The Y position of the Entity. public virtual double Y { get; set; } Property Value double Yaw The rotation around the Y axis, in radians. public virtual float Yaw { get; set; } Property Value float Z The Z position of the Entity. public virtual double Z { get; set; } Property Value double Methods Add(double, double, double) Adds given position offset public EntityPos Add(double x, double y, double z) Parameters x double y double z double Returns EntityPos Returns itself Add(Vec3f) Adds given position offset public EntityPos Add(Vec3f vec) Parameters vec Vec3f Returns EntityPos Returns itself AheadCopy(double) Returns a new entity position that is in front of the position the entity is currently looking at public EntityPos AheadCopy(double offset) Parameters offset double Returns EntityPos AnyNaN() public bool AnyNaN() Returns bool BasicallySameAs(EntityPos, double) Makes a \"basiclly equals\" check on the position, motions and angles using a small tolerance of epsilon=0.0001f public bool BasicallySameAs(EntityPos pos, double epsilon = 0.0001) Parameters pos EntityPos epsilon double Returns bool BasicallySameAsIgnoreAngles(EntityPos, double) Makes a \"basiclly equals\" check on position and motions using a small tolerance of epsilon=0.0001f. Ignores the entities angles. public bool BasicallySameAsIgnoreAngles(EntityPos pos, double epsilon = 0.0001) Parameters pos EntityPos epsilon double Returns bool BasicallySameAsIgnoreMotion(EntityPos, double) Makes a \"basiclly equals\" check on the position, motions and angles using a small tolerance of epsilon=0.0001f. Ignores motion public bool BasicallySameAsIgnoreMotion(EntityPos pos, double epsilon = 0.0001) Parameters pos EntityPos epsilon double Returns bool BehindCopy(double) Returns a new entity position that is behind of the position the entity is currently looking at public EntityPos BehindCopy(double offset) Parameters offset double Returns EntityPos Copy() Creates a full copy public EntityPos Copy() Returns EntityPos DistanceTo(EntityPos) public double DistanceTo(EntityPos pos) Parameters pos EntityPos Returns double DistanceTo(Vec3d) public double DistanceTo(Vec3d pos) Parameters pos Vec3d Returns double FromBytes(BinaryReader) Deserializes all positional information. Does not read HeadYaw and HeadPitch public void FromBytes(BinaryReader reader) Parameters reader BinaryReader GetViewVector() Same as AheadCopy(1) - AheadCopy(0) public Vec3f GetViewVector() Returns Vec3f GetViewVector(float, float) Same as AheadCopy(1) - AheadCopy(0) public static Vec3f GetViewVector(float pitch, float yaw) Parameters pitch float yaw float Returns Vec3f HorDistanceTo(double, double) public double HorDistanceTo(double x, double z) Parameters x double z double Returns double HorDistanceTo(EntityPos) public double HorDistanceTo(EntityPos pos) Parameters pos EntityPos Returns double HorDistanceTo(Vec3d) public double HorDistanceTo(Vec3d pos) Parameters pos Vec3d Returns double HorizontalAheadCopy(double) Returns a new entity position that is in front of the position the entity is currently looking at using only the entities yaw, meaning the resulting coordinate will be always at the same y position. public EntityPos HorizontalAheadCopy(double offset) Parameters offset double Returns EntityPos InHorizontalRangeOf(int, int, float) Returns true if the entity is within given distance of given position public bool InHorizontalRangeOf(int x, int z, float squareDistance) Parameters x int z int squareDistance float Returns bool InRangeOf(double, double, double, float) Returns true if the entity is within given distance of given position public bool InRangeOf(double x, double y, double z, float squareDistance) Parameters x double y double z double squareDistance float Returns bool InRangeOf(int, int, int, float) Returns true if the entity is within given distance of given position public bool InRangeOf(int x, int y, int z, float squareDistance) Parameters x int y int z int squareDistance float Returns bool InRangeOf(EntityPos, int) Returns true if the entity is within given distance of the other entity public bool InRangeOf(EntityPos position, int squareDistance) Parameters position EntityPos squareDistance int Returns bool InRangeOf(BlockPos, float) Returns true if the entity is within given distance of given block position public bool InRangeOf(BlockPos pos, float squareDistance) Parameters pos BlockPos squareDistance float Returns bool InRangeOf(Vec3d, float, float) Returns true if the entity is within given distance of given position public bool InRangeOf(Vec3d position, float horRangeSq, float vertRange) Parameters position Vec3d horRangeSq float vertRange float Returns bool InRangeOf(Vec3f, float) Returns true if the entity is within given distance of given position public bool InRangeOf(Vec3f pos, float squareDistance) Parameters pos Vec3f squareDistance float Returns bool OnlyAnglesToString() public string OnlyAnglesToString() Returns string OnlyPosToString() public string OnlyPosToString() Returns string SetAngles(float, float, float) Sets the entity position. public EntityPos SetAngles(float roll, float yaw, float pitch) Parameters roll float yaw float pitch float Returns EntityPos SetAngles(EntityPos) Sets the entity angles. public EntityPos SetAngles(EntityPos pos) Parameters pos EntityPos Returns EntityPos SetFrom(EntityPos) Loads the position and angles from given entity position. public EntityPos SetFrom(EntityPos pos) Parameters pos EntityPos Returns EntityPos Returns itself SetFrom(Vec3d) Loads the position from given position. public EntityPos SetFrom(Vec3d pos) Parameters pos Vec3d Returns EntityPos Returns itself SetPos(double, double, double) Sets the entity position. public EntityPos SetPos(double x, double y, double z) Parameters x double y double z double Returns EntityPos SetPos(int, int, int) Sets the entity position. public EntityPos SetPos(int x, int y, int z) Parameters x int y int z int Returns EntityPos SetPos(EntityPos) Sets the entity position. public EntityPos SetPos(EntityPos pos) Parameters pos EntityPos Returns EntityPos SetPos(BlockPos) Sets the entity position. public EntityPos SetPos(BlockPos pos) Parameters pos BlockPos Returns EntityPos SetPos(Vec3d) Sets this position to a Vec3d, without dimension information - needed in some situations where no dimension change is intended public void SetPos(Vec3d pos) Parameters pos Vec3d The Vec3d to set to. SetPosWithDimension(Vec3d) Sets this position to a Vec3d, including setting the dimension public void SetPosWithDimension(Vec3d pos) Parameters pos Vec3d The Vec3d to set to. SetYaw(float) Sets the Yaw of this entity. public EntityPos SetYaw(float yaw) Parameters yaw float Returns EntityPos SquareDistanceTo(double, double, double) Returns the squared distance of the entity to this position. Note: dimension aware, this requires the parameter y coordinate also to be based on InternalY as it should be (like EntityPos.XYZ) public float SquareDistanceTo(double x, double y, double z) Parameters x double y double z double Returns float SquareDistanceTo(float, float, float) Returns the squared distance of the entity to this position public float SquareDistanceTo(float x, float y, float z) Parameters x float y float z float Returns float SquareDistanceTo(EntityPos) Returns the squared distance of the entity to this position public float SquareDistanceTo(EntityPos pos) Parameters pos EntityPos Returns float SquareDistanceTo(Vec3d) Returns the squared distance of the entity to this position. Note: dimension aware, this requires the parameter Vec3d pos.Y coordinate also to be based on InternalY as it should be (like EntityPos.XYZ) public double SquareDistanceTo(Vec3d pos) Parameters pos Vec3d Returns double SquareHorDistanceTo(Vec3d) Returns the horizontal squared distance of the entity to this position public double SquareHorDistanceTo(Vec3d pos) Parameters pos Vec3d Returns double ToBytes(BinaryWriter) Serializes all positional information. Does not write HeadYaw and HeadPitch. public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.Entities.EntityProperties.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityProperties.html",
    "title": "Class EntityProperties | VintageStory API",
    "keywords": "Class EntityProperties Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class EntityProperties Inheritance object EntityProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Attributes The attributes of the entity. These are the Attributes read from the entity type's JSON file. If your code modifies these Attributes (not recommended!), the changes will apply to all entities of the same type. public JsonObject Attributes Field Value JsonObject CanClimb If true the entity can climb on walls public bool CanClimb Field Value bool CanClimbAnywhere If true the entity can climb anywhere. public bool CanClimbAnywhere Field Value bool Class The classification of the entity. public string Class Field Value string Client The client properties of the entity. public EntityClientProperties Client Field Value EntityClientProperties ClimbTouchDistance public float ClimbTouchDistance Field Value float Code The entity code in the code. public AssetLocation Code Field Value AssetLocation CollisionBoxSize The size of the entity's hitbox (default: 0.2f/0.2f) public Vec2f CollisionBoxSize Field Value Vec2f Color public string Color Field Value string DeadCollisionBoxSize The size of the hitbox while the entity is dead. public Vec2f DeadCollisionBoxSize Field Value Vec2f DeadSelectionBoxSize The size of the hitbox while the entity is dead. (default: null, i.e. same as dead collision box) public Vec2f DeadSelectionBoxSize Field Value Vec2f Drops The drops for the entity when they are killed. public BlockDropItemStack[] Drops Field Value BlockDropItemStack[] DropsPacket public byte[] DropsPacket Field Value byte[] EyeHeight How high the camera should be placed if this entity were to be controlled by the player public double EyeHeight Field Value double FallDamage Whether the entity should take fall damage public bool FallDamage Field Value bool FallDamageMultiplier If less than one, mitigates fall damage (e.g. could be used for mountainous creatures); if more than one, increases fall damage (e.g fragile creatures?) public float FallDamageMultiplier Field Value float Habitat Natural habitat of the entity. Decides whether to apply gravity or not public EnumHabitat Habitat Field Value EnumHabitat Id Assigned on registering the entity type public int Id Field Value int IdleSoundChance The chance that an idle sound will play for the entity. public float IdleSoundChance Field Value float IdleSoundRange The sound range for the idle sound in blocks. public float IdleSoundRange Field Value float KnockbackResistance The resistance to being pushed back by an impact. public float KnockbackResistance Field Value float ResolvedSounds The sounds this entity can make after being resolved. public Dictionary<string, AssetLocation[]> ResolvedSounds Field Value Dictionary<string, AssetLocation[]> RotateModelOnClimb Should the model in question rotate if climbing? public bool RotateModelOnClimb Field Value bool SelectionBoxSize The size of the entity's hitbox (default: null, i.e. same as collision box) public Vec2f SelectionBoxSize Field Value Vec2f Server The server properties of the entity. public EntityServerProperties Server Field Value EntityServerProperties Sounds The sounds that this entity can make. public Dictionary<string, AssetLocation> Sounds Field Value Dictionary<string, AssetLocation> SwimmingEyeHeight public double SwimmingEyeHeight Field Value double Tags List of entity tags ids public EntityTagArray Tags Field Value EntityTagArray Variant Variant values as resolved from blocktype/itemtype or entitytype public OrderedDictionary<string, string> Variant Field Value OrderedDictionary<string, string> Weight The mass of this type of entity in kilograms, on average - defaults to 25kg (medium-low) if not set by the asset public float Weight Field Value float Properties SpawnCollisionBox The collision box they have. public Cuboidf SpawnCollisionBox { get; } Property Value Cuboidf Methods Clone() Creates a copy of this object. public EntityProperties Clone() Returns EntityProperties InitSounds(IAssetManager) Initializes the sounds for this entity type. public void InitSounds(IAssetManager assetManager) Parameters assetManager IAssetManager Initialize(Entity, ICoreAPI) Initalizes the properties for the entity. public void Initialize(Entity entity, ICoreAPI api) Parameters entity Entity the entity to tie this to. api ICoreAPI The Core API"
  },
  "api/Vintagestory.API.Common.Entities.EntityRenderer.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityRenderer.html",
    "title": "Class EntityRenderer | VintageStory API",
    "keywords": "Class EntityRenderer Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Base class for entity rendering Open in GitHub public abstract class EntityRenderer Inheritance object EntityRenderer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityRenderer(Entity, ICoreClientAPI) Creates a new entity renderer instance public EntityRenderer(Entity entity, ICoreClientAPI api) Parameters entity Entity api ICoreClientAPI Fields capi A reference to the client api public ICoreClientAPI capi Field Value ICoreClientAPI entity The current entity public Entity entity Field Value Entity Methods BeforeRender(float) Called before in-world rendering starts public virtual void BeforeRender(float dt) Parameters dt float Dispose() Should free up all the resources public abstract void Dispose() DoRender2D(float) Ortho mode draw call for 2d gui stuff, like name tags. Gui shader initialized already. public virtual void DoRender2D(float dt) Parameters dt float DoRender3DAfterOIT(float, bool) public virtual void DoRender3DAfterOIT(float dt, bool isShadowPass) Parameters dt float isShadowPass bool DoRender3DOIT(float) Render call for the transparent pass public virtual void DoRender3DOIT(float dt) Parameters dt float DoRender3DOITBatched(float) Batched render call for the transparent pass public virtual void DoRender3DOITBatched(float dt) Parameters dt float DoRender3DOpaque(float, bool) Draw call with no shader initialized public virtual void DoRender3DOpaque(float dt, bool isShadowPass) Parameters dt float isShadowPass bool DoRender3DOpaqueBatched(float, bool) Draw call with the Entityanimated shader loaded and initialized with the correct color/fog/sunlight/texture values If shadows are enabled, then this method is called again with shadowmap shader intialized public virtual void DoRender3DOpaqueBatched(float dt, bool isShadowPass) Parameters dt float isShadowPass bool OnEntityLoaded() Called when the entity is now fully either spawned or fully loaded public virtual void OnEntityLoaded() RenderToGui(float, double, double, double, float, float) Called before gui rendering starts. Drawing of the whole model into a gui dialog. Gui shader initialized already. public virtual void RenderToGui(float dt, double posX, double posY, double posZ, float yawDelta, float size) Parameters dt float posX double posY double posZ double yawDelta float size float"
  },
  "api/Vintagestory.API.Common.Entities.EntityServerProperties.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntityServerProperties.html",
    "title": "Class EntityServerProperties | VintageStory API",
    "keywords": "Class EntityServerProperties Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class EntityServerProperties : EntitySidedProperties Inheritance object EntitySidedProperties EntityServerProperties Inherited Members EntitySidedProperties.Attributes EntitySidedProperties.BehaviorsAsJsonObj EntitySidedProperties.Behaviors EntitySidedProperties.loadBehaviors(Entity, EntityProperties, IWorldAccessor) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityServerProperties(JsonObject[], Dictionary<string, JsonObject>) public EntityServerProperties(JsonObject[] behaviors, Dictionary<string, JsonObject> commonConfigs) Parameters behaviors JsonObject[] commonConfigs Dictionary<string, JsonObject> Fields SpawnConditions The conditions for spawning the entity. public SpawnConditions SpawnConditions Field Value SpawnConditions Methods Clone() Makes a copy of this EntiyServerProperties type public override EntitySidedProperties Clone() Returns EntitySidedProperties"
  },
  "api/Vintagestory.API.Common.Entities.EntitySidedProperties.html": {
    "href": "api/Vintagestory.API.Common.Entities.EntitySidedProperties.html",
    "title": "Class EntitySidedProperties | VintageStory API",
    "keywords": "Class EntitySidedProperties Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public abstract class EntitySidedProperties Inheritance object EntitySidedProperties Derived EntityClientProperties EntityServerProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntitySidedProperties(JsonObject[], Dictionary<string, JsonObject>) public EntitySidedProperties(JsonObject[] behaviors, Dictionary<string, JsonObject> commonConfigs) Parameters behaviors JsonObject[] commonConfigs Dictionary<string, JsonObject> Fields Attributes The attributes of the entity type. public ITreeAttribute Attributes Field Value ITreeAttribute Behaviors When this property is attached to an entity - the behaviors attached of entity. To modify this list, please call Entity.AddBehavior() or Entity.RemoveBehavior() public List<EntityBehavior> Behaviors Field Value List<EntityBehavior> BehaviorsAsJsonObj Entity type behaviors public JsonObject[] BehaviorsAsJsonObj Field Value JsonObject[] Methods Clone() Use this to make a deep copy of these properties. public abstract EntitySidedProperties Clone() Returns EntitySidedProperties loadBehaviors(Entity, EntityProperties, IWorldAccessor) public void loadBehaviors(Entity entity, EntityProperties properties, IWorldAccessor world) Parameters entity Entity properties EntityProperties world IWorldAccessor"
  },
  "api/Vintagestory.API.Common.Entities.EnumEntityActivity.html": {
    "href": "api/Vintagestory.API.Common.Entities.EnumEntityActivity.html",
    "title": "Enum EnumEntityActivity | VintageStory API",
    "keywords": "Enum EnumEntityActivity Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A list of activities that an entity can perform. Open in GitHub [DocumentAsJson] [Flags] public enum EnumEntityActivity Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Break = 2048 Climb = 256 Dead = 1024 Fall = 128 FloorSitting = 512 Fly = 16 Glide = 8192 Idle = 1 Jump = 64 Mounted = 16384 Move = 2 None = 0 Place = 4096 SneakMode = 8 SprintMode = 4 Swim = 32"
  },
  "api/Vintagestory.API.Common.Entities.FuzzyEntityPos.html": {
    "href": "api/Vintagestory.API.Common.Entities.FuzzyEntityPos.html",
    "title": "Class FuzzyEntityPos | VintageStory API",
    "keywords": "Class FuzzyEntityPos Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class FuzzyEntityPos : EntityPos Inheritance object EntityPos FuzzyEntityPos Inherited Members EntityPos.x EntityPos.y EntityPos.z EntityPos.Dimension EntityPos.roll EntityPos.yaw EntityPos.pitch EntityPos.stance EntityPos.HeadYaw EntityPos.HeadPitch EntityPos.Motion EntityPos.X EntityPos.Y EntityPos.InternalY EntityPos.Z EntityPos.DimensionYAdjustment EntityPos.Roll EntityPos.Yaw EntityPos.Pitch EntityPos.AsBlockPos EntityPos.XYZInt EntityPos.XYZ EntityPos.XYZFloat EntityPos.SetPosWithDimension(Vec3d) EntityPos.SetPos(Vec3d) EntityPos.Add(double, double, double) EntityPos.Add(Vec3f) EntityPos.SetPos(int, int, int) EntityPos.SetPos(BlockPos) EntityPos.SetPos(double, double, double) EntityPos.SetPos(EntityPos) EntityPos.SetAngles(EntityPos) EntityPos.SetAngles(float, float, float) EntityPos.SetYaw(float) EntityPos.InRangeOf(EntityPos, int) EntityPos.InRangeOf(int, int, int, float) EntityPos.InHorizontalRangeOf(int, int, float) EntityPos.InRangeOf(double, double, double, float) EntityPos.InRangeOf(BlockPos, float) EntityPos.InRangeOf(Vec3f, float) EntityPos.InRangeOf(Vec3d, float, float) EntityPos.SquareDistanceTo(float, float, float) EntityPos.SquareDistanceTo(double, double, double) EntityPos.SquareDistanceTo(Vec3d) EntityPos.SquareHorDistanceTo(Vec3d) EntityPos.DistanceTo(Vec3d) EntityPos.DistanceTo(EntityPos) EntityPos.HorDistanceTo(Vec3d) EntityPos.HorDistanceTo(double, double) EntityPos.HorDistanceTo(EntityPos) EntityPos.SquareDistanceTo(EntityPos) EntityPos.Copy() EntityPos.GetViewVector() EntityPos.GetViewVector(float, float) EntityPos.AheadCopy(double) EntityPos.HorizontalAheadCopy(double) EntityPos.BehindCopy(double) EntityPos.BasicallySameAs(EntityPos, double) EntityPos.BasicallySameAsIgnoreMotion(EntityPos, double) EntityPos.BasicallySameAsIgnoreAngles(EntityPos, double) EntityPos.SetFrom(EntityPos) EntityPos.SetFrom(Vec3d) EntityPos.ToString() EntityPos.OnlyPosToString() EntityPos.OnlyAnglesToString() EntityPos.ToBytes(BinaryWriter) EntityPos.FromBytes(BinaryReader) EntityPos.AnyNaN() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FuzzyEntityPos(double, double, double, float, float, float) public FuzzyEntityPos(double x, double y, double z, float heading = 0, float pitch = 0, float roll = 0) Parameters x double y double z double heading float pitch float roll float Fields Radius public float Radius Field Value float UsesLeft public int UsesLeft Field Value int"
  },
  "api/Vintagestory.API.Common.Entities.IPettable.html": {
    "href": "api/Vintagestory.API.Common.Entities.IPettable.html",
    "title": "Interface IPettable | VintageStory API",
    "keywords": "Interface IPettable Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll public interface IPettable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods CanPet(Entity) bool CanPet(Entity byEntity) Parameters byEntity Entity Returns bool"
  },
  "api/Vintagestory.API.Common.Entities.IPhysicsTickable.html": {
    "href": "api/Vintagestory.API.Common.Entities.IPhysicsTickable.html",
    "title": "Interface IPhysicsTickable | VintageStory API",
    "keywords": "Interface IPhysicsTickable Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll public interface IPhysicsTickable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Entity Entity Entity { get; } Property Value Entity Ticking bool Ticking { get; set; } Property Value bool Methods AfterPhysicsTick(float) Called once per server tick, after all physics ticking has occurred; on main thread. void AfterPhysicsTick(float dt) Parameters dt float OnPhysicsTick(float) Called at a fixed interval, potentially 30 times per second (if server is running smoothly) void OnPhysicsTick(float dt) Parameters dt float"
  },
  "api/Vintagestory.API.Common.Entities.IProjectile.html": {
    "href": "api/Vintagestory.API.Common.Entities.IProjectile.html",
    "title": "Interface IProjectile | VintageStory API",
    "keywords": "Interface IProjectile Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Interface for universal approach to spawning projectile entities. Some of the properties may not be used by all projectiles. But they can still be set or read. public interface IProjectile Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Damage Projectile damage when hitting an entity. float Damage { get; set; } Property Value float DamageStackOnImpact How much ProjectileStack should be damage on impact. bool DamageStackOnImpact { get; set; } Property Value bool DamageTier Projectile damage tier when hitting an entity. int DamageTier { get; set; } Property Value int DamageType Projectile damage type when hitting an entity. EnumDamageType DamageType { get; set; } Property Value EnumDamageType DropOnImpactChance Chance for projectile to not be destroyed on impact. float DropOnImpactChance { get; set; } Property Value float EntityHit Will return true if projectile hit at least one entity. bool EntityHit { get; } Property Value bool FiredBy Entity that spawned the projectile Entity? FiredBy { get; set; } Property Value Entity IgnoreInvFrames If damage source done by projectile will ignore invincibility frames. bool IgnoreInvFrames { get; set; } Property Value bool NonCollectible If projectile can be collected when stuck. bool NonCollectible { get; set; } Property Value bool ProjectileStack Projectile item, can be dropped on impact, or damaged, or destroyed. ItemStack? ProjectileStack { get; set; } Property Value ItemStack Stuck If projectile is stuck in terrain. bool Stuck { get; set; } Property Value bool WeaponStack Weapon item stack used to shoot this projectile. ItemStack? WeaponStack { get; set; } Property Value ItemStack Weight Projectile wieght used for knockback calculations. float Weight { get; set; } Property Value float Methods PreInitialize() Sets initial rotation if needed. Should be called each time entity is spawned before it spawned. void PreInitialize()"
  },
  "api/Vintagestory.API.Common.Entities.IRemotePhysics.html": {
    "href": "api/Vintagestory.API.Common.Entities.IRemotePhysics.html",
    "title": "Interface IRemotePhysics | VintageStory API",
    "keywords": "Interface IRemotePhysics Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll public interface IRemotePhysics Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods HandleRemotePhysics(float, bool) void HandleRemotePhysics(float dt, bool isTeleport) Parameters dt float isTeleport bool OnReceivedClientPos(int) void OnReceivedClientPos(int version) Parameters version int"
  },
  "api/Vintagestory.API.Common.Entities.PModule.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModule.html",
    "title": "Class PModule | VintageStory API",
    "keywords": "Class PModule Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public abstract class PModule Inheritance object PModule Derived PModuleGravity PModuleInAir PModuleInLiquid PModuleKnockback PModuleMotionDrag PModuleOnGround PModuleWind Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public abstract bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public abstract void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public abstract void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModuleGravity.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleGravity.html",
    "title": "Class PModuleGravity | VintageStory API",
    "keywords": "Class PModuleGravity Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleGravity : PModule Inheritance object PModule PModuleGravity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModuleInAir.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleInAir.html",
    "title": "Class PModuleInAir | VintageStory API",
    "keywords": "Class PModuleInAir Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleInAir : PModule Inheritance object PModule PModuleInAir Derived PModulePlayerInAir Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AirMovingStrength public float AirMovingStrength Field Value float WallDragFactor public double WallDragFactor Field Value double Methods Applicable(Entity, EntityPos, EntityControls) Applicable if the player is in fly mode or the entity isn't colliding with anything including liquid. Must be alive. public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool ApplyFlying(float, Entity, EntityPos, EntityControls) Creative flight movement, possibly glider too? public virtual void ApplyFlying(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls ApplyFreeFall(float, Entity, EntityPos, EntityControls) public virtual void ApplyFreeFall(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModuleInLiquid.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleInLiquid.html",
    "title": "Class PModuleInLiquid | VintageStory API",
    "keywords": "Class PModuleInLiquid Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleInLiquid : PModule Inheritance object PModule PModuleInLiquid Derived PModulePlayerInLiquid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Push public float Push Field Value float Swimspeed public float Swimspeed Field Value float Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls HandleSwimming(float, Entity, EntityPos, EntityControls) public virtual void HandleSwimming(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModuleKnockback.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleKnockback.html",
    "title": "Class PModuleKnockback | VintageStory API",
    "keywords": "Class PModuleKnockback Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleKnockback : PModule Inheritance object PModule PModuleKnockback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModuleMotionDrag.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleMotionDrag.html",
    "title": "Class PModuleMotionDrag | VintageStory API",
    "keywords": "Class PModuleMotionDrag Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleMotionDrag : PModule Inheritance object PModule PModuleMotionDrag Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModuleOnGround.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleOnGround.html",
    "title": "Class PModuleOnGround | VintageStory API",
    "keywords": "Class PModuleOnGround Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleOnGround : PModule Inheritance object PModule PModuleOnGround Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModulePlayerInAir.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModulePlayerInAir.html",
    "title": "Class PModulePlayerInAir | VintageStory API",
    "keywords": "Class PModulePlayerInAir Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModulePlayerInAir : PModuleInAir Inheritance object PModule PModuleInAir PModulePlayerInAir Inherited Members PModuleInAir.AirMovingStrength PModuleInAir.WallDragFactor PModuleInAir.Applicable(Entity, EntityPos, EntityControls) PModuleInAir.DoApply(float, Entity, EntityPos, EntityControls) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods ApplyFlying(float, Entity, EntityPos, EntityControls) Creative flight movement, possibly glider too? public override void ApplyFlying(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls ApplyFreeFall(float, Entity, EntityPos, EntityControls) public override void ApplyFreeFall(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PModulePlayerInLiquid.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModulePlayerInLiquid.html",
    "title": "Class PModulePlayerInLiquid | VintageStory API",
    "keywords": "Class PModulePlayerInLiquid Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModulePlayerInLiquid : PModuleInLiquid Inheritance object PModule PModuleInLiquid PModulePlayerInLiquid Inherited Members PModuleInLiquid.Push PModuleInLiquid.Swimspeed PModuleInLiquid.Initialize(JsonObject, Entity) PModuleInLiquid.Applicable(Entity, EntityPos, EntityControls) PModuleInLiquid.DoApply(float, Entity, EntityPos, EntityControls) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PModulePlayerInLiquid(EntityPlayer) public PModulePlayerInLiquid(EntityPlayer entityPlayer) Parameters entityPlayer EntityPlayer Methods HandleSwimming(float, Entity, EntityPos, EntityControls) public override void HandleSwimming(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls"
  },
  "api/Vintagestory.API.Common.Entities.PModuleWind.html": {
    "href": "api/Vintagestory.API.Common.Entities.PModuleWind.html",
    "title": "Class PModuleWind | VintageStory API",
    "keywords": "Class PModuleWind Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class PModuleWind : PModule Inheritance object PModule PModuleWind Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Applicable(Entity, EntityPos, EntityControls) Can this be applied this tick? public override bool Applicable(Entity entity, EntityPos pos, EntityControls controls) Parameters entity Entity pos EntityPos controls EntityControls Returns bool DoApply(float, Entity, EntityPos, EntityControls) Apply a modifier to this entity. public override void DoApply(float dt, Entity entity, EntityPos pos, EntityControls controls) Parameters dt float entity Entity pos EntityPos controls EntityControls Initialize(JsonObject, Entity) Config passed in from the behavior in the entity class. public override void Initialize(JsonObject config, Entity entity) Parameters config JsonObject entity Entity UpdateWindForce(Entity) public virtual void UpdateWindForce(Entity entity) Parameters entity Entity"
  },
  "api/Vintagestory.API.Common.Entities.PhysicsBehaviorBase.html": {
    "href": "api/Vintagestory.API.Common.Entities.PhysicsBehaviorBase.html",
    "title": "Class PhysicsBehaviorBase | VintageStory API",
    "keywords": "Class PhysicsBehaviorBase Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public abstract class PhysicsBehaviorBase : EntityBehavior Inheritance object EntityBehavior PhysicsBehaviorBase Derived EntityBehaviorPassivePhysics Inherited Members EntityBehavior.entity EntityBehavior.ProfilerName EntityBehavior.Initialize(EntityProperties, JsonObject) EntityBehavior.OnGameTick(float) EntityBehavior.ThreadSafe EntityBehavior.OnEntitySpawn() EntityBehavior.OnEntityLoaded() EntityBehavior.OnEntityDespawn(EntityDespawnData) EntityBehavior.PropertyName() EntityBehavior.OnEntityReceiveDamage(DamageSource, ref float) EntityBehavior.OnEntityRevive() EntityBehavior.OnFallToGround(Vec3d, double) EntityBehavior.OnEntityReceiveSaturation(float, EnumFoodCategory, float, float) EntityBehavior.OnReceivedServerPos(bool, ref EnumHandling) EntityBehavior.GetDrops(IWorldAccessor, BlockPos, IPlayer, ref EnumHandling) EntityBehavior.OnStateChanged(EnumEntityState, ref EnumHandling) EntityBehavior.Notify(string, object) EntityBehavior.GetInfoText(StringBuilder) EntityBehavior.OnEntityDeath(DamageSource) EntityBehavior.OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode, ref EnumHandling) EntityBehavior.OnReceivedClientPacket(IServerPlayer, int, byte[], ref EnumHandling) EntityBehavior.OnReceivedServerPacket(int, byte[], ref EnumHandling) EntityBehavior.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer, ref EnumHandling) EntityBehavior.DidAttack(DamageSource, EntityAgent, ref EnumHandling) EntityBehavior.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) EntityBehavior.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) EntityBehavior.ToBytes(bool) EntityBehavior.FromBytes(bool) EntityBehavior.TestCommand(object) EntityBehavior.TryGiveItemStack(ItemStack, ref EnumHandling) EntityBehavior.OnTesselation(ref Shape, string, ref bool, ref string[]) EntityBehavior.GetTextureSource(ref EnumHandling) EntityBehavior.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int, ref EnumHandling) EntityBehavior.OnTesselated() EntityBehavior.UpdateColSelBoxes() EntityBehavior.GetTouchDistance(ref EnumHandling) EntityBehavior.GetName(ref EnumHandling) EntityBehavior.ToleratesDamageFrom(Entity, ref EnumHandling) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PhysicsBehaviorBase(Entity) public PhysicsBehaviorBase(Entity entity) Parameters entity Entity Fields CollisionYExtra public float CollisionYExtra Field Value float capi protected ICoreClientAPI capi Field Value ICoreClientAPI clientInterval protected const float clientInterval = 0.06666667 Field Value float collisionTester [ThreadStatic] protected static CachingCollisionTester collisionTester Field Value CachingCollisionTester lPos protected readonly EntityPos lPos Field Value EntityPos mountableSupplier public IMountable mountableSupplier Field Value IMountable nPos protected Vec3d nPos Field Value Vec3d previousVersion protected int previousVersion Field Value int sapi protected ICoreServerAPI sapi Field Value ICoreServerAPI Methods AfterInitialized(bool) Called after initializing all the behaviors in case they need to cross-refer to each other or set some initial values only at spawn-time public override void AfterInitialized(bool onFirstSpawn) Parameters onFirstSpawn bool Init() public void Init() InitServerMT(ICoreServerAPI) public static void InitServerMT(ICoreServerAPI sapi) Parameters sapi ICoreServerAPI"
  },
  "api/Vintagestory.API.Common.Entities.PhysicsTickDelegate.html": {
    "href": "api/Vintagestory.API.Common.Entities.PhysicsTickDelegate.html",
    "title": "Delegate PhysicsTickDelegate | VintageStory API",
    "keywords": "Delegate PhysicsTickDelegate Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Called after a physics tick has happened public delegate void PhysicsTickDelegate(float accum, Vec3d prevPos) Parameters accum float Amount of seconds left in the accumulator after physics ticking prevPos Vec3d Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Entities.QuantityByGroup.html": {
    "href": "api/Vintagestory.API.Common.Entities.QuantityByGroup.html",
    "title": "Class QuantityByGroup | VintageStory API",
    "keywords": "Class QuantityByGroup Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Allows you to control spawn limits based on a set of entity codes using a wildcard. Open in GitHub [DocumentAsJson] public class QuantityByGroup Inheritance object QuantityByGroup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code A wildcard asset location which can group many entities together. [DocumentAsJson] public AssetLocation Code Field Value AssetLocation MaxQuantity The maximum quantity for all entities that match the Code wildcard. [DocumentAsJson] public int MaxQuantity Field Value int"
  },
  "api/Vintagestory.API.Common.Entities.RuntimeSpawnConditions.html": {
    "href": "api/Vintagestory.API.Common.Entities.RuntimeSpawnConditions.html",
    "title": "Class RuntimeSpawnConditions | VintageStory API",
    "keywords": "Class RuntimeSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A set of spawn conditions for chunks that have already been generated. Most properties are got from BaseSpawnConditions. Open in GitHub [DocumentAsJson] public class RuntimeSpawnConditions : BaseSpawnConditions Inheritance object ClimateSpawnCondition BaseSpawnConditions RuntimeSpawnConditions Inherited Members BaseSpawnConditions.Group BaseSpawnConditions.MinLightLevel BaseSpawnConditions.MaxLightLevel BaseSpawnConditions.LightLevelType BaseSpawnConditions.HerdSize BaseSpawnConditions.GroupSize BaseSpawnConditions.Companions BaseSpawnConditions.InsideBlockCodes BaseSpawnConditions.RequireSolidGround BaseSpawnConditions.TryOnlySurface BaseSpawnConditions.ClimateValueMode BaseSpawnConditions.InsideBlockCodesResolved BaseSpawnConditions.InsideBlockCodesBeginsWith BaseSpawnConditions.InsideBlockCodesExact BaseSpawnConditions.InsideBlockFirstLetters BaseSpawnConditions.CanSpawnInside(Block) BaseSpawnConditions.Initialise(IServerWorldAccessor, string, Dictionary<AssetLocation, Block[]>) ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs ClimateSpawnCondition.SetFrom(ClimateSpawnCondition) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Chance The chance, usually between 0 (0% chance) and 1 (100% chance), for the entity to spawn during the spawning round. [DocumentAsJson] public double Chance Field Value double MaxQuantity The max number of this entity that can ever exist in the world for a single player. With more than one player, the max number is actually (this)x(current player count)x(SpawnCapPlayerScaling). Consider using MaxQuantityByGroup to allow a max quantity based from many entities. [DocumentAsJson] public int MaxQuantity Field Value int MaxQuantityByGroup The max quantity of objects to spawn based on a wildcard group of entities. For example, using MaxQuantity will allow a max of 20 pig-wild-male instances. Using this with a group of \"pig-*\" will allow a max of 20 pig entities, regardless if male, female, or piglet. [DocumentAsJson] public QuantityByGroup MaxQuantityByGroup Field Value QuantityByGroup MinDistanceToPlayer The minimum distance from the player that an object will spawn. [DocumentAsJson] public int MinDistanceToPlayer Field Value int SpawnCapPlayerScaling The maximum number of this entity that can exist in the world is MaxQuantity x (current player count) x (this). [DocumentAsJson] public float SpawnCapPlayerScaling Field Value float doneInitialLoad Set server-side after this has been loaded once, used only for error logging purposes public bool doneInitialLoad Field Value bool Methods Clone() Creates a deep copy of this set of spawn conditions. public RuntimeSpawnConditions Clone() Returns RuntimeSpawnConditions"
  },
  "api/Vintagestory.API.Common.Entities.SpawnConditions.html": {
    "href": "api/Vintagestory.API.Common.Entities.SpawnConditions.html",
    "title": "Class SpawnConditions | VintageStory API",
    "keywords": "Class SpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll The spawn conditions assigned to various things. Open in GitHub [DocumentAsJson] public class SpawnConditions Inheritance object SpawnConditions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"spawnconditions\": { \"worldgen\": { \"TriesPerChunk\": { \"avg\": 0.1, \"var\": 0 }, \"tryOnlySurface\": true, \"minLightLevel\": 10, \"groupSize\": { \"dist\": \"verynarrowgaussian\", \"avg\": 3, \"var\": 4 }, \"insideBlockCodes\": [ \"air\", \"tallgrass-*\" ], \"minTemp\": 5, \"maxTemp\": 28, \"minRain\": 0.45, \"minForest\": 0.35, \"companions\": [ \"pig-wild-female\", \"pig-wild-piglet\" ] }, \"runtime\": { \"group\": \"neutral\", \"tryOnlySurface\": true, \"chance\": 0.0006, \"maxQuantity\": 4, \"minLightLevel\": 10, \"groupSize\": { \"dist\": \"verynarrowgaussian\", \"avg\": 3, \"var\": 4 }, \"insideBlockCodes\": [ \"air\", \"tallgrass-*\" ], \"minTemp\": 5, \"maxTemp\": 28, \"minRain\": 0.45, \"minForestOrShrubs\": 0.35, \"companions\": [ \"pig-wild-female\", \"pig-wild-piglet\" ] } } Fields Climate Recommended None Control specific spawn conditions based on climate. Note that this will override any climate values set in Runtime and Worldgen. It is recommended to specify climate values here rather than setting them in the other spawn conditions. [DocumentAsJson] public ClimateSpawnCondition Climate Field Value ClimateSpawnCondition Runtime Recommended None Runtime requirements for the object to spawn. [DocumentAsJson] public RuntimeSpawnConditions Runtime Field Value RuntimeSpawnConditions Worldgen Recommended None Worldgen/region requirements for the object to spawn. [DocumentAsJson] public WorldGenSpawnConditions Worldgen Field Value WorldGenSpawnConditions Methods Clone() public SpawnConditions Clone() Returns SpawnConditions"
  },
  "api/Vintagestory.API.Common.Entities.SyncedEntityPos.html": {
    "href": "api/Vintagestory.API.Common.Entities.SyncedEntityPos.html",
    "title": "Class SyncedEntityPos | VintageStory API",
    "keywords": "Class SyncedEntityPos Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Represents an EntityPos thats synced over the network using a dirty flag and regular is-dirty checks Open in GitHub public class SyncedEntityPos : EntityPos Inheritance object EntityPos SyncedEntityPos Inherited Members EntityPos.x EntityPos.y EntityPos.z EntityPos.Dimension EntityPos.roll EntityPos.yaw EntityPos.pitch EntityPos.stance EntityPos.HeadYaw EntityPos.HeadPitch EntityPos.Motion EntityPos.InternalY EntityPos.DimensionYAdjustment EntityPos.AsBlockPos EntityPos.XYZInt EntityPos.XYZ EntityPos.XYZFloat EntityPos.SetPosWithDimension(Vec3d) EntityPos.SetPos(Vec3d) EntityPos.Add(double, double, double) EntityPos.Add(Vec3f) EntityPos.SetPos(int, int, int) EntityPos.SetPos(BlockPos) EntityPos.SetPos(double, double, double) EntityPos.SetPos(EntityPos) EntityPos.SetAngles(EntityPos) EntityPos.SetAngles(float, float, float) EntityPos.SetYaw(float) EntityPos.InRangeOf(EntityPos, int) EntityPos.InRangeOf(int, int, int, float) EntityPos.InHorizontalRangeOf(int, int, float) EntityPos.InRangeOf(double, double, double, float) EntityPos.InRangeOf(BlockPos, float) EntityPos.InRangeOf(Vec3f, float) EntityPos.InRangeOf(Vec3d, float, float) EntityPos.SquareDistanceTo(float, float, float) EntityPos.SquareDistanceTo(double, double, double) EntityPos.SquareDistanceTo(Vec3d) EntityPos.SquareHorDistanceTo(Vec3d) EntityPos.DistanceTo(Vec3d) EntityPos.DistanceTo(EntityPos) EntityPos.HorDistanceTo(Vec3d) EntityPos.HorDistanceTo(double, double) EntityPos.HorDistanceTo(EntityPos) EntityPos.SquareDistanceTo(EntityPos) EntityPos.Copy() EntityPos.GetViewVector() EntityPos.GetViewVector(float, float) EntityPos.AheadCopy(double) EntityPos.HorizontalAheadCopy(double) EntityPos.BehindCopy(double) EntityPos.BasicallySameAs(EntityPos, double) EntityPos.BasicallySameAsIgnoreMotion(EntityPos, double) EntityPos.BasicallySameAsIgnoreAngles(EntityPos, double) EntityPos.SetFrom(EntityPos) EntityPos.SetFrom(Vec3d) EntityPos.ToString() EntityPos.OnlyPosToString() EntityPos.OnlyAnglesToString() EntityPos.ToBytes(BinaryWriter) EntityPos.FromBytes(BinaryReader) EntityPos.AnyNaN() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SyncedEntityPos() public SyncedEntityPos() SyncedEntityPos(double, double, double, float, float) public SyncedEntityPos(double x, double y, double z, float heading = 0, float pitch = 0) Parameters x double y double z double heading float pitch float SyncedEntityPos(Vec3d) public SyncedEntityPos(Vec3d position) Parameters position Vec3d Fields LastReceivedClientPosition public long LastReceivedClientPosition Field Value long Properties Dirty Marks the position as dirty- requiring a refresh from the server. public bool Dirty { get; set; } Property Value bool Pitch The rotation around the Z axis, in radians. public override float Pitch { get; set; } Property Value float PitchInternal Sets the pitch of the Entity Position. This may cause desync. public float PitchInternal { set; } Property Value float Roll The rotation around the X axis, in radians. public override float Roll { get; set; } Property Value float RollInternal Sets the roll of the Entity Position. This may cause desync. public float RollInternal { set; } Property Value float StanceInternal Sets the stance of the Entity Position. This may cause desync. public int StanceInternal { set; } Property Value int X The X position of the Entity. public override double X { get; set; } Property Value double XInternal Internally sets the value of X. This may cause desync. public double XInternal { set; } Property Value double Y The Y position of the Entity. public override double Y { get; set; } Property Value double YInternal Internally sets the value of Y. This may cause desync. public double YInternal { set; } Property Value double Yaw The rotation around the Y axis, in radians. public override float Yaw { get; set; } Property Value float YawInternal Sets the yaw of the Entity Position. This may cause desync. public float YawInternal { set; } Property Value float Z The Z position of the Entity. public override double Z { get; set; } Property Value double ZInternal Internally sets the value of Z. This may cause desync. public double ZInternal { set; } Property Value double Methods MarkClean() Marks the position as clean- and not requiring a refresh from the server. public void MarkClean()"
  },
  "api/Vintagestory.API.Common.Entities.TrackedPlayerProperties.html": {
    "href": "api/Vintagestory.API.Common.Entities.TrackedPlayerProperties.html",
    "title": "Class TrackedPlayerProperties | VintageStory API",
    "keywords": "Class TrackedPlayerProperties Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll Open in GitHub public class TrackedPlayerProperties Inheritance object TrackedPlayerProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TrackedPlayerProperties() public TrackedPlayerProperties() Fields DayLight public float DayLight Field Value float DistanceToSpawnPoint public float DistanceToSpawnPoint Field Value float EyesInLavaColorShift public int EyesInLavaColorShift Field Value int EyesInLavaDepth public float EyesInLavaDepth Field Value float EyesInWaterColorShift public int EyesInWaterColorShift Field Value int EyesInWaterDepth public float EyesInWaterDepth Field Value float FallSpeed public double FallSpeed Field Value double MoonLight public float MoonLight Field Value float PlayListCode public string PlayListCode Field Value string PlayerChunkPos public BlockPos PlayerChunkPos Field Value BlockPos PlayerPosDiv8 public BlockPos PlayerPosDiv8 Field Value BlockPos Playstyle The servers playstyle public string Playstyle Field Value string posY Relative value. bottom 0...1 sealevel, 1 .... 2 max-y public float posY Field Value float sunSlight 0...32 public float sunSlight Field Value float"
  },
  "api/Vintagestory.API.Common.Entities.WorldGenSpawnConditions.html": {
    "href": "api/Vintagestory.API.Common.Entities.WorldGenSpawnConditions.html",
    "title": "Class WorldGenSpawnConditions | VintageStory API",
    "keywords": "Class WorldGenSpawnConditions Namespace Vintagestory.API.Common.Entities Assembly VintagestoryAPI.dll A set of spawn conditions for when chunks are generated. Most properties are got from BaseSpawnConditions. Open in GitHub [DocumentAsJson] public class WorldGenSpawnConditions : BaseSpawnConditions Inheritance object ClimateSpawnCondition BaseSpawnConditions WorldGenSpawnConditions Inherited Members BaseSpawnConditions.Group BaseSpawnConditions.MinLightLevel BaseSpawnConditions.MaxLightLevel BaseSpawnConditions.LightLevelType BaseSpawnConditions.HerdSize BaseSpawnConditions.GroupSize BaseSpawnConditions.Companions BaseSpawnConditions.InsideBlockCodes BaseSpawnConditions.RequireSolidGround BaseSpawnConditions.TryOnlySurface BaseSpawnConditions.ClimateValueMode BaseSpawnConditions.InsideBlockCodesResolved BaseSpawnConditions.InsideBlockCodesBeginsWith BaseSpawnConditions.InsideBlockCodesExact BaseSpawnConditions.InsideBlockFirstLetters BaseSpawnConditions.CanSpawnInside(Block) BaseSpawnConditions.Initialise(IServerWorldAccessor, string, Dictionary<AssetLocation, Block[]>) ClimateSpawnCondition.MinTemp ClimateSpawnCondition.MaxTemp ClimateSpawnCondition.MinRain ClimateSpawnCondition.MaxRain ClimateSpawnCondition.MinForest ClimateSpawnCondition.MaxForest ClimateSpawnCondition.MinShrubs ClimateSpawnCondition.MaxShrubs ClimateSpawnCondition.MinY ClimateSpawnCondition.MaxY ClimateSpawnCondition.MinForestOrShrubs ClimateSpawnCondition.SetFrom(ClimateSpawnCondition) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields TriesPerChunk The amount of times the object will attempt to spawn per chunk. [DocumentAsJson] public NatFloat TriesPerChunk Field Value NatFloat Methods Clone() public WorldGenSpawnConditions Clone() Returns WorldGenSpawnConditions"
  },
  "api/Vintagestory.API.Common.Entities.html": {
    "href": "api/Vintagestory.API.Common.Entities.html",
    "title": "Namespace Vintagestory.API.Common.Entities | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Common.Entities Classes BaseSpawnConditions A base class for entities spawning conditions. Open in GitHub ClimateSpawnCondition A list of conditions based on climate. Open in GitHub Entity The basic class for all entities in the game Open in GitHub EntityBehavior Defines a basic entity behavior that can be attached to entities Open in GitHub EntityClientProperties Open in GitHub EntityDespawnData Open in GitHub EntityPos Represents all positional information of an entity, such as coordinates, motion and angles Open in GitHub EntityProperties Open in GitHub EntityRenderer Base class for entity rendering Open in GitHub EntityServerProperties Open in GitHub EntitySidedProperties Open in GitHub FuzzyEntityPos Open in GitHub PModule Open in GitHub PModuleGravity Open in GitHub PModuleInAir Open in GitHub PModuleInLiquid Open in GitHub PModuleKnockback Open in GitHub PModuleMotionDrag Open in GitHub PModuleOnGround Open in GitHub PModulePlayerInAir Open in GitHub PModulePlayerInLiquid Open in GitHub PModuleWind Open in GitHub PhysicsBehaviorBase Open in GitHub QuantityByGroup Allows you to control spawn limits based on a set of entity codes using a wildcard. Open in GitHub RuntimeSpawnConditions A set of spawn conditions for chunks that have already been generated. Most properties are got from BaseSpawnConditions. Open in GitHub SpawnConditions The spawn conditions assigned to various things. Open in GitHub SyncedEntityPos Represents an EntityPos thats synced over the network using a dirty flag and regular is-dirty checks Open in GitHub TrackedPlayerProperties Open in GitHub WorldGenSpawnConditions A set of spawn conditions for when chunks are generated. Most properties are got from BaseSpawnConditions. Open in GitHub Interfaces IPettable IPhysicsTickable IProjectile Interface for universal approach to spawning projectile entities. Some of the properties may not be used by all projectiles. But they can still be set or read. IRemotePhysics Enums EnumEntityActivity A list of activities that an entity can perform. Open in GitHub Delegates PhysicsTickDelegate Called after a physics tick has happened"
  },
  "api/Vintagestory.API.Common.EntitiesArgParser.html": {
    "href": "api/Vintagestory.API.Common.EntitiesArgParser.html",
    "title": "Class EntitiesArgParser | VintageStory API",
    "keywords": "Class EntitiesArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntitiesArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase EntitiesArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntitiesArgParser(string, ICoreAPI, bool) public EntitiesArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.Entitlement.html": {
    "href": "api/Vintagestory.API.Common.Entitlement.html",
    "title": "Class Entitlement | VintageStory API",
    "keywords": "Class Entitlement Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class Entitlement Inheritance object Entitlement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code public string Code Field Value string Name public string Name Field Value string"
  },
  "api/Vintagestory.API.Common.EntityAgent.EntityClientPacketId.html": {
    "href": "api/Vintagestory.API.Common.EntityAgent.EntityClientPacketId.html",
    "title": "Enum EntityAgent.EntityClientPacketId | VintageStory API",
    "keywords": "Enum EntityAgent.EntityClientPacketId Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public enum EntityAgent.EntityClientPacketId Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields SitfloorEdge = 296"
  },
  "api/Vintagestory.API.Common.EntityAgent.EntityServerPacketId.html": {
    "href": "api/Vintagestory.API.Common.EntityAgent.EntityServerPacketId.html",
    "title": "Enum EntityAgent.EntityServerPacketId | VintageStory API",
    "keywords": "Enum EntityAgent.EntityServerPacketId Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public enum EntityAgent.EntityServerPacketId Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Death = 198 Emote = 197 Hurt = 199 PlayMusic = 201 PlayPlayerAnim = 200 Revive = 196 StopMusic = 202 Talk = 203 Teleport = 1"
  },
  "api/Vintagestory.API.Common.EntityAgent.html": {
    "href": "api/Vintagestory.API.Common.EntityAgent.html",
    "title": "Class EntityAgent | VintageStory API",
    "keywords": "Class EntityAgent Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A goal-directed entity which observes and acts upon an environment Open in GitHub public class EntityAgent : Entity Inheritance object RegistryObject Entity EntityAgent Derived EntityHumanoid Inherited Members Entity.SplashParticleProps Entity.FireParticleProps Entity.FloatingSedimentParticles Entity.AirBubbleParticleProps Entity.bioLumiParticles Entity.bioLumiNoise Entity.OnInitialized Entity.HurtColor Entity.World Entity.Api Entity.Tags Entity.CanSwivelNow Entity.PhysicsUpdateWatcher Entity.AnimManager Entity.ActivityTimers Entity.Pos Entity.ServerPos Entity.PreviousServerPos Entity.PositionBeforeFalling Entity.InChunkIndex3d Entity.CollisionBox Entity.OriginCollisionBox Entity.SelectionBox Entity.OriginSelectionBox Entity.Teleporting Entity.EntityId Entity.SimulationRange Entity.ClimbingOnFace Entity.ClimbingIntoFace Entity.ClimbingOnCollBox Entity.OnGround Entity.FeetInLiquid Entity.IsOnFire Entity.resetLightHsv Entity.InLava Entity.InLavaBeginTotalMs Entity.OnFireBeginTotalMs Entity.Swimming Entity.CollidedVertically Entity.CollidedHorizontally Entity.State Entity.DespawnReason Entity.WatchedAttributes Entity.DebugAttributes Entity.Attributes Entity.IsRendered Entity.IsShadowRendered Entity.Stats Entity.fireDamageAccum Entity.touchDistance Entity.touchDistanceSq Entity.hasRepulseBehavior Entity.customRepulseBehavior Entity.BHRepulseAgents Entity.AfterPhysicsTick Entity.IsTracked Entity.PositionTicked Entity.IsTeleport Entity.trickleDownRayIntersects Entity.requirePosesOnServer Entity.packet Entity.ServerBehaviorsMainThread Entity.ServerBehaviorsThreadsafe Entity.Properties Entity.SidedProperties Entity.IsInteractable Entity.SwimmingOffsetY Entity.Collided Entity.SidedPos Entity.LocalEyePos Entity.ApplyGravity Entity.MaterialDensity Entity.LightHsv Entity.StoreWithChunk Entity.AllowOutsideLoadedRange Entity.AlwaysActive Entity.Alive Entity.alive Entity.NearestPlayerDistance Entity.AdjustCollisionBoxToAnimation Entity.IdleSoundChanceModifier Entity.RenderColor Entity.LadderFixDelta Entity.ImpactBlockUpdateChance Entity.OnHurt(DamageSource, float) Entity.AfterInitialized(bool) Entity.TriggerOnInitialized() Entity.DoInitialActiveCheck(ICoreAPI) Entity.InRangeOf(Vec3d, float, float) Entity.updateColSelBoxes() Entity.updateOnFire() Entity.GetDrops(IWorldAccessor, BlockPos, IPlayer) Entity.TeleportTo(int, int, int) Entity.TeleportTo(Vec3d) Entity.TeleportTo(BlockPos) Entity.TeleportTo(EntityPos, Action) Entity.ApplyFireDamage(float) Entity.DieInLava() Entity.OnAsyncParticleTick(float, IAsyncParticleManager) Entity.Ignite() Entity.GetTextureSource() Entity.ShapeFresh Entity.FrustumSphereRadius Entity.shapeFresh Entity.MarkShapeModified() Entity.OnTesselation(ref Shape, string) Entity.OnTesselation(ref Shape, string, ref bool) Entity.OnTesselated() Entity.OnFallToGround(double) Entity.OnCollided() Entity.OnCollideWithLiquid() Entity.SpawnWaterMovementParticles(float, double, double, double) Entity.OnEntityLoaded() Entity.OnEntitySpawn() Entity.OnExitedLiquid() Entity.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer) Entity.OnReceivedServerPos(bool) Entity.OnReceivedClientPacket(IServerPlayer, int, byte[]) Entity.OnReceivedServerPacket(int, byte[]) Entity.OnReceivedServerAnimations(int[], int, float[]) Entity.OnCollected(Entity) Entity.OnStateChanged(EnumEntityState) Entity.SetCollisionBox(float, float) Entity.SetSelectionBox(float, float) Entity.AddBehavior(EntityBehavior) Entity.RemoveBehavior(EntityBehavior) Entity.CacheServerBehaviors() Entity.HasBehavior(string) Entity.HasBehavior<T>() Entity.GetBehavior(string) Entity.GetBehavior<T>() Entity.GetInterfaces<T>() Entity.GetInterface<T>() Entity.IsActivityRunning(string) Entity.RemainingActivityTime(string) Entity.SetActivityRunning(string, int) Entity.UpdateAnimationDebugAttributes() Entity.FromBytes(BinaryReader, bool, Dictionary<string, string>) Entity.Revive() Entity.PlayEntitySound(string, IPlayer, bool, float) Entity.CanCollect(Entity) Entity.Notify(string, object) Entity.WillExport(BlockPos) Entity.DidImportOrExport(BlockPos) Entity.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Entity.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Entity.GetName() Entity.StartAnimation(string) Entity.StopAnimation(string) Entity.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int) Entity.GetTouchDistance() Entity.MarkTagsDirty() Entity.IsFirstTick() RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityAgent() public EntityAgent() Fields AllowDespawn Whether or not the entity is allowed to despawn (Default: true) public bool AllowDespawn Field Value bool CurrentControls public EnumEntityActivity CurrentControls Field Value EnumEntityActivity DeadNotify True if all clients have to be informed about this entities death. Set to false once all clients have been notified public bool DeadNotify Field Value bool alwaysRunIdle protected bool alwaysRunIdle Field Value bool controls protected EntityControls controls Field Value EntityControls herdId protected long herdId Field Value long ignoreTeleportCall protected bool ignoreTeleportCall Field Value bool insideBlock updated by GetWalkSpeedMultiplier() protected Block insideBlock Field Value Block insidePos updated by GetWalkSpeedMultiplier() protected BlockPos insidePos Field Value BlockPos servercontrols protected EntityControls servercontrols Field Value EntityControls sidewaysSwivelAngle public float sidewaysSwivelAngle Field Value float Properties ActiveHandItemSlot public virtual ItemSlot ActiveHandItemSlot { get; } Property Value ItemSlot BodyYaw The yaw of the agents body public virtual float BodyYaw { get; set; } Property Value float BodyYawServer The yaw of the agents body on the client, retrieved from the server (BehaviorInterpolatePosition lerps this value and sets BodyYaw) public virtual float BodyYawServer { get; set; } Property Value float CanStepPitch public override bool CanStepPitch { get; } Property Value bool CanSwivel No swivel when we are mounted public override bool CanSwivel { get; } Property Value bool Controls The controls for this entity. public EntityControls Controls { get; } Property Value EntityControls HerdId Unique identifier for a herd public long HerdId { get; set; } Property Value long IsCreature Used by AItasks for perfomance. When searching for nearby entities we distinguish between (A) Creatures and (B) Inanimate entitie. Inanimate entities are items on the ground, projectiles, armor stands, rafts, falling blocks etc Note 1: Dead creatures / corpses count as a Creature. EntityPlayer is a Creature of course. Note 2: Straw Dummy we count as a Creature, because weapons can target it and bees can attack it. In contrast, Armor Stand we count as Inanimate, because nothing should ever attack or target it. public override bool IsCreature { get; } Property Value bool LeftHandItemSlot Item in the left hand slot of the entity agent. public virtual ItemSlot LeftHandItemSlot { get; set; } Property Value ItemSlot MountedOn public IMountableSeat MountedOn { get; protected set; } Property Value IMountableSeat RightHandItemSlot Item in the right hand slot of the entity agent. public virtual ItemSlot RightHandItemSlot { get; set; } Property Value ItemSlot ServerControls The server controls for this entity public EntityControls ServerControls { get; } Property Value EntityControls ShouldDespawn Whether or not the entity should despawn. public override bool ShouldDespawn { get; } Property Value bool Methods DidAttack(DamageSource, EntityAgent) public virtual void DidAttack(DamageSource source, EntityAgent targetEntity) Parameters source DamageSource targetEntity EntityAgent Die(EnumDespawnReason, DamageSource) Makes the entity despawn. Entities only drop something on EnumDespawnReason.Death public override void Die(EnumDespawnReason reason = EnumDespawnReason.Death, DamageSource damageSourceForDeath = null) Parameters reason EnumDespawnReason damageSourceForDeath DamageSource FromBytes(BinaryReader, bool) Loads the entity from a stored byte array from the SaveGame public override void FromBytes(BinaryReader reader, bool forClient) Parameters reader BinaryReader forClient bool GetHeadPositionFromWatchedAttributes() Relevant only for entities with heads, implemented in EntityAgent. Other sub-classes of Entity (if not EntityAgent) should similarly override this if the headYaw/headPitch are relevant to them protected override void GetHeadPositionFromWatchedAttributes() GetInfoText() gets the info text for the entity. public override string GetInfoText() Returns string GetWalkSpeedMultiplier(double) Gets the walk speed multiplier. public virtual double GetWalkSpeedMultiplier(double groundDragFactor = 0.3) Parameters groundDragFactor double The amount of drag provided by the current ground. (Default: 0.3) Returns double HandleHandAnimations(float) protected virtual void HandleHandAnimations(float dt) Parameters dt float Initialize(EntityProperties, ICoreAPI, long) Called when this entity got created or loaded public override void Initialize(EntityProperties properties, ICoreAPI api, long InChunkIndex3d) Parameters properties EntityProperties api ICoreAPI InChunkIndex3d long IsEyesSubmerged() Are the eyes of this entity submerged in liquid? public bool IsEyesSubmerged() Returns bool OnEntityDespawn(EntityDespawnData) Called when the entity despawns public override void OnEntityDespawn(EntityDespawnData despawn) Parameters despawn EntityDespawnData OnGameTick(float) Called every 1/75 second public override void OnGameTick(float dt) Parameters dt float OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode) Called when an entity has interacted with this entity public override void OnInteract(EntityAgent byEntity, ItemSlot slot, Vec3d hitPosition, EnumInteractMode mode) Parameters byEntity EntityAgent slot ItemSlot hitPosition Vec3d Relative position on the entites hitbox where the entity interacted at mode EnumInteractMode 0 = attack, 1 = interact ReceiveDamage(DamageSource, float) Called when the entity should be receiving damage from given source public override bool ReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool True if the entity actually received damage ReceiveSaturation(float, EnumFoodCategory, float, float) Recieves the saturation from a food source. public virtual void ReceiveSaturation(float saturation, EnumFoodCategory foodCat = EnumFoodCategory.Unknown, float saturationLossDelay = 10, float nutritionGainMultiplier = 1) Parameters saturation float The amount of saturation recieved. foodCat EnumFoodCategory The cat of food... err Category of food. saturationLossDelay float The delay before the loss of saturation nutritionGainMultiplier float SetHeadPositionToWatchedAttributes() Relevant only for entities with heads, implemented in EntityAgent. Other sub-classes of Entity (if not EntityAgent) should similarly override this if the headYaw/headPitch are relevant to them protected override void SetHeadPositionToWatchedAttributes() ShouldReceiveDamage(DamageSource, float) Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage. public override bool ShouldReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool ShouldReceiveSaturation(float, EnumFoodCategory, float, float) Whether or not the target should recieve saturation. public virtual bool ShouldReceiveSaturation(float saturation, EnumFoodCategory foodCat = EnumFoodCategory.Unknown, float saturationLossDelay = 10, float nutritionGainMultiplier = 1) Parameters saturation float The amount of saturation recieved. foodCat EnumFoodCategory The cat of food... err Category of food. saturationLossDelay float The delay before the loss of saturation nutritionGainMultiplier float Returns bool SpawnFloatingSediment(IAsyncParticleManager) protected virtual void SpawnFloatingSediment(IAsyncParticleManager manager) Parameters manager IAsyncParticleManager SpawnSnowStepParticles() protected virtual void SpawnSnowStepParticles() TeleportToDouble(double, double, double, Action) Teleports the entity to given position. Actual teleport is delayed until target chunk is loaded. public override void TeleportToDouble(double x, double y, double z, Action onTeleported = null) Parameters x double y double z double onTeleported Action ToBytes(BinaryWriter, bool) Serializes the slots contents to be stored in the SaveGame public override void ToBytes(BinaryWriter writer, bool forClient) Parameters writer BinaryWriter forClient bool ToleratesDamageFrom(Entity) If true, then this entity will not retaliate if attacked by the specified eOther public bool ToleratesDamageFrom(Entity eOther) Parameters eOther Entity Returns bool TryGiveItemStack(ItemStack) Called when something tries to given an itemstack to this entity public override bool TryGiveItemStack(ItemStack itemstack) Parameters itemstack ItemStack Returns bool TryMount(IMountableSeat) Attempts to mount this entity on a target. public virtual bool TryMount(IMountableSeat onmount) Parameters onmount IMountableSeat The mount to mount Returns bool Whether it was mounted or not. TryStopHandAction(bool, EnumItemUseCancelReason) Attempts to stop the hand action. public virtual bool TryStopHandAction(bool isCancel, EnumItemUseCancelReason cancelReason = EnumItemUseCancelReason.ReleasedMouse) Parameters isCancel bool Whether or not the action is cancelled or stopped. cancelReason EnumItemUseCancelReason The reason for stopping the action. Returns bool Whether the stop was cancelled or not. TryUnmount() Attempts to un-mount the player. public bool TryUnmount() Returns bool Whether or not unmounting was successful UpdateDebugAttributes() Updates the DebugAttributes tree public override void UpdateDebugAttributes() WalkInventory(OnInventorySlot) This walks the inventory for the entity agent. public virtual void WalkInventory(OnInventorySlot handler) Parameters handler OnInventorySlot the event to fire while walking the inventory. doMount(IMountableSeat) protected virtual void doMount(IMountableSeat mountable) Parameters mountable IMountableSeat onAnimControls(AnimationMetaData, bool, bool) protected virtual bool onAnimControls(AnimationMetaData anim, bool wasActive, bool nowActive) Parameters anim AnimationMetaData wasActive bool nowActive bool Returns bool updateMountedState() protected virtual void updateMountedState()"
  },
  "api/Vintagestory.API.Common.EntityBehaviorPassivePhysics.html": {
    "href": "api/Vintagestory.API.Common.EntityBehaviorPassivePhysics.html",
    "title": "Class EntityBehaviorPassivePhysics | VintageStory API",
    "keywords": "Class EntityBehaviorPassivePhysics Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityBehaviorPassivePhysics : PhysicsBehaviorBase, IPhysicsTickable, IRemotePhysics Inheritance object EntityBehavior PhysicsBehaviorBase EntityBehaviorPassivePhysics Implements IPhysicsTickable IRemotePhysics Inherited Members PhysicsBehaviorBase.capi PhysicsBehaviorBase.sapi PhysicsBehaviorBase.clientInterval PhysicsBehaviorBase.previousVersion PhysicsBehaviorBase.mountableSupplier PhysicsBehaviorBase.lPos PhysicsBehaviorBase.nPos PhysicsBehaviorBase.CollisionYExtra PhysicsBehaviorBase.collisionTester PhysicsBehaviorBase.InitServerMT(ICoreServerAPI) PhysicsBehaviorBase.Init() PhysicsBehaviorBase.AfterInitialized(bool) EntityBehavior.entity EntityBehavior.ProfilerName EntityBehavior.OnGameTick(float) EntityBehavior.ThreadSafe EntityBehavior.OnEntitySpawn() EntityBehavior.OnEntityLoaded() EntityBehavior.OnEntityReceiveDamage(DamageSource, ref float) EntityBehavior.OnEntityRevive() EntityBehavior.OnFallToGround(Vec3d, double) EntityBehavior.OnEntityReceiveSaturation(float, EnumFoodCategory, float, float) EntityBehavior.GetDrops(IWorldAccessor, BlockPos, IPlayer, ref EnumHandling) EntityBehavior.OnStateChanged(EnumEntityState, ref EnumHandling) EntityBehavior.Notify(string, object) EntityBehavior.GetInfoText(StringBuilder) EntityBehavior.OnEntityDeath(DamageSource) EntityBehavior.OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode, ref EnumHandling) EntityBehavior.OnReceivedClientPacket(IServerPlayer, int, byte[], ref EnumHandling) EntityBehavior.OnReceivedServerPacket(int, byte[], ref EnumHandling) EntityBehavior.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer, ref EnumHandling) EntityBehavior.DidAttack(DamageSource, EntityAgent, ref EnumHandling) EntityBehavior.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) EntityBehavior.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) EntityBehavior.ToBytes(bool) EntityBehavior.FromBytes(bool) EntityBehavior.TestCommand(object) EntityBehavior.TryGiveItemStack(ItemStack, ref EnumHandling) EntityBehavior.OnTesselation(ref Shape, string, ref bool, ref string[]) EntityBehavior.GetTextureSource(ref EnumHandling) EntityBehavior.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int, ref EnumHandling) EntityBehavior.OnTesselated() EntityBehavior.UpdateColSelBoxes() EntityBehavior.GetTouchDistance(ref EnumHandling) EntityBehavior.GetName(ref EnumHandling) EntityBehavior.ToleratesDamageFrom(Entity, ref EnumHandling) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityBehaviorPassivePhysics(Entity) public EntityBehaviorPassivePhysics(Entity entity) Parameters entity Entity Fields OnPhysicsTickCallback If set, will test for entity collision every tick (expensive) public Action<float> OnPhysicsTickCallback Field Value Action<float> newPos protected Vec3d newPos Field Value Vec3d Properties Entity public Entity Entity { get; } Property Value Entity Ticking public bool Ticking { get; set; } Property Value bool Methods AfterPhysicsTick(float) Called once per server tick, after all physics ticking has occurred; on main thread. public void AfterPhysicsTick(float dt) Parameters dt float ApplyTests(EntityPos) public void ApplyTests(EntityPos pos) Parameters pos EntityPos HandleRemotePhysics(float, bool) public void HandleRemotePhysics(float dt, bool isTeleport) Parameters dt float isTeleport bool Initialize(EntityProperties, JsonObject) Initializes the entity. If your code modifies the supplied attributes (not recommended!), then your changes will apply to all entities of the same type. public override void Initialize(EntityProperties properties, JsonObject attributes) Parameters properties EntityProperties The properties of this entity. attributes JsonObject The attributes of this entity. MotionAndCollision(EntityPos, float) public void MotionAndCollision(EntityPos pos, float dt) Parameters pos EntityPos dt float OnEntityDespawn(EntityDespawnData) The event fired when the entity is despawned. public override void OnEntityDespawn(EntityDespawnData despawn) Parameters despawn EntityDespawnData The reason the entity despawned. OnPhysicsTick(float) Called at a fixed interval, potentially 30 times per second (if server is running smoothly) public void OnPhysicsTick(float dt) Parameters dt float OnReceivedClientPos(int) public void OnReceivedClientPos(int version) Parameters version int OnReceivedServerPos(bool, ref EnumHandling) The event fired when the server position is changed. public override void OnReceivedServerPos(bool isTeleport, ref EnumHandling handled) Parameters isTeleport bool Whether or not this entity was teleported. handled EnumHandling How this event is handled. PropertyName() The name of the property tied to this entity behavior. public override string PropertyName() Returns string RemoteMotionAndCollision(EntityPos, float) public void RemoteMotionAndCollision(EntityPos pos, float dtFactor) Parameters pos EntityPos dtFactor float SetProperties(JsonObject) public virtual void SetProperties(JsonObject attributes) Parameters attributes JsonObject SetState(EntityPos) public void SetState(EntityPos pos) Parameters pos EntityPos applyCollision(EntityPos, float) protected virtual void applyCollision(EntityPos pos, float dtFactor) Parameters pos EntityPos dtFactor float"
  },
  "api/Vintagestory.API.Common.EntityChunky.html": {
    "href": "api/Vintagestory.API.Common.EntityChunky.html",
    "title": "Class EntityChunky | VintageStory API",
    "keywords": "Class EntityChunky Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityChunky : Entity Inheritance object RegistryObject Entity EntityChunky Inherited Members Entity.SplashParticleProps Entity.FireParticleProps Entity.FloatingSedimentParticles Entity.AirBubbleParticleProps Entity.bioLumiParticles Entity.bioLumiNoise Entity.OnInitialized Entity.HurtColor Entity.World Entity.Api Entity.IsCreature Entity.Tags Entity.CanStepPitch Entity.CanSwivel Entity.CanSwivelNow Entity.PhysicsUpdateWatcher Entity.AnimManager Entity.ActivityTimers Entity.Pos Entity.ServerPos Entity.PreviousServerPos Entity.PositionBeforeFalling Entity.InChunkIndex3d Entity.CollisionBox Entity.OriginCollisionBox Entity.SelectionBox Entity.OriginSelectionBox Entity.Teleporting Entity.EntityId Entity.SimulationRange Entity.ClimbingOnFace Entity.ClimbingIntoFace Entity.ClimbingOnCollBox Entity.OnGround Entity.FeetInLiquid Entity.IsOnFire Entity.resetLightHsv Entity.InLava Entity.InLavaBeginTotalMs Entity.OnFireBeginTotalMs Entity.Swimming Entity.CollidedVertically Entity.CollidedHorizontally Entity.State Entity.DespawnReason Entity.WatchedAttributes Entity.DebugAttributes Entity.Attributes Entity.IsRendered Entity.IsShadowRendered Entity.Stats Entity.fireDamageAccum Entity.touchDistance Entity.touchDistanceSq Entity.hasRepulseBehavior Entity.customRepulseBehavior Entity.BHRepulseAgents Entity.AfterPhysicsTick Entity.IsTracked Entity.PositionTicked Entity.IsTeleport Entity.trickleDownRayIntersects Entity.requirePosesOnServer Entity.packet Entity.ServerBehaviorsMainThread Entity.ServerBehaviorsThreadsafe Entity.Properties Entity.SidedProperties Entity.Collided Entity.SidedPos Entity.LocalEyePos Entity.MaterialDensity Entity.LightHsv Entity.ShouldDespawn Entity.StoreWithChunk Entity.AllowOutsideLoadedRange Entity.AlwaysActive Entity.Alive Entity.alive Entity.NearestPlayerDistance Entity.AdjustCollisionBoxToAnimation Entity.IdleSoundChanceModifier Entity.RenderColor Entity.LadderFixDelta Entity.ImpactBlockUpdateChance Entity.OnHurt(DamageSource, float) Entity.AfterInitialized(bool) Entity.TriggerOnInitialized() Entity.DoInitialActiveCheck(ICoreAPI) Entity.InRangeOf(Vec3d, float, float) Entity.updateColSelBoxes() Entity.updateOnFire() Entity.TryGiveItemStack(ItemStack) Entity.GetDrops(IWorldAccessor, BlockPos, IPlayer) Entity.TeleportToDouble(double, double, double, Action) Entity.TeleportTo(int, int, int) Entity.TeleportTo(Vec3d) Entity.TeleportTo(BlockPos) Entity.TeleportTo(EntityPos, Action) Entity.ApplyFireDamage(float) Entity.DieInLava() Entity.OnAsyncParticleTick(float, IAsyncParticleManager) Entity.Ignite() Entity.GetTextureSource() Entity.ShapeFresh Entity.FrustumSphereRadius Entity.shapeFresh Entity.MarkShapeModified() Entity.OnTesselation(ref Shape, string) Entity.OnTesselation(ref Shape, string, ref bool) Entity.OnTesselated() Entity.OnFallToGround(double) Entity.OnCollided() Entity.SpawnWaterMovementParticles(float, double, double, double) Entity.OnEntityLoaded() Entity.OnEntitySpawn() Entity.OnExitedLiquid() Entity.OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode) Entity.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer) Entity.OnReceivedClientPacket(IServerPlayer, int, byte[]) Entity.OnReceivedServerPacket(int, byte[]) Entity.OnCollected(Entity) Entity.OnStateChanged(EnumEntityState) Entity.SetCollisionBox(float, float) Entity.SetSelectionBox(float, float) Entity.AddBehavior(EntityBehavior) Entity.RemoveBehavior(EntityBehavior) Entity.CacheServerBehaviors() Entity.HasBehavior(string) Entity.HasBehavior<T>() Entity.GetBehavior(string) Entity.GetBehavior<T>() Entity.GetInterfaces<T>() Entity.GetInterface<T>() Entity.IsActivityRunning(string) Entity.RemainingActivityTime(string) Entity.SetActivityRunning(string, int) Entity.UpdateAnimationDebugAttributes() Entity.FromBytes(BinaryReader, bool, Dictionary<string, string>) Entity.ToBytes(BinaryWriter, bool) Entity.SetHeadPositionToWatchedAttributes() Entity.GetHeadPositionFromWatchedAttributes() Entity.Revive() Entity.PlayEntitySound(string, IPlayer, bool, float) Entity.CanCollect(Entity) Entity.Notify(string, object) Entity.WillExport(BlockPos) Entity.DidImportOrExport(BlockPos) Entity.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Entity.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Entity.GetName() Entity.GetInfoText() Entity.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int) Entity.GetTouchDistance() Entity.MarkTagsDirty() Entity.IsFirstTick() RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityChunky() public EntityChunky() Fields blocks protected IMiniDimension blocks Field Value IMiniDimension subDimensionIndex Used to map chunks from load/save game and server-client packets to this specific entity. The position of saved chunks will include a reference to this index protected int subDimensionIndex Field Value int Properties ApplyGravity If gravity should applied to this entity public override bool ApplyGravity { get; } Property Value bool IsInteractable Whether or not the EntityChunky is interactable. public override bool IsInteractable { get; } Property Value bool SwimmingOffsetY Used for passive physics simulation, together with the MaterialDensity to check how deep in the water the entity should float public override double SwimmingOffsetY { get; } Property Value double Methods AssociateWithDimension(IMiniDimension) public void AssociateWithDimension(IMiniDimension blocks) Parameters blocks IMiniDimension CreateAndLinkWithDimension(ICoreServerAPI, IMiniDimension) public static EntityChunky CreateAndLinkWithDimension(ICoreServerAPI sapi, IMiniDimension dimension) Parameters sapi ICoreServerAPI dimension IMiniDimension Returns EntityChunky Die(EnumDespawnReason, DamageSource) Makes the entity despawn. Entities only drop something on EnumDespawnReason.Death public override void Die(EnumDespawnReason reason = EnumDespawnReason.Death, DamageSource damageSourceForDeath = null) Parameters reason EnumDespawnReason damageSourceForDeath DamageSource FromBytes(BinaryReader, bool) Loads the entity from a stored byte array from the SaveGame public override void FromBytes(BinaryReader reader, bool forClient) Parameters reader BinaryReader forClient bool Initialize(EntityProperties, ICoreAPI, long) Called when this entity got created or loaded public override void Initialize(EntityProperties properties, ICoreAPI api, long chunkindex3d) Parameters properties EntityProperties api ICoreAPI chunkindex3d long OnCollideWithLiquid() Called when the entity got in touch with a liquid public override void OnCollideWithLiquid() OnEntityDespawn(EntityDespawnData) Called when the entity despawns public override void OnEntityDespawn(EntityDespawnData despawn) Parameters despawn EntityDespawnData OnGameTick(float) Called every 1/75 second public override void OnGameTick(float dt) Parameters dt float OnReceivedServerAnimations(int[], int, float[]) public override void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] activeAnimationsCount int activeAnimationSpeeds float[] OnReceivedServerPos(bool) Called by client when a new server pos arrived public override void OnReceivedServerPos(bool isTeleport) Parameters isTeleport bool ReceiveDamage(DamageSource, float) Called when the entity should be receiving damage from given source public override bool ReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool True if the entity actually received damage ShouldReceiveDamage(DamageSource, float) Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage. public override bool ShouldReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool StartAnimation(string) Starts the animation for the entity. public override void StartAnimation(string code) Parameters code string StopAnimation(string) stops the animation for the entity. public override void StopAnimation(string code) Parameters code string UpdateDebugAttributes() Updates the DebugAttributes tree public override void UpdateDebugAttributes()"
  },
  "api/Vintagestory.API.Common.EntityControls.html": {
    "href": "api/Vintagestory.API.Common.EntityControls.html",
    "title": "Class EntityControls | VintageStory API",
    "keywords": "Class EntityControls Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The available controls to move around a character in a game world Open in GitHub public class EntityControls Inheritance object EntityControls Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DetachedMode If true, the entity is either flying, gliding or swimming. public bool DetachedMode Field Value bool Dirty Whether or not this entity is dirty. public bool Dirty Field Value bool FlyPlaneLock the axis lock for the fly plane. public EnumFreeMovAxisLock FlyPlaneLock Field Value EnumFreeMovAxisLock FlyVector Current flying direction public Vec3d FlyVector Field Value Vec3d GlideSpeed public double GlideSpeed Field Value double HandUse If the player is currently using the currently held item in a special way (e.g. attacking with smithing hammer or eating an edible item) public EnumHandInteract HandUse Field Value EnumHandInteract HandUsingBlockSel The block pos the player started using public BlockSelection HandUsingBlockSel Field Value BlockSelection IsAiming Whether or not the entity is aiming public bool IsAiming Field Value bool IsClimbing Whether or not the entity is climbing public bool IsClimbing Field Value bool IsFlying Whether or not the entity is flying. public bool IsFlying Field Value bool IsStepping Whether or not the entity is currently stepping up a block public bool IsStepping Field Value bool LeftUsingHeldItemTransformBefore public ModelTransform LeftUsingHeldItemTransformBefore Field Value ModelTransform MovespeedMultiplier The movement speed multiplier. public float MovespeedMultiplier Field Value float NoClip If true, the entity has NoClip active. public bool NoClip Field Value bool OnAction To execute a call handler registered by the engine. Don't use this one, use api.Input.InWorldAction instead. public OnEntityAction OnAction Field Value OnEntityAction UsingBeginMS public long UsingBeginMS Field Value long UsingCount public int UsingCount Field Value int UsingHeldItemTransformAfter [Obsolete(\"Setting this value has no effect anymore. Add an animation to the seraph instead\")] public ModelTransform UsingHeldItemTransformAfter Field Value ModelTransform UsingHeldItemTransformBefore [Obsolete(\"Setting this value has no effect anymore. Add an animation to the seraph instead\")] public ModelTransform UsingHeldItemTransformBefore Field Value ModelTransform WalkVector Current walking direction. public Vec3d WalkVector Field Value Vec3d Properties Backward A check for if the entity is moving the opposite direction it's facing. public virtual bool Backward { get; set; } Property Value bool CtrlKey A check to see if the entity is holding down the Ctrl key (which may be the same as the Sprint key or one or other may have been remapped). Should normally be used in conjunction with a mouse button, including OnHeldInteractStart() methods etc public virtual bool CtrlKey { get; set; } Property Value bool Down A check to see whether the entity is moving down. public virtual bool Down { get; set; } Property Value bool Flags public bool[] Flags { get; } Property Value bool[] FloorSitting A check to see whether the entity is sitting on the floor. public virtual bool FloorSitting { get; set; } Property Value bool Forward A check for if the entity is moving in the direction it's facing. public virtual bool Forward { get; set; } Property Value bool Gliding A check to see whether the entity is gliding public virtual bool Gliding { get; set; } Property Value bool this[EnumEntityAction] public virtual bool this[EnumEntityAction action] { get; set; } Parameters action EnumEntityAction Property Value bool Jump A check whether to see if the entity is jumping. public virtual bool Jump { get; set; } Property Value bool Left A check to see if the entity is moving left the direction it's facing. public virtual bool Left { get; set; } Property Value bool LeftMouseDown A check to see if the entity is holding the in-world rleft mouse button down. public virtual bool LeftMouseDown { get; set; } Property Value bool Right A check to see if the entity is moving right the direction it's facing. public virtual bool Right { get; set; } Property Value bool RightMouseDown A check to see if the entity is holding the in-world right mouse button down. public virtual bool RightMouseDown { get; set; } Property Value bool ShiftKey A check to see if the entity is holding down the Shift key (which may be the same as the Sneak key or one or other may have been remapped). Should normally be used in conjunction with a mouse button, including OnHeldInteractStart() methods etc public virtual bool ShiftKey { get; set; } Property Value bool Sneak A check whether to see if the entity is sneaking. Use Controls.ShiftKey instead for mouse interaction modifiers, as it is a separable control. A test for Sneak should be used only when we want to know whether the entity is crouching or using Sneak motion, which affects things like whether it is detectable by other entities, seen on the map, or how the shield is used public virtual bool Sneak { get; set; } Property Value bool Sprint A check to see whether the entity is sprinting. Use Controls.CtrlKey instead for mouse interaction modifiers, as it is a separable control. A test for Sprint should be used only when we want to know whether the entity is sprinting. public virtual bool Sprint { get; set; } Property Value bool TriesToMove Checks to see if the entity is attempting to move in any direction (excluding jumping) public bool TriesToMove { get; } Property Value bool Up A check to see whether the entity is moving up. public virtual bool Up { get; set; } Property Value bool Methods AttemptToggleAction(EnumEntityAction, bool) protected virtual void AttemptToggleAction(EnumEntityAction action, bool on) Parameters action EnumEntityAction on bool CalcMovementVectors(EntityPos, float) Calculates the movement vectors for the player. public virtual void CalcMovementVectors(EntityPos pos, float dt) Parameters pos EntityPos The position of the player. dt float The change in time. FromBytes(BinaryReader, bool) public virtual void FromBytes(BinaryReader reader, bool ignoreData) Parameters reader BinaryReader ignoreData bool FromInt(int) Converts the int flags to movement controls. public virtual void FromInt(int flagsInt) Parameters flagsInt int The compressed integer. SetFrom(EntityControls) Copies the controls from the provided controls to this set of controls. public virtual void SetFrom(EntityControls controls) Parameters controls EntityControls The controls to copy over. StopAllMovement() Forces the entity to stop all movements, resets all flags to false public virtual void StopAllMovement() ToBytes(BinaryWriter) public virtual void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToInt() Converts the values to a single int flag. public virtual int ToInt() Returns int the compressed integer. UpdateFromPacket(bool, int) Updates the data from the packet. public virtual void UpdateFromPacket(bool pressed, int action) Parameters pressed bool Whether or not the key was pressed. action int the id of the key that was pressed."
  },
  "api/Vintagestory.API.Common.EntityCubeParticles.html": {
    "href": "api/Vintagestory.API.Common.EntityCubeParticles.html",
    "title": "Class EntityCubeParticles | VintageStory API",
    "keywords": "Class EntityCubeParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityCubeParticles : CollectibleParticleProperties, IParticlePropertiesProvider Inheritance object CollectibleParticleProperties EntityCubeParticles Implements IParticlePropertiesProvider Inherited Members CollectibleParticleProperties.rand CollectibleParticleProperties.Async CollectibleParticleProperties.Bounciness CollectibleParticleProperties.DieOnRainHeightmap CollectibleParticleProperties.RandomVelocityChange CollectibleParticleProperties.SwimOnLiquid CollectibleParticleProperties.DieInAir CollectibleParticleProperties.LightEmission CollectibleParticleProperties.api CollectibleParticleProperties.SelfPropelled CollectibleParticleProperties.TerrainCollision CollectibleParticleProperties.GravityEffect CollectibleParticleProperties.UseLighting() CollectibleParticleProperties.RandomBlockPos(IBlockAccessor, BlockPos, Block, BlockFacing) CollectibleParticleProperties.OpacityEvolve CollectibleParticleProperties.RedEvolve CollectibleParticleProperties.GreenEvolve CollectibleParticleProperties.BlueEvolve CollectibleParticleProperties.SizeEvolve CollectibleParticleProperties.ColorByBlock() CollectibleParticleProperties.BeginParticle() CollectibleParticleProperties.VelocityEvolve CollectibleParticleProperties.DeathParticles CollectibleParticleProperties.SecondarySpawnInterval CollectibleParticleProperties.PrepareForSecondarySpawn(ParticleBase) CollectibleParticleProperties.ParentVelocity CollectibleParticleProperties.ParentVelocityWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityCubeParticles() public EntityCubeParticles() EntityCubeParticles(IWorldAccessor, long, Vec3d, float, int, float, float) public EntityCubeParticles(IWorldAccessor world, long entityId, Vec3d particlePos, float radius, int quantity, float minScale, float maxScale) Parameters world IWorldAccessor entityId long particlePos Vec3d radius float quantity int minScale float maxScale float Fields maxScale public float maxScale Field Value float minScale public float minScale Field Value float particlePos public Vec3d particlePos Field Value Vec3d quantity public int quantity Field Value int radius public float radius Field Value float Properties DieInLiquid Whether the particle should despawn when in contact with liquids public override bool DieInLiquid { get; } Property Value bool LifeLength How long the particle should live (default = 1) public override float LifeLength { get; } Property Value float ParticleModel Cube or Quad? public override EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public override Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public override float Quantity { get; } Property Value float SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. public override IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] Size Size of the particle public override float Size { get; } Property Value float VertexFlags See also VertexFlags public override int VertexFlags { get; } Property Value int Methods FromBytes(BinaryReader, IWorldAccessor) For reading from the network public override void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public override int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation public override void Init(ICoreAPI api) Parameters api ICoreAPI ToBytes(BinaryWriter) For sending over the network public override void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.EntityDeathDelegate.html": {
    "href": "api/Vintagestory.API.Common.EntityDeathDelegate.html",
    "title": "Delegate EntityDeathDelegate | VintageStory API",
    "keywords": "Delegate EntityDeathDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void EntityDeathDelegate(Entity entity, DamageSource damageSource) Parameters entity Entity damageSource DamageSource Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.EntityDelegate.html": {
    "href": "api/Vintagestory.API.Common.EntityDelegate.html",
    "title": "Delegate EntityDelegate | VintageStory API",
    "keywords": "Delegate EntityDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void EntityDelegate(Entity entity) Parameters entity Entity Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.EntityDespawnDelegate.html": {
    "href": "api/Vintagestory.API.Common.EntityDespawnDelegate.html",
    "title": "Delegate EntityDespawnDelegate | VintageStory API",
    "keywords": "Delegate EntityDespawnDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void EntityDespawnDelegate(Entity entity, EntityDespawnData reasonData) Parameters entity Entity reasonData EntityDespawnData Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.EntityFloatStats.html": {
    "href": "api/Vintagestory.API.Common.EntityFloatStats.html",
    "title": "Class EntityFloatStats | VintageStory API",
    "keywords": "Class EntityFloatStats Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityFloatStats Inheritance object EntityFloatStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityFloatStats() public EntityFloatStats() Fields BlendType public EnumStatBlendType BlendType Field Value EnumStatBlendType ValuesByKey public OrderedDictionary<string, EntityStat<float>> ValuesByKey Field Value OrderedDictionary<string, EntityStat<float>> Methods FromTreeAttributes(ITreeAttribute) public void FromTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute GetBlended() public float GetBlended() Returns float Remove(string) public void Remove(string code) Parameters code string Set(string, float, bool) public void Set(string code, float value, bool persistent = false) Parameters code string value float persistent bool ToTreeAttributes(ITreeAttribute, bool) public void ToTreeAttributes(ITreeAttribute tree, bool forClient) Parameters tree ITreeAttribute forClient bool"
  },
  "api/Vintagestory.API.Common.EntityHeadController.html": {
    "href": "api/Vintagestory.API.Common.EntityHeadController.html",
    "title": "Class EntityHeadController | VintageStory API",
    "keywords": "Class EntityHeadController Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityHeadController Inheritance object EntityHeadController Derived PlayerHeadController Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityHeadController(IAnimationManager, EntityAgent, Shape) public EntityHeadController(IAnimationManager animator, EntityAgent entity, Shape entityShape) Parameters animator IAnimationManager entity EntityAgent entityShape Shape Fields HeadPose public ElementPose HeadPose Field Value ElementPose LowerTorsoPose public ElementPose LowerTorsoPose Field Value ElementPose NeckPose public ElementPose NeckPose Field Value ElementPose UpperFootLPose public ElementPose UpperFootLPose Field Value ElementPose UpperFootRPose public ElementPose UpperFootRPose Field Value ElementPose UpperTorsoPose public ElementPose UpperTorsoPose Field Value ElementPose animManager protected IAnimationManager animManager Field Value IAnimationManager entity protected EntityAgent entity Field Value EntityAgent pitchOffset public float pitchOffset Field Value float yawOffset public float yawOffset Field Value float Methods OnFrame(float) The event fired when the game ticks. public virtual void OnFrame(float dt) Parameters dt float"
  },
  "api/Vintagestory.API.Common.EntityHumanoid.html": {
    "href": "api/Vintagestory.API.Common.EntityHumanoid.html",
    "title": "Class EntityHumanoid | VintageStory API",
    "keywords": "Class EntityHumanoid Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityHumanoid : EntityAgent Inheritance object RegistryObject Entity EntityAgent EntityHumanoid Derived EntityPlayer Inherited Members EntityAgent.IsCreature EntityAgent.CanSwivel EntityAgent.CanStepPitch EntityAgent.BodyYaw EntityAgent.BodyYawServer EntityAgent.sidewaysSwivelAngle EntityAgent.DeadNotify EntityAgent.HerdId EntityAgent.herdId EntityAgent.controls EntityAgent.servercontrols EntityAgent.alwaysRunIdle EntityAgent.MountedOn EntityAgent.CurrentControls EntityAgent.LeftHandItemSlot EntityAgent.RightHandItemSlot EntityAgent.ActiveHandItemSlot EntityAgent.ShouldDespawn EntityAgent.AllowDespawn EntityAgent.Initialize(EntityProperties, ICoreAPI, long) EntityAgent.Controls EntityAgent.ServerControls EntityAgent.IsEyesSubmerged() EntityAgent.TryMount(IMountableSeat) EntityAgent.updateMountedState() EntityAgent.doMount(IMountableSeat) EntityAgent.TryUnmount() EntityAgent.Die(EnumDespawnReason, DamageSource) EntityAgent.OnEntityDespawn(EntityDespawnData) EntityAgent.OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode) EntityAgent.ignoreTeleportCall EntityAgent.TeleportToDouble(double, double, double, Action) EntityAgent.DidAttack(DamageSource, EntityAgent) EntityAgent.ShouldReceiveDamage(DamageSource, float) EntityAgent.ReceiveDamage(DamageSource, float) EntityAgent.ReceiveSaturation(float, EnumFoodCategory, float, float) EntityAgent.ShouldReceiveSaturation(float, EnumFoodCategory, float, float) EntityAgent.OnGameTick(float) EntityAgent.SpawnSnowStepParticles() EntityAgent.SpawnFloatingSediment(IAsyncParticleManager) EntityAgent.onAnimControls(AnimationMetaData, bool, bool) EntityAgent.HandleHandAnimations(float) EntityAgent.insideBlock EntityAgent.insidePos EntityAgent.GetWalkSpeedMultiplier(double) EntityAgent.ToBytes(BinaryWriter, bool) EntityAgent.FromBytes(BinaryReader, bool) EntityAgent.SetHeadPositionToWatchedAttributes() EntityAgent.GetHeadPositionFromWatchedAttributes() EntityAgent.TryStopHandAction(bool, EnumItemUseCancelReason) EntityAgent.WalkInventory(OnInventorySlot) EntityAgent.UpdateDebugAttributes() EntityAgent.TryGiveItemStack(ItemStack) EntityAgent.ToleratesDamageFrom(Entity) EntityAgent.GetInfoText() Entity.SplashParticleProps Entity.FireParticleProps Entity.FloatingSedimentParticles Entity.AirBubbleParticleProps Entity.bioLumiParticles Entity.bioLumiNoise Entity.OnInitialized Entity.HurtColor Entity.World Entity.Api Entity.Tags Entity.CanSwivelNow Entity.PhysicsUpdateWatcher Entity.AnimManager Entity.ActivityTimers Entity.Pos Entity.ServerPos Entity.PreviousServerPos Entity.PositionBeforeFalling Entity.InChunkIndex3d Entity.CollisionBox Entity.OriginCollisionBox Entity.SelectionBox Entity.OriginSelectionBox Entity.Teleporting Entity.EntityId Entity.SimulationRange Entity.ClimbingOnFace Entity.ClimbingIntoFace Entity.ClimbingOnCollBox Entity.OnGround Entity.FeetInLiquid Entity.IsOnFire Entity.resetLightHsv Entity.InLava Entity.InLavaBeginTotalMs Entity.OnFireBeginTotalMs Entity.Swimming Entity.CollidedVertically Entity.CollidedHorizontally Entity.State Entity.DespawnReason Entity.WatchedAttributes Entity.DebugAttributes Entity.Attributes Entity.IsRendered Entity.IsShadowRendered Entity.Stats Entity.fireDamageAccum Entity.touchDistance Entity.touchDistanceSq Entity.hasRepulseBehavior Entity.customRepulseBehavior Entity.BHRepulseAgents Entity.AfterPhysicsTick Entity.IsTracked Entity.PositionTicked Entity.IsTeleport Entity.trickleDownRayIntersects Entity.requirePosesOnServer Entity.packet Entity.ServerBehaviorsMainThread Entity.ServerBehaviorsThreadsafe Entity.Properties Entity.SidedProperties Entity.IsInteractable Entity.SwimmingOffsetY Entity.Collided Entity.SidedPos Entity.LocalEyePos Entity.ApplyGravity Entity.MaterialDensity Entity.LightHsv Entity.StoreWithChunk Entity.AllowOutsideLoadedRange Entity.AlwaysActive Entity.Alive Entity.alive Entity.NearestPlayerDistance Entity.AdjustCollisionBoxToAnimation Entity.IdleSoundChanceModifier Entity.RenderColor Entity.LadderFixDelta Entity.ImpactBlockUpdateChance Entity.OnHurt(DamageSource, float) Entity.AfterInitialized(bool) Entity.TriggerOnInitialized() Entity.DoInitialActiveCheck(ICoreAPI) Entity.InRangeOf(Vec3d, float, float) Entity.updateColSelBoxes() Entity.updateOnFire() Entity.GetDrops(IWorldAccessor, BlockPos, IPlayer) Entity.TeleportTo(int, int, int) Entity.TeleportTo(Vec3d) Entity.TeleportTo(BlockPos) Entity.TeleportTo(EntityPos, Action) Entity.ApplyFireDamage(float) Entity.DieInLava() Entity.OnAsyncParticleTick(float, IAsyncParticleManager) Entity.Ignite() Entity.GetTextureSource() Entity.ShapeFresh Entity.FrustumSphereRadius Entity.shapeFresh Entity.MarkShapeModified() Entity.OnTesselation(ref Shape, string) Entity.OnTesselation(ref Shape, string, ref bool) Entity.OnTesselated() Entity.OnFallToGround(double) Entity.OnCollided() Entity.OnCollideWithLiquid() Entity.SpawnWaterMovementParticles(float, double, double, double) Entity.OnEntityLoaded() Entity.OnEntitySpawn() Entity.OnExitedLiquid() Entity.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer) Entity.OnReceivedServerPos(bool) Entity.OnReceivedClientPacket(IServerPlayer, int, byte[]) Entity.OnReceivedServerPacket(int, byte[]) Entity.OnReceivedServerAnimations(int[], int, float[]) Entity.OnCollected(Entity) Entity.OnStateChanged(EnumEntityState) Entity.SetCollisionBox(float, float) Entity.SetSelectionBox(float, float) Entity.AddBehavior(EntityBehavior) Entity.RemoveBehavior(EntityBehavior) Entity.CacheServerBehaviors() Entity.HasBehavior(string) Entity.HasBehavior<T>() Entity.GetBehavior(string) Entity.GetBehavior<T>() Entity.GetInterfaces<T>() Entity.GetInterface<T>() Entity.IsActivityRunning(string) Entity.RemainingActivityTime(string) Entity.SetActivityRunning(string, int) Entity.UpdateAnimationDebugAttributes() Entity.FromBytes(BinaryReader, bool, Dictionary<string, string>) Entity.Revive() Entity.PlayEntitySound(string, IPlayer, bool, float) Entity.CanCollect(Entity) Entity.Notify(string, object) Entity.WillExport(BlockPos) Entity.DidImportOrExport(BlockPos) Entity.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Entity.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Entity.GetName() Entity.StartAnimation(string) Entity.StopAnimation(string) Entity.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int) Entity.GetTouchDistance() Entity.MarkTagsDirty() Entity.IsFirstTick() RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.EntityItem.html": {
    "href": "api/Vintagestory.API.Common.EntityItem.html",
    "title": "Class EntityItem | VintageStory API",
    "keywords": "Class EntityItem Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityItem : Entity Inheritance object RegistryObject Entity EntityItem Inherited Members Entity.SplashParticleProps Entity.FireParticleProps Entity.FloatingSedimentParticles Entity.AirBubbleParticleProps Entity.bioLumiParticles Entity.bioLumiNoise Entity.OnInitialized Entity.HurtColor Entity.World Entity.Api Entity.IsCreature Entity.Tags Entity.CanStepPitch Entity.CanSwivel Entity.CanSwivelNow Entity.PhysicsUpdateWatcher Entity.AnimManager Entity.ActivityTimers Entity.Pos Entity.ServerPos Entity.PreviousServerPos Entity.PositionBeforeFalling Entity.InChunkIndex3d Entity.CollisionBox Entity.OriginCollisionBox Entity.SelectionBox Entity.OriginSelectionBox Entity.Teleporting Entity.EntityId Entity.SimulationRange Entity.ClimbingOnFace Entity.ClimbingIntoFace Entity.ClimbingOnCollBox Entity.OnGround Entity.FeetInLiquid Entity.IsOnFire Entity.resetLightHsv Entity.InLava Entity.InLavaBeginTotalMs Entity.OnFireBeginTotalMs Entity.Swimming Entity.CollidedVertically Entity.CollidedHorizontally Entity.State Entity.DespawnReason Entity.WatchedAttributes Entity.DebugAttributes Entity.Attributes Entity.IsRendered Entity.IsShadowRendered Entity.Stats Entity.fireDamageAccum Entity.touchDistance Entity.touchDistanceSq Entity.hasRepulseBehavior Entity.customRepulseBehavior Entity.BHRepulseAgents Entity.AfterPhysicsTick Entity.IsTracked Entity.PositionTicked Entity.IsTeleport Entity.trickleDownRayIntersects Entity.requirePosesOnServer Entity.packet Entity.ServerBehaviorsMainThread Entity.ServerBehaviorsThreadsafe Entity.Properties Entity.SidedProperties Entity.Collided Entity.SidedPos Entity.LocalEyePos Entity.ApplyGravity Entity.ShouldDespawn Entity.StoreWithChunk Entity.AllowOutsideLoadedRange Entity.AlwaysActive Entity.Alive Entity.alive Entity.NearestPlayerDistance Entity.AdjustCollisionBoxToAnimation Entity.IdleSoundChanceModifier Entity.RenderColor Entity.LadderFixDelta Entity.ImpactBlockUpdateChance Entity.OnHurt(DamageSource, float) Entity.AfterInitialized(bool) Entity.TriggerOnInitialized() Entity.DoInitialActiveCheck(ICoreAPI) Entity.InRangeOf(Vec3d, float, float) Entity.updateColSelBoxes() Entity.updateOnFire() Entity.TryGiveItemStack(ItemStack) Entity.GetDrops(IWorldAccessor, BlockPos, IPlayer) Entity.TeleportToDouble(double, double, double, Action) Entity.TeleportTo(int, int, int) Entity.TeleportTo(Vec3d) Entity.TeleportTo(BlockPos) Entity.TeleportTo(EntityPos, Action) Entity.ApplyFireDamage(float) Entity.DieInLava() Entity.OnAsyncParticleTick(float, IAsyncParticleManager) Entity.GetTextureSource() Entity.ShapeFresh Entity.FrustumSphereRadius Entity.shapeFresh Entity.MarkShapeModified() Entity.OnTesselation(ref Shape, string) Entity.OnTesselation(ref Shape, string, ref bool) Entity.OnTesselated() Entity.OnFallToGround(double) Entity.OnCollided() Entity.OnCollideWithLiquid() Entity.SpawnWaterMovementParticles(float, double, double, double) Entity.OnEntityLoaded() Entity.OnEntitySpawn() Entity.OnExitedLiquid() Entity.OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode) Entity.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer) Entity.OnReceivedServerPos(bool) Entity.OnReceivedClientPacket(IServerPlayer, int, byte[]) Entity.OnReceivedServerPacket(int, byte[]) Entity.OnStateChanged(EnumEntityState) Entity.SetCollisionBox(float, float) Entity.SetSelectionBox(float, float) Entity.AddBehavior(EntityBehavior) Entity.RemoveBehavior(EntityBehavior) Entity.CacheServerBehaviors() Entity.HasBehavior(string) Entity.HasBehavior<T>() Entity.GetBehavior(string) Entity.GetBehavior<T>() Entity.GetInterfaces<T>() Entity.GetInterface<T>() Entity.IsActivityRunning(string) Entity.RemainingActivityTime(string) Entity.SetActivityRunning(string, int) Entity.UpdateAnimationDebugAttributes() Entity.FromBytes(BinaryReader, bool, Dictionary<string, string>) Entity.ToBytes(BinaryWriter, bool) Entity.SetHeadPositionToWatchedAttributes() Entity.GetHeadPositionFromWatchedAttributes() Entity.Revive() Entity.PlayEntitySound(string, IPlayer, bool, float) Entity.Notify(string, object) Entity.WillExport(BlockPos) Entity.DidImportOrExport(BlockPos) Entity.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Entity.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Entity.GetName() Entity.GetInfoText() Entity.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int) Entity.GetTouchDistance() Entity.MarkTagsDirty() Entity.IsFirstTick() RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityItem() public EntityItem() Fields Slot public EntityItemSlot Slot Field Value EntityItemSlot itemSpawnedMilliseconds public long itemSpawnedMilliseconds Field Value long Properties ByPlayerUid The UID of the player that dropped this itemstack. public string ByPlayerUid { get; set; } Property Value string IsInteractable Whether or not the EntityItem is interactable. public override bool IsInteractable { get; } Property Value bool Itemstack The itemstack attached to this Item Entity. public ItemStack Itemstack { get; set; } Property Value ItemStack LightHsv Get the HSV colors for the lighting. public override byte[] LightHsv { get; } Property Value byte[] MaterialDensity Returns the material density of the item. public override float MaterialDensity { get; } Property Value float SwimmingOffsetY Used for passive physics simulation, together with the MaterialDensity to check how deep in the water the entity should float public override double SwimmingOffsetY { get; } Property Value double Methods CanCollect(Entity) Should return true if this item can be picked up as an itemstack public override bool CanCollect(Entity byEntity) Parameters byEntity Entity Returns bool Die(EnumDespawnReason, DamageSource) Makes the entity despawn. Entities only drop something on EnumDespawnReason.Death public override void Die(EnumDespawnReason reason = EnumDespawnReason.Death, DamageSource damageSourceForDeath = null) Parameters reason EnumDespawnReason damageSourceForDeath DamageSource FromBytes(BinaryReader, bool) Loads the entity from a stored byte array from the SaveGame public override void FromBytes(BinaryReader reader, bool forClient) Parameters reader BinaryReader forClient bool FromItemstack(ItemStack, Vec3d, Vec3d, IWorldAccessor) Builds and spawns an EntityItem from a provided ItemStack. public static EntityItem FromItemstack(ItemStack itemstack, Vec3d position, Vec3d velocity, IWorldAccessor world) Parameters itemstack ItemStack The contents of the EntityItem position Vec3d The position of the EntityItem velocity Vec3d The velocity of the EntityItem world IWorldAccessor The world the EntityItems preside in. Returns EntityItem A freshly baked EntityItem to introduce to the world. Ignite() public override void Ignite() Initialize(EntityProperties, ICoreAPI, long) Called when this entity got created or loaded public override void Initialize(EntityProperties properties, ICoreAPI api, long chunkindex3d) Parameters properties EntityProperties api ICoreAPI chunkindex3d long OnCollected(Entity) Called by BehaviorCollectEntities of nearby entities. Should return the itemstack that should be collected. If the item stack was fully picked up, BehaviorCollectEntities will kill this entity public override ItemStack OnCollected(Entity byEntity) Parameters byEntity Entity Returns ItemStack OnEntityDespawn(EntityDespawnData) Called when the entity despawns public override void OnEntityDespawn(EntityDespawnData despawn) Parameters despawn EntityDespawnData OnGameTick(float) Called every 1/75 second public override void OnGameTick(float dt) Parameters dt float OnReceivedServerAnimations(int[], int, float[]) public override void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] activeAnimationsCount int activeAnimationSpeeds float[] ReceiveDamage(DamageSource, float) Called when the entity should be receiving damage from given source public override bool ReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool True if the entity actually received damage ShouldReceiveDamage(DamageSource, float) Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage. public override bool ShouldReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool StartAnimation(string) Starts the animation for the entity. public override void StartAnimation(string code) Parameters code string StopAnimation(string) stops the animation for the entity. public override void StopAnimation(string code) Parameters code string UpdateDebugAttributes() Updates the DebugAttributes tree public override void UpdateDebugAttributes()"
  },
  "api/Vintagestory.API.Common.EntityItemSlot.html": {
    "href": "api/Vintagestory.API.Common.EntityItemSlot.html",
    "title": "Class EntityItemSlot | VintageStory API",
    "keywords": "Class EntityItemSlot Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityItemSlot : DummySlot Inheritance object ItemSlot DummySlot EntityItemSlot Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.StorageType ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityItemSlot(EntityItem) public EntityItemSlot(EntityItem ei) Parameters ei EntityItem Fields Ei public EntityItem Ei Field Value EntityItem"
  },
  "api/Vintagestory.API.Common.EntityMountDelegate.html": {
    "href": "api/Vintagestory.API.Common.EntityMountDelegate.html",
    "title": "Delegate EntityMountDelegate | VintageStory API",
    "keywords": "Delegate EntityMountDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void EntityMountDelegate(EntityAgent mountingEntity, IMountableSeat mountedSeat) Parameters mountingEntity EntityAgent mountedSeat IMountableSeat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.EntityPlayer.html": {
    "href": "api/Vintagestory.API.Common.EntityPlayer.html",
    "title": "Class EntityPlayer | VintageStory API",
    "keywords": "Class EntityPlayer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityPlayer : EntityHumanoid, IPettable Inheritance object RegistryObject Entity EntityAgent EntityHumanoid EntityPlayer Implements IPettable Inherited Members EntityAgent.IsCreature EntityAgent.CanSwivel EntityAgent.CanStepPitch EntityAgent.BodyYawServer EntityAgent.sidewaysSwivelAngle EntityAgent.DeadNotify EntityAgent.HerdId EntityAgent.herdId EntityAgent.controls EntityAgent.servercontrols EntityAgent.alwaysRunIdle EntityAgent.MountedOn EntityAgent.CurrentControls EntityAgent.ActiveHandItemSlot EntityAgent.AllowDespawn EntityAgent.Controls EntityAgent.ServerControls EntityAgent.IsEyesSubmerged() EntityAgent.updateMountedState() EntityAgent.doMount(IMountableSeat) EntityAgent.TryUnmount() EntityAgent.OnEntityDespawn(EntityDespawnData) EntityAgent.OnInteract(EntityAgent, ItemSlot, Vec3d, EnumInteractMode) EntityAgent.ignoreTeleportCall EntityAgent.DidAttack(DamageSource, EntityAgent) EntityAgent.ReceiveDamage(DamageSource, float) EntityAgent.ReceiveSaturation(float, EnumFoodCategory, float, float) EntityAgent.ShouldReceiveSaturation(float, EnumFoodCategory, float, float) EntityAgent.SpawnSnowStepParticles() EntityAgent.SpawnFloatingSediment(IAsyncParticleManager) EntityAgent.HandleHandAnimations(float) EntityAgent.insideBlock EntityAgent.insidePos EntityAgent.ToBytes(BinaryWriter, bool) EntityAgent.SetHeadPositionToWatchedAttributes() EntityAgent.GetHeadPositionFromWatchedAttributes() EntityAgent.ToleratesDamageFrom(Entity) Entity.SplashParticleProps Entity.FireParticleProps Entity.FloatingSedimentParticles Entity.AirBubbleParticleProps Entity.bioLumiParticles Entity.bioLumiNoise Entity.OnInitialized Entity.HurtColor Entity.World Entity.Api Entity.Tags Entity.CanSwivelNow Entity.PhysicsUpdateWatcher Entity.ActivityTimers Entity.Pos Entity.ServerPos Entity.PreviousServerPos Entity.PositionBeforeFalling Entity.InChunkIndex3d Entity.CollisionBox Entity.OriginCollisionBox Entity.SelectionBox Entity.OriginSelectionBox Entity.Teleporting Entity.EntityId Entity.SimulationRange Entity.ClimbingOnFace Entity.ClimbingIntoFace Entity.ClimbingOnCollBox Entity.OnGround Entity.FeetInLiquid Entity.IsOnFire Entity.resetLightHsv Entity.InLava Entity.InLavaBeginTotalMs Entity.OnFireBeginTotalMs Entity.Swimming Entity.CollidedVertically Entity.CollidedHorizontally Entity.State Entity.DespawnReason Entity.WatchedAttributes Entity.DebugAttributes Entity.Attributes Entity.IsRendered Entity.IsShadowRendered Entity.Stats Entity.fireDamageAccum Entity.touchDistance Entity.touchDistanceSq Entity.hasRepulseBehavior Entity.customRepulseBehavior Entity.BHRepulseAgents Entity.AfterPhysicsTick Entity.IsTracked Entity.PositionTicked Entity.IsTeleport Entity.trickleDownRayIntersects Entity.requirePosesOnServer Entity.packet Entity.ServerBehaviorsMainThread Entity.ServerBehaviorsThreadsafe Entity.Properties Entity.SidedProperties Entity.SwimmingOffsetY Entity.Collided Entity.SidedPos Entity.LocalEyePos Entity.ApplyGravity Entity.MaterialDensity Entity.AllowOutsideLoadedRange Entity.Alive Entity.alive Entity.NearestPlayerDistance Entity.AdjustCollisionBoxToAnimation Entity.IdleSoundChanceModifier Entity.RenderColor Entity.ImpactBlockUpdateChance Entity.AfterInitialized(bool) Entity.TriggerOnInitialized() Entity.DoInitialActiveCheck(ICoreAPI) Entity.InRangeOf(Vec3d, float, float) Entity.updateColSelBoxes() Entity.updateOnFire() Entity.GetDrops(IWorldAccessor, BlockPos, IPlayer) Entity.TeleportTo(int, int, int) Entity.TeleportTo(Vec3d) Entity.TeleportTo(BlockPos) Entity.TeleportTo(EntityPos, Action) Entity.ApplyFireDamage(float) Entity.DieInLava() Entity.GetTextureSource() Entity.ShapeFresh Entity.FrustumSphereRadius Entity.shapeFresh Entity.MarkShapeModified() Entity.OnTesselation(ref Shape, string, ref bool) Entity.OnCollided() Entity.SpawnWaterMovementParticles(float, double, double, double) Entity.OnEntityLoaded() Entity.OnEntitySpawn() Entity.OnExitedLiquid() Entity.GetInteractionHelp(IClientWorldAccessor, EntitySelection, IClientPlayer) Entity.OnReceivedServerPos(bool) Entity.OnReceivedServerAnimations(int[], int, float[]) Entity.OnCollected(Entity) Entity.OnStateChanged(EnumEntityState) Entity.SetCollisionBox(float, float) Entity.SetSelectionBox(float, float) Entity.AddBehavior(EntityBehavior) Entity.RemoveBehavior(EntityBehavior) Entity.CacheServerBehaviors() Entity.HasBehavior(string) Entity.HasBehavior<T>() Entity.GetBehavior(string) Entity.GetBehavior<T>() Entity.GetInterfaces<T>() Entity.GetInterface<T>() Entity.IsActivityRunning(string) Entity.RemainingActivityTime(string) Entity.SetActivityRunning(string, int) Entity.UpdateAnimationDebugAttributes() Entity.FromBytes(BinaryReader, bool, Dictionary<string, string>) Entity.CanCollect(Entity) Entity.Notify(string, object) Entity.WillExport(BlockPos) Entity.DidImportOrExport(BlockPos) Entity.OnStoreCollectibleMappings(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) Entity.OnLoadCollectibleMappings(IWorldAccessor, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, int, bool) Entity.GetName() Entity.StartAnimation(string) Entity.StopAnimation(string) Entity.IntersectsRay(Ray, AABBIntersectionTest, out double, ref int) Entity.GetTouchDistance() Entity.MarkTagsDirty() Entity.IsFirstTick() RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityPlayer() public EntityPlayer() Fields BlockSelection The block or blocks currently selected by the player public BlockSelection BlockSelection Field Value BlockSelection BodyYawLimits public AngleConstraint BodyYawLimits Field Value AngleConstraint CameraPos The camera position of the player's view. Set only by the game client. public Vec3d CameraPos Field Value Vec3d CameraPosOffset An offset which can be applied to the camera position to achieve certain special effects or special features, for example Timeswitch feature. Set only by the game client. public Vec3d CameraPosOffset Field Value Vec3d DeathReason The reason the player died (if the player did die). Set only by the game server. public DamageSource DeathReason Field Value DamageSource EntitySelection The entity or entities selected by the player public EntitySelection EntitySelection Field Value EntitySelection HeadYawLimits public AngleConstraint HeadYawLimits Field Value AngleConstraint OnCanSpawnNearby Called whenever the game wants to spawn new creatures around the player. Called only by the game server. public CanSpawnNearbyDelegate OnCanSpawnNearby Field Value CanSpawnNearbyDelegate PrevFrameCanStandUp public bool PrevFrameCanStandUp Field Value bool PreviousBlockSelection The block position previously selected by the player public BlockPos PreviousBlockSelection Field Value BlockPos WalkPitch The pitch the player currently wants to move to. Only relevant while swimming. Value set by the PlayerPhysics system. Set by the game client and server. public float WalkPitch Field Value float WalkYaw The yaw the player currently wants to walk towards to. Value set by the PlayerPhysics system. Set by the game client and server. public float WalkYaw Field Value float entityListForPartitioning Used to assist if this EntityPlayer needs to be repartitioned public List<Entity> entityListForPartitioning Field Value List<Entity> selfClimateCond public ClimateCondition selfClimateCond Field Value ClimateCondition selfNowShadowPass public bool selfNowShadowPass Field Value bool talkTypeByAnimation protected static Dictionary<string, EnumTalkType> talkTypeByAnimation Field Value Dictionary<string, EnumTalkType> talkUtil public EntityTalkUtil talkUtil Field Value EntityTalkUtil walkSpeed This is not walkspeed per se, it is the walkspeed modifier as a result of armor and other gear. It corresponds to Stats.GetBlended(\"walkspeed\") and gets updated every tick public float walkSpeed Field Value float Properties AlwaysActive Whether this entity should always stay in Active model, regardless on how far away other player are public override bool AlwaysActive { get; } Property Value bool AnimManager Server simulated animations. Only takes care of stopping animations once they're done Set and Called by the Entities ServerSystem public override IAnimationManager AnimManager { get; set; } Property Value IAnimationManager BodyYaw The yaw of the agents body public override float BodyYaw { get; set; } Property Value float HeadBobbingAmplitude public float HeadBobbingAmplitude { get; set; } Property Value float IsInteractable Should return true when this entity should be interactable by a player or other entities public override bool IsInteractable { get; } Property Value bool LadderFixDelta A small offset used to prevent players from clipping through the blocks above ladders: relevant if the entity's collision box is sometimes adjusted by the game code public override double LadderFixDelta { get; } Property Value double LastReviveTotalHours public double LastReviveTotalHours { get; set; } Property Value double LeftHandItemSlot The playres left hand contents. Available on the client and the server. public override ItemSlot LeftHandItemSlot { get; } Property Value ItemSlot LightHsv If set, the entity will emit dynamic light public override byte[] LightHsv { get; set; } Property Value byte[] OtherAnimManager public IAnimationManager OtherAnimManager { get; } Property Value IAnimationManager Player The base player attached to this EntityPlayer. public IPlayer Player { get; } Property Value IPlayer PlayerUID The player's internal Universal ID. Available on the client and the server. public string PlayerUID { get; } Property Value string RightHandItemSlot The players right hand contents. Available on the client and the server. public override ItemSlot RightHandItemSlot { get; } Property Value ItemSlot SelfFpAnimManager public PlayerAnimationManager SelfFpAnimManager { get; } Property Value PlayerAnimationManager ShouldDespawn Whether or not the entity should despawn. public override bool ShouldDespawn { get; } Property Value bool StoreWithChunk Players and whatever the player rides on will be stored seperatly public override bool StoreWithChunk { get; } Property Value bool TpAnimManager public PlayerAnimationManager TpAnimManager { get; } Property Value PlayerAnimationManager Methods CanPet(Entity) public bool CanPet(Entity byEntity) Parameters byEntity Entity Returns bool CanSpawnNearby(EntityProperties, Vec3d, RuntimeSpawnConditions) public virtual bool CanSpawnNearby(EntityProperties type, Vec3d spawnPosition, RuntimeSpawnConditions sc) Parameters type EntityProperties spawnPosition Vec3d sc RuntimeSpawnConditions Returns bool ChangeDimension(int) public void ChangeDimension(int dim) Parameters dim int Die(EnumDespawnReason, DamageSource) Makes the entity despawn. Entities only drop something on EnumDespawnReason.Death public override void Die(EnumDespawnReason reason = EnumDespawnReason.Death, DamageSource damageSourceForDeath = null) Parameters reason EnumDespawnReason damageSourceForDeath DamageSource FromBytes(BinaryReader, bool) Loads the entity from a stored byte array from the SaveGame public override void FromBytes(BinaryReader reader, bool forClient) Parameters reader BinaryReader forClient bool GetInfoText() gets the info text for the entity. public override string GetInfoText() Returns string GetInsideLegsBlockSoundSource(BlockPos) public virtual Block GetInsideLegsBlockSoundSource(BlockPos tmpPos) Parameters tmpPos BlockPos Returns Block GetInsideTorsoBlockSoundSource(BlockPos) public virtual Block GetInsideTorsoBlockSoundSource(BlockPos tmpPos) Parameters tmpPos BlockPos Returns Block GetNearestBlockSoundSource(BlockPos, double, int, bool) Returns null if there is no nearby sound source public Block GetNearestBlockSoundSource(BlockPos tmpPos, double yOffset, int blockLayer, bool usecollisionboxes) Parameters tmpPos BlockPos Might get intentionally modified if the nearest sound source the player is intersecting with is in an adjacent block yOffset double blockLayer int usecollisionboxes bool Returns Block GetWalkSpeedMultiplier(double) Gets the walk speed multiplier. public override double GetWalkSpeedMultiplier(double groundDragFactor = 0.3) Parameters groundDragFactor double The amount of drag provided by the current ground. (Default: 0.3) Returns double HandleSeraphHandAnimations(float) public void HandleSeraphHandAnimations(float dt) Parameters dt float Ignite() public override void Ignite() Initialize(EntityProperties, ICoreAPI, long) Called when this entity got created or loaded public override void Initialize(EntityProperties properties, ICoreAPI api, long chunkindex3d) Parameters properties EntityProperties api ICoreAPI chunkindex3d long OnAsyncParticleTick(float, IAsyncParticleManager) public override void OnAsyncParticleTick(float dt, IAsyncParticleManager manager) Parameters dt float manager IAsyncParticleManager OnCollideWithLiquid() Called when the entity got in touch with a liquid public override void OnCollideWithLiquid() OnFallToGround(double) Called when the entity collided vertically public override void OnFallToGround(double motionY) Parameters motionY double OnGameTick(float) Called every 1/75 second public override void OnGameTick(float dt) Parameters dt float OnHurt(DamageSource, float) Called when the entity got hurt. On the client side, dmgSource is null public override void OnHurt(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float OnReceivedClientPacket(IServerPlayer, int, byte[]) Called when on the client side something called capi.Network.SendEntityPacket() public override void OnReceivedClientPacket(IServerPlayer player, int packetid, byte[] data) Parameters player IServerPlayer packetid int data byte[] OnReceivedServerPacket(int, byte[]) Called when on the server side something called sapi.Network.SendEntityPacket() Packetid = 1 is used for teleporting Packetid = 2 is used for BehaviorHarvestable public override void OnReceivedServerPacket(int packetid, byte[] data) Parameters packetid int data byte[] OnSelfBeforeRender(float) public void OnSelfBeforeRender(float dt) Parameters dt float OnTesselated() public override void OnTesselated() OnTesselation(ref Shape, string) Called by EntityShapeRenderer.cs before tesselating the entity shape public override void OnTesselation(ref Shape entityShape, string shapePathForLogging) Parameters entityShape Shape shapePathForLogging string PlayEntitySound(string, IPlayer, bool, float) Assumes that it is only called on the server public override void PlayEntitySound(string type, IPlayer dualCallByPlayer = null, bool randomizePitch = true, float range = 24) Parameters type string dualCallByPlayer IPlayer randomizePitch bool range float PlayInsideSound(IPlayer) public virtual bool PlayInsideSound(IPlayer player) Parameters player IPlayer Returns bool PlayStepSound(IPlayer, bool) public virtual void PlayStepSound(IPlayer player, bool playingInsideSound) Parameters player IPlayer playingInsideSound bool RevivableIngameHoursLeft() public double RevivableIngameHoursLeft() Returns double Revive() Revives the entity and heals for 9999. public override void Revive() SetCurrentlyControlledPlayer() Sets the current player. public void SetCurrentlyControlledPlayer() SetName(string) public void SetName(string name) Parameters name string ShouldReceiveDamage(DamageSource, float) Should return true if the entity can get damaged by given damageSource. Is called by ReceiveDamage. public override bool ShouldReceiveDamage(DamageSource damageSource, float damage) Parameters damageSource DamageSource damage float Returns bool TeleportToDouble(double, double, double, Action) Teleports the entity to given position. Actual teleport is delayed until target chunk is loaded. public override void TeleportToDouble(double x, double y, double z, Action onTeleported = null) Parameters x double y double z double onTeleported Action TryGiveItemStack(ItemStack) Called when something tries to given an itemstack to this entity public override bool TryGiveItemStack(ItemStack itemstack) Parameters itemstack ItemStack Returns bool TryMount(IMountableSeat) Attempts to mount this entity on a target. public override bool TryMount(IMountableSeat onmount) Parameters onmount IMountableSeat The mount to mount Returns bool Whether it was mounted or not. TryStopHandAction(bool, EnumItemUseCancelReason) Attempts to stop the hand action. public override bool TryStopHandAction(bool forceStop, EnumItemUseCancelReason cancelReason = EnumItemUseCancelReason.ReleasedMouse) Parameters forceStop bool cancelReason EnumItemUseCancelReason The reason for stopping the action. Returns bool Whether the stop was cancelled or not. UpdateDebugAttributes() Updates the DebugAttributes tree public override void UpdateDebugAttributes() UpdatePartitioning() public void UpdatePartitioning() WalkInventory(OnInventorySlot) This walks the inventory for the entity agent. public override void WalkInventory(OnInventorySlot handler) Parameters handler OnInventorySlot the event to fire while walking the inventory. canPlayEdgeSitAnim() protected bool canPlayEdgeSitAnim() Returns bool getSoundSourceBlockAt(Cuboidd, BlockSelection, int, bool) protected Block getSoundSourceBlockAt(Cuboidd entityBox, BlockSelection blockSel, int blockLayer, bool usecollisionboxes) Parameters entityBox Cuboidd blockSel BlockSelection blockLayer int usecollisionboxes bool Returns Block onAnimControls(AnimationMetaData, bool, bool) protected override bool onAnimControls(AnimationMetaData anim, bool wasActive, bool nowActive) Parameters anim AnimationMetaData wasActive bool nowActive bool Returns bool protectEyesFromWind(float) protected void protectEyesFromWind(float dt) Parameters dt float Events OnFootStep Set this to hook into the foot step sound creator thingy. Currently used by the armor system to create armor step sounds. Called by the game client and server. public event Action OnFootStep Event Type Action OnImpact Called when the player falls onto the ground. Called by the game client and server. public event Action<double> OnImpact Event Type Action<double>"
  },
  "api/Vintagestory.API.Common.EntitySelection.html": {
    "href": "api/Vintagestory.API.Common.EntitySelection.html",
    "title": "Class EntitySelection | VintageStory API",
    "keywords": "Class EntitySelection Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntitySelection Inheritance object EntitySelection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Entity The selected Entity. public Entity Entity Field Value Entity Face the facing of the entity. public BlockFacing Face Field Value BlockFacing HitPosition The hit position of the entity. public Vec3d HitPosition Field Value Vec3d Position The position of the selected entity. public Vec3d Position Field Value Vec3d SelectionBoxIndex Which selection box was aimed at. The index corresponds to the array returned by Block.GetSelectionBoxes() public int SelectionBoxIndex Field Value int Methods Clone() public EntitySelection Clone() Returns EntitySelection"
  },
  "api/Vintagestory.API.Common.EntityStat-1.html": {
    "href": "api/Vintagestory.API.Common.EntityStat-1.html",
    "title": "Class EntityStat<T> | VintageStory API",
    "keywords": "Class EntityStat<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public class EntityStat<T> Type Parameters T Inheritance object EntityStat<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Persistent public bool Persistent Field Value bool Value public T Value Field Value T Weight public float Weight Field Value float"
  },
  "api/Vintagestory.API.Common.EntityStats.html": {
    "href": "api/Vintagestory.API.Common.EntityStats.html",
    "title": "Class EntityStats | VintageStory API",
    "keywords": "Class EntityStats Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityStats : IEnumerable<KeyValuePair<string, EntityFloatStats>>, IEnumerable Inheritance object EntityStats Implements IEnumerable<KeyValuePair<string, EntityFloatStats>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityStats(Entity) public EntityStats(Entity entity) Parameters entity Entity Properties this[string] public EntityFloatStats this[string key] { get; set; } Parameters key string Property Value EntityFloatStats Methods FromTreeAttributes(ITreeAttribute) public void FromTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute GetBlended(string) Get the final stat value, blended by the stats blend type public float GetBlended(string category) Parameters category string Returns float GetEnumerator() public IEnumerator<KeyValuePair<string, EntityFloatStats>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, EntityFloatStats>> Initialize(ICoreAPI) public void Initialize(ICoreAPI api) Parameters api ICoreAPI Register(string, EnumStatBlendType) Set up a stat. Its not required to call this method, you can go straight to doing .Set() if your blend type is weighted sum. Also initializes a base value of 1. public EntityStats Register(string category, EnumStatBlendType blendType = EnumStatBlendType.WeightedSum) Parameters category string blendType EnumStatBlendType Returns EntityStats Remove(string, string) Remove a stat value public EntityStats Remove(string category, string code) Parameters category string code string Returns EntityStats Set(string, string, float, bool) Set a stat value, if the stat catgory does not exist, it will create a new default one. Initializes a base value of 1 when creating a new stat. public EntityStats Set(string category, string code, float value, bool persistent = false) Parameters category string code string value float persistent bool Returns EntityStats ToTreeAttributes(ITreeAttribute, bool) public void ToTreeAttributes(ITreeAttribute tree, bool forClient) Parameters tree ITreeAttribute forClient bool"
  },
  "api/Vintagestory.API.Common.EntityTypeArgParser.html": {
    "href": "api/Vintagestory.API.Common.EntityTypeArgParser.html",
    "title": "Class EntityTypeArgParser | VintageStory API",
    "keywords": "Class EntityTypeArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityTypeArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase EntityTypeArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityTypeArgParser(string, ICoreAPI, bool) public EntityTypeArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.EntityUpdate.html": {
    "href": "api/Vintagestory.API.Common.EntityUpdate.html",
    "title": "Class EntityUpdate | VintageStory API",
    "keywords": "Class EntityUpdate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class EntityUpdate Inheritance object EntityUpdate Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields EntityId If set this entity was spawned or Moved (position needs to be set too) public long EntityId Field Value long EntityProperties If set this entity needs to be spawned public EntityProperties EntityProperties Field Value EntityProperties NewPosition public EntityPos NewPosition Field Value EntityPos OldPosition If set the entity was moved public EntityPos OldPosition Field Value EntityPos"
  },
  "api/Vintagestory.API.Common.EnumAICreatureType.html": {
    "href": "api/Vintagestory.API.Common.EnumAICreatureType.html",
    "title": "Enum EnumAICreatureType | VintageStory API",
    "keywords": "Enum EnumAICreatureType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of creatures used for pathfinding. Humanoids prefer taking paths. Open in GitHub [DocumentAsJson] public enum EnumAICreatureType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Default = 0 Dumbest version. Never enters boiling water and lava. Prefers not to be in water. Slightly prefers to walk on blocks that give a walk speed bonus. HeatProofCreature = 3 Does not avoid fire or boiling water. Still Avoids Lava Humanoid = 2 Same as LandCreature, additionally strongly prefers to walk on blocks that give a walk speed bonues, such as stone paths LandCreature = 1 Same as Default, Additionally never enters some types of blocks that are on fire (fire pits, coal piles and pit kilns) SeaCreature = 4 Does not avoid water in any way"
  },
  "api/Vintagestory.API.Common.EnumAnimationBlendMode.html": {
    "href": "api/Vintagestory.API.Common.EnumAnimationBlendMode.html",
    "title": "Enum EnumAnimationBlendMode | VintageStory API",
    "keywords": "Enum EnumAnimationBlendMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines how multiple animations should be blended together. Open in GitHub [DocumentAsJson] public enum EnumAnimationBlendMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Add = 0 Add the animation without taking other animations into considerations AddAverage = 2 Add the animation without taking other animations into consideration, but add it's weight for averaging Average = 1 Add the pose and average it together with all other running animations with blendmode Average or AddAverage"
  },
  "api/Vintagestory.API.Common.EnumAppSide.html": {
    "href": "api/Vintagestory.API.Common.EnumAppSide.html",
    "title": "Enum EnumAppSide | VintageStory API",
    "keywords": "Enum EnumAppSide Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A server/client side used by for the Vintage Story app. Open in GitHub [Flags] [DocumentAsJson] public enum EnumAppSide Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) EnumAppSideExtensions.Is(EnumAppSide, EnumAppSide) EnumAppSideExtensions.IsClient(EnumAppSide) EnumAppSideExtensions.IsServer(EnumAppSide) EnumAppSideExtensions.IsUniversal(EnumAppSide) Fields Client = 2 For client side things only. Server = 1 For server side things only. Universal = Server | Client For server and client side things."
  },
  "api/Vintagestory.API.Common.EnumAppSideExtensions.html": {
    "href": "api/Vintagestory.API.Common.EnumAppSideExtensions.html",
    "title": "Class EnumAppSideExtensions | VintageStory API",
    "keywords": "Class EnumAppSideExtensions Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class EnumAppSideExtensions Inheritance object EnumAppSideExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Is(EnumAppSide, EnumAppSide) Am I this side? public static bool Is(this EnumAppSide side, EnumAppSide other) Parameters side EnumAppSide other EnumAppSide Returns bool IsClient(EnumAppSide) Am I the client? public static bool IsClient(this EnumAppSide side) Parameters side EnumAppSide Returns bool IsServer(EnumAppSide) Am I the server? public static bool IsServer(this EnumAppSide side) Parameters side EnumAppSide Returns bool IsUniversal(EnumAppSide) Am I a universal? public static bool IsUniversal(this EnumAppSide side) Parameters side EnumAppSide Returns bool"
  },
  "api/Vintagestory.API.Common.EnumBlastType.html": {
    "href": "api/Vintagestory.API.Common.EnumBlastType.html",
    "title": "Enum EnumBlastType | VintageStory API",
    "keywords": "Enum EnumBlastType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumBlastType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields EntityBlast = 2 OreBlast = 0 RockBlast = 1"
  },
  "api/Vintagestory.API.Common.EnumBlockAccessFlags.html": {
    "href": "api/Vintagestory.API.Common.EnumBlockAccessFlags.html",
    "title": "Enum EnumBlockAccessFlags | VintageStory API",
    "keywords": "Enum EnumBlockAccessFlags Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [Flags] public enum EnumBlockAccessFlags Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BuildOrBreak = 1 None = 0 Traverse = 4 Use = 2"
  },
  "api/Vintagestory.API.Common.EnumBlockMaterial.html": {
    "href": "api/Vintagestory.API.Common.EnumBlockMaterial.html",
    "title": "Enum EnumBlockMaterial | VintageStory API",
    "keywords": "Enum EnumBlockMaterial Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Materials of which a block may be made of. Currently only used for mining speed for tools and blast resistance. Open in GitHub [DocumentAsJson] public enum EnumBlockMaterial Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Air = 0 Brick = 18 Ceramic = 15 Cloth = 16 Fire = 19 Glass = 14 Gravel = 2 Ice = 10 Lava = 17 Leaves = 5 Liquid = 8 Mantle = 12 Meta = 20 Metal = 11 Ore = 7 Other = 21 Plant = 13 Sand = 3 Snow = 9 Soil = 1 Stone = 6 Wood = 4"
  },
  "api/Vintagestory.API.Common.EnumCallerType.html": {
    "href": "api/Vintagestory.API.Common.EnumCallerType.html",
    "title": "Enum EnumCallerType | VintageStory API",
    "keywords": "Enum EnumCallerType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumCallerType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Block = 2 Console = 3 Entity = 1 Player = 0 Unknown = 4"
  },
  "api/Vintagestory.API.Common.EnumCharacterDressType.html": {
    "href": "api/Vintagestory.API.Common.EnumCharacterDressType.html",
    "title": "Enum EnumCharacterDressType | VintageStory API",
    "keywords": "Enum EnumCharacterDressType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumCharacterDressType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Arm = 10 ArmorBody = 13 ArmorHead = 12 ArmorLegs = 14 Emblem = 7 Face = 8 Foot = 4 Hand = 5 Head = 0 LowerBody = 3 Neck = 6 Shoulder = 1 Unknown = -1 UpperBody = 2 UpperBodyOver = 11 Waist = 9"
  },
  "api/Vintagestory.API.Common.EnumChatType.html": {
    "href": "api/Vintagestory.API.Common.EnumChatType.html",
    "title": "Enum EnumChatType | VintageStory API",
    "keywords": "Enum EnumChatType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A definition for the types of chat that could occur. Open in GitHub public enum EnumChatType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AllGroups = 5 The message was sent to all the groups involved. CommandError = 1 A command failed. CommandSuccess = 0 A command was successful. GroupInvite = 6 The group has invited the player. JoinLeave = 7 The player has joined or left the group. Macro = 8 There was a macro involved. Notification = 4 The message was a notification (The world ends in 3 days, You cannot do this, ect) OthersMessage = 3 The message was sent from another player. OwnMessage = 2 The message was sent to the player only."
  },
  "api/Vintagestory.API.Common.EnumChunkDirtyReason.html": {
    "href": "api/Vintagestory.API.Common.EnumChunkDirtyReason.html",
    "title": "Enum EnumChunkDirtyReason | VintageStory API",
    "keywords": "Enum EnumChunkDirtyReason Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumChunkDirtyReason Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields MarkedDirty = 2 NewlyCreated = 0 NewlyLoaded = 1"
  },
  "api/Vintagestory.API.Common.EnumClaimError.html": {
    "href": "api/Vintagestory.API.Common.EnumClaimError.html",
    "title": "Enum EnumClaimError | VintageStory API",
    "keywords": "Enum EnumClaimError Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumClaimError Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields NoError = 0 NotAdjacent = 1 Overlapping = 2"
  },
  "api/Vintagestory.API.Common.EnumCommandStatus.html": {
    "href": "api/Vintagestory.API.Common.EnumCommandStatus.html",
    "title": "Enum EnumCommandStatus | VintageStory API",
    "keywords": "Enum EnumCommandStatus Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumCommandStatus Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Deferred = 2 Command cannot execute at this point, likely doing an async call. Prints no output. Error = 3 The command encountered an issue NoSuchCommand = 0 Success = 1 UnknownLegacy = 4 Command status is unknown because this is a legacy command using the old method of registering commands"
  },
  "api/Vintagestory.API.Common.EnumDamageOverTimeEffectType.html": {
    "href": "api/Vintagestory.API.Common.EnumDamageOverTimeEffectType.html",
    "title": "Enum EnumDamageOverTimeEffectType | VintageStory API",
    "keywords": "Enum EnumDamageOverTimeEffectType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDamageOverTimeEffectType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bleeding = 2 Poison = 1 Unknown = 0"
  },
  "api/Vintagestory.API.Common.EnumDamageSource.html": {
    "href": "api/Vintagestory.API.Common.EnumDamageSource.html",
    "title": "Enum EnumDamageSource | VintageStory API",
    "keywords": "Enum EnumDamageSource Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDamageSource Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bleed = 13 It came from entity bleeding Block = 0 It came from a block in the world. Drown = 3 It came from being in water too long. Entity = 8 It came from another entity. Explosion = 9 It came from an explostion. Fall = 2 It came from falling too far. Internal = 7 It came from inside. Machine = 10 Player = 1 It from another player. Revive = 4 It came from respawning. Suicide = 6 It came from the /kill command. Unknown = 11 It came from a source not identified. Void = 5 It came from the void. Weather = 12"
  },
  "api/Vintagestory.API.Common.EnumDamageType.html": {
    "href": "api/Vintagestory.API.Common.EnumDamageType.html",
    "title": "Enum EnumDamageType | VintageStory API",
    "keywords": "Enum EnumDamageType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDamageType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Acid = 14 BluntAttack = 2 Crushing = 9 Electricity = 11 Fire = 1 Frost = 10 Gravity = 0 Heal = 6 Heat = 12 Hunger = 8 Injury = 13 PiercingAttack = 4 Poison = 7 SlashingAttack = 3 Suffocation = 5"
  },
  "api/Vintagestory.API.Common.EnumDataType.html": {
    "href": "api/Vintagestory.API.Common.EnumDataType.html",
    "title": "Enum EnumDataType | VintageStory API",
    "keywords": "Enum EnumDataType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDataType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bool = 0 DoubleInput = 2 DoubleRange = 6 DropDown = 5 IntInput = 1 IntRange = 3 String = 4 StringRange = 7"
  },
  "api/Vintagestory.API.Common.EnumDeathCause.html": {
    "href": "api/Vintagestory.API.Common.EnumDeathCause.html",
    "title": "Enum EnumDeathCause | VintageStory API",
    "keywords": "Enum EnumDeathCause Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDeathCause Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlockDamage = 1 The death was caused by damage from a block. Drowning = 2 The death was caused by loss of getting air when underwater. Explosion = 3 The death was caused by a strong concussive force to the forehead. FallDamage = 0 The death was caused by falling too far. Injury = 4 The death was caused by an injury the player sustained. Unknown = 5 We don't know what killed ya."
  },
  "api/Vintagestory.API.Common.EnumDespawnReason.html": {
    "href": "api/Vintagestory.API.Common.EnumDespawnReason.html",
    "title": "Enum EnumDespawnReason | VintageStory API",
    "keywords": "Enum EnumDespawnReason Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumDespawnReason Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Combusted = 1 Completely burned up Death = 0 Despawned because it died. Disconnect = 5 The last player disconnected from the game. Expire = 6 The entity expired. OutOfRange = 2 Despawned because the player (or players) moved out of ranged. PickedUp = 3 A player picked up this item and is removed from the world. (ItemEntity -> Item) Removed = 7 The entity was removed. Unload = 4 The region was unloaded."
  },
  "api/Vintagestory.API.Common.EnumEntityAction.html": {
    "href": "api/Vintagestory.API.Common.EnumEntityAction.html",
    "title": "Enum EnumEntityAction | VintageStory API",
    "keywords": "Enum EnumEntityAction Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A players in-world action Open in GitHub public enum EnumEntityAction Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Backward = 1 Walk backwards CtrlKey = 13 Holding down the Ctrl key (which might have been remapped) Down = 12 Fly or swim down FloorSit = 8 Sit on the ground Forward = 0 Walk forwards Glide = 7 Glide InWorldLeftMouseDown = 15 Left mouse down InWorldRightMouseDown = 16 Right mouse down Jump = 4 Jump Left = 2 Walk sideways left LeftMouseDown = 9 Left mouse down None = -1 No action - used when setting preCondition Right = 3 Walk sideways right RightMouseDown = 10 Right mouse down ShiftKey = 14 Holding down the Shift key (which might have been remapped) Sneak = 5 Sneak Sprint = 6 Sprint mode Up = 11 Fly or swim up"
  },
  "api/Vintagestory.API.Common.EnumEntityActivityStoppedHandling.html": {
    "href": "api/Vintagestory.API.Common.EnumEntityActivityStoppedHandling.html",
    "title": "Enum EnumEntityActivityStoppedHandling | VintageStory API",
    "keywords": "Enum EnumEntityActivityStoppedHandling Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumEntityActivityStoppedHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields EaseOut = 3 PlayTillEnd = 0 Rewind = 1 Stop = 2"
  },
  "api/Vintagestory.API.Common.EnumEntityAnimationEndHandling.html": {
    "href": "api/Vintagestory.API.Common.EnumEntityAnimationEndHandling.html",
    "title": "Enum EnumEntityAnimationEndHandling | VintageStory API",
    "keywords": "Enum EnumEntityAnimationEndHandling Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumEntityAnimationEndHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields EaseOut = 3 Hold = 1 Repeat = 0 Stop = 2"
  },
  "api/Vintagestory.API.Common.EnumEntityState.html": {
    "href": "api/Vintagestory.API.Common.EnumEntityState.html",
    "title": "Enum EnumEntityState | VintageStory API",
    "keywords": "Enum EnumEntityState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumEntityState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Active = 0 Despawned = 2 Inactive = 1"
  },
  "api/Vintagestory.API.Common.EnumFoodCategory.html": {
    "href": "api/Vintagestory.API.Common.EnumFoodCategory.html",
    "title": "Enum EnumFoodCategory | VintageStory API",
    "keywords": "Enum EnumFoodCategory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of nutrition for foods. Open in GitHub [DocumentAsJson] public enum EnumFoodCategory Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Dairy = 4 Fruit = 0 Grain = 3 NoNutrition = -1 Protein = 2 Unknown = 5 Vegetable = 1"
  },
  "api/Vintagestory.API.Common.EnumFreeMovAxisLock.html": {
    "href": "api/Vintagestory.API.Common.EnumFreeMovAxisLock.html",
    "title": "Enum EnumFreeMovAxisLock | VintageStory API",
    "keywords": "Enum EnumFreeMovAxisLock Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumFreeMovAxisLock Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields None = 0 X = 1 Y = 2 Z = 3"
  },
  "api/Vintagestory.API.Common.EnumGameMode.html": {
    "href": "api/Vintagestory.API.Common.EnumGameMode.html",
    "title": "Enum EnumGameMode | VintageStory API",
    "keywords": "Enum EnumGameMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A players game mode Open in GitHub public enum EnumGameMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Creative = 2 Can fly, break blocks immediately, etc. Guest = 0 Can not place or remove blocks, but can interact with blocks and entities Spectator = 3 Can fly but may not interact with the world in any way Survival = 1 May not fly or break blocks immediately"
  },
  "api/Vintagestory.API.Common.EnumGetClimateMode.html": {
    "href": "api/Vintagestory.API.Common.EnumGetClimateMode.html",
    "title": "Enum EnumGetClimateMode | VintageStory API",
    "keywords": "Enum EnumGetClimateMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of climate values you wish to receive Open in GitHub [DocumentAsJson] public enum EnumGetClimateMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ForSuppliedDateValues = 2 The values at the supplied calendar time, supplied as additional arg ForSuppliedDate_TemperatureOnly = 3 The values at the supplied calendar time, ignoring rainfall etc. Calling IBlockAccessor.GetClimateAt with this mode will never return a null ClimateCondition value, if it would be null it returns a ClimateCondition with a default 4 degrees temperature value ForSuppliedDate_TemperatureRainfallOnly = 4 The values at the supplied calendar time, ignoring forest cover etc. Calling IBlockAccessor.GetClimateAt with this mode will never return a null ClimateCondition value, if it would be null it returns a ClimateCondition with a default 4 degrees temperature value and no rain NowValues = 1 The values at the current calendar time WorldGenValues = 0 The values generate during world generation, these are loosely considered as yearly averages"
  },
  "api/Vintagestory.API.Common.EnumHabitat.html": {
    "href": "api/Vintagestory.API.Common.EnumHabitat.html",
    "title": "Enum EnumHabitat | VintageStory API",
    "keywords": "Enum EnumHabitat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Habitats for entities. Controls some minor logic for entities. Open in GitHub [DocumentAsJson] public enum EnumHabitat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Air = 2 No gravity. Land = 1 Apply gravity. Standard land creature. Sea = 0 No gravity, AiTaskWander will look for water or ice. Underwater = 3 No gravity, AiTaskWander will look for water or ice."
  },
  "api/Vintagestory.API.Common.EnumHand.html": {
    "href": "api/Vintagestory.API.Common.EnumHand.html",
    "title": "Enum EnumHand | VintageStory API",
    "keywords": "Enum EnumHand Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumHand Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Left = 0 Right = 1"
  },
  "api/Vintagestory.API.Common.EnumHandHandling.html": {
    "href": "api/Vintagestory.API.Common.EnumHandHandling.html",
    "title": "Enum EnumHandHandling | VintageStory API",
    "keywords": "Enum EnumHandHandling Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll How the engine should handle attacking with an item in hands Open in GitHub public enum EnumHandHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Handled = 1 Uses the engine default behavior which is to play an attack or build animation and do block breaking/damage entities if in range, but also notify the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods. NotHandled = 0 Uses the engine default behavior which is to play an attack animation and do block breaking/damage entities if in range. Will not call the *Step and *Stop methods. PreventDefault = 4 Do not play any first person attack animation, don't break blocks in range or damage entities in range. Notifies that the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods. PreventDefaultAction = 3 Do play first person attack animation, don't break blocks/damage entities in range. Notifies that the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods. PreventDefaultAnimation = 2 Do not play any default first person attack animation, but do block breaking/damage entities if in range. Notifies that the server that the Use/Attack method has to be called serverside as well. Will call the *Step and *Stop methods."
  },
  "api/Vintagestory.API.Common.EnumHandInteract.html": {
    "href": "api/Vintagestory.API.Common.EnumHandInteract.html",
    "title": "Enum EnumHandInteract | VintageStory API",
    "keywords": "Enum EnumHandInteract Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumHandInteract Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlockInteract = 3 HeldItemAttack = 1 HeldItemInteract = 2 None = 0"
  },
  "api/Vintagestory.API.Common.EnumHandling.html": {
    "href": "api/Vintagestory.API.Common.EnumHandling.html",
    "title": "Enum EnumHandling | VintageStory API",
    "keywords": "Enum EnumHandling Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Tells the engine how to handle default or subsequent similar behaviors Open in GitHub public enum EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Handled = 1 Do run default and subsequent behaviors/event listeneres, use return values PassThrough = 0 Do run default and subsequent behaviors/event listeneres, ignore return values PreventDefault = 2 Do not execute the default behavior, but let subsequent behaviors/event listeneres still execute, use return values PreventSubsequent = 3 Do not execute default behavior and do not let subsequent behaviors/event listeneres execute, use return values"
  },
  "api/Vintagestory.API.Common.EnumHemisphere.html": {
    "href": "api/Vintagestory.API.Common.EnumHemisphere.html",
    "title": "Enum EnumHemisphere | VintageStory API",
    "keywords": "Enum EnumHemisphere Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumHemisphere Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields North = 0 South = 2"
  },
  "api/Vintagestory.API.Common.EnumHighlightShape.html": {
    "href": "api/Vintagestory.API.Common.EnumHighlightShape.html",
    "title": "Enum EnumHighlightShape | VintageStory API",
    "keywords": "Enum EnumHighlightShape Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumHighlightShape Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Arbitrary = 0 Ball = 2 Cube = 1 Cubes = 3 Cylinder = 4"
  },
  "api/Vintagestory.API.Common.EnumHighlightSlot.html": {
    "href": "api/Vintagestory.API.Common.EnumHighlightSlot.html",
    "title": "Enum EnumHighlightSlot | VintageStory API",
    "keywords": "Enum EnumHighlightSlot Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumHighlightSlot Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Brush = 1 LandClaim = 3 Selection = 0 SelectionEnd = 5 SelectionStart = 4 Spawner = 2"
  },
  "api/Vintagestory.API.Common.EnumInteractMode.html": {
    "href": "api/Vintagestory.API.Common.EnumInteractMode.html",
    "title": "Enum EnumInteractMode | VintageStory API",
    "keywords": "Enum EnumInteractMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumInteractMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Attack = 0 Interact = 1"
  },
  "api/Vintagestory.API.Common.EnumItemClass.html": {
    "href": "api/Vintagestory.API.Common.EnumItemClass.html",
    "title": "Enum EnumItemClass | VintageStory API",
    "keywords": "Enum EnumItemClass Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of collectible in an itemstack. Open in GitHub [DocumentAsJson] public enum EnumItemClass Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) ItemClassMethods.Name(EnumItemClass) Fields Block = 0 This itemstack holds a block. Item = 1 This itemstack holds an item."
  },
  "api/Vintagestory.API.Common.EnumItemDamageSource.html": {
    "href": "api/Vintagestory.API.Common.EnumItemDamageSource.html",
    "title": "Enum EnumItemDamageSource | VintageStory API",
    "keywords": "Enum EnumItemDamageSource Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types for how an item can damage it's durability. Open in GitHub [DocumentAsJson] public enum EnumItemDamageSource Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Attacking = 1 The item was attacking a creature. BlockBreaking = 0 The item was breaking a block. Fire = 2 Unused. The item was thrown into a fire."
  },
  "api/Vintagestory.API.Common.EnumItemStorageFlags.html": {
    "href": "api/Vintagestory.API.Common.EnumItemStorageFlags.html",
    "title": "Enum EnumItemStorageFlags | VintageStory API",
    "keywords": "Enum EnumItemStorageFlags Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Determines the kinds of storage types the item can be put into Open in GitHub [Flags] public enum EnumItemStorageFlags Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Agriculture = 32 The item can be placed in a slot related to farming Alchemy = 16 The item can be placed in a slot related to alchemy Arrow = 512 Arrows Backpack = 2 The item can be placed into a backpack slot Currency = 64 Moneys Custom1 = 2048 Custom storage flag for mods Custom10 = 1048576 Custom storage flag for mods Custom2 = 4096 Custom storage flag for mods Custom3 = 8192 Custom storage flag for mods Custom4 = 16384 Custom storage flag for mods Custom5 = 32768 Custom storage flag for mods Custom6 = 65536 Custom storage flag for mods Custom7 = 131072 Custom storage flag for mods Custom8 = 262144 Custom storage flag for mods Custom9 = 524288 Custom storage flag for mods General = 1 Of no particular type Jewellery = 8 The item can be placed in a slot related to jewelcrafting Metallurgy = 4 The item can be placed in a slot related to mining or smithing Offhand = 256 Off hand slot Outfit = 128 Clothes, Armor and Accessories Skill = 1024 Skill slot"
  },
  "api/Vintagestory.API.Common.EnumItemUseCancelReason.html": {
    "href": "api/Vintagestory.API.Common.EnumItemUseCancelReason.html",
    "title": "Enum EnumItemUseCancelReason | VintageStory API",
    "keywords": "Enum EnumItemUseCancelReason Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumItemUseCancelReason Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ChangeSlot = 2 Death = 4 Destroyed = 5 Dropped = 1 MovedAway = 3 OpenedGui = 6 ReleasedMouse = 0"
  },
  "api/Vintagestory.API.Common.EnumLightLevelType.html": {
    "href": "api/Vintagestory.API.Common.EnumLightLevelType.html",
    "title": "Enum EnumLightLevelType | VintageStory API",
    "keywords": "Enum EnumLightLevelType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used in blockAccessor.GetLightLevel() to determine what kind of light level you want Open in GitHub [DocumentAsJson] public enum EnumLightLevelType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields MaxLight = 2 Will get you max(sunlight, onlyblocklight) MaxTimeOfDayLight = 3 Will get you max(sunlight * sunbrightness, blocklight) OnlyBlockLight = 0 Will get you just the block light OnlySunLight = 1 Will get you just the sun light unaffected by the day/night cycle Sunbrightness = 5 Will get you sunbrightness TimeOfDaySunLight = 4 Will get you sunlight * sunbrightness"
  },
  "api/Vintagestory.API.Common.EnumLogType.html": {
    "href": "api/Vintagestory.API.Common.EnumLogType.html",
    "title": "Enum EnumLogType | VintageStory API",
    "keywords": "Enum EnumLogType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumLogType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Audit = 10 Build = 3 Chat = 0 Debug = 5 Error = 8 Event = 1 Fatal = 9 Notification = 6 StoryEvent = 2 VerboseDebug = 4 Warning = 7 Worldgen = 11"
  },
  "api/Vintagestory.API.Common.EnumMatterState.html": {
    "href": "api/Vintagestory.API.Common.EnumMatterState.html",
    "title": "Enum EnumMatterState | VintageStory API",
    "keywords": "Enum EnumMatterState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Various states of matter to use for collectibles. Open in GitHub [DocumentAsJson] public enum EnumMatterState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BoseEinsteinCondensate = 4 The state of becoming Quantum Jelly. Gas = 0 The state of being so thin that molecules don't often touch Liquid = 1 The state of being still together but loose enough to move around each other. Plasma = 3 The state of reacting with itself with some kind of reactant, a high heat state. Solid = 2 The state of being together and held still by the internal structure."
  },
  "api/Vintagestory.API.Common.EnumMergePriority.html": {
    "href": "api/Vintagestory.API.Common.EnumMergePriority.html",
    "title": "Enum EnumMergePriority | VintageStory API",
    "keywords": "Enum EnumMergePriority Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumMergePriority Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AutoMerge = 0 Automatic merge operation, when a player did not specifically request a merge, e.g. with shift + left click, or when collected from the ground ConfirmedMerge = 2 Confirmed merge via dialog. Not implemented as of v1.14 DirectMerge = 1 When using mouse to manually merge item stacks"
  },
  "api/Vintagestory.API.Common.EnumModSourceType.html": {
    "href": "api/Vintagestory.API.Common.EnumModSourceType.html",
    "title": "Enum EnumModSourceType | VintageStory API",
    "keywords": "Enum EnumModSourceType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents the origin file type of the mod. Open in GitHub public enum EnumModSourceType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CS = 0 A single .cs source file. (Code mod without assets.) DLL = 1 A single .dll source file. (Code mod without assets.) Folder = 3 A folder able to contain assets and code files. ZIP = 2 A .zip archive able to contain assets and code files."
  },
  "api/Vintagestory.API.Common.EnumModType.html": {
    "href": "api/Vintagestory.API.Common.EnumModType.html",
    "title": "Enum EnumModType | VintageStory API",
    "keywords": "Enum EnumModType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Describes the type of a mod. Allows easy recognition and limiting of what any particular mod can do. Open in GitHub public enum EnumModType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code = 2 Can modify existing assets, add new content and make use of C# source files (.cs) and pre-compiled assemblies (.dll). Content = 1 Can modify any existing assets, or add new content, but no code. Theme = 0 Makes only theme changes (texture, shape, sound, music) to existing game or mod assets / content without adding new content or code."
  },
  "api/Vintagestory.API.Common.EnumModifierKey.html": {
    "href": "api/Vintagestory.API.Common.EnumModifierKey.html",
    "title": "Enum EnumModifierKey | VintageStory API",
    "keywords": "Enum EnumModifierKey Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [Flags] public enum EnumModifierKey Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ALT = 4 CTRL = 1 SHIFT = 2"
  },
  "api/Vintagestory.API.Common.EnumMonth.html": {
    "href": "api/Vintagestory.API.Common.EnumMonth.html",
    "title": "Enum EnumMonth | VintageStory API",
    "keywords": "Enum EnumMonth Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumMonth Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields April = 4 August = 8 December = 12 February = 2 January = 1 July = 7 June = 6 March = 3 May = 5 November = 11 October = 10 September = 9"
  },
  "api/Vintagestory.API.Common.EnumMoonPhase.html": {
    "href": "api/Vintagestory.API.Common.EnumMoonPhase.html",
    "title": "Enum EnumMoonPhase | VintageStory API",
    "keywords": "Enum EnumMoonPhase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumMoonPhase Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Empty = 0 Full = 4 Grow1 = 1 Grow2 = 2 Grow3 = 3 Shrink1 = 5 Shrink2 = 6 Shrink3 = 7"
  },
  "api/Vintagestory.API.Common.EnumMountAngleMode.html": {
    "href": "api/Vintagestory.API.Common.EnumMountAngleMode.html",
    "title": "Enum EnumMountAngleMode | VintageStory API",
    "keywords": "Enum EnumMountAngleMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumMountAngleMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Fixate = 4 Fixate all entity angles to the mount FixateYaw = 3 Fixate the mounted entity yaw to the mount Push = 2 Turn the player in all directions but allow him to still change its angles PushYaw = 1 Turn the player but allow him to still change its yaw Unaffected = 0 Don't affect the mounted entity angles"
  },
  "api/Vintagestory.API.Common.EnumMouseButton.html": {
    "href": "api/Vintagestory.API.Common.EnumMouseButton.html",
    "title": "Enum EnumMouseButton | VintageStory API",
    "keywords": "Enum EnumMouseButton Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A list of mouse buttons. Open in GitHub [DocumentAsJson] public enum EnumMouseButton Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Button4 = 3 Button5 = 4 Button6 = 5 Button7 = 6 Button8 = 7 Left = 0 Middle = 1 None = 255 Right = 2 Wheel = 13 Used to signal to event handlers, but not actually a button: activated when the wheel is scrolled."
  },
  "api/Vintagestory.API.Common.EnumOrigin.html": {
    "href": "api/Vintagestory.API.Common.EnumOrigin.html",
    "title": "Enum EnumOrigin | VintageStory API",
    "keywords": "Enum EnumOrigin Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumOrigin Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BottomCenter = 1 MiddleCenter = 3 StartPos = 0 TopCenter = 2"
  },
  "api/Vintagestory.API.Common.EnumOwnerType.html": {
    "href": "api/Vintagestory.API.Common.EnumOwnerType.html",
    "title": "Enum EnumOwnerType | VintageStory API",
    "keywords": "Enum EnumOwnerType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumOwnerType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Entity = 0 Group = 2 Player = 1"
  },
  "api/Vintagestory.API.Common.EnumParseResult.html": {
    "href": "api/Vintagestory.API.Common.EnumParseResult.html",
    "title": "Enum EnumParseResult | VintageStory API",
    "keywords": "Enum EnumParseResult Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumParseResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bad = 1 Deferred = 2 DependsOnSubsequent = 3 Good = 0"
  },
  "api/Vintagestory.API.Common.EnumParseResultStatus.html": {
    "href": "api/Vintagestory.API.Common.EnumParseResultStatus.html",
    "title": "Enum EnumParseResultStatus | VintageStory API",
    "keywords": "Enum EnumParseResultStatus Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumParseResultStatus Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Error = 2 Loading = 0 Ready = 1"
  },
  "api/Vintagestory.API.Common.EnumParticleModel.html": {
    "href": "api/Vintagestory.API.Common.EnumParticleModel.html",
    "title": "Enum EnumParticleModel | VintageStory API",
    "keywords": "Enum EnumParticleModel Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of model for a particle. Open in GitHub [DocumentAsJson] public enum EnumParticleModel Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Cube = 1 A 3D cube. Quad = 0 A 2D quad."
  },
  "api/Vintagestory.API.Common.EnumPlayerAccessResult.html": {
    "href": "api/Vintagestory.API.Common.EnumPlayerAccessResult.html",
    "title": "Enum EnumPlayerAccessResult | VintageStory API",
    "keywords": "Enum EnumPlayerAccessResult Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumPlayerAccessResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Denied = 0 OkGrantedGroup = 5 OkGrantedPlayer = 4 OkGroup = 2 OkOwner = 1 OkPrivilege = 3"
  },
  "api/Vintagestory.API.Common.EnumPlayerGroupMemberShip.html": {
    "href": "api/Vintagestory.API.Common.EnumPlayerGroupMemberShip.html",
    "title": "Enum EnumPlayerGroupMemberShip | VintageStory API",
    "keywords": "Enum EnumPlayerGroupMemberShip Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumPlayerGroupMemberShip Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Member = 1 Member None = 0 Op = 2 Operator of this channel Owner = 3 Owner of this channel"
  },
  "api/Vintagestory.API.Common.EnumPlayerJoinBehavior.html": {
    "href": "api/Vintagestory.API.Common.EnumPlayerJoinBehavior.html",
    "title": "Enum EnumPlayerJoinBehavior | VintageStory API",
    "keywords": "Enum EnumPlayerJoinBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumPlayerJoinBehavior Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AwaitReady = 1 Default = 0"
  },
  "api/Vintagestory.API.Common.EnumRandomizeAxes.html": {
    "href": "api/Vintagestory.API.Common.EnumRandomizeAxes.html",
    "title": "Enum EnumRandomizeAxes | VintageStory API",
    "keywords": "Enum EnumRandomizeAxes Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll When picking a random seed for this block, what axes should we base it on? Open in GitHub [DocumentAsJson] public enum EnumRandomizeAxes Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields XYZ = 0 Create a random value based on all three axes. XZ = 1 Create a random value based only on the X and Z axes. Allows blocks placed on top of each other to all have the same random properties (e.g. size, rotation, offset). Commonly used for multiblock plants."
  },
  "api/Vintagestory.API.Common.EnumReflectiveMode.html": {
    "href": "api/Vintagestory.API.Common.EnumReflectiveMode.html",
    "title": "Enum EnumReflectiveMode | VintageStory API",
    "keywords": "Enum EnumReflectiveMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll On the graphics card we have only one reflective bit, but we can store the mode in the wind data bits Open in GitHub public enum EnumReflectiveMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Medium = 2 Sun-Position dependent weak reflectivity Mild = 5 None = 0 Not reflective Sparkly = 4 Many small sparkles Strong = 3 Sun-Position dependent weak reflectivity Weak = 1 Sun-Position independent reflectivity"
  },
  "api/Vintagestory.API.Common.EnumReplaceMode.html": {
    "href": "api/Vintagestory.API.Common.EnumReplaceMode.html",
    "title": "Enum EnumReplaceMode | VintageStory API",
    "keywords": "Enum EnumReplaceMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumReplaceMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ReplaceAll = 1 Replace always, no matter what blocks were there previously ReplaceAllNoAir = 2 Replace always, no matter what blocks were there previously, but skip air blocks in the schematic ReplaceOnlyAir = 3 Replace only air blocks Replaceable = 0 Replace if new block replaceable value > old block replaceable value"
  },
  "api/Vintagestory.API.Common.EnumRetentionType.html": {
    "href": "api/Vintagestory.API.Common.EnumRetentionType.html",
    "title": "Enum EnumRetentionType | VintageStory API",
    "keywords": "Enum EnumRetentionType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumRetentionType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Heat = 0 Sound = 1 Water = 2"
  },
  "api/Vintagestory.API.Common.EnumSeason.html": {
    "href": "api/Vintagestory.API.Common.EnumSeason.html",
    "title": "Enum EnumSeason | VintageStory API",
    "keywords": "Enum EnumSeason Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumSeason Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Fall = 2 Spring = 0 Summer = 1 Winter = 3"
  },
  "api/Vintagestory.API.Common.EnumShapeFormat.html": {
    "href": "api/Vintagestory.API.Common.EnumShapeFormat.html",
    "title": "Enum EnumShapeFormat | VintageStory API",
    "keywords": "Enum EnumShapeFormat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of shape that can be loaded by the game. Open in GitHub [DocumentAsJson] public enum EnumShapeFormat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields [DocumentAsJson] GltfEmbedded = 2 Imports a shape using a Gltf file. [DocumentAsJson] Obj = 1 Imports a shape using an Obj file. [DocumentAsJson] VintageStory = 0 (Recommended) Imports a shape using the default JSON system."
  },
  "api/Vintagestory.API.Common.EnumSmeltType.html": {
    "href": "api/Vintagestory.API.Common.EnumSmeltType.html",
    "title": "Enum EnumSmeltType | VintageStory API",
    "keywords": "Enum EnumSmeltType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The type of smelting for the collectible. This effects how the object is smelted. Open in GitHub [DocumentAsJson] public enum EnumSmeltType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bake = 2 This collectible must be baked in a clay oven. Note that you will likely want to use BakingProperties in the item's attributes. Convert = 3 Currently has no special behavior. Cook = 1 Currently has no special behavior. Fire = 4 This collectible must be fired in a kiln. Smelt = 0 Currently has no special behavior."
  },
  "api/Vintagestory.API.Common.EnumSoilNutrient.html": {
    "href": "api/Vintagestory.API.Common.EnumSoilNutrient.html",
    "title": "Enum EnumSoilNutrient | VintageStory API",
    "keywords": "Enum EnumSoilNutrient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The three types of soil nutrient for farmland and crops. Open in GitHub [DocumentAsJson] public enum EnumSoilNutrient Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields K = 2 N = 0 P = 1"
  },
  "api/Vintagestory.API.Common.EnumSpecialKey.html": {
    "href": "api/Vintagestory.API.Common.EnumSpecialKey.html",
    "title": "Enum EnumSpecialKey | VintageStory API",
    "keywords": "Enum EnumSpecialKey Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumSpecialKey Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Respawn = 0 SelectTeam = 3 SetSpawn = 1 TabPlayerList = 2"
  },
  "api/Vintagestory.API.Common.EnumStatBlendType.html": {
    "href": "api/Vintagestory.API.Common.EnumStatBlendType.html",
    "title": "Enum EnumStatBlendType | VintageStory API",
    "keywords": "Enum EnumStatBlendType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumStatBlendType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields FlatMultiply = 1 FlatSum = 0 WeightedOverlay = 3 WeightedSum = 2"
  },
  "api/Vintagestory.API.Common.EnumTokenType.html": {
    "href": "api/Vintagestory.API.Common.EnumTokenType.html",
    "title": "Enum EnumTokenType | VintageStory API",
    "keywords": "Enum EnumTokenType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTokenType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Tag = 1 Text = 0"
  },
  "api/Vintagestory.API.Common.EnumTool.html": {
    "href": "api/Vintagestory.API.Common.EnumTool.html",
    "title": "Enum EnumTool | VintageStory API",
    "keywords": "Enum EnumTool Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types for each tool in the game. Some of these are unused. Open in GitHub [DocumentAsJson] public enum EnumTool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Axe = 2 Bow = 7 Chisel = 12 Club = 24 Crossbow = 20 Drill = 18 Firearm = 19 Halberd = 28 Hammer = 5 Hoe = 10 Javelin = 21 Knife = 0 Mace = 25 Meter = 17 Pickaxe = 1 Pike = 22 Polearm = 29 Poleaxe = 27 Probe = 16 Saw = 11 Scythe = 13 Shears = 8 Shield = 23 Shovel = 4 Sickle = 9 Sling = 14 Spear = 6 Staff = 30 Sword = 3 Warhammer = 26 Wrench = 15"
  },
  "api/Vintagestory.API.Common.EnumTransitionType.html": {
    "href": "api/Vintagestory.API.Common.EnumTransitionType.html",
    "title": "Enum EnumTransitionType | VintageStory API",
    "keywords": "Enum EnumTransitionType Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Types of transition for items. Open in GitHub [DocumentAsJson] public enum EnumTransitionType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Burn = 2 Can be burned. Convert = 4 Generic 'other' conversion. Cure = 3 Can be cured, for meat. Dry = 1 Can be dried. Harden = 7 Glue hardening. Melt = 6 Snow/ice melting. None = 8 Used for cooking recipes where the output has no perishableprops, but we still need a non-null TransitionableProperties (e.g. sulfuric acid in 1.20) Perish = 0 For food, animals or non-organic materials. Ripen = 5 Cheese ripening."
  },
  "api/Vintagestory.API.Common.EnumWindBitMode.html": {
    "href": "api/Vintagestory.API.Common.EnumWindBitMode.html",
    "title": "Enum EnumWindBitMode | VintageStory API",
    "keywords": "Enum EnumWindBitMode Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumWindBitMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bend = 4 Same as normal wind, but no wiggle. Weak height bend based on ground distance. ExtraWeakWind = 7 Fruit = 8 Leaves = 3 Same as normal wind, but with some special behavior for leaves. Wiggle + Height bend based on ground distance. NoWind = 0 Not affected by wind NormalWind = 2 Normally affected by wind. Wiggle + Height bend based on ground distance. TallBend = 5 Bend behavior for tall plants Water = 6 Vertical wiggle WaterPlant = 11 WeakWind = 1 Slightly affected by wind. Wiggle + Height bend based on ground distance. WeakWindInverseBend = 10 WeakWindNoBend = 9"
  },
  "api/Vintagestory.API.Common.EnumWindBitModeMask.html": {
    "href": "api/Vintagestory.API.Common.EnumWindBitModeMask.html",
    "title": "Class EnumWindBitModeMask | VintageStory API",
    "keywords": "Class EnumWindBitModeMask Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Windmode flags, which can be ORed with existing vertex data to add the specified wind mode (assuming it was 0 previously!) Open in GitHub public static class EnumWindBitModeMask Inheritance object EnumWindBitModeMask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Bend Same as weak wind, but no wiggle. Height bend based on ground distance. public const int Bend = 134217728 Field Value int ExtraWeakWind Vertical wiggle public const int ExtraWeakWind = 234881024 Field Value int Fruit public const int Fruit = 268435456 Field Value int FullWaterWave public const int FullWaterWave = 402653184 Field Value int Leaves Same as normal wind, but with some special behavior for leaves. Wiggle + Height bend based on ground distance. public const int Leaves = 100663296 Field Value int NormalWind Normally affected by wind. Wiggle + Height bend based on ground distance. public const int NormalWind = 67108864 Field Value int Seaweed public const int Seaweed = 369098752 Field Value int TallBend Bend behavior for tall plants public const int TallBend = 167772160 Field Value int Water Vertical wiggle public const int Water = 201326592 Field Value int WeakWind Slightly affected by wind. Wiggle + Height bend based on ground distance. public const int WeakWind = 33554432 Field Value int WeakWindInverseBend public const int WeakWindInverseBend = 335544320 Field Value int WeakWindNoBend public const int WeakWindNoBend = 301989888 Field Value int"
  },
  "api/Vintagestory.API.Common.EnumWorldAccessResponse.html": {
    "href": "api/Vintagestory.API.Common.EnumWorldAccessResponse.html",
    "title": "Enum EnumWorldAccessResponse | VintageStory API",
    "keywords": "Enum EnumWorldAccessResponse Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public enum EnumWorldAccessResponse Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DeniedByMod = 6 A mod denied use/placement Granted = 0 Access ok or was called client side InGuestMode = 2 Player tries to place/break blocks but is in guest mode InSpectatorMode = 1 Players in spectator mode may not place blocks LandClaimed = 5 Player does not have the build/use blocks every privilege and the position is claimed by another player NoPrivilege = 4 This player was not granted the block build or use privilege PlayerDead = 3 Dead players may not place blocks"
  },
  "api/Vintagestory.API.Common.EventBusListenerDelegate.html": {
    "href": "api/Vintagestory.API.Common.EventBusListenerDelegate.html",
    "title": "Delegate EventBusListenerDelegate | VintageStory API",
    "keywords": "Delegate EventBusListenerDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll For handling events on the event bus public delegate void EventBusListenerDelegate(string eventName, ref EnumHandling handling, IAttribute data) Parameters eventName string handling EnumHandling Set to EnumHandling.Last to stop further propagation of the event data IAttribute Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ExplosionParticles.html": {
    "href": "api/Vintagestory.API.Common.ExplosionParticles.html",
    "title": "Class ExplosionParticles | VintageStory API",
    "keywords": "Class ExplosionParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A subclass of ExplosionSmokeParticles. Open in GitHub public class ExplosionParticles Inheritance object ExplosionParticles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ExplosionFireParticles public static SimpleParticleProperties ExplosionFireParticles Field Value SimpleParticleProperties ExplosionFireTrailCubicles public static AdvancedParticleProperties ExplosionFireTrailCubicles Field Value AdvancedParticleProperties"
  },
  "api/Vintagestory.API.Common.ExplosionSmokeParticles.html": {
    "href": "api/Vintagestory.API.Common.ExplosionSmokeParticles.html",
    "title": "Class ExplosionSmokeParticles | VintageStory API",
    "keywords": "Class ExplosionSmokeParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Handles the smoke particles of where the explosion was. Open in GitHub public class ExplosionSmokeParticles : IParticlePropertiesProvider Inheritance object ExplosionSmokeParticles Implements IParticlePropertiesProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ExplosionSmokeParticles() public ExplosionSmokeParticles() Fields basePos public Vec3d basePos Field Value Vec3d Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often public bool Async { get; } Property Value bool BlueEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat BlueEvolve { get; } Property Value EvolvingNatFloat Bounciness public float Bounciness { get; set; } Property Value float DeathParticles The particle to spawn upon the particle death. public IParticlePropertiesProvider[] DeathParticles { get; } Property Value IParticlePropertiesProvider[] DieInAir Whether the particle should despawn when in contact with air (e.g. for water bubbles) public bool DieInAir { get; } Property Value bool DieInLiquid Whether the particle should despawn when in contact with liquids public bool DieInLiquid { get; } Property Value bool DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location public bool DieOnRainHeightmap { get; } Property Value bool GravityEffect How strongly the particle is affected by gravity (0 = no gravity applied) public float GravityEffect { get; } Property Value float GreenEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat GreenEvolve { get; } Property Value EvolvingNatFloat LifeLength How long the particle should live (default = 1) public float LifeLength { get; } Property Value float LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark public int LightEmission { get; } Property Value int OpacityEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat ParentVelocity public Vec3f ParentVelocity { get; set; } Property Value Vec3f ParentVelocityWeight public float ParentVelocityWeight { get; set; } Property Value float ParticleModel Cube or Quad? public EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public float Quantity { get; } Property Value float RandomVelocityChange public bool RandomVelocityChange { get; set; } Property Value bool RedEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat RedEvolve { get; } Property Value EvolvingNatFloat SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. public IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] SecondarySpawnInterval Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn. This is only honored if this particle is defined as a secondary particle. public float SecondarySpawnInterval { get; } Property Value float SelfPropelled If true, a particle will restore it's initial velocity once it's obstruction has been cleared e.g. Smokes will start flying upwards again if is currently stuck under a block and the block is removed public bool SelfPropelled { get; } Property Value bool Size Size of the particle public float Size { get; } Property Value float SizeEvolve Size change over time public EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public bool SwimOnLiquid { get; } Property Value bool TerrainCollision If true, the particle will collide with the terrain public bool TerrainCollision { get; } Property Value bool VelocityEvolve Velocity change over time (acts as a multiplier to the velocity) public EvolvingNatFloat[] VelocityEvolve { get; } Property Value EvolvingNatFloat[] VertexFlags See also VertexFlags public int VertexFlags { get; } Property Value int Methods AddBlock(BlockPos) public void AddBlock(BlockPos pos) Parameters pos BlockPos AddBlocks(Dictionary<BlockPos, Block>) public void AddBlocks(Dictionary<BlockPos, Block> explodedBlocks) Parameters explodedBlocks Dictionary<BlockPos, Block> BeginParticle() Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles public void BeginParticle() FromBytes(BinaryReader, IWorldAccessor) For reading from the network public void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation public void Init(ICoreAPI api) Parameters api ICoreAPI PrepareForSecondarySpawn(ParticleBase) Updates instance related state for secondary particles based on the given parent particle instance public void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase The parent IParticleInstance from which this secondary particle is being spawned ToBytes(BinaryWriter) For sending over the network public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.ExtraHandbookSection.html": {
    "href": "api/Vintagestory.API.Common.ExtraHandbookSection.html",
    "title": "Class ExtraHandbookSection | VintageStory API",
    "keywords": "Class ExtraHandbookSection Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ExtraHandbookSection Inheritance object ExtraHandbookSection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Text public string Text Field Value string TextParts public string[] TextParts Field Value string[] Title public string Title Field Value string"
  },
  "api/Vintagestory.API.Common.FastParticlePool.CreateParticleDelegate.html": {
    "href": "api/Vintagestory.API.Common.FastParticlePool.CreateParticleDelegate.html",
    "title": "Delegate FastParticlePool.CreateParticleDelegate | VintageStory API",
    "keywords": "Delegate FastParticlePool.CreateParticleDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate ParticleBase FastParticlePool.CreateParticleDelegate() Returns ParticleBase Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.FastParticlePool.html": {
    "href": "api/Vintagestory.API.Common.FastParticlePool.html",
    "title": "Class FastParticlePool | VintageStory API",
    "keywords": "Class FastParticlePool Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class FastParticlePool Inheritance object FastParticlePool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastParticlePool(int, CreateParticleDelegate) public FastParticlePool(int poolSize, FastParticlePool.CreateParticleDelegate createParticle) Parameters poolSize int createParticle FastParticlePool.CreateParticleDelegate Fields AliveCount public int AliveCount Field Value int FirstAlive public ParticleBase FirstAlive Field Value ParticleBase FirstDead public ParticleBase FirstDead Field Value ParticleBase PoolSize public int PoolSize Field Value int Methods Kill(ParticleBase) public void Kill(ParticleBase elem) Parameters elem ParticleBase ReviveOne() public ParticleBase ReviveOne() Returns ParticleBase"
  },
  "api/Vintagestory.API.Common.FertilizerProps.html": {
    "href": "api/Vintagestory.API.Common.FertilizerProps.html",
    "title": "Class FertilizerProps | VintageStory API",
    "keywords": "Class FertilizerProps Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class FertilizerProps Inheritance object FertilizerProps Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields K public float K Field Value float N public float N Field Value float P public float P Field Value float PermaBoost public PermaFertilityBoost PermaBoost Field Value PermaFertilityBoost"
  },
  "api/Vintagestory.API.Common.FloatArgParser.html": {
    "href": "api/Vintagestory.API.Common.FloatArgParser.html",
    "title": "Class FloatArgParser | VintageStory API",
    "keywords": "Class FloatArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class FloatArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase FloatArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FloatArgParser(string, bool) public FloatArgParser(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool FloatArgParser(string, float, bool) public FloatArgParser(string argName, float defaultvalue, bool isMandatoryArg) Parameters argName string defaultvalue float isMandatoryArg bool FloatArgParser(string, float, float, bool) public FloatArgParser(string argName, float min, float max, bool isMandatoryArg) Parameters argName string min float max float isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.FloatingSedimentParticles.html": {
    "href": "api/Vintagestory.API.Common.FloatingSedimentParticles.html",
    "title": "Class FloatingSedimentParticles | VintageStory API",
    "keywords": "Class FloatingSedimentParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class FloatingSedimentParticles : ParticlesProviderBase, IParticlePropertiesProvider Inheritance object ParticlesProviderBase FloatingSedimentParticles Implements IParticlePropertiesProvider Inherited Members ParticlesProviderBase.Async ParticlesProviderBase.Bounciness ParticlesProviderBase.RandomVelocityChange ParticlesProviderBase.DieOnRainHeightmap ParticlesProviderBase.RedEvolve ParticlesProviderBase.GreenEvolve ParticlesProviderBase.BlueEvolve ParticlesProviderBase.VelocityEvolve ParticlesProviderBase.SelfPropelled ParticlesProviderBase.TerrainCollision ParticlesProviderBase.ToBytes(BinaryWriter) ParticlesProviderBase.FromBytes(BinaryReader, IWorldAccessor) ParticlesProviderBase.SecondarySpawnInterval ParticlesProviderBase.SecondaryParticles ParticlesProviderBase.DeathParticles ParticlesProviderBase.BeginParticle() ParticlesProviderBase.PrepareForSecondarySpawn(ParticleBase) ParticlesProviderBase.Init(ICoreAPI) ParticlesProviderBase.ParentVelocity ParticlesProviderBase.WindAffected ParticlesProviderBase.ParentVelocityWeight ParticlesProviderBase.LightEmission object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AddPos public Vec3d AddPos Field Value Vec3d AddVelocity public Vec3f AddVelocity Field Value Vec3f BasePos public Vec3d BasePos Field Value Vec3d SedimentBlock public Block SedimentBlock Field Value Block SedimentPos public BlockPos SedimentPos Field Value BlockPos quantity public float quantity Field Value float waterColor public int waterColor Field Value int Properties DieInAir Whether or not the particle dies in air. public override bool DieInAir { get; } Property Value bool DieInLiquid Determines whether or not the particle dies in liquid public override bool DieInLiquid { get; } Property Value bool GravityEffect Gets the gravity effect on the particle. public override float GravityEffect { get; } Property Value float LifeLength gets the life length of the particle. public override float LifeLength { get; } Property Value float OpacityEvolve Gets the evolving opacity value of the particle. public override EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat An evolving value based on opacity. ParticleModel Gets the model type of the particle. public override EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Gets the position of particles. public override Vec3d Pos { get; } Property Value Vec3d Quantity Gets the quantity of particles. public override float Quantity { get; } Property Value float Size gets the size of the particle. public override float Size { get; } Property Value float SizeEvolve gets the dynamic size of the particle. public override EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public override bool SwimOnLiquid { get; } Property Value bool VertexFlags gets the glow level of the particle. public override int VertexFlags { get; } Property Value int Methods GetRgbaColor(ICoreClientAPI) Gets the color of the particle. public override int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) Gets the velocity of the particles. public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f"
  },
  "api/Vintagestory.API.Common.FoodNutritionProperties.html": {
    "href": "api/Vintagestory.API.Common.FoodNutritionProperties.html",
    "title": "Class FoodNutritionProperties | VintageStory API",
    "keywords": "Class FoodNutritionProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Allows you to make collectibles edible, and adds data about their nutrition. Open in GitHub [DocumentAsJson] public class FoodNutritionProperties Inheritance object FoodNutritionProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"nutritionPropsByType\": { \"*-flyagaric-*\": { \"saturation\": 80, \"health\": -6.5, \"foodcategory\": \"Vegetable\" }, \"*-earthball-*\": { \"saturation\": 80, \"health\": -8, \"foodcategory\": \"Vegetable\" }, ... Fields EatenStack When an instance of this collectible is eaten, what item stack should be returned to the player? Possible example: Eating a 'meat on a stick' item would return a single stick. (Note: Bowl meals/liquids are specially designed to do this through their attributes and class.) [DocumentAsJson] public JsonItemStack EatenStack Field Value JsonItemStack FoodCategory The category of the food. [DocumentAsJson] public EnumFoodCategory FoodCategory Field Value EnumFoodCategory Health The health restored by the food. Usually actually used to hurt the player with negative values. [DocumentAsJson] public float Health Field Value float Satiety The saturation restored by the food. [DocumentAsJson] public float Satiety Field Value float SaturationLossDelay The delay before that extra saturation starts to go away. [DocumentAsJson] public float SaturationLossDelay Field Value float Properties Intoxication How much eating this will affect the player's intoxication. [DocumentAsJson] public float Intoxication { get; set; } Property Value float Saturation Obsolete - Please use Satiety instead. [DocumentAsJson] [Obsolete(\"Use Satiety instead.\")] public float Saturation { get; set; } Property Value float Methods Clone() Duplicates the nutrition properties, which includes cloning the stack that was eaten. public FoodNutritionProperties Clone() Returns FoodNutritionProperties"
  },
  "api/Vintagestory.API.Common.FrameProfilerUtil.html": {
    "href": "api/Vintagestory.API.Common.FrameProfilerUtil.html",
    "title": "Class FrameProfilerUtil | VintageStory API",
    "keywords": "Class FrameProfilerUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class FrameProfilerUtil Inheritance object FrameProfilerUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FrameProfilerUtil(Action<string>) public FrameProfilerUtil(Action<string> onLogoutputHandler) Parameters onLogoutputHandler Action<string> FrameProfilerUtil(string) Used to create a FrameProfilerUtil on threads other than the main thread public FrameProfilerUtil(string outputPrefix) Parameters outputPrefix string Fields Enabled public bool Enabled Field Value bool OutputPrefix public string OutputPrefix Field Value string PrevRootEntry public ProfileEntryRange PrevRootEntry Field Value ProfileEntryRange PrintSlowTicks public bool PrintSlowTicks Field Value bool PrintSlowTicksThreshold public int PrintSlowTicksThreshold Field Value int PrintSlowTicksThreshold_Offthreads public static int PrintSlowTicksThreshold_Offthreads Field Value int PrintSlowTicks_Offthreads public static bool PrintSlowTicks_Offthreads Field Value bool offThreadProfiles public static ConcurrentQueue<string> offThreadProfiles Field Value ConcurrentQueue<string> summary public string summary Field Value string Methods Begin(string, params object[]) Called by the game engine for each render frame or server tick public void Begin(string beginText = null, params object[] args) Parameters beginText string args object[] End() Called by the game engine at the end of the render frame or server tick public void End() Enter(string) public ProfileEntryRange Enter(string code) Parameters code string Returns ProfileEntryRange Leave() Same as Mark(string) when Enter(string) was called before. public void Leave() Mark(string) Use this method to add a frame profiling marker, will set or add the time ellapsed since the previous mark to the frame profiling reults. public void Mark(string code) Parameters code string Mark(string, object) Use this method like .Mark where the string has a second component (For performance, this avoids concatenating the strings unnecessarily, where the profiler is not enabled) public void Mark(string code, object param) Parameters code string param object OffThreadEnd() public void OffThreadEnd()"
  },
  "api/Vintagestory.API.Common.Func-2.html": {
    "href": "api/Vintagestory.API.Common.Func-2.html",
    "title": "Delegate Func<T1, TResult> | VintageStory API",
    "keywords": "Delegate Func<T1, TResult> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TResult Func<T1, TResult>(T1 t1) Parameters t1 T1 Returns TResult Type Parameters T1 TResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Func-3.html": {
    "href": "api/Vintagestory.API.Common.Func-3.html",
    "title": "Delegate Func<T1, T2, TResult> | VintageStory API",
    "keywords": "Delegate Func<T1, T2, TResult> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TResult Func<T1, T2, TResult>(T1 t1, T2 t2) Parameters t1 T1 t2 T2 Returns TResult Type Parameters T1 T2 TResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Func-4.html": {
    "href": "api/Vintagestory.API.Common.Func-4.html",
    "title": "Delegate Func<T1, T2, T3, TResult> | VintageStory API",
    "keywords": "Delegate Func<T1, T2, T3, TResult> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TResult Func<T1, T2, T3, TResult>(T1 t1, T2 t2, T3 t3) Parameters t1 T1 t2 T2 t3 T3 Returns TResult Type Parameters T1 T2 T3 TResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Func-5.html": {
    "href": "api/Vintagestory.API.Common.Func-5.html",
    "title": "Delegate Func<T1, T2, T3, T4, TResult> | VintageStory API",
    "keywords": "Delegate Func<T1, T2, T3, T4, TResult> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TResult Func<T1, T2, T3, T4, TResult>(T1 t1, T2 t2, T3 t3, T4 t4) Parameters t1 T1 t2 T2 t3 T3 t4 T4 Returns TResult Type Parameters T1 T2 T3 T4 TResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Func-8.html": {
    "href": "api/Vintagestory.API.Common.Func-8.html",
    "title": "Delegate Func<T1, T2, T3, T4, T5, T6, T7, TResult> | VintageStory API",
    "keywords": "Delegate Func<T1, T2, T3, T4, T5, T6, T7, TResult> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TResult Func<T1, T2, T3, T4, T5, T6, T7, TResult>(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6, T7 t7) Parameters t1 T1 t2 T2 t3 T3 t4 T4 t5 T5 t6 T6 t7 T7 Returns TResult Type Parameters T1 T2 T3 T4 T5 T6 T7 TResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.GeneratedStructure.html": {
    "href": "api/Vintagestory.API.Common.GeneratedStructure.html",
    "title": "Class GeneratedStructure | VintageStory API",
    "keywords": "Class GeneratedStructure Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [ProtoContract(ImplicitFields = ImplicitFields.AllPublic)] public class GeneratedStructure Inheritance object GeneratedStructure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code Code as defined in the WorldGenStructure object public string Code Field Value string Group Group as defined in the WorldGenStructure object public string Group Field Value string Location Block position of the structure public Cuboidi Location Field Value Cuboidi SuppressRivulets If this flag is set, rivulets will not generate inside the structure's bounding box public bool SuppressRivulets Field Value bool SuppressTreesAndShrubs If this flag is set, trees and shrubs will not generate inside the structure's bounding box public bool SuppressTreesAndShrubs Field Value bool"
  },
  "api/Vintagestory.API.Common.GetAutoPullFromSlotDelegate.html": {
    "href": "api/Vintagestory.API.Common.GetAutoPullFromSlotDelegate.html",
    "title": "Delegate GetAutoPullFromSlotDelegate | VintageStory API",
    "keywords": "Delegate GetAutoPullFromSlotDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate ItemSlot GetAutoPullFromSlotDelegate(BlockFacing atBlockFace) Parameters atBlockFace BlockFacing Returns ItemSlot Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.GetAutoPushIntoSlotDelegate.html": {
    "href": "api/Vintagestory.API.Common.GetAutoPushIntoSlotDelegate.html",
    "title": "Delegate GetAutoPushIntoSlotDelegate | VintageStory API",
    "keywords": "Delegate GetAutoPushIntoSlotDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate ItemSlot GetAutoPushIntoSlotDelegate(BlockFacing atBlockFace, ItemSlot fromSlot) Parameters atBlockFace BlockFacing fromSlot ItemSlot Returns ItemSlot Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.GetLatitudeDelegate.html": {
    "href": "api/Vintagestory.API.Common.GetLatitudeDelegate.html",
    "title": "Delegate GetLatitudeDelegate | VintageStory API",
    "keywords": "Delegate GetLatitudeDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate double GetLatitudeDelegate(double posZ) Parameters posZ double Returns double Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.GetMountableDelegate.html": {
    "href": "api/Vintagestory.API.Common.GetMountableDelegate.html",
    "title": "Delegate GetMountableDelegate | VintageStory API",
    "keywords": "Delegate GetMountableDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This method needs to find your mountable based on the tree attribute data, which you can write to in IMountable.MountableToTreeAttributes() For example if its an entity, you will want to store the entity id, then this method can simply contain return world.GetEntityById(tree.GetLong(\"entityId\")); public delegate IMountableSeat GetMountableDelegate(IWorldAccessor world, TreeAttribute tree) Parameters world IWorldAccessor tree TreeAttribute Returns IMountableSeat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.GetSuitabilityDelegate.html": {
    "href": "api/Vintagestory.API.Common.GetSuitabilityDelegate.html",
    "title": "Delegate GetSuitabilityDelegate | VintageStory API",
    "keywords": "Delegate GetSuitabilityDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate float GetSuitabilityDelegate(ItemSlot sourceSlot, ItemSlot targetSlow, bool isMerge) Parameters sourceSlot ItemSlot targetSlow ItemSlot isMerge bool Returns float Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.GridRecipe.html": {
    "href": "api/Vintagestory.API.Common.GridRecipe.html",
    "title": "Class GridRecipe | VintageStory API",
    "keywords": "Class GridRecipe Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a crafting recipe to be made on the crafting grid. Open in GitHub [DocumentAsJson] public class GridRecipe : IByteSerializable Inheritance object GridRecipe Implements IByteSerializable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples { \"ingredientPattern\": \"GS,S_\", \"ingredients\": { \"G\": { \"type\": \"item\", \"code\": \"drygrass\" }, \"S\": { \"type\": \"item\", \"code\": \"stick\" } }, \"width\": 2, \"height\": 2, \"output\": { \"type\": \"item\", \"code\": \"firestarter\" } } Fields AllowedVariants If '{code}' is used in ingredient code, allowed variants for this code should be specified in this map [DocumentAsJson] public Dictionary<string, string[]> AllowedVariants Field Value Dictionary<string, string[]> Attributes Optional attribute data that you can attach any data to. Useful for code mods, but also required when using liquid ingredients. See dough.json grid recipe file for example. [JsonConverter(typeof(JsonAttributesConverter))] [DocumentAsJson] public JsonObject Attributes Field Value JsonObject AverageDurability If true, the output item will have its durability averaged over the input items [DocumentAsJson] public bool AverageDurability Field Value bool Enabled If set to false, the recipe will never be loaded. If loaded, you can use this field to disable recipes during runtime. [DocumentAsJson] public bool Enabled Field Value bool Height Required grid height for crafting this recipe [DocumentAsJson] public int Height Field Value int IngredientPattern The pattern of the ingredient. Order for a 3x3 recipe: 1 2 3 4 5 6 7 8 9 Order for a 2x2 recipe: 1 2 3 4 Commas seperate each horizontal row, and an underscore ( _ ) marks a space as empty. Note: from game version 1.20.4, this becomes null on server-side after completion of recipe resolving during server start-up phase [DocumentAsJson] public string IngredientPattern Field Value string Ingredients The recipes ingredients in any order, including the code used in the ingredient pattern. Note: from game version 1.20.4, this becomes null on server-side after completion of recipe resolving during server start-up phase [DocumentAsJson] public Dictionary<string, CraftingRecipeIngredient> Ingredients Field Value Dictionary<string, CraftingRecipeIngredient> MergeAttributesFrom Attributes from thise ingredients will be merged into output itemstack [DocumentAsJson] public string[] MergeAttributesFrom Field Value string[] Name Name of the recipe. Used for logging, and some specific uses. Recipes for repairing objects must contain 'repair' in the name. [DocumentAsJson] public AssetLocation Name Field Value AssetLocation Output The resulting stack when the recipe is created. [DocumentAsJson] public CraftingRecipeIngredient Output Field Value CraftingRecipeIngredient RecipeGroup Info used by the handbook. By default, all recipes for an object will appear in a single preview. This allows you to split grid recipe previews into multiple. [DocumentAsJson] public int RecipeGroup Field Value int RequiresTrait If set, only players with given trait can use this recipe. See config/traits.json for a list of traits. [DocumentAsJson] public string RequiresTrait Field Value string Shapeless Whether the order of input items should be respected [DocumentAsJson] public bool Shapeless Field Value bool ShowInCreatedBy Used by the handbook. If false, will not appear in the \"Created by\" section [DocumentAsJson] public bool ShowInCreatedBy Field Value bool SkipVariants If '{code}' is used in ingredient code, skip variants for this code should be specified in this map [DocumentAsJson] public Dictionary<string, string[]> SkipVariants Field Value Dictionary<string, string[]> Width Required grid width for crafting this recipe [DocumentAsJson] public int Width Field Value int World protected IWorldAccessor World Field Value IWorldAccessor resolvedIngredients A set of ingredients with their pattern codes resolved into a single object. public GridRecipeIngredient[] resolvedIngredients Field Value GridRecipeIngredient[] Properties CopyAttributesFrom If set, it will copy over the itemstack attributes from given ingredient code [DocumentAsJson] public string CopyAttributesFrom { get; set; } Property Value string Methods Clone() Creates a deep copy public GridRecipe Clone() Returns GridRecipe ConsumeInput(IPlayer, ItemSlot[], int) Puts the crafted itemstack into the output slot and consumes the required items from the input slots public bool ConsumeInput(IPlayer byPlayer, ItemSlot[] inputSlots, int gridWidth) Parameters byPlayer IPlayer inputSlots ItemSlot[] gridWidth int Returns bool ConsumeInputAt(IPlayer, ItemSlot[], int, int, int) protected bool ConsumeInputAt(IPlayer byPlayer, ItemSlot[] inputSlots, int gridWidth, int colStart, int rowStart) Parameters byPlayer IPlayer inputSlots ItemSlot[] gridWidth int colStart int rowStart int Returns bool ConsumeInputShapeLess(IPlayer, ItemSlot[]) protected bool ConsumeInputShapeLess(IPlayer byPlayer, ItemSlot[] inputSlots) Parameters byPlayer IPlayer inputSlots ItemSlot[] Returns bool FreeRAMServer() public virtual void FreeRAMServer() FromBytes(BinaryReader, IWorldAccessor) Deserializes the recipe public void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GenerateOutputStack(ItemSlot[], ItemSlot) public void GenerateOutputStack(ItemSlot[] inputSlots, ItemSlot outputSlot) Parameters inputSlots ItemSlot[] outputSlot ItemSlot GetElementInGrid<T>(int, int, T[], int) public T GetElementInGrid<T>(int row, int col, T[] stacks, int gridwidth) Parameters row int col int stacks T[] gridwidth int Returns T Type Parameters T GetGridIndex<T>(int, int, T[], int) public int GetGridIndex<T>(int row, int col, T[] stacks, int gridwidth) Parameters row int col int stacks T[] gridwidth int Returns int Type Parameters T GetInputStackForPatternCode(string, ItemSlot[]) Returns only the first matching itemstack, there may be multiple public ItemStack GetInputStackForPatternCode(string patternCode, ItemSlot[] inputSlots) Parameters patternCode string inputSlots ItemSlot[] Returns ItemStack GetNameToCodeMapping(IWorldAccessor) Resolves Wildcards in the ingredients public Dictionary<string, string[]> GetNameToCodeMapping(IWorldAccessor world) Parameters world IWorldAccessor Returns Dictionary<string, string[]> GetNameToCodeMappingForAdvancedWildcard(IWorldAccessor, CraftingRecipeIngredient, Dictionary<string, string[]>) protected void GetNameToCodeMappingForAdvancedWildcard(IWorldAccessor world, CraftingRecipeIngredient ingredient, Dictionary<string, string[]> mappings) Parameters world IWorldAccessor ingredient CraftingRecipeIngredient mappings Dictionary<string, string[]> GetNameToCodeMappingForBasicWildcard(IWorldAccessor, CraftingRecipeIngredient, Dictionary<string, string[]>) protected void GetNameToCodeMappingForBasicWildcard(IWorldAccessor world, CraftingRecipeIngredient ingredient, Dictionary<string, string[]> mappings) Parameters world IWorldAccessor ingredient CraftingRecipeIngredient mappings Dictionary<string, string[]> IsAdvancedWildcard(string) protected static bool IsAdvancedWildcard(string code) Parameters code string Returns bool IsBasicWildcard(string) protected static bool IsBasicWildcard(string code) Parameters code string Returns bool IsRegex(string) protected static bool IsRegex(string code) Parameters code string Returns bool MatchCollectibleCode(AssetLocation, Regex, List<string>, Dictionary<string, List<string>>) protected void MatchCollectibleCode(AssetLocation code, Regex regex, List<string> variants, Dictionary<string, List<string>> variantCodes) Parameters code AssetLocation regex Regex variants List<string> variantCodes Dictionary<string, List<string>> Matches(IPlayer, ItemSlot[], int) Check if this recipe matches given ingredients public bool Matches(IPlayer forPlayer, ItemSlot[] ingredients, int gridWidth) Parameters forPlayer IPlayer The player for trait testing. Can be null. ingredients ItemSlot[] gridWidth int Returns bool MatchesAtPosition(int, int, ItemSlot[], int) public bool MatchesAtPosition(int colStart, int rowStart, ItemSlot[] inputSlots, int gridWidth) Parameters colStart int rowStart int inputSlots ItemSlot[] gridWidth int Returns bool MatchesShapeLess(ItemSlot[], int) protected bool MatchesShapeLess(ItemSlot[] suppliedSlots, int gridWidth) Parameters suppliedSlots ItemSlot[] gridWidth int Returns bool ReplaceVariantsToRegex(string, out List<string>) protected static string ReplaceVariantsToRegex(string value, out List<string> variants) Parameters value string variants List<string> Returns string ResolveIngredients(IWorldAccessor) Turns Ingredients into IItemStacks public bool ResolveIngredients(IWorldAccessor world) Parameters world IWorldAccessor Returns bool True on successful resolve ToBytes(BinaryWriter) Serialized the recipe public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter WildCardToRegex(string) protected static string WildCardToRegex(string value) Parameters value string Returns string"
  },
  "api/Vintagestory.API.Common.GridRecipeIngredient.html": {
    "href": "api/Vintagestory.API.Common.GridRecipeIngredient.html",
    "title": "Class GridRecipeIngredient | VintageStory API",
    "keywords": "Class GridRecipeIngredient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll An ingredient for a grid recipe. Open in GitHub public class GridRecipeIngredient : CraftingRecipeIngredient, IRecipeIngredient Inheritance object CraftingRecipeIngredient GridRecipeIngredient Implements IRecipeIngredient Inherited Members CraftingRecipeIngredient.Type CraftingRecipeIngredient.Code CraftingRecipeIngredient.Name CraftingRecipeIngredient.Quantity CraftingRecipeIngredient.Attributes CraftingRecipeIngredient.RecipeAttributes CraftingRecipeIngredient.IsTool CraftingRecipeIngredient.ToolDurabilityCost CraftingRecipeIngredient.AllowedVariants CraftingRecipeIngredient.SkipVariants CraftingRecipeIngredient.ReturnedStack CraftingRecipeIngredient.ResolvedItemstack CraftingRecipeIngredient.IsWildCard CraftingRecipeIngredient.IsBasicWildCard CraftingRecipeIngredient.IsAdvancedWildCard CraftingRecipeIngredient.IsRegex CraftingRecipeIngredient.Resolve(IWorldAccessor, string) CraftingRecipeIngredient.SatisfiesAsIngredient(ItemStack, bool) CraftingRecipeIngredient.Clone() CraftingRecipeIngredient.CloneTo<T>() CraftingRecipeIngredient.ToString() CraftingRecipeIngredient.FillPlaceHolder(string, string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields PatternCode The character used in the grid recipe pattern that matches this ingredient. Generated when the recipe is loaded. public string PatternCode Field Value string Methods FromBytes(BinaryReader, IWorldAccessor) public override void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor ToBytes(BinaryWriter) public override void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.GrindingProperties.html": {
    "href": "api/Vintagestory.API.Common.GrindingProperties.html",
    "title": "Class GrindingProperties | VintageStory API",
    "keywords": "Class GrindingProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of properties that allow an object to be ground in a quern. Open in GitHub [DocumentAsJson] public class GrindingProperties Inheritance object GrindingProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"grindingProps\": { \"groundStack\": { \"type\": \"item\", \"code\": \"bonemeal\" } }, Fields GroundStack If set, the collectible is grindable in a quern and this is the resulting itemstack once the grinding time is over. [DocumentAsJson] public JsonItemStack GroundStack Field Value JsonItemStack usedObsoleteNotation public bool usedObsoleteNotation Field Value bool Properties GrindedStack Obsolete. Please use GroundStack instead. [DocumentAsJson] [Obsolete(\"Use GroundStack instead\")] public JsonItemStack GrindedStack { get; set; } Property Value JsonItemStack Methods Clone() Makes a deep copy of the properties. public GrindingProperties Clone() Returns GrindingProperties"
  },
  "api/Vintagestory.API.Common.HeldSounds.html": {
    "href": "api/Vintagestory.API.Common.HeldSounds.html",
    "title": "Class HeldSounds | VintageStory API",
    "keywords": "Class HeldSounds Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Defines a set of sounds for a collectible object. Open in GitHub [DocumentAsJson] public class HeldSounds Inheritance object HeldSounds Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"heldSoundsbyType\": { \"*-lit-*\": { \"idle\": \"held/torch-idle\", \"equip\": \"held/torch-equip\", \"unequip\": \"held/torch-unequip\", \"attack\": \"held/torch-attack\" } }, Fields Attack The path to a sound played when this item is used to attack. [DocumentAsJson] public AssetLocation Attack Field Value AssetLocation Equip The path to a sound played when this item is equipped. [DocumentAsJson] public AssetLocation Equip Field Value AssetLocation Idle The path to a sound played when this item is being held. [DocumentAsJson] public AssetLocation Idle Field Value AssetLocation InvPickUpDefault public static AssetLocation InvPickUpDefault Field Value AssetLocation InvPickup The path to a sound played when this item is picked up in the inventory using the mouse. [DocumentAsJson] public AssetLocation InvPickup Field Value AssetLocation InvPlace The path to a sound played when this item is placed in the inventory using the mouse. [DocumentAsJson] public AssetLocation InvPlace Field Value AssetLocation InvPlaceDefault public static AssetLocation InvPlaceDefault Field Value AssetLocation Unequip The path to a sound played when this item is unequipped. [DocumentAsJson] public AssetLocation Unequip Field Value AssetLocation Methods Clone() Clones the held sounds. public HeldSounds Clone() Returns HeldSounds OnDeserializedMethod(StreamingContext) [OnDeserialized] public void OnDeserializedMethod(StreamingContext context) Parameters context StreamingContext"
  },
  "api/Vintagestory.API.Common.HemisphereDelegate.html": {
    "href": "api/Vintagestory.API.Common.HemisphereDelegate.html",
    "title": "Delegate HemisphereDelegate | VintageStory API",
    "keywords": "Delegate HemisphereDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate EnumHemisphere HemisphereDelegate(double posX, double posZ) Parameters posX double posZ double Returns EnumHemisphere Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.HistoryState.html": {
    "href": "api/Vintagestory.API.Common.HistoryState.html",
    "title": "Class HistoryState | VintageStory API",
    "keywords": "Class HistoryState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class HistoryState Inheritance object HistoryState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlockUpdates public BlockUpdate[] BlockUpdates Field Value BlockUpdate[] EntityUpdates public List<EntityUpdate> EntityUpdates Field Value List<EntityUpdate> NewEndMarker public BlockPos NewEndMarker Field Value BlockPos NewEndMarkerExact public Vec3d NewEndMarkerExact Field Value Vec3d NewStartMarker public BlockPos NewStartMarker Field Value BlockPos NewStartMarkerExact public Vec3d NewStartMarkerExact Field Value Vec3d OldEndMarker public BlockPos OldEndMarker Field Value BlockPos OldEndMarkerExact public Vec3d OldEndMarkerExact Field Value Vec3d OldStartMarker public BlockPos OldStartMarker Field Value BlockPos OldStartMarkerExact public Vec3d OldStartMarkerExact Field Value Vec3d Methods Empty() public static HistoryState Empty() Returns HistoryState"
  },
  "api/Vintagestory.API.Common.HitEntityDelegate.html": {
    "href": "api/Vintagestory.API.Common.HitEntityDelegate.html",
    "title": "Delegate HitEntityDelegate | VintageStory API",
    "keywords": "Delegate HitEntityDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void HitEntityDelegate(IServerPlayer byPlayer, int chunkx, int chunky, int chunkz, int id) Parameters byPlayer IServerPlayer chunkx int chunky int chunkz int id int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.IAmbientManager.html": {
    "href": "api/Vintagestory.API.Common.IAmbientManager.html",
    "title": "Interface IAmbientManager | VintageStory API",
    "keywords": "Interface IAmbientManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is the system that manages the worlds ambient settings, such as fog color/density and clouds. The ambient manager basically blends ambientmodifiers on top of each other to generate the final ambient values. Blending is in order how the modifiers are held in CurrentModifiers in the likes of float weight = modifier.FogMin.Weight; BlendedFogMin = w * modifier.FogMin.Value + (1 - w) * BlendedFogMin; public interface IAmbientManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Base The base value or background ambient to overlay everything onto AmbientModifier Base { get; } Property Value AmbientModifier BlendedAmbientColor The blended ambient color, calculated every frame from the list of modifiers Vec3f BlendedAmbientColor { get; } Property Value Vec3f BlendedCloudBrightness The blended cloud brightness, calculated every frame from the list of modifiers float BlendedCloudBrightness { get; } Property Value float BlendedCloudDensity The blended cloud density, calculated every frame from the list of modifiers float BlendedCloudDensity { get; } Property Value float BlendedFlatFogDensity The blended flat fog density, calculated every frame from the list of modifiers float BlendedFlatFogDensity { get; set; } Property Value float BlendedFlatFogYOffset The blended flat fog y-offset, calculated every frame from the list of modifiers float BlendedFlatFogYOffset { get; set; } Property Value float BlendedFlatFogYPosForShader BlendedFlatFogYPos + SeaLevel - MainCamera.TargetPosition.Y float BlendedFlatFogYPosForShader { get; set; } Property Value float BlendedFogBrightness float BlendedFogBrightness { get; } Property Value float BlendedFogColor The blended fog color, calculated every frame from the list of modifiers Vec4f BlendedFogColor { get; } Property Value Vec4f BlendedFogDensity The blended fog density, calculated every frame from the list of modifiers float BlendedFogDensity { get; } Property Value float BlendedFogMin The blended fog min, calculated every frame from the list of modifiers float BlendedFogMin { get; } Property Value float BlendedSceneBrightness float BlendedSceneBrightness { get; } Property Value float CurrentModifiers The list of modifiers that result in the blended values OrderedDictionary<string, AmbientModifier> CurrentModifiers { get; } Property Value OrderedDictionary<string, AmbientModifier> Methods UpdateAmbient(float) The update loop for this manager. Runs every frame. void UpdateAmbient(float dt) Parameters dt float the Delta or change in Time"
  },
  "api/Vintagestory.API.Common.IAnimationManager.html": {
    "href": "api/Vintagestory.API.Common.IAnimationManager.html",
    "title": "Interface IAnimationManager | VintageStory API",
    "keywords": "Interface IAnimationManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Everything needed for allowing animations the Entity class holds a reference to an IAnimator. Currently implemented by ServerAnimator public interface IAnimationManager : IDisposable Inherited Members IDisposable.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) AnimationCache.LoadAnimatorCached(IAnimationManager, ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) Properties ActiveAnimationsByAnimCode Gets the AnimationMetaData for the target action. Dictionary<string, AnimationMetaData> ActiveAnimationsByAnimCode { get; } Property Value Dictionary<string, AnimationMetaData> AdjustCollisionBoxToAnimation bool AdjustCollisionBoxToAnimation { get; } Property Value bool AnimationsDirty Whether or not the animation is dirty. bool AnimationsDirty { get; set; } Property Value bool Animator The animator for this animation manager IAnimator Animator { get; set; } Property Value IAnimator HeadController The head controller for this manager. EntityHeadController HeadController { get; set; } Property Value EntityHeadController Methods CopyOverAnimStates(RunningAnimation[], IAnimator) void CopyOverAnimStates(RunningAnimation[] copyOverAnims, IAnimator animator) Parameters copyOverAnims RunningAnimation[] animator IAnimator FromAttributes(ITreeAttribute, string) Additional attributes applied to the animation void FromAttributes(ITreeAttribute tree, string version) Parameters tree ITreeAttribute version string GetAnimationState(string) RunningAnimation GetAnimationState(string anim) Parameters anim string Returns RunningAnimation Init(ICoreAPI, Entity) Initialization call for the animation manager. void Init(ICoreAPI api, Entity entity) Parameters api ICoreAPI The core API entity Entity The entity being animated. IsAnimationActive(params string[]) bool IsAnimationActive(params string[] anims) Parameters anims string[] Returns bool LoadAnimator(ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) IAnimator LoadAnimator(ICoreAPI api, Entity entity, Shape entityShape, RunningAnimation[] copyOverAnims, bool requirePosesOnServer, params string[] requireJointsForElements) Parameters api ICoreAPI entity Entity entityShape Shape copyOverAnims RunningAnimation[] requirePosesOnServer bool requireJointsForElements string[] Returns IAnimator OnClientFrame(float) void OnClientFrame(float dt) Parameters dt float OnReceivedServerAnimations(int[], int, float[]) The event fired when the client recieves the server animations void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] all of active animations activeAnimationsCount int the number of the animations activeAnimationSpeeds float[] The speed of those animations. OnServerTick(float) void OnServerTick(float dt) Parameters dt float RegisterFrameCallback(AnimFrameCallback) void RegisterFrameCallback(AnimFrameCallback trigger) Parameters trigger AnimFrameCallback ResetAnimation(string) If given animation is running, will set its progress to the first animation frame void ResetAnimation(string beginholdAnim) Parameters beginholdAnim string ShouldPlaySound(AnimationSound) void ShouldPlaySound(AnimationSound sound) Parameters sound AnimationSound StartAnimation(string) Starts an animation based on JSON code. bool StartAnimation(string configCode) Parameters configCode string The json code. Returns bool StartAnimation(AnimationMetaData) Starts an animation based on the AnimationMetaData bool StartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool StopAnimation(string) Stops the animation. void StopAnimation(string code) Parameters code string The code to stop the animation on ToAttributes(ITreeAttribute, bool) Additional attributes applied from the animation void ToAttributes(ITreeAttribute tree, bool forClient) Parameters tree ITreeAttribute forClient bool TriggerAnimationStopped(string) The event fired when the animation is stopped. void TriggerAnimationStopped(string code) Parameters code string The code that the animation stopped with. TryStartAnimation(AnimationMetaData) Starts an animation based on the AnimationMetaData, if it exists; returns false if it does not exist (or if unable to start it, e.g. because it is already playing) bool TryStartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool Events OnAnimationReceived event StartAnimationDelegate OnAnimationReceived Event Type StartAnimationDelegate OnAnimationStopped event Action<string> OnAnimationStopped Event Type Action<string> OnStartAnimation event StartAnimationDelegate OnStartAnimation Event Type StartAnimationDelegate"
  },
  "api/Vintagestory.API.Common.IAnimator.html": {
    "href": "api/Vintagestory.API.Common.IAnimator.html",
    "title": "Interface IAnimator | VintageStory API",
    "keywords": "Interface IAnimator Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IAnimator Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ActiveAnimationCount Amount of currently active animations int ActiveAnimationCount { get; } Property Value int Animations Holds data over all animations. This list always contains all animations of the creature. You have to check yourself which of them are active RunningAnimation[] Animations { get; } Property Value RunningAnimation[] CalculateMatrices Whether or not to calculate the animation matrices, required for GetAttachmentPointPose() to deliver correct values. Default on on the client, server side only on when the creature is dead bool CalculateMatrices { get; set; } Property Value bool Matrices The 30 pose transformation matrices that go to the shader float[] Matrices { get; } Property Value float[] MaxJointId int MaxJointId { get; } Property Value int Methods DumpCurrentState() string DumpCurrentState() Returns string GetAnimationState(string) RunningAnimation GetAnimationState(string code) Parameters code string Returns RunningAnimation GetAttachmentPointPose(string) Gets the attachment point pose. AttachmentPointAndPose GetAttachmentPointPose(string code) Parameters code string Returns AttachmentPointAndPose GetPosebyName(string, StringComparison) ElementPose GetPosebyName(string name, StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase) Parameters name string stringComparison StringComparison Returns ElementPose OnFrame(Dictionary<string, AnimationMetaData>, float) The event fired on each frame. void OnFrame(Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode, float dt) Parameters activeAnimationsByAnimCode Dictionary<string, AnimationMetaData> dt float"
  },
  "api/Vintagestory.API.Common.IAsset.html": {
    "href": "api/Vintagestory.API.Common.IAsset.html",
    "title": "Interface IAsset | VintageStory API",
    "keywords": "Interface IAsset Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a loaded asset from the assets folder public interface IAsset Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Data The file contents in binary format byte[] Data { get; set; } Property Value byte[] IsPatched Set to true if the asset has been patched by JsonPatchLoader - if so, we don't want to unload it bool IsPatched { get; set; } Property Value bool Location The AssetLocation of the asset. AssetLocation Location { get; } Property Value AssetLocation Name The assets Filename string Name { get; } Property Value string Origin The origin informaton of the asset. IAssetOrigin Origin { get; set; } Property Value IAssetOrigin Methods IsLoaded() Whether or not the asset is currently loaded. bool IsLoaded() Returns bool ToBitmap(ICoreClientAPI) Turns the binary data into a Bitmap. Use for .png images. Does not work on other image formats. BitmapRef ToBitmap(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns BitmapRef ToObject<T>(JsonSerializerSettings) If the asset is a json file you can use this convenience method to turn it into an object T ToObject<T>(JsonSerializerSettings settings = null) Parameters settings JsonSerializerSettings Settings for the Json Serializer. Returns T Type Parameters T Attempts to convert the asset into the given type. ToText() Turns the binary data into a UTF-8 string. Use for text files. string ToText() Returns string"
  },
  "api/Vintagestory.API.Common.IAssetManager.html": {
    "href": "api/Vintagestory.API.Common.IAssetManager.html",
    "title": "Interface IAssetManager | VintageStory API",
    "keywords": "Interface IAssetManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Takes care loading, reloading and managing all files inside the assets folder. All asset names and paths are always converted to lower case. public interface IAssetManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AllAssets All assets found in the assets folder Dictionary<AssetLocation, IAsset> AllAssets { get; } Property Value Dictionary<AssetLocation, IAsset> Origins Returns all origins in the priority order. Highest (First) to Lowest (Last) List<IAssetOrigin> Origins { get; } Property Value List<IAssetOrigin> Methods Add(AssetLocation, IAsset) Adds a runtime asset to the game, curently used by ModCompatiblityUtil. Allows you do add an asset found at path but loaded from path asset.Path. void Add(AssetLocation path, IAsset asset) Parameters path AssetLocation asset IAsset AddModOrigin(string, string) void AddModOrigin(string domain, string fullPath) Parameters domain string fullPath string AddModOrigin(string, string, string) void AddModOrigin(string domain, string fullPath, string pathForReservedCharsCheck) Parameters domain string fullPath string pathForReservedCharsCheck string AddPathOrigin(string, string) [Obsolete(\"Use AddModOrigin\")] void AddPathOrigin(string domain, string fullPath) Parameters domain string fullPath string Exists(AssetLocation) Returns true if given asset exists in the list of loaded assets bool Exists(AssetLocation location) Parameters location AssetLocation Returns bool Get(AssetLocation) Retrieves an asset from given path within the assets folder. Throws an exception when the asset does not exist. Remember to use lower case paths. IAsset Get(AssetLocation Location) Parameters Location AssetLocation Returns IAsset GetLocations(string, string) Returns all asset locations that begins with given path and domain. If no domain is specified, all domains will be searched. The returned list is considered unsorted. List<AssetLocation> GetLocations(string pathBegins, string domain = null) Parameters pathBegins string domain string Returns List<AssetLocation> GetMany(string, string, bool) Returns all assets inside given domain with the given path. If no domain is specified, all domains will be searched. The returned list is considered unsorted. List<IAsset> GetMany(string pathBegins, string domain = null, bool loadAsset = true) Parameters pathBegins string domain string loadAsset bool Whether it should load the contents of this asset Returns List<IAsset> GetManyInCategory(string, string, string, bool) Returns all assets inside given category with the given path. If no domain is specified, all domains will be searched. The returned list is considered unsorted. List<IAsset> GetManyInCategory(string categoryCode, string pathBegins, string domain = null, bool loadAsset = true) Parameters categoryCode string See class AssetCategory pathBegins string domain string loadAsset bool Returns List<IAsset> GetMany<T>(ILogger, string, string) Searches for all assets in given basepath and uses Newtonsoft.Json to automatically turn them into objects. Will log an error to given ILogger if it can't parse the json file and continue with the next asset. Remember to use lower case paths. If no domain is specified, all domains will be searched. The returned list is considered unsorted. Dictionary<AssetLocation, T> GetMany<T>(ILogger logger, string pathBegins, string domain = null) Parameters logger ILogger pathBegins string domain string Returns Dictionary<AssetLocation, T> Type Parameters T Get<T>(AssetLocation) Retrieves an asset from given path within the assets folder and uses JSON.NET to automatically turn them into objects. Throws an exception when the asset does not exist or the conversion failed. Remember to use lower case paths. T Get<T>(AssetLocation location) Parameters location AssetLocation Returns T Type Parameters T Reload(AssetCategory) Reloads all assets in given base location path. It returns the amount of the found locations. int Reload(AssetCategory category) Parameters category AssetCategory Returns int Reload(AssetLocation) Reloads all assets in given base location path. It returns the amount of the found locations. int Reload(AssetLocation baseLocation) Parameters baseLocation AssetLocation Returns int TryGet(AssetLocation, bool) Retrieves an asset from given path within the assets folder. Returns null when the asset does not exist. Remember to use lower case paths. Mods must not call TryGet to get assets before AssetsLoaded stage in a ModSystem - do not load assets in the Start() method! (Or if you absolutely have to load assets in Start(), use IAssetManager.Get(), but it will throw an exception for anything except a base asset.) IAsset TryGet(AssetLocation Location, bool loadAsset = true) Parameters Location AssetLocation loadAsset bool Returns IAsset"
  },
  "api/Vintagestory.API.Common.IAssetOrigin.html": {
    "href": "api/Vintagestory.API.Common.IAssetOrigin.html",
    "title": "Interface IAssetOrigin | VintageStory API",
    "keywords": "Interface IAssetOrigin Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IAssetOrigin Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties OriginPath string OriginPath { get; } Property Value string Methods GetAssets(AssetCategory, bool) Returns all assets of the given category which can be found in this origin List<IAsset> GetAssets(AssetCategory category, bool shouldLoad = true) Parameters category AssetCategory shouldLoad bool Returns List<IAsset> GetAssets(AssetLocation, bool) Returns all assets of the given base location path which can be found in this origin List<IAsset> GetAssets(AssetLocation baseLocation, bool shouldLoad = true) Parameters baseLocation AssetLocation shouldLoad bool Returns List<IAsset> IsAllowedToAffectGameplay() Resource packs are not allowed to affect gameplay bool IsAllowedToAffectGameplay() Returns bool LoadAsset(IAsset) Loads the asset into memeory. void LoadAsset(IAsset asset) Parameters asset IAsset The asset to be loaded TryLoadAsset(IAsset) Attempts to load the asset. Returns false if it fails. bool TryLoadAsset(IAsset asset) Parameters asset IAsset The asset to be loaded. Returns bool"
  },
  "api/Vintagestory.API.Common.IBitmap.html": {
    "href": "api/Vintagestory.API.Common.IBitmap.html",
    "title": "Interface IBitmap | VintageStory API",
    "keywords": "Interface IBitmap Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IBitmap Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Height int Height { get; } Property Value int Pixels int[] Pixels { get; } Property Value int[] Width int Width { get; } Property Value int Methods GetPixel(int, int) SKColor GetPixel(int x, int y) Parameters x int y int Returns SKColor GetPixelRel(float, float) SKColor GetPixelRel(float x, float y) Parameters x float y float Returns SKColor GetPixelsTransformed(int, int) int[] GetPixelsTransformed(int rot = 0, int alpha = 100) Parameters rot int alpha int Returns int[]"
  },
  "api/Vintagestory.API.Common.IBlockAccessor.html": {
    "href": "api/Vintagestory.API.Common.IBlockAccessor.html",
    "title": "Interface IBlockAccessor | VintageStory API",
    "keywords": "Interface IBlockAccessor Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Provides read/write access to the blocks of a world public interface IBlockAccessor Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Properties ChunkSize Width, Length and Height of a chunk [Obsolete(\"Use GlobalConstants.ChunkSize instead. Fetching a property in inner-loop code is needlessly inefficient!\")] int ChunkSize { get; } Property Value int MapSize Size of the world in blocks Vec3i MapSize { get; } Property Value Vec3i MapSizeX X Size of the world in blocks int MapSizeX { get; } Property Value int MapSizeY Y Size of the world in blocks int MapSizeY { get; } Property Value int MapSizeZ Z Size of the world in blocks int MapSizeZ { get; } Property Value int RegionMapSizeX int RegionMapSizeX { get; } Property Value int RegionMapSizeY int RegionMapSizeY { get; } Property Value int RegionMapSizeZ int RegionMapSizeZ { get; } Property Value int RegionSize Width and Length of a region in blocks int RegionSize { get; } Property Value int UpdateSnowAccumMap Whether to update the snow accum map on a SetBlock() bool UpdateSnowAccumMap { get; set; } Property Value bool Methods BreakBlock(BlockPos, IPlayer, float) Removes the block at given position and calls Block.GetDrops(), Block.OnBreakBlock() and Block.OnNeighbourBlockChange() for all neighbours. Drops the items that are return from Block.GetDrops() void BreakBlock(BlockPos pos, IPlayer byPlayer, float dropQuantityMultiplier = 1) Parameters pos BlockPos byPlayer IPlayer dropQuantityMultiplier float BreakDecor(BlockPos, BlockFacing, int?) Removes all decors at given position, drops items if set bool BreakDecor(BlockPos pos, BlockFacing side = null, int? decorIndex = null) Parameters pos BlockPos side BlockFacing If not null, breaks all the decor on given block face, otherwise the decor blocks on all sides are removed decorIndex int? If not null breaks only this part of the decor for give face. You can get this value via ToDecorIndex() or via constructor DecorBits(BlockFacing) or DecorBits(BlockFacing, int, int, int) Returns bool True if a decor was removed Commit() Calling this method has no effect in normal block acessors except for: Bulk update block accessor: Sets all blocks, relight all affected one chunks in one go and send blockupdates to clients in a packed format. World gen block accessor: To Recalculate the heightmap in of all updated blocks in one go Revertable block accessor: Same as bulk update block accessor plus stores a new history state. List<BlockUpdate> Commit() Returns List<BlockUpdate> List of changed blocks CreateMiniDimension(Vec3d) Used by World Edit to create previews, ships etc. IMiniDimension CreateMiniDimension(Vec3d position) Parameters position Vec3d Returns IMiniDimension DamageBlock(BlockPos, BlockFacing, float) Client Side: Will render the block breaking decal on that block. If the remaining block resistance reaches 0, will call break block Server Side: Broadcasts a package to all nearby clients to update the block damage of this block for rendering the decal (note: there is currently no server side list of current block damages, these are client side only at the moemnt) void DamageBlock(BlockPos pos, BlockFacing facing, float damage) Parameters pos BlockPos facing BlockFacing damage float ExchangeBlock(int, BlockPos) Set a block at the given position without calling OnBlockRemoved or OnBlockPlaced, which prevents any block entity from being removed or placed. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave. Should only be used if you want to prevent any block entity deletion at this position. This also, for example, does not change a block's reinforcement level, useful for openable blocks such as doors, gates etc void ExchangeBlock(int blockId, BlockPos pos) Parameters blockId int pos BlockPos GetBlock(int) Get the Block object of a certain block ID. Returns null when not found. Block GetBlock(int blockId) Parameters blockId int The block ID to search for Returns Block BlockType object GetBlock(int, int, int) Get the block type of the block at the given world coordinate. Will never return null. For air blocks or invalid coordinates you'll get a block instance with block code \"air\" and id 0 Same as GetBlock(BlockPos, int) with BlockLayersAccess.Default as layer [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] Block GetBlock(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns Block GetBlock(int, int, int, int) Get the block type of the block at the given world coordinate. Will never return null. For airblocks or invalid coordinates you'll get a block instance with block code \"air\" and id 0 Reads the block from the specified layer(s), see BlockLayersAccess documentation for details. If this must be used even though it's deprecated, please consider using .GetBlockRaw() instead where calling code is explicitly dimension-aware [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] Block GetBlock(int x, int y, int z, int layer) Parameters x int x coordinate y int y coordinate z int z coordinate layer int blocks layer e.g. solid, fluid etc. Returns Block ID of the block at the given position GetBlock(AssetLocation) Get the Block object of for given block code. Returns null when not found. Block GetBlock(AssetLocation code) Parameters code AssetLocation Returns Block GetBlock(BlockPos) Get the block type of the block at the given world coordinate, dimension aware. Will never return null. For air blocks or invalid coordinates you'll get a block instance with block code \"air\" and id 0 Same as GetBlock(BlockPos, int) with BlockLayersAccess.Default as layer Block GetBlock(BlockPos pos) Parameters pos BlockPos Returns Block GetBlock(BlockPos, int) Get block type at given world coordinate, dimension aware. Will never return null. For airblocks or invalid coordinates you'll get a block instance with block code \"air\" and id 0 Reads the block from the specified layer(s), see BlockLayersAccess documentation for details. Block GetBlock(BlockPos pos, int layer) Parameters pos BlockPos layer int blocks layer e.g. solid, fluid etc. Returns Block GetBlockEntity(BlockPos) Retrieve the block entity at given position. Returns null if there is no block entity at this position BlockEntity GetBlockEntity(BlockPos position) Parameters position BlockPos Returns BlockEntity GetBlockEntity<T>(BlockPos) Retrieve the block entity at given position. Returns null if there is no block entity at this position T GetBlockEntity<T>(BlockPos position) where T : BlockEntity Parameters position BlockPos Returns T Type Parameters T GetBlockId(int, int, int) Get the block id of the block at the given world coordinate [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] int GetBlockId(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns int GetBlockId(BlockPos) Get the block id of the block at the given world coordinate int GetBlockId(BlockPos pos) Parameters pos BlockPos Returns int GetBlockOrNull(int, int, int, int) Get the block type of the block at the given world coordinate. For invalid or unloaded coordinates this method returns null. [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] Block GetBlockOrNull(int x, int y, int z, int layer = 4) Parameters x int x coordinate y int y coordinate z int z coordinate layer int Block layer Returns Block ID of the block at the given position GetBlockRaw(int, int, int, int) Direct raw coordinate access to blocks. PLEASE NOTE: The caller has to ensure dimension awareness (i.e. pos.InternalY when using BlockPos) Gets the block type of the block at the given world coordinate. Block GetBlockRaw(int x, int y, int z, int layer = 0) Parameters x int x coordinate y int y coordinate z int z coordinate layer int The block layer to retrieve from. See also BlockLayersAccess Returns Block Never null. For unpopulated locations or invalid coordinates you'll get a block instance with block code \"air\" and id 0 GetChunk(int, int, int) Retrieve chunk at given chunk position (= divide block position by chunk size) For dimension awareness, chunkY would need to be based on BlockPos.InternalY / chunksize or else explicitly include the dimensionId multiplied by GlobalConstants.DimensionSizeInChunks IWorldChunk GetChunk(int chunkX, int chunkY, int chunkZ) Parameters chunkX int chunkY int chunkZ int Returns IWorldChunk GetChunk(long) Retrieve chunk at given chunk position, returns null if chunk is not loaded IWorldChunk GetChunk(long chunkIndex3D) Parameters chunkIndex3D long Returns IWorldChunk GetChunkAtBlockPos(int, int, int) Retrieve chunk at given block position, returns null if chunk is not loaded [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] IWorldChunk GetChunkAtBlockPos(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns IWorldChunk GetChunkAtBlockPos(BlockPos) Retrieve chunk at given block position, returns null if chunk is not loaded IWorldChunk GetChunkAtBlockPos(BlockPos pos) Parameters pos BlockPos Returns IWorldChunk GetClimateAt(BlockPos, int) Fast shortcut method for the clound renderer ClimateCondition GetClimateAt(BlockPos pos, int climate) Parameters pos BlockPos climate int Returns ClimateCondition GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) Returns the position's climate conditions at specified date, making use of previously obtained worldgen climate conditions ClimateCondition GetClimateAt(BlockPos pos, ClimateCondition baseClimate, EnumGetClimateMode mode, double totalDays) Parameters pos BlockPos baseClimate ClimateCondition mode EnumGetClimateMode totalDays double Returns ClimateCondition GetClimateAt(BlockPos, EnumGetClimateMode, double) Returns the position's current climate conditions ClimateCondition GetClimateAt(BlockPos pos, EnumGetClimateMode mode = EnumGetClimateMode.NowValues, double totalDays = 0) Parameters pos BlockPos mode EnumGetClimateMode WorldGenValues = values as determined by the worldgenerator, NowValues = additionally modified to take season, day/night and hemisphere into account totalDays double When mode == ForSuppliedDateValues then supply here the date. Not used param otherwise Returns ClimateCondition GetDecor(BlockPos, int) Retrieves a single decor at given position Block GetDecor(BlockPos pos, int decorIndex) Parameters pos BlockPos decorIndex int You can get this value via ToDecorIndex() or via constructor DecorBits(BlockFacing) or DecorBits(BlockFacing, int, int, int) Returns Block GetDecors(BlockPos) Get a list of all decors at this position [Obsolete(\"Use Dictionary<int, Block> GetSubDecors(BlockPos position)\")] Block[] GetDecors(BlockPos position) Parameters position BlockPos Returns Block[] null if this block has no decors. Otherwise a 6 element long list of decor blocks, any of which may be null if not set GetDistanceToRainFall(BlockPos, int, int) Returns a number of how many blocks away there is rain fall. Does a cheap 2D bfs up to x blocks away. Returns 99 if none was found within given blocks int GetDistanceToRainFall(BlockPos pos, int horziontalSearchWidth = 4, int verticalSearchWidth = 1) Parameters pos BlockPos horziontalSearchWidth int Horizontal search distance, 4 default verticalSearchWidth int Vertical search distance, 1 default Returns int GetLightLevel(int, int, int, EnumLightLevelType) Returns the light level (0..32) at given position. If the chunk at that position is not loaded this method will return the default sunlight value Note this is not currently dimensionally aware int GetLightLevel(int x, int y, int z, EnumLightLevelType type) Parameters x int y int z int type EnumLightLevelType Returns int GetLightLevel(BlockPos, EnumLightLevelType) Returns the light level (0..32) at given position. If the chunk at that position is not loaded this method will return the default sunlight value int GetLightLevel(BlockPos pos, EnumLightLevelType type) Parameters pos BlockPos type EnumLightLevelType Returns int GetLightRGBs(int, int, int) Returns the light values at given position. XYZ component = block light rgb, W component = sun light brightness Note this is not currently dimensionally aware Vec4f GetLightRGBs(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns Vec4f GetLightRGBs(BlockPos) Returns the light values at given position. XYZ component = block light rgb, W component = sun light brightness Vec4f GetLightRGBs(BlockPos pos) Parameters pos BlockPos Returns Vec4f GetLightRGBsAsInt(int, int, int) Returns the light values at given position. bit 0-23: block rgb light, bit 24-31: sun light brightness int GetLightRGBsAsInt(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns int GetMapChunk(int, int) Returns the map chunk at given chunk position IMapChunk GetMapChunk(int chunkX, int chunkZ) Parameters chunkX int chunkZ int Returns IMapChunk GetMapChunk(Vec2i) Returns the map chunk at given chunk position IMapChunk GetMapChunk(Vec2i chunkPos) Parameters chunkPos Vec2i Returns IMapChunk GetMapChunkAtBlockPos(BlockPos) Returns the map chunk at given block position IMapChunk GetMapChunkAtBlockPos(BlockPos pos) Parameters pos BlockPos Returns IMapChunk GetMapRegion(int, int) Retrieves a map region at given region position, returns null if region is not loaded IMapRegion GetMapRegion(int regionX, int regionZ) Parameters regionX int regionZ int Returns IMapRegion GetMostSolidBlock(int, int, int) Same as GetBlock(int, int, int, int) with BlockLayersAccess.MostSolid as layer [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] Block GetMostSolidBlock(int x, int y, int z) Parameters x int y int z int Returns Block GetMostSolidBlock(BlockPos) Same as GetBlock(BlockPos, int) with BlockLayersAccess.MostSolid as layer Block GetMostSolidBlock(BlockPos pos) Parameters pos BlockPos Returns Block GetRainMapHeightAt(int, int) Returns the topmost non-rain-permeable position at given x/z coordinate. This map is always updated after placing/removing blocks Note this is meaningless in dimensions other than the normal world int GetRainMapHeightAt(int posX, int posZ) Parameters posX int posZ int Returns int GetRainMapHeightAt(BlockPos) Returns the topmost non-rain-permeable position at given x/z coordinate. This map is always updated after placing/removing blocks Note this is meaningless in dimensions other than the normal world int GetRainMapHeightAt(BlockPos pos) Parameters pos BlockPos Returns int GetSubDecors(BlockPos) Get a list of all decors at this position Dictionary<int, Block> GetSubDecors(BlockPos position) Parameters position BlockPos Returns Dictionary<int, Block> null if this block position has no decors. Otherwise, a Dictionary with the index being the faceAndSubposition (subposition used for cave art etc.), see DecorBits GetTerrainMapheightAt(BlockPos) Returns the topmost solid surface position at given x/z coordinate as it was during world generation. This map is not updated after placing/removing blocks Note this is meaningless in dimensions other than the normal world int GetTerrainMapheightAt(BlockPos pos) Parameters pos BlockPos Returns int GetWindSpeedAt(BlockPos) Retrieves the wind speed for given position Vec3d GetWindSpeedAt(BlockPos pos) Parameters pos BlockPos Returns Vec3d GetWindSpeedAt(Vec3d) Retrieves the wind speed for given position Vec3d GetWindSpeedAt(Vec3d pos) Parameters pos Vec3d Returns Vec3d IsNotTraversable(double, double, double) Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks) [Obsolete(\"Better to use dimension-aware version\")] bool IsNotTraversable(double x, double y, double z) Parameters x double y double z double Returns bool IsNotTraversable(double, double, double, int) Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks) Dimension-aware version bool IsNotTraversable(double x, double y, double z, int dim) Parameters x double y double z double dim int Returns bool IsNotTraversable(BlockPos) Checks if this position can be traversed by a normal player (returns false for outside map or not yet loaded chunks) bool IsNotTraversable(BlockPos pos) Parameters pos BlockPos Returns bool IsSideSolid(int, int, int, BlockFacing) Tests whether a side at the specified position is solid - testing both fluids layer (which could be ice) and solid blocks layer bool IsSideSolid(int x, int y, int z, BlockFacing facing) Parameters x int y int z int facing BlockFacing Returns bool IsValidPos(int, int, int) Checks if the position is inside the maps boundaries [Obsolete(\"Please use BlockPos version instead, for dimension awareness\")] bool IsValidPos(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns bool IsValidPos(BlockPos) Checks if the position is inside the maps boundaries bool IsValidPos(BlockPos pos) Parameters pos BlockPos Returns bool MarkAbsorptionChanged(int, int, BlockPos) Used by the chisel block when enough chiseled have been removed and the blocks light absorption changes as a result of that void MarkAbsorptionChanged(int oldAbsorption, int newAbsorption, BlockPos pos) Parameters oldAbsorption int newAbsorption int pos BlockPos MarkBlockDirty(BlockPos, Action) Server Side: Same as MarkBlockDirty() Client Side: Same as MarkBlockDirty(), but also calls supplied delegate after the chunk has been re-retesselated. This can be used i.e. for block entities to dynamically switch between static models and dynamic models at exactly the right timing void MarkBlockDirty(BlockPos pos, Action OnRetesselated) Parameters pos BlockPos OnRetesselated Action MarkBlockDirty(BlockPos, IPlayer) Server side: Sends that block to the client (via bulk packet). Through that packet the client will do a SetBlock on that position (which triggers a redraw if oldblockid != newblockid). Client side: Triggers a block changed event and redraws the chunk void MarkBlockDirty(BlockPos pos, IPlayer skipPlayer = null) Parameters pos BlockPos skipPlayer IPlayer Server side: Does not send the update to this player, Client Side: No effect MarkBlockEntityDirty(BlockPos) Server side call: Resends the block entity data (if present) to all clients. Triggers a block changed event on the client once received , but will not redraw the chunk. Marks also the chunk dirty so that it gets saved to disk during shutdown or next autosave. Client side call: No effect void MarkBlockEntityDirty(BlockPos pos) Parameters pos BlockPos MarkBlockModified(BlockPos) Server side: Triggers a OnNeighbourBlockChange on that position and sends that block to the client (via bulk packet), through that packet the client will do a SetBlock on that position (which triggers a redraw if oldblockid != newblockid). Client side: Triggers a block changed event and redraws the chunk. Deletes and re-create block entities void MarkBlockModified(BlockPos pos) Parameters pos BlockPos MarkChunkDecorsModified(BlockPos) Server: Marks this position as required for resending to the client Client: No effect void MarkChunkDecorsModified(BlockPos pos) Parameters pos BlockPos RemoveBlockEntity(BlockPos) Permanently removes any block entity at this postion. Does not remove it's corresponding block, you have to do this yourself. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave. void RemoveBlockEntity(BlockPos position) Parameters position BlockPos RemoveBlockLight(byte[], BlockPos) Call this on OnBlockBroken() when your block entity modifies the blocks light range. That way the lighting task can still retrieve the block entity before its gone. void RemoveBlockLight(byte[] oldLightHsV, BlockPos pos) Parameters oldLightHsV byte[] pos BlockPos Rollback() For the bulk update block accessor reverts all the SetBlocks currently called since the last Commit() void Rollback() SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) A method to search for a given block in an area Currently NOT dimensionally aware void SearchBlocks(BlockPos minPos, BlockPos maxPos, ActionConsumable<Block, BlockPos> onBlock, Action<int, int, int> onChunkMissing = null) Parameters minPos BlockPos maxPos BlockPos onBlock ActionConsumable<Block, BlockPos> Return false to stop the search onChunkMissing Action<int, int, int> Called when a missing/unloaded chunk was encountered SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) A method to search for a given fluid block in an area Currently NOT dimensionally aware void SearchFluidBlocks(BlockPos minPos, BlockPos maxPos, ActionConsumable<Block, BlockPos> onBlock, Action<int, int, int> onChunkMissing = null) Parameters minPos BlockPos maxPos BlockPos onBlock ActionConsumable<Block, BlockPos> Return false to stop the search onChunkMissing Action<int, int, int> Called when a missing/unloaded chunk was encountered SetBlock(int, BlockPos) Set a block at the given position. Use blockid 0 to clear that position from any blocks. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave. If called with a fluid block, the fluid will automatically get set in the fluid layer, and the solid layer will be emptied. void SetBlock(int blockId, BlockPos pos) Parameters blockId int pos BlockPos SetBlock(int, BlockPos, int) Sets a block to given layer. Can only use \"BlockLayersAccess.Solid\" or \"BlockLayersAccess.Liquid\". Use id 0 to clear a block from given position. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave. void SetBlock(int blockId, BlockPos pos, int layer) Parameters blockId int pos BlockPos layer int SetBlock(int, BlockPos, ItemStack) Set a block at the given position. Use blockid 0 to clear that position from any blocks. Marks the chunk dirty so that it gets saved to disk during shutdown or next autosave. If called with a fluid block, the fluid will automatically get set in the fluid layer, and the solid layer will be emptied. void SetBlock(int blockId, BlockPos pos, ItemStack byItemstack) Parameters blockId int pos BlockPos byItemstack ItemStack If set then it will be passed onto the block.OnBlockPlaced method SetDecor(Block, BlockPos, int) Add a decor block to a specific sub-position on the side of an existing block. Use air block (id 0) to remove a decor. bool SetDecor(Block block, BlockPos position, int decorIndex) Parameters block Block position BlockPos decorIndex int You can get this value via ToDecorIndex() or via constructor DecorBits(BlockFacing) or DecorBits(BlockFacing, int, int, int). It can include a subPosition for cave art etc. Returns bool True if the decor was sucessfully set SetDecor(Block, BlockPos, BlockFacing) Add a decor block to the side of an existing block. Use air block (id 0) to remove a decor. bool SetDecor(Block block, BlockPos position, BlockFacing onFace) Parameters block Block position BlockPos onFace BlockFacing Returns bool True if the decor was sucessfully set SpawnBlockEntity(string, BlockPos, ItemStack) Spawn block entity at this position. Does not place it's corresponding block, you have to this yourself. void SpawnBlockEntity(string classname, BlockPos position, ItemStack byItemStack = null) Parameters classname string position BlockPos byItemStack ItemStack SpawnBlockEntity(BlockEntity) Adds pre-initialized block entity to the world. Does not call CreateBehaviors/Initialize/OnBlockPlaced on the block entity. This is a very low level method for block entity spawning, normally you'd want to use SpawnBlockEntity(string, BlockPos, ItemStack) void SpawnBlockEntity(BlockEntity be) Parameters be BlockEntity TriggerNeighbourBlockUpdate(BlockPos) Triggers the method OnNeighbourBlockChange() to all neighbour blocks at given position void TriggerNeighbourBlockUpdate(BlockPos pos) Parameters pos BlockPos WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) A method to iterate over blocks in an area. Less overhead than when calling GetBlock(pos) many times. If there is liquids in the liquid layer, the onBlock method will be called twice. Currently used for more efficient collision testing. Currently NOT dimensionally aware void WalkBlocks(BlockPos minPos, BlockPos maxPos, Action<Block, int, int, int> onBlock, bool centerOrder = false) Parameters minPos BlockPos maxPos BlockPos onBlock Action<Block, int, int, int> The method in which you want to check for the block, whatever it may be. centerOrder bool If true, the blocks will be ordered by the distance to the center position WalkStructures(BlockPos, Action<GeneratedStructure>) Calls given handler if it encounters one or more generated structure at given position (read from mapregions, assuming a max structure size of 256x256x256) void WalkStructures(BlockPos pos, Action<GeneratedStructure> onStructure) Parameters pos BlockPos onStructure Action<GeneratedStructure> WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) Calls given handler if it encounters one or more generated structure that intersect any position inside minpos->maxpos (read from mapregions, assuming a max structure size of 256x256x256) void WalkStructures(BlockPos minpos, BlockPos maxpos, Action<GeneratedStructure> onStructure) Parameters minpos BlockPos maxpos BlockPos onStructure Action<GeneratedStructure>"
  },
  "api/Vintagestory.API.Common.IBlockAccessorPrefetch.html": {
    "href": "api/Vintagestory.API.Common.IBlockAccessorPrefetch.html",
    "title": "Interface IBlockAccessorPrefetch | VintageStory API",
    "keywords": "Interface IBlockAccessorPrefetch Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Useful for when you have to scan multiple times over the same set of blocks public interface IBlockAccessorPrefetch : IBlockAccessor Inherited Members IBlockAccessor.ChunkSize IBlockAccessor.RegionSize IBlockAccessor.MapSizeX IBlockAccessor.MapSizeY IBlockAccessor.MapSizeZ IBlockAccessor.RegionMapSizeX IBlockAccessor.RegionMapSizeY IBlockAccessor.RegionMapSizeZ IBlockAccessor.UpdateSnowAccumMap IBlockAccessor.MapSize IBlockAccessor.GetChunk(int, int, int) IBlockAccessor.GetChunk(long) IBlockAccessor.GetMapRegion(int, int) IBlockAccessor.GetChunkAtBlockPos(BlockPos) IBlockAccessor.GetBlockId(BlockPos) IBlockAccessor.GetBlock(BlockPos) IBlockAccessor.GetBlockRaw(int, int, int, int) IBlockAccessor.GetBlock(BlockPos, int) IBlockAccessor.GetMostSolidBlock(BlockPos) IBlockAccessor.GetChunkAtBlockPos(int, int, int) IBlockAccessor.GetBlockId(int, int, int) IBlockAccessor.GetBlockOrNull(int, int, int, int) IBlockAccessor.GetBlock(int, int, int, int) IBlockAccessor.GetBlock(int, int, int) IBlockAccessor.GetMostSolidBlock(int, int, int) IBlockAccessor.WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) IBlockAccessor.SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.WalkStructures(BlockPos, Action<GeneratedStructure>) IBlockAccessor.WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) IBlockAccessor.SetBlock(int, BlockPos) IBlockAccessor.SetBlock(int, BlockPos, int) IBlockAccessor.SetBlock(int, BlockPos, ItemStack) IBlockAccessor.ExchangeBlock(int, BlockPos) IBlockAccessor.BreakBlock(BlockPos, IPlayer, float) IBlockAccessor.DamageBlock(BlockPos, BlockFacing, float) IBlockAccessor.GetBlock(int) IBlockAccessor.GetBlock(AssetLocation) IBlockAccessor.SpawnBlockEntity(string, BlockPos, ItemStack) IBlockAccessor.SpawnBlockEntity(BlockEntity) IBlockAccessor.RemoveBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity<T>(BlockPos) IBlockAccessor.IsValidPos(int, int, int) IBlockAccessor.IsValidPos(BlockPos) IBlockAccessor.IsNotTraversable(double, double, double) IBlockAccessor.IsNotTraversable(double, double, double, int) IBlockAccessor.IsNotTraversable(BlockPos) IBlockAccessor.Commit() IBlockAccessor.Rollback() IBlockAccessor.MarkBlockEntityDirty(BlockPos) IBlockAccessor.TriggerNeighbourBlockUpdate(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, IPlayer) IBlockAccessor.MarkBlockModified(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, Action) IBlockAccessor.GetLightLevel(BlockPos, EnumLightLevelType) IBlockAccessor.GetLightLevel(int, int, int, EnumLightLevelType) IBlockAccessor.GetLightRGBs(int, int, int) IBlockAccessor.GetLightRGBs(BlockPos) IBlockAccessor.GetLightRGBsAsInt(int, int, int) IBlockAccessor.GetTerrainMapheightAt(BlockPos) IBlockAccessor.GetRainMapHeightAt(BlockPos) IBlockAccessor.GetDistanceToRainFall(BlockPos, int, int) IBlockAccessor.GetRainMapHeightAt(int, int) IBlockAccessor.GetMapChunk(Vec2i) IBlockAccessor.GetMapChunk(int, int) IBlockAccessor.GetMapChunkAtBlockPos(BlockPos) IBlockAccessor.GetClimateAt(BlockPos, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, int) IBlockAccessor.GetWindSpeedAt(Vec3d) IBlockAccessor.GetWindSpeedAt(BlockPos) IBlockAccessor.MarkAbsorptionChanged(int, int, BlockPos) IBlockAccessor.RemoveBlockLight(byte[], BlockPos) IBlockAccessor.SetDecor(Block, BlockPos, BlockFacing) IBlockAccessor.SetDecor(Block, BlockPos, int) IBlockAccessor.GetDecors(BlockPos) IBlockAccessor.GetSubDecors(BlockPos) IBlockAccessor.GetDecor(BlockPos, int) IBlockAccessor.BreakDecor(BlockPos, BlockFacing, int?) IBlockAccessor.MarkChunkDecorsModified(BlockPos) IBlockAccessor.IsSideSolid(int, int, int, BlockFacing) IBlockAccessor.CreateMiniDimension(Vec3d) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Methods PrefetchBlocks(BlockPos, BlockPos) Pre-loads all blocks inside given area which can then be accessed very quickly using .GetBlock(). This method must be called before using GetBlock() void PrefetchBlocks(BlockPos minPos, BlockPos maxPos) Parameters minPos BlockPos maxPos BlockPos"
  },
  "api/Vintagestory.API.Common.IBlockAccessorRevertable.html": {
    "href": "api/Vintagestory.API.Common.IBlockAccessorRevertable.html",
    "title": "Interface IBlockAccessorRevertable | VintageStory API",
    "keywords": "Interface IBlockAccessorRevertable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Provides read/write access to the blocks of a world. public interface IBlockAccessorRevertable : IBulkBlockAccessor, IBlockAccessor Inherited Members IBulkBlockAccessor.BeforeCommit IBulkBlockAccessor.StagedBlocks IBulkBlockAccessor.ReadFromStagedByDefault IBulkBlockAccessor.GetStagedBlockId(int, int, int) IBulkBlockAccessor.GetStagedBlockId(BlockPos) IBulkBlockAccessor.SetChunks(Vec2i, IWorldChunk[]) IBulkBlockAccessor.SetDecorsBulk(long, Dictionary<int, Block>) IBulkBlockAccessor.PostCommitCleanup(List<BlockUpdate>) IBlockAccessor.ChunkSize IBlockAccessor.RegionSize IBlockAccessor.MapSizeX IBlockAccessor.MapSizeY IBlockAccessor.MapSizeZ IBlockAccessor.RegionMapSizeX IBlockAccessor.RegionMapSizeY IBlockAccessor.RegionMapSizeZ IBlockAccessor.UpdateSnowAccumMap IBlockAccessor.MapSize IBlockAccessor.GetChunk(int, int, int) IBlockAccessor.GetChunk(long) IBlockAccessor.GetMapRegion(int, int) IBlockAccessor.GetChunkAtBlockPos(BlockPos) IBlockAccessor.GetBlockId(BlockPos) IBlockAccessor.GetBlock(BlockPos) IBlockAccessor.GetBlockRaw(int, int, int, int) IBlockAccessor.GetBlock(BlockPos, int) IBlockAccessor.GetMostSolidBlock(BlockPos) IBlockAccessor.GetChunkAtBlockPos(int, int, int) IBlockAccessor.GetBlockId(int, int, int) IBlockAccessor.GetBlockOrNull(int, int, int, int) IBlockAccessor.GetBlock(int, int, int, int) IBlockAccessor.GetBlock(int, int, int) IBlockAccessor.GetMostSolidBlock(int, int, int) IBlockAccessor.WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) IBlockAccessor.SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.WalkStructures(BlockPos, Action<GeneratedStructure>) IBlockAccessor.WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) IBlockAccessor.SetBlock(int, BlockPos) IBlockAccessor.SetBlock(int, BlockPos, int) IBlockAccessor.SetBlock(int, BlockPos, ItemStack) IBlockAccessor.ExchangeBlock(int, BlockPos) IBlockAccessor.BreakBlock(BlockPos, IPlayer, float) IBlockAccessor.DamageBlock(BlockPos, BlockFacing, float) IBlockAccessor.GetBlock(int) IBlockAccessor.GetBlock(AssetLocation) IBlockAccessor.SpawnBlockEntity(string, BlockPos, ItemStack) IBlockAccessor.SpawnBlockEntity(BlockEntity) IBlockAccessor.RemoveBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity<T>(BlockPos) IBlockAccessor.IsValidPos(int, int, int) IBlockAccessor.IsValidPos(BlockPos) IBlockAccessor.IsNotTraversable(double, double, double) IBlockAccessor.IsNotTraversable(double, double, double, int) IBlockAccessor.IsNotTraversable(BlockPos) IBlockAccessor.Commit() IBlockAccessor.Rollback() IBlockAccessor.MarkBlockEntityDirty(BlockPos) IBlockAccessor.TriggerNeighbourBlockUpdate(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, IPlayer) IBlockAccessor.MarkBlockModified(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, Action) IBlockAccessor.GetLightLevel(BlockPos, EnumLightLevelType) IBlockAccessor.GetLightLevel(int, int, int, EnumLightLevelType) IBlockAccessor.GetLightRGBs(int, int, int) IBlockAccessor.GetLightRGBs(BlockPos) IBlockAccessor.GetLightRGBsAsInt(int, int, int) IBlockAccessor.GetTerrainMapheightAt(BlockPos) IBlockAccessor.GetRainMapHeightAt(BlockPos) IBlockAccessor.GetDistanceToRainFall(BlockPos, int, int) IBlockAccessor.GetRainMapHeightAt(int, int) IBlockAccessor.GetMapChunk(Vec2i) IBlockAccessor.GetMapChunk(int, int) IBlockAccessor.GetMapChunkAtBlockPos(BlockPos) IBlockAccessor.GetClimateAt(BlockPos, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, int) IBlockAccessor.GetWindSpeedAt(Vec3d) IBlockAccessor.GetWindSpeedAt(BlockPos) IBlockAccessor.MarkAbsorptionChanged(int, int, BlockPos) IBlockAccessor.RemoveBlockLight(byte[], BlockPos) IBlockAccessor.SetDecor(Block, BlockPos, BlockFacing) IBlockAccessor.SetDecor(Block, BlockPos, int) IBlockAccessor.GetDecors(BlockPos) IBlockAccessor.GetSubDecors(BlockPos) IBlockAccessor.GetDecor(BlockPos, int) IBlockAccessor.BreakDecor(BlockPos, BlockFacing, int?) IBlockAccessor.MarkChunkDecorsModified(BlockPos) IBlockAccessor.IsSideSolid(int, int, int, BlockFacing) IBlockAccessor.CreateMiniDimension(Vec3d) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Properties AvailableHistoryStates Amount of currently stored history states int AvailableHistoryStates { get; } Property Value int CurrentHistoryState 0 = working on latest version, 1 = undo used one time, 2 = undo used 2 times, etc. int CurrentHistoryState { get; } Property Value int QuantityHistoryStates Maximum Amount of undos you can perform. More states means more memory usage. int QuantityHistoryStates { get; set; } Property Value int Relight Whether or not to do relighting on the chunk bool Relight { get; set; } Property Value bool Methods BeginMultiEdit() void BeginMultiEdit() ChangeHistoryState(int) 1 = perform 1 undo -1 = perform 1 redo void ChangeHistoryState(int quantity = 1) Parameters quantity int CommitBlockEntityData() void CommitBlockEntityData() EndMultiEdit() void EndMultiEdit() SetHistoryStateBlock(int, int, int, int, int) Manually set the history state of a block for the to-be-comitted history state void SetHistoryStateBlock(int posX, int posY, int posZ, int oldBlockId, int newBlockId) Parameters posX int posY int posZ int oldBlockId int newBlockId int StoreEntityMoveToHistory(BlockPos, BlockPos, Vec3i) void StoreEntityMoveToHistory(BlockPos start, BlockPos end, Vec3i offset) Parameters start BlockPos end BlockPos offset Vec3i StoreEntitySpawnToHistory(Entity) void StoreEntitySpawnToHistory(Entity entity) Parameters entity Entity StoreHistoryState(HistoryState) void StoreHistoryState(HistoryState state) Parameters state HistoryState Events OnRestoreHistoryState event Action<HistoryState, int> OnRestoreHistoryState Event Type Action<HistoryState, int> OnStoreHistoryState event Action<HistoryState> OnStoreHistoryState Event Type Action<HistoryState>"
  },
  "api/Vintagestory.API.Common.IBlockEntityContainer.html": {
    "href": "api/Vintagestory.API.Common.IBlockEntityContainer.html",
    "title": "Interface IBlockEntityContainer | VintageStory API",
    "keywords": "Interface IBlockEntityContainer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IBlockEntityContainer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Inventory The inventory attached to this block entity container IInventory Inventory { get; } Property Value IInventory InventoryClassName The class name for the inventory. string InventoryClassName { get; } Property Value string Methods DropContents(Vec3d) Called by EntityBlockFalling if required void DropContents(Vec3d atPos) Parameters atPos Vec3d"
  },
  "api/Vintagestory.API.Common.IBlockFlowing.html": {
    "href": "api/Vintagestory.API.Common.IBlockFlowing.html",
    "title": "Interface IBlockFlowing | VintageStory API",
    "keywords": "Interface IBlockFlowing Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IBlockFlowing Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Flow string Flow { get; set; } Property Value string FlowNormali Vec3i FlowNormali { get; set; } Property Value Vec3i IsLava bool IsLava { get; } Property Value bool"
  },
  "api/Vintagestory.API.Common.IBlockShapeSupplier.html": {
    "href": "api/Vintagestory.API.Common.IBlockShapeSupplier.html",
    "title": "Interface IBlockShapeSupplier | VintageStory API",
    "keywords": "Interface IBlockShapeSupplier Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Adds a tesselator to your block WARNING: please make sure whatever functions and fields you use with the OnTesselation event are THREAD SAFE! [Obsolete(\"No longer needed. All block entities by default will have the OnTesselation method executed\")] public interface IBlockShapeSupplier Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.IBulkBlockAccessor.html": {
    "href": "api/Vintagestory.API.Common.IBulkBlockAccessor.html",
    "title": "Interface IBulkBlockAccessor | VintageStory API",
    "keywords": "Interface IBulkBlockAccessor Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Useful for setting many blocks at once efficiently public interface IBulkBlockAccessor : IBlockAccessor Inherited Members IBlockAccessor.ChunkSize IBlockAccessor.RegionSize IBlockAccessor.MapSizeX IBlockAccessor.MapSizeY IBlockAccessor.MapSizeZ IBlockAccessor.RegionMapSizeX IBlockAccessor.RegionMapSizeY IBlockAccessor.RegionMapSizeZ IBlockAccessor.UpdateSnowAccumMap IBlockAccessor.MapSize IBlockAccessor.GetChunk(int, int, int) IBlockAccessor.GetChunk(long) IBlockAccessor.GetMapRegion(int, int) IBlockAccessor.GetChunkAtBlockPos(BlockPos) IBlockAccessor.GetBlockId(BlockPos) IBlockAccessor.GetBlock(BlockPos) IBlockAccessor.GetBlockRaw(int, int, int, int) IBlockAccessor.GetBlock(BlockPos, int) IBlockAccessor.GetMostSolidBlock(BlockPos) IBlockAccessor.GetChunkAtBlockPos(int, int, int) IBlockAccessor.GetBlockId(int, int, int) IBlockAccessor.GetBlockOrNull(int, int, int, int) IBlockAccessor.GetBlock(int, int, int, int) IBlockAccessor.GetBlock(int, int, int) IBlockAccessor.GetMostSolidBlock(int, int, int) IBlockAccessor.WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) IBlockAccessor.SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.WalkStructures(BlockPos, Action<GeneratedStructure>) IBlockAccessor.WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) IBlockAccessor.SetBlock(int, BlockPos) IBlockAccessor.SetBlock(int, BlockPos, int) IBlockAccessor.SetBlock(int, BlockPos, ItemStack) IBlockAccessor.ExchangeBlock(int, BlockPos) IBlockAccessor.BreakBlock(BlockPos, IPlayer, float) IBlockAccessor.DamageBlock(BlockPos, BlockFacing, float) IBlockAccessor.GetBlock(int) IBlockAccessor.GetBlock(AssetLocation) IBlockAccessor.SpawnBlockEntity(string, BlockPos, ItemStack) IBlockAccessor.SpawnBlockEntity(BlockEntity) IBlockAccessor.RemoveBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity<T>(BlockPos) IBlockAccessor.IsValidPos(int, int, int) IBlockAccessor.IsValidPos(BlockPos) IBlockAccessor.IsNotTraversable(double, double, double) IBlockAccessor.IsNotTraversable(double, double, double, int) IBlockAccessor.IsNotTraversable(BlockPos) IBlockAccessor.Commit() IBlockAccessor.Rollback() IBlockAccessor.MarkBlockEntityDirty(BlockPos) IBlockAccessor.TriggerNeighbourBlockUpdate(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, IPlayer) IBlockAccessor.MarkBlockModified(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, Action) IBlockAccessor.GetLightLevel(BlockPos, EnumLightLevelType) IBlockAccessor.GetLightLevel(int, int, int, EnumLightLevelType) IBlockAccessor.GetLightRGBs(int, int, int) IBlockAccessor.GetLightRGBs(BlockPos) IBlockAccessor.GetLightRGBsAsInt(int, int, int) IBlockAccessor.GetTerrainMapheightAt(BlockPos) IBlockAccessor.GetRainMapHeightAt(BlockPos) IBlockAccessor.GetDistanceToRainFall(BlockPos, int, int) IBlockAccessor.GetRainMapHeightAt(int, int) IBlockAccessor.GetMapChunk(Vec2i) IBlockAccessor.GetMapChunk(int, int) IBlockAccessor.GetMapChunkAtBlockPos(BlockPos) IBlockAccessor.GetClimateAt(BlockPos, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, int) IBlockAccessor.GetWindSpeedAt(Vec3d) IBlockAccessor.GetWindSpeedAt(BlockPos) IBlockAccessor.MarkAbsorptionChanged(int, int, BlockPos) IBlockAccessor.RemoveBlockLight(byte[], BlockPos) IBlockAccessor.SetDecor(Block, BlockPos, BlockFacing) IBlockAccessor.SetDecor(Block, BlockPos, int) IBlockAccessor.GetDecors(BlockPos) IBlockAccessor.GetSubDecors(BlockPos) IBlockAccessor.GetDecor(BlockPos, int) IBlockAccessor.BreakDecor(BlockPos, BlockFacing, int?) IBlockAccessor.MarkChunkDecorsModified(BlockPos) IBlockAccessor.IsSideSolid(int, int, int, BlockFacing) IBlockAccessor.CreateMiniDimension(Vec3d) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Properties ReadFromStagedByDefault If set to true, the methods GetBlock() and GetBlockId() will behave like GetStagedBlockId() until the next commit bool ReadFromStagedByDefault { get; set; } Property Value bool StagedBlocks The full list of staged blocks that will get commited after calling Commit() Dictionary<BlockPos, BlockUpdate> StagedBlocks { get; } Property Value Dictionary<BlockPos, BlockUpdate> Methods GetStagedBlockId(int, int, int) Gets the block for a not yet commited block. If no block has been staged for this pos the original block is returned int GetStagedBlockId(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns int GetStagedBlockId(BlockPos) Gets the block for a not yet commited block. If no block has been staged for this pos the original block is returned int GetStagedBlockId(BlockPos pos) Parameters pos BlockPos Returns int PostCommitCleanup(List<BlockUpdate>) Used to fix certain things like flowing water from the edge of a pasted schematic/selection when undone or /we delete is used void PostCommitCleanup(List<BlockUpdate> updatedBlocks) Parameters updatedBlocks List<BlockUpdate> SetChunks(Vec2i, IWorldChunk[]) Implemented only by BlockAccessorMapChunkLoading void SetChunks(Vec2i chunkCoord, IWorldChunk[] chunksCol) Parameters chunkCoord Vec2i chunksCol IWorldChunk[] SetDecorsBulk(long, Dictionary<int, Block>) void SetDecorsBulk(long chunkIndex, Dictionary<int, Block> newDecors) Parameters chunkIndex long newDecors Dictionary<int, Block> Events BeforeCommit event Action<IBulkBlockAccessor> BeforeCommit Event Type Action<IBulkBlockAccessor>"
  },
  "api/Vintagestory.API.Common.IByteSerializable.html": {
    "href": "api/Vintagestory.API.Common.IByteSerializable.html",
    "title": "Interface IByteSerializable | VintageStory API",
    "keywords": "Interface IByteSerializable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IByteSerializable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods FromBytes(BinaryReader, IWorldAccessor) void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor ToBytes(BinaryWriter) void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.ICachingBlockAccessor.html": {
    "href": "api/Vintagestory.API.Common.ICachingBlockAccessor.html",
    "title": "Interface ICachingBlockAccessor | VintageStory API",
    "keywords": "Interface ICachingBlockAccessor Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ICachingBlockAccessor : IBlockAccessor Inherited Members IBlockAccessor.ChunkSize IBlockAccessor.RegionSize IBlockAccessor.MapSizeX IBlockAccessor.MapSizeY IBlockAccessor.MapSizeZ IBlockAccessor.RegionMapSizeX IBlockAccessor.RegionMapSizeY IBlockAccessor.RegionMapSizeZ IBlockAccessor.UpdateSnowAccumMap IBlockAccessor.MapSize IBlockAccessor.GetChunk(int, int, int) IBlockAccessor.GetChunk(long) IBlockAccessor.GetMapRegion(int, int) IBlockAccessor.GetChunkAtBlockPos(BlockPos) IBlockAccessor.GetBlockId(BlockPos) IBlockAccessor.GetBlock(BlockPos) IBlockAccessor.GetBlockRaw(int, int, int, int) IBlockAccessor.GetBlock(BlockPos, int) IBlockAccessor.GetMostSolidBlock(BlockPos) IBlockAccessor.GetChunkAtBlockPos(int, int, int) IBlockAccessor.GetBlockId(int, int, int) IBlockAccessor.GetBlockOrNull(int, int, int, int) IBlockAccessor.GetBlock(int, int, int, int) IBlockAccessor.GetBlock(int, int, int) IBlockAccessor.GetMostSolidBlock(int, int, int) IBlockAccessor.WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) IBlockAccessor.SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.WalkStructures(BlockPos, Action<GeneratedStructure>) IBlockAccessor.WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) IBlockAccessor.SetBlock(int, BlockPos) IBlockAccessor.SetBlock(int, BlockPos, int) IBlockAccessor.SetBlock(int, BlockPos, ItemStack) IBlockAccessor.ExchangeBlock(int, BlockPos) IBlockAccessor.BreakBlock(BlockPos, IPlayer, float) IBlockAccessor.DamageBlock(BlockPos, BlockFacing, float) IBlockAccessor.GetBlock(int) IBlockAccessor.GetBlock(AssetLocation) IBlockAccessor.SpawnBlockEntity(string, BlockPos, ItemStack) IBlockAccessor.SpawnBlockEntity(BlockEntity) IBlockAccessor.RemoveBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity<T>(BlockPos) IBlockAccessor.IsValidPos(int, int, int) IBlockAccessor.IsValidPos(BlockPos) IBlockAccessor.IsNotTraversable(double, double, double) IBlockAccessor.IsNotTraversable(double, double, double, int) IBlockAccessor.IsNotTraversable(BlockPos) IBlockAccessor.Commit() IBlockAccessor.Rollback() IBlockAccessor.MarkBlockEntityDirty(BlockPos) IBlockAccessor.TriggerNeighbourBlockUpdate(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, IPlayer) IBlockAccessor.MarkBlockModified(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, Action) IBlockAccessor.GetLightLevel(BlockPos, EnumLightLevelType) IBlockAccessor.GetLightLevel(int, int, int, EnumLightLevelType) IBlockAccessor.GetLightRGBs(int, int, int) IBlockAccessor.GetLightRGBs(BlockPos) IBlockAccessor.GetLightRGBsAsInt(int, int, int) IBlockAccessor.GetTerrainMapheightAt(BlockPos) IBlockAccessor.GetRainMapHeightAt(BlockPos) IBlockAccessor.GetDistanceToRainFall(BlockPos, int, int) IBlockAccessor.GetRainMapHeightAt(int, int) IBlockAccessor.GetMapChunk(Vec2i) IBlockAccessor.GetMapChunk(int, int) IBlockAccessor.GetMapChunkAtBlockPos(BlockPos) IBlockAccessor.GetClimateAt(BlockPos, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, int) IBlockAccessor.GetWindSpeedAt(Vec3d) IBlockAccessor.GetWindSpeedAt(BlockPos) IBlockAccessor.MarkAbsorptionChanged(int, int, BlockPos) IBlockAccessor.RemoveBlockLight(byte[], BlockPos) IBlockAccessor.SetDecor(Block, BlockPos, BlockFacing) IBlockAccessor.SetDecor(Block, BlockPos, int) IBlockAccessor.GetDecors(BlockPos) IBlockAccessor.GetSubDecors(BlockPos) IBlockAccessor.GetDecor(BlockPos, int) IBlockAccessor.BreakDecor(BlockPos, BlockFacing, int?) IBlockAccessor.MarkChunkDecorsModified(BlockPos) IBlockAccessor.IsSideSolid(int, int, int, BlockFacing) IBlockAccessor.CreateMiniDimension(Vec3d) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Properties LastChunkLoaded True if the most recent GetBlock or SetBlock had a laoded chunk bool LastChunkLoaded { get; } Property Value bool Methods Begin() void Begin() Dispose() void Dispose()"
  },
  "api/Vintagestory.API.Common.IChatCommand.html": {
    "href": "api/Vintagestory.API.Common.IChatCommand.html",
    "title": "Interface IChatCommand | VintageStory API",
    "keywords": "Interface IChatCommand Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IChatCommand Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) IChatCommandExt.BeginSub(IChatCommand, string) IChatCommandExt.BeginSubs(IChatCommand, params string[]) IChatCommandExt.EndSub(IChatCommand) IChatCommandExt.WithDesc(IChatCommand, string) Properties AdditionalInformation Get the detailed description of this command string AdditionalInformation { get; } Property Value string Aliases Aliases for this command or subcommand List<string> Aliases { get; } Property Value List<string> AllSubcommands Dictionary<string, IChatCommand> AllSubcommands { get; } Property Value Dictionary<string, IChatCommand> CallSyntax Get a string showing how to call this command or subcommand string CallSyntax { get; } Property Value string CallSyntaxUnformatted string CallSyntaxUnformatted { get; } Property Value string CommandPrefix Get the prefix of this command string CommandPrefix { get; } Property Value string Description Get the description of this command string Description { get; } Property Value string Examples Get the examples of this command string[] Examples { get; } Property Value string[] FullName Name of this command plus parent command names string FullName { get; } Property Value string Incomplete True if either name or privilege has not been set bool Incomplete { get; } Property Value bool this[string] Retrieve subcommand IChatCommand this[string name] { get; } Parameters name string Property Value IChatCommand Name Name of this command string Name { get; } Property Value string RootAliases RootAliases for this command or subcommand List<string> RootAliases { get; } Property Value List<string> Subcommands IEnumerable<IChatCommand> Subcommands { get; } Property Value IEnumerable<IChatCommand> Methods AddParameterSyntax(StringBuilder, string) Add text listing the parameters void AddParameterSyntax(StringBuilder sb, string indent) Parameters sb StringBuilder indent string AddSyntaxExplanation(StringBuilder, string) Add text explaining the form and interpretation of some of the more complex parameter types void AddSyntaxExplanation(StringBuilder sb, string indent) Parameters sb StringBuilder indent string BeginSubCommand(string) Define/Modify a subcommnad. Returns a new subcommand instance. IChatCommand BeginSubCommand(string name) Parameters name string Returns IChatCommand BeginSubCommands(params string[]) Define/Modify multiple subcommands. Returns a new subcommand instance. IChatCommand BeginSubCommands(params string[] name) Parameters name string[] Returns IChatCommand EndSubCommand() Leave current subcommand. Returns parent command instance. IChatCommand EndSubCommand() Returns IChatCommand Execute(TextCommandCallingArgs, Action<TextCommandResult>) Manually execute this command void Execute(TextCommandCallingArgs callargs, Action<TextCommandResult> onCommandComplete = null) Parameters callargs TextCommandCallingArgs onCommandComplete Action<TextCommandResult> GetCallSyntax(string, bool) string GetCallSyntax(string alias, bool isRootAlias = false) Parameters alias string isRootAlias bool Returns string GetCallSyntaxUnformatted(string, bool) string GetCallSyntaxUnformatted(string alias, bool isRootAlias = false) Parameters alias string isRootAlias bool Returns string GetFullName(string, bool) string GetFullName(string alias, bool isRootAlias = false) Parameters alias string isRootAlias bool Returns string GetFullSyntaxConsole(Caller) string GetFullSyntaxConsole(Caller caller) Parameters caller Caller Returns string GetFullSyntaxHandbook(Caller, string, bool) string GetFullSyntaxHandbook(Caller caller, string indent = \"\", bool isRootAlias = false) Parameters caller Caller indent string isRootAlias bool Returns string HandleWith(OnCommandDelegate) Define method to be called when the command is executed IChatCommand HandleWith(OnCommandDelegate handler) Parameters handler OnCommandDelegate Returns IChatCommand IgnoreAdditionalArgs() IChatCommand IgnoreAdditionalArgs() Returns IChatCommand IsAvailableTo(Caller) Confirm whether the specified caller has the required privilege for this command bool IsAvailableTo(Caller caller) Parameters caller Caller Returns bool RequiresPlayer() This command can only be run if the caller is a player IChatCommand RequiresPlayer() Returns IChatCommand RequiresPrivilege(string) Define the required privilege to run this command / subcommand IChatCommand RequiresPrivilege(string privilege) Parameters privilege string Returns IChatCommand Validate() Optional validation step that ensures that all the command and all its subcommands has a name, handler, privilege and description defined void Validate() WithAdditionalInformation(string) Set additional detailed command description, for command-specific help IChatCommand WithAdditionalInformation(string detail) Parameters detail string Returns IChatCommand WithAlias(params string[]) Registers alternative names for this command IChatCommand WithAlias(params string[] name) Parameters name string[] Returns IChatCommand WithArgs(params ICommandArgumentParser[]) Define command arguments, you'd usually want to use one of the parsers supplied from from capi.ChatCommands.Parsers IChatCommand WithArgs(params ICommandArgumentParser[] args) Parameters args ICommandArgumentParser[] Returns IChatCommand WithDescription(string) Set command description IChatCommand WithDescription(string description) Parameters description string Returns IChatCommand WithExamples(params string[]) Define one ore more examples on how this command can be executed IChatCommand WithExamples(params string[] examaples) Parameters examaples string[] Returns IChatCommand WithName(string) Sets the command name IChatCommand WithName(string name) Parameters name string Returns IChatCommand WithPreCondition(CommandPreconditionDelegate) If return value is error, command cannot be executed IChatCommand WithPreCondition(CommandPreconditionDelegate p) Parameters p CommandPreconditionDelegate Returns IChatCommand WithRootAlias(string) Registers an alternative name for this command, always at the root level, i.e. /name IChatCommand WithRootAlias(string name) Parameters name string Returns IChatCommand"
  },
  "api/Vintagestory.API.Common.IChatCommandApi.html": {
    "href": "api/Vintagestory.API.Common.IChatCommandApi.html",
    "title": "Interface IChatCommandApi | VintageStory API",
    "keywords": "Interface IChatCommandApi Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IChatCommandApi : IEnumerable<KeyValuePair<string, IChatCommand>>, IEnumerable Inherited Members IEnumerable<KeyValuePair<string, IChatCommand>>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties this[string] IChatCommand this[string name] { get; } Parameters name string Property Value IChatCommand Parsers CommandArgumentParsers Parsers { get; } Property Value CommandArgumentParsers Methods Create() IChatCommand Create() Returns IChatCommand Create(string) IChatCommand Create(string name) Parameters name string Returns IChatCommand Execute(string, TextCommandCallingArgs, Action<TextCommandResult>) Executes a parsed command void Execute(string name, TextCommandCallingArgs args, Action<TextCommandResult> onCommandComplete = null) Parameters name string Name of the command without arguments, without prefix args TextCommandCallingArgs onCommandComplete Action<TextCommandResult> Called when the command finished executing ExecuteUnparsed(string, TextCommandCallingArgs, Action<TextCommandResult>) Executes a raw command void ExecuteUnparsed(string message, TextCommandCallingArgs args, Action<TextCommandResult> onCommandComplete = null) Parameters message string Full command line, e.g. /entity spawn chicken-hen 1 args TextCommandCallingArgs onCommandComplete Action<TextCommandResult> Called when the command finished executing Get(string) IChatCommand Get(string name) Parameters name string Returns IChatCommand GetOrCreate(string) IChatCommand GetOrCreate(string name) Parameters name string Returns IChatCommand GetOrdered(Dictionary<string, IChatCommand>) Get all commands ordered by name ASC public static Dictionary<string, IChatCommand> GetOrdered(Dictionary<string, IChatCommand> command) Parameters command Dictionary<string, IChatCommand> Returns Dictionary<string, IChatCommand> GetOrdered(IChatCommandApi) Get all commands from IChatCommandApi ordered by name ASC public static Dictionary<string, IChatCommand> GetOrdered(IChatCommandApi chatCommandApi) Parameters chatCommandApi IChatCommandApi Returns Dictionary<string, IChatCommand>"
  },
  "api/Vintagestory.API.Common.IChunkBlocks.html": {
    "href": "api/Vintagestory.API.Common.IChunkBlocks.html",
    "title": "Interface IChunkBlocks | VintageStory API",
    "keywords": "Interface IChunkBlocks Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IChunkBlocks Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties this[int] Retrieves the first solid block, if that one is empty, retrieves the first fluid block int this[int index3d] { get; set; } Parameters index3d int Property Value int Length int Length { get; } Property Value int Methods ClearBlocks() void ClearBlocks() ClearBlocksAndPrepare() Same as ClearBlocks but initialises the chunkdata palette, so that SetBlockUnsafe can be used (useful in worldgen) void ClearBlocksAndPrepare() ContainsBlock(int) Does this chunk contain any examples of the specified block? (If the result is false, this is a very fast lookup because it quickly scans the blocks palette, not every block individually.) bool ContainsBlock(int blockId) Parameters blockId int Returns bool FuzzyListBlockIds(List<int>) Populates the list with all block IDs which are present in this chunk. The list may contain false positives (i.e. blocks which used to be here but were removed) so that's why it's called a \"Fuzzy\" list. There will be no false negatives, therefore useful as a first-pass filter when scanning chunks for various types of block e.g. ITickable void FuzzyListBlockIds(List<int> reusableList) Parameters reusableList List<int> GetBlockId(int, int) int GetBlockId(int index3d, int layer) Parameters index3d int layer int Returns int GetBlockIdUnsafe(int) Like get (i.e. this[]) but not threadsafe - only for use where setting and getting is guaranteed to be all on the same thread (e.g. during worldgen) int GetBlockIdUnsafe(int index3d) Parameters index3d int Returns int GetFluid(int) int GetFluid(int index3d) Parameters index3d int Returns int ReleaseBulkReadLock() Leave a locked section for bulk block reads from this ChunkData, using Unsafe read methods void ReleaseBulkReadLock() SetBlockAir(int) void SetBlockAir(int index3d) Parameters index3d int SetBlockBulk(int, int, int, int) Efficiently bulk-set a single block id in a chunk throughout a y-layer. lenX will be ignored (always treated as 32), the y-position is specified in index3d, the width lenZ will be respected void SetBlockBulk(int index3d, int lenX, int lenZ, int value) Parameters index3d int lenX int lenZ int value int SetBlockUnsafe(int, int) Not threadsafe, used only in cases where we know that the chunk already has a palette (e.g. in worldgen when replacing rock with other blocks) void SetBlockUnsafe(int index3d, int value) Parameters index3d int value int SetFluid(int, int) Used to place blocks into the fluid layer instead of the solid blocks layer; calling code must do this void SetFluid(int index3d, int value) Parameters index3d int value int TakeBulkReadLock() Enter a locked section for bulk block reads from this ChunkData, using Unsafe read methods void TakeBulkReadLock()"
  },
  "api/Vintagestory.API.Common.IChunkLight.html": {
    "href": "api/Vintagestory.API.Common.IChunkLight.html",
    "title": "Interface IChunkLight | VintageStory API",
    "keywords": "Interface IChunkLight Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IChunkLight Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods ClearAllSunlight() void ClearAllSunlight() ClearLight() void ClearLight() ClearWithSunlight(ushort) void ClearWithSunlight(ushort sunLight) Parameters sunLight ushort FloodWithSunlight(ushort) void FloodWithSunlight(ushort sunLight) Parameters sunLight ushort GetBlocklight(int) int GetBlocklight(int index3d) Parameters index3d int Returns int GetSunlight(int) int GetSunlight(int index3d) Parameters index3d int Returns int SetBlocklight(int, int) void SetBlocklight(int index3d, int lightlevel) Parameters index3d int lightlevel int SetBlocklight_Buffered(int, int) void SetBlocklight_Buffered(int index3d, int lightlevel) Parameters index3d int lightlevel int SetSunlight(int, int) void SetSunlight(int index3d, int sunlevel) Parameters index3d int sunlevel int SetSunlight_Buffered(int, int) void SetSunlight_Buffered(int index3d, int sunlevel) Parameters index3d int sunlevel int"
  },
  "api/Vintagestory.API.Common.IClaimTraverseable.html": {
    "href": "api/Vintagestory.API.Common.IClaimTraverseable.html",
    "title": "Interface IClaimTraverseable | VintageStory API",
    "keywords": "Interface IClaimTraverseable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Implement this on a Block, BlockBehavior, BlockEntity or BlockEntityBehavior to allow it to be traversed for players with Traverse permissions to the land claim or if AllowUseEveryone or AllowTraverseEveryone is set. public interface IClaimTraverseable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AllowTraverse() Return true if you want to allow this block to be interacted with when the player has traverse permissions on this land claim. Implement this if you need custom logic else it will just return true by default bool AllowTraverse() Returns bool"
  },
  "api/Vintagestory.API.Common.IClassRegistryAPI.html": {
    "href": "api/Vintagestory.API.Common.IClassRegistryAPI.html",
    "title": "Interface IClassRegistryAPI | VintageStory API",
    "keywords": "Interface IClassRegistryAPI Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Interface for creating instances public interface IClassRegistryAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties BlockClassToTypeMapping Dictionary<string, Type> BlockClassToTypeMapping { get; } Property Value Dictionary<string, Type> ItemClassToTypeMapping Dictionary<string, Type> ItemClassToTypeMapping { get; } Property Value Dictionary<string, Type> Methods CreateBlock(string) Creates a block instance from given block class Block CreateBlock(string blockclass) Parameters blockclass string Returns Block CreateBlockBehavior(Block, string) Creates a block behavior instance from given behavior code BlockBehavior CreateBlockBehavior(Block forBlock, string code) Parameters forBlock Block code string Returns BlockBehavior CreateBlockEntity(string) Creates a block entity instance from given block entity class BlockEntity CreateBlockEntity(string blockEntityClass) Parameters blockEntityClass string Returns BlockEntity CreateBlockEntityBehavior(BlockEntity, string) Creates a block entity behavior instance for given block entity BlockEntityBehavior CreateBlockEntityBehavior(BlockEntity blockEntity, string name) Parameters blockEntity BlockEntity name string Returns BlockEntityBehavior CreateCollectibleBehavior(CollectibleObject, string) Creates a collectible behavior instance from given behavior code CollectibleBehavior CreateCollectibleBehavior(CollectibleObject forCollectible, string code) Parameters forCollectible CollectibleObject code string Returns CollectibleBehavior CreateCropBehavior(Block, string) Creates a crop behavior instance from given block class CropBehavior CreateCropBehavior(Block forBlock, string cropBehaviorName) Parameters forBlock Block cropBehaviorName string Returns CropBehavior CreateEntity(string) Creates a entity instance from given entity class Entity CreateEntity(string entityClass) Parameters entityClass string Returns Entity CreateEntity(EntityProperties) Creates a entity instance from given entity type Entity CreateEntity(EntityProperties entityType) Parameters entityType EntityProperties Returns Entity CreateEntityBehavior(Entity, string) Creates a block behavior instance from given block class EntityBehavior CreateEntityBehavior(Entity forEntity, string entityBehaviorName) Parameters forEntity Entity entityBehaviorName string Returns EntityBehavior CreateInvNetworkUtil(InventoryBase, ICoreAPI) IInventoryNetworkUtil CreateInvNetworkUtil(InventoryBase inv, ICoreAPI api) Parameters inv InventoryBase api ICoreAPI Returns IInventoryNetworkUtil CreateItem(string) Creates an item instance from given item class Item CreateItem(string itemclass) Parameters itemclass string Returns Item CreateJsonTreeAttributeFromDict(Dictionary<string, JsonTreeAttribute>) Creates a json serializable version of an ITreeAttribute JsonTreeAttribute CreateJsonTreeAttributeFromDict(Dictionary<string, JsonTreeAttribute> attributes) Parameters attributes Dictionary<string, JsonTreeAttribute> Returns JsonTreeAttribute CreateParticlePropertyProvider(string) IParticlePropertiesProvider CreateParticlePropertyProvider(string className) Parameters className string Returns IParticlePropertiesProvider CreateParticlePropertyProvider(Type) IParticlePropertiesProvider CreateParticlePropertyProvider(Type entityType) Parameters entityType Type Returns IParticlePropertiesProvider GetBlockBehaviorClass(string) Returns the block behavior type registered for given name or null Type GetBlockBehaviorClass(string code) Parameters code string Returns Type GetBlockBehaviorClassName(Type) string GetBlockBehaviorClassName(Type blockBehaviorType) Parameters blockBehaviorType Type Returns string GetBlockClass(string) Returns the type of the registered block class or null otherwise Type GetBlockClass(string blockclass) Parameters blockclass string Returns Type GetBlockEntity(string) Returns the type for given BlockEntity class name as register in the ClassRegistry Type GetBlockEntity(string bockEntityClass) Parameters bockEntityClass string Returns Type GetBlockEntityBehaviorClass(string) Returns the block entity behavior type if such is registered under supplied name Type GetBlockEntityBehaviorClass(string name) Parameters name string Returns Type GetBlockEntityClass(Type) Returns the block entity class code if give Type is a registered block entity class string GetBlockEntityClass(Type type) Parameters type Type Returns string GetCollectibleBehaviorClass(string) Returns the collectible behavior type registered for given name or null Type GetCollectibleBehaviorClass(string code) Parameters code string Returns Type GetCollectibleBehaviorClassName(Type) string GetCollectibleBehaviorClassName(Type blockBehaviorType) Parameters blockBehaviorType Type Returns string GetEntityBehaviorClass(string) Type GetEntityBehaviorClass(string entityBehaviorName) Parameters entityBehaviorName string Returns Type GetEntityClassName(Type) Returns the entity class code if give Type is a registered entity class string GetEntityClassName(Type entityType) Parameters entityType Type Returns string GetItemClass(string) Gets the registered item type or null if not registered Type GetItemClass(string itemClass) Parameters itemClass string Returns Type GetMountable(TreeAttribute) Creates an instance of a mountable that has been registered with api.RegisterMountable IMountableSeat GetMountable(TreeAttribute tree) Parameters tree TreeAttribute Returns IMountableSeat RegisterParticlePropertyProvider(string, Type) void RegisterParticlePropertyProvider(string className, Type ParticleProvider) Parameters className string ParticleProvider Type"
  },
  "api/Vintagestory.API.Common.IClientChunk.html": {
    "href": "api/Vintagestory.API.Common.IClientChunk.html",
    "title": "Interface IClientChunk | VintageStory API",
    "keywords": "Interface IClientChunk Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IClientChunk : IWorldChunk Inherited Members IWorldChunk.Empty IWorldChunk.MapChunk IWorldChunk.Data IWorldChunk.Blocks IWorldChunk.Lighting IWorldChunk.MaybeBlocks IWorldChunk.Entities IWorldChunk.EntitiesCount IWorldChunk.BlockEntities IWorldChunk.Unpack() IWorldChunk.Unpack_ReadOnly() IWorldChunk.UnpackAndReadBlock(int, int) IWorldChunk.Unpack_AndReadLight(int) IWorldChunk.Unpack_AndReadLight(int, out int) IWorldChunk.MarkModified() IWorldChunk.MarkFresh() IWorldChunk.LightPositions IWorldChunk.Disposed IWorldChunk.AddEntity(Entity) IWorldChunk.RemoveEntity(long) IWorldChunk.SetModdata(string, byte[]) IWorldChunk.RemoveModdata(string) IWorldChunk.GetModdata(string) IWorldChunk.SetModdata<T>(string, T) IWorldChunk.GetModdata<T>(string, T) IWorldChunk.LiveModData IWorldChunk.GetLocalBlockAtBlockPos(IWorldAccessor, BlockPos) IWorldChunk.GetLocalBlockAtBlockPos(IWorldAccessor, int, int, int, int) IWorldChunk.GetLocalBlockAtBlockPos_LockFree(IWorldAccessor, BlockPos, int) IWorldChunk.GetLocalBlockEntityAtBlockPos(BlockPos) IWorldChunk.SetDecor(Block, int, BlockFacing) IWorldChunk.SetDecor(Block, int, int) IWorldChunk.BreakDecor(IWorldAccessor, BlockPos, BlockFacing, int?) IWorldChunk.BreakAllDecorFast(IWorldAccessor, BlockPos, int, bool) IWorldChunk.GetDecors(IBlockAccessor, BlockPos) IWorldChunk.GetSubDecors(IBlockAccessor, BlockPos) IWorldChunk.GetDecor(IBlockAccessor, BlockPos, int) IWorldChunk.SetDecors(Dictionary<int, Block>) IWorldChunk.AdjustSelectionBoxForDecor(IBlockAccessor, BlockPos, Cuboidf[]) IWorldChunk.FinishLightDoubleBuffering() IWorldChunk.GetLightAbsorptionAt(int, BlockPos, IList<Block>) IWorldChunk.AcquireBlockReadLock() IWorldChunk.ReleaseBlockReadLock() IWorldChunk.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties LoadedFromServer True if fully initialized bool LoadedFromServer { get; } Property Value bool Methods SetVisibility(bool) Can be used to set a chunk as invisible, probably temporarily (e.g. for the Timeswitch system) void SetVisibility(bool visible) Parameters visible bool"
  },
  "api/Vintagestory.API.Common.IClientGameCalendar.html": {
    "href": "api/Vintagestory.API.Common.IClientGameCalendar.html",
    "title": "Interface IClientGameCalendar | VintageStory API",
    "keywords": "Interface IClientGameCalendar Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IClientGameCalendar : IGameCalendar Inherited Members IGameCalendar.StartYear IGameCalendar.OnGetHemisphere IGameCalendar.OnGetSolarSphericalCoords IGameCalendar.OnGetLatitude IGameCalendar.GetDayLightStrength(double, double) IGameCalendar.GetDayLightStrength(BlockPos) IGameCalendar.GetSunPosition(Vec3d, double) IGameCalendar.GetMoonPosition(Vec3d, double) IGameCalendar.PrettyDate() IGameCalendar.SpeedOfTime IGameCalendar.SetTimeSpeedModifier(string, float) IGameCalendar.RemoveTimeSpeedModifier(string) IGameCalendar.ElapsedSeconds IGameCalendar.ElapsedHours IGameCalendar.ElapsedDays IGameCalendar.CalendarSpeedMul IGameCalendar.HoursPerDay IGameCalendar.DaysPerYear IGameCalendar.DaysPerMonth IGameCalendar.Month IGameCalendar.MonthName IGameCalendar.FullHourOfDay IGameCalendar.HourOfDay IGameCalendar.TotalHours IGameCalendar.TotalDays IGameCalendar.DayOfYear IGameCalendar.DayOfYearf IGameCalendar.Year IGameCalendar.GetSeason(BlockPos) IGameCalendar.GetSeasonRel(BlockPos) IGameCalendar.GetHemisphere(BlockPos) IGameCalendar.YearRel IGameCalendar.Add(float) IGameCalendar.MoonPhase IGameCalendar.MoonPhaseExact IGameCalendar.MoonPhaseBrightness IGameCalendar.MoonSize IGameCalendar.SeasonOverride IGameCalendar.SetSeasonOverride(float?) IGameCalendar.Timelapse Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties DayLightStrength Returns a value between 0 (no sunlight) and 1 (full sunlight) at the players current location float DayLightStrength { get; } Property Value float Dusk If true, its currently dusk at the players current location bool Dusk { get; } Property Value bool MoonLightStrength Returns a value between 0 (no sunlight) and 1 (full sunlight) at the players current location float MoonLightStrength { get; } Property Value float MoonPosition Returns a vector of the moon position at the players current location Vec3f MoonPosition { get; } Property Value Vec3f ReflectColor Vec3f ReflectColor { get; } Property Value Vec3f SunColor Returns a normalized color of the sun at the players current location Vec3f SunColor { get; } Property Value Vec3f SunLightStrength float SunLightStrength { get; } Property Value float SunPosition Returns a vector of the sun position at the players current location Vec3f SunPosition { get; } Property Value Vec3f SunPositionNormalized Returns a normalized vector of the sun position at the players current location Vec3f SunPositionNormalized { get; } Property Value Vec3f SunsetMod A horizontal offset that is applied when reading the sky glow color at the players current location. Creates a greater variety of sunsets. Changes to a different value once per day (during midnight) float SunsetMod { get; } Property Value float"
  },
  "api/Vintagestory.API.Common.ICollectibleDisplayable.html": {
    "href": "api/Vintagestory.API.Common.ICollectibleDisplayable.html",
    "title": "Interface ICollectibleDisplayable | VintageStory API",
    "keywords": "Interface ICollectibleDisplayable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A collectible object that can be placed on the ground or on shelves or in display cases, but require custom code or rendering for it public interface ICollectibleDisplayable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetMeshDataForDisplay(ItemSlot, string) Return a custom mesh to be used for the collectible. Return null to use default item/block mesh. It is recommended to cache the returned mesh in the ObjectCache for efficieny. MeshData GetMeshDataForDisplay(ItemSlot inSlot, string displayType) Parameters inSlot ItemSlot displayType string e.g. \"shelf\" or \"ground\" or \"displaycase\" Returns MeshData NowOnDisplay(BlockEntity, ItemSlot) This collectible was placed in-world and the chunk is about to get re-tesselated. void NowOnDisplay(BlockEntity byBlockEntity, ItemSlot inSlot) Parameters byBlockEntity BlockEntity inSlot ItemSlot"
  },
  "api/Vintagestory.API.Common.ICollectibleOnDisplayInteractable.html": {
    "href": "api/Vintagestory.API.Common.ICollectibleOnDisplayInteractable.html",
    "title": "Interface ICollectibleOnDisplayInteractable | VintageStory API",
    "keywords": "Interface ICollectibleOnDisplayInteractable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A collectible object that can be placed on the ground or on shelves or in display cases, but also can still accept interactions from the player public interface ICollectibleOnDisplayInteractable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods OnInteractCancel(float, ItemSlot, IPlayer, EnumItemUseCancelReason) bool OnInteractCancel(float secondsUsed, ItemSlot inSlot, IPlayer byPlayer, EnumItemUseCancelReason cancelReason) Parameters secondsUsed float inSlot ItemSlot byPlayer IPlayer cancelReason EnumItemUseCancelReason Returns bool OnInteractStart(ItemSlot, IPlayer) bool OnInteractStart(ItemSlot inSlot, IPlayer byPlayer) Parameters inSlot ItemSlot byPlayer IPlayer Returns bool OnInteractStep(float, ItemSlot, IPlayer) bool OnInteractStep(float secondsUsed, ItemSlot inSlot, IPlayer byPlayer) Parameters secondsUsed float inSlot ItemSlot byPlayer IPlayer Returns bool OnInteractStop(float, ItemSlot, IPlayer) void OnInteractStop(float secondsUsed, ItemSlot inSlot, IPlayer byPlayer) Parameters secondsUsed float inSlot ItemSlot byPlayer IPlayer"
  },
  "api/Vintagestory.API.Common.ICombustible.html": {
    "href": "api/Vintagestory.API.Common.ICombustible.html",
    "title": "Interface ICombustible | VintageStory API",
    "keywords": "Interface ICombustible Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ICombustible Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetBurnDuration(IWorldAccessor, BlockPos) float GetBurnDuration(IWorldAccessor world, BlockPos pos) Parameters world IWorldAccessor pos BlockPos Returns float"
  },
  "api/Vintagestory.API.Common.ICommandArgumentParser.html": {
    "href": "api/Vintagestory.API.Common.ICommandArgumentParser.html",
    "title": "Interface ICommandArgumentParser | VintageStory API",
    "keywords": "Interface ICommandArgumentParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ICommandArgumentParser Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ArgCount Return -1 to ignore arg count checking int ArgCount { get; } Property Value int ArgumentName string ArgumentName { get; } Property Value string IsMandatoryArg bool IsMandatoryArg { get; } Property Value bool IsMissing bool IsMissing { get; set; } Property Value bool LastErrorMessage string LastErrorMessage { get; } Property Value string Methods GetSyntax() string GetSyntax() Returns string GetSyntaxExplanation(string) string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() object GetValue() Returns object PreProcess(TextCommandCallingArgs) void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.ICoreAPI.html": {
    "href": "api/Vintagestory.API.Common.ICoreAPI.html",
    "title": "Interface ICoreAPI | VintageStory API",
    "keywords": "Interface ICoreAPI Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Common API Components that are available on the server and the client. Cast to ICoreServerAPI or ICoreClientAPI to access side specific features. public interface ICoreAPI : ICoreAPICommon Inherited Members ICoreAPICommon.RegisterRecipeRegistry<T>(string) ICoreAPICommon.RegisterColorMap(ColorMap) ICoreAPICommon.RegisterEntity(string, Type) ICoreAPICommon.RegisterEntityBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockClass(string, Type) ICoreAPICommon.RegisterCropBehavior(string, Type) ICoreAPICommon.RegisterBlockEntityClass(string, Type) ICoreAPICommon.RegisterItemClass(string, Type) ICoreAPICommon.RegisterCollectibleBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockEntityBehaviorClass(string, Type) ICoreAPICommon.RegisterMountable(string, GetMountableDelegate) ICoreAPICommon.ObjectCache ICoreAPICommon.DataBasePath ICoreAPICommon.GetOrCreateDataPath(string) ICoreAPICommon.StoreModConfig<T>(T, string) ICoreAPICommon.StoreModConfig(JsonObject, string) ICoreAPICommon.LoadModConfig<T>(string) ICoreAPICommon.LoadModConfig(string) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) VtmlUtilApiAdditions.RegisterVtmlTagConverter(ICoreAPI, string, Tag2RichTextDelegate) Properties Assets API Component for loading and reloading one or multiple assets at once from the assets folder IAssetManager Assets { get; } Property Value IAssetManager ChatCommands IChatCommandApi ChatCommands { get; } Property Value IChatCommandApi ClassRegistry API Compoment for creating instances of certain classes, such as Itemstacks IClassRegistryAPI ClassRegistry { get; } Property Value IClassRegistryAPI CmdlArguments The command line arguments that were used to start the client or server application string[] CmdlArguments { get; } Property Value string[] Event Api component to register/trigger events IEventAPI Event { get; } Property Value IEventAPI Logger The local Logger instance. ILogger Logger { get; } Property Value ILogger ModLoader API Component for checking for and interacting with other mods and mod systems IModLoader ModLoader { get; } Property Value IModLoader Network API for sending/receiving network packets INetworkAPI Network { get; } Property Value INetworkAPI Side Returns if you are currently on server or on client EnumAppSide Side { get; } Property Value EnumAppSide TagRegistry API for converting between registry object tags and tag ids, and for registering new tags ITagRegistry TagRegistry { get; } Property Value ITagRegistry World Second API Component for access/modify everything game world related IWorldAccessor World { get; } Property Value IWorldAccessor Methods RegisterEntityClass(string, EntityProperties) Registers a new entity config for given entity class void RegisterEntityClass(string entityClassName, EntityProperties config) Parameters entityClassName string config EntityProperties"
  },
  "api/Vintagestory.API.Common.ICoreAPICommon.html": {
    "href": "api/Vintagestory.API.Common.ICoreAPICommon.html",
    "title": "Interface ICoreAPICommon | VintageStory API",
    "keywords": "Interface ICoreAPICommon Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll API Methods common to the server and client public interface ICoreAPICommon Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties DataBasePath Returns the root path of the games data folder string DataBasePath { get; } Property Value string ObjectCache Can be used to store non-persistent, game wide data. E.g. used for firewood piles to pregenerate all meshes only once during startup Dictionary<string, object> ObjectCache { get; } Property Value Dictionary<string, object> Methods GetOrCreateDataPath(string) Returns the path to given foldername inside the games data folder. Ensures that the folder exists string GetOrCreateDataPath(string foldername) Parameters foldername string Returns string LoadModConfig(string) Loads a config file from a prepared modconfig folder, you only need to provide a unique filename. Recommendation: Surround this call with a try/catch in case the user made a typo while changing the configuration Be aware that these configs are not synchronized between client and server. Each side will store their own copy of the configuration. If these configs affect gameplay, you will likely need to synchronize it to client via network packet Returns null if the file does not exist JsonObject LoadModConfig(string filename) Parameters filename string Returns JsonObject LoadModConfig<T>(string) Loads a config file from a prepared modconfig folder, you only need to provide a unique filename. Recommendation: Surround this call with a try/catch in case the user made a typo while changing the configuration Be aware that these configs are not synchronized between client and server. Each side will store their own copy of the configuration. If these configs affect gameplay, you will likely need to synchronize it to client via network packet Returns null if the file does not exist T LoadModConfig<T>(string filename) Parameters filename string Returns T Type Parameters T RegisterBlockBehaviorClass(string, Type) Register a new block behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side. void RegisterBlockBehaviorClass(string className, Type blockBehaviorType) Parameters className string blockBehaviorType Type RegisterBlockClass(string, Type) Register a new Blockclass. Must happen before any blocks are loaded. Be sure to register it on the client and server side. void RegisterBlockClass(string className, Type blockType) Parameters className string Class to register blockType Type Name of the class RegisterBlockEntityBehaviorClass(string, Type) Register a new block entity behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side. void RegisterBlockEntityBehaviorClass(string className, Type blockEntityBehaviorType) Parameters className string blockEntityBehaviorType Type RegisterBlockEntityClass(string, Type) Register a new BlockEntity Class. Must happen before any blocks are loaded. Be sure to register it on the client and server side. void RegisterBlockEntityClass(string className, Type blockentityType) Parameters className string blockentityType Type RegisterCollectibleBehaviorClass(string, Type) Registers a new collectible behavior class, which can be used for items or for blocks. void RegisterCollectibleBehaviorClass(string className, Type blockBehaviorType) Parameters className string blockBehaviorType Type RegisterColorMap(ColorMap) Registers a new color map. Typically used to color in-game blocks with a texture - i.e. climate and seasonal coloring void RegisterColorMap(ColorMap map) Parameters map ColorMap RegisterCropBehavior(string, Type) Register a new crop behavior void RegisterCropBehavior(string className, Type type) Parameters className string type Type RegisterEntity(string, Type) Registers a non-block entity. Be sure to register it on the client and server side. void RegisterEntity(string className, Type entity) Parameters className string entity Type RegisterEntityBehaviorClass(string, Type) Registers a non-block entity behavior. Be sure to register it on the client and server side. void RegisterEntityBehaviorClass(string className, Type entityBehavior) Parameters className string entityBehavior Type RegisterItemClass(string, Type) Register a new Item Class. Must happen before any blocks are loaded. Be sure to register it on the client and server side. void RegisterItemClass(string className, Type itemType) Parameters className string itemType Type RegisterMountable(string, GetMountableDelegate) Register a new block behavior class. Must happen before any blocks are loaded. Be sure to register it on the client and server side. Make your your delegate also set tree.SetString(\"className\", \"[your className]\"); void RegisterMountable(string className, GetMountableDelegate mountableInstancer) Parameters className string mountableInstancer GetMountableDelegate RegisterRecipeRegistry<T>(string) Registers a recipe registry T RegisterRecipeRegistry<T>(string recipeRegistryCode) where T : RecipeRegistryBase Parameters recipeRegistryCode string Returns T Type Parameters T StoreModConfig(JsonObject, string) Stores a config file in a prepared modconfig folder. You only need to provide a unique filename. Be aware that these configs are not synchronized between client and server. Each side will store their own copy of the configuration. If these configs affect gameplay, you will likely need to synchronize it to client it via network packet void StoreModConfig(JsonObject jobj, string filename) Parameters jobj JsonObject filename string StoreModConfig<T>(T, string) Stores a config file in a prepared modconfig folder. You only need to provide a unique filename. For T just make a class with all fields public - this is your configuration class. Be sure to set useful default values for your settings Be aware that these configs are not synchronized between client and server. Each side will store their own copy of the configuration. If these configs affect gameplay, you will likely need to synchronize it via network packet void StoreModConfig<T>(T jsonSerializeableData, string filename) Parameters jsonSerializeableData T filename string Type Parameters T"
  },
  "api/Vintagestory.API.Common.IDrawYAdjustable.html": {
    "href": "api/Vintagestory.API.Common.IDrawYAdjustable.html",
    "title": "Interface IDrawYAdjustable | VintageStory API",
    "keywords": "Interface IDrawYAdjustable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used for blocks (e.g. crops and dead crops) where the y-position might need to be adjusted at the time of tesselating an individual block public interface IDrawYAdjustable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AdjustYPosition(BlockPos, Block[], int) float AdjustYPosition(BlockPos pos, Block[] chunkExtBlocks, int extIndex3d) Parameters pos BlockPos chunkExtBlocks Block[] extIndex3d int Returns float"
  },
  "api/Vintagestory.API.Common.IEntityPartitioning.html": {
    "href": "api/Vintagestory.API.Common.IEntityPartitioning.html",
    "title": "Interface IEntityPartitioning | VintageStory API",
    "keywords": "Interface IEntityPartitioning Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IEntityPartitioning Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods RePartitionPlayer(EntityPlayer) void RePartitionPlayer(EntityPlayer entityPlayer) Parameters entityPlayer EntityPlayer"
  },
  "api/Vintagestory.API.Common.IEventAPI.html": {
    "href": "api/Vintagestory.API.Common.IEventAPI.html",
    "title": "Interface IEventAPI | VintageStory API",
    "keywords": "Interface IEventAPI Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Events that are available on the server and the client public interface IEventAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods EnqueueMainThreadTask(Action, string) Can be used to execute supplied method a frame later or can be called from a seperate thread to ensure some code is executed in the main thread. Calling this method is thread safe. void EnqueueMainThreadTask(Action action, string code) Parameters action Action code string Task category identifier for the frame profiler PushEvent(string, IAttribute) There's 2 global event busses, 1 on the client and 1 on the server. This pushes an event onto the bus. void PushEvent(string eventName, IAttribute data = null) Parameters eventName string data IAttribute RegisterCallback(Action<float>, int) Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterCallback(Action<float> OnTimePassed, int millisecondDelay) Parameters OnTimePassed Action<float> millisecondDelay int Returns long listenerId RegisterCallback(Action<float>, int, bool) Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. This overload can be used to signify callbacks which do no harm if registered while the game is paused (otherwise, registering a callback while paused will produce an error in logs, or an intentional exception in Developer Mode) long RegisterCallback(Action<float> OnTimePassed, int millisecondDelay, bool permittedWhilePaused) Parameters OnTimePassed Action<float> millisecondDelay int permittedWhilePaused bool Returns long listenerId RegisterCallback(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) Calls given method after supplied amount of milliseconds, lets you supply a block position to be passed to the method. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterCallback(Action<IWorldAccessor, BlockPos, float> OnTimePassed, BlockPos pos, int millisecondDelay) Parameters OnTimePassed Action<IWorldAccessor, BlockPos, float> pos BlockPos millisecondDelay int Returns long listenerId RegisterEventBusListener(EventBusListenerDelegate, double, string) Registers a listener on the event bus. This is intended for mods as the game engine itself does not push any events. void RegisterEventBusListener(EventBusListenerDelegate OnEvent, double priority = 0.5, string filterByEventName = null) Parameters OnEvent EventBusListenerDelegate The handler for the events priority double Set this to a different value if you want to catch an event before/after another mod catches it filterByEventName string If set, events only with given eventName are received RegisterGameTickListener(Action<float>, Action<Exception>, int, int) Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. This overload includes an ErrorHandler callback, triggered if calling onGameTick throws an exception long RegisterGameTickListener(Action<float> onGameTick, Action<Exception> errorHandler, int millisecondInterval, int initialDelayOffsetMs = 0) Parameters onGameTick Action<float> errorHandler Action<Exception> millisecondInterval int initialDelayOffsetMs int Returns long listenerId RegisterGameTickListener(Action<float>, int, int) Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterGameTickListener(Action<float> onGameTick, int millisecondInterval, int initialDelayOffsetMs = 0) Parameters onGameTick Action<float> millisecondInterval int initialDelayOffsetMs int Returns long listenerId RegisterGameTickListener(Action<IWorldAccessor, BlockPos, float>, BlockPos, int, int) Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterGameTickListener(Action<IWorldAccessor, BlockPos, float> onGameTick, BlockPos pos, int millisecondInterval, int initialDelayOffsetMs = 0) Parameters onGameTick Action<IWorldAccessor, BlockPos, float> pos BlockPos millisecondInterval int initialDelayOffsetMs int Returns long listenerId TriggerEntityDeath(Entity, DamageSource) void TriggerEntityDeath(Entity entity, DamageSource damageSourceForDeath) Parameters entity Entity damageSourceForDeath DamageSource TriggerEntityMounted(EntityAgent, IMountableSeat) void TriggerEntityMounted(EntityAgent entityAgent, IMountableSeat entityRideableSeat) Parameters entityAgent EntityAgent entityRideableSeat IMountableSeat TriggerEntityUnmounted(EntityAgent, IMountableSeat) void TriggerEntityUnmounted(EntityAgent entityAgent, IMountableSeat entityRideableSeat) Parameters entityAgent EntityAgent entityRideableSeat IMountableSeat TriggerMatchesRecipe(IPlayer, GridRecipe, ItemSlot[], int) bool TriggerMatchesRecipe(IPlayer forPlayer, GridRecipe gridRecipe, ItemSlot[] ingredients, int gridWidth) Parameters forPlayer IPlayer gridRecipe GridRecipe ingredients ItemSlot[] gridWidth int Returns bool TriggerPlayerDimensionChanged(IPlayer) void TriggerPlayerDimensionChanged(IPlayer player) Parameters player IPlayer UnregisterCallback(long) Removes a delayed callback void UnregisterCallback(long listenerId) Parameters listenerId long UnregisterGameTickListener(long) Removes a game tick listener void UnregisterGameTickListener(long listenerId) Parameters listenerId long Events ChunkDirty Called whenever a chunk was marked dirty (as in, its blocks or light values have been modified or it got newly loaded or newly created) event ChunkDirtyDelegate ChunkDirty Event Type ChunkDirtyDelegate EntityMounted event EntityMountDelegate EntityMounted Event Type EntityMountDelegate EntityUnmounted event EntityMountDelegate EntityUnmounted Event Type EntityMountDelegate MapRegionLoaded Called whenever the server loaded from disk or newly generated a map region event MapRegionLoadedDelegate MapRegionLoaded Event Type MapRegionLoadedDelegate MapRegionUnloaded Called just before a map region is about to get unloaded. On shutdown this method is called for all loaded map regions. event MapRegionUnloadDelegate MapRegionUnloaded Event Type MapRegionUnloadDelegate MatchesGridRecipe Called when a player tries to gridcraft something event MatchGridRecipeDelegate MatchesGridRecipe Event Type MatchGridRecipeDelegate OnEntityDeath event EntityDeathDelegate OnEntityDeath Event Type EntityDeathDelegate OnEntityDespawn Triggered when a new entity despawned event EntityDespawnDelegate OnEntityDespawn Event Type EntityDespawnDelegate OnEntityLoaded Triggered when a new entity got loaded (either spawned or loaded from disk) event EntityDelegate OnEntityLoaded Event Type EntityDelegate OnEntitySpawn Triggered when a new entity spawned event EntityDelegate OnEntitySpawn Event Type EntityDelegate OnGetClimate Called whenever any method calls world.BlockAccessor.GetClimateAt(). Used by the survival mod to modify the rainfall and temperature values to adjust for seasonal and day/night temperature variations. Be sure to also register to OnGetClimateForDate. event OnGetClimateDelegate OnGetClimate Event Type OnGetClimateDelegate OnGetWindSpeed Called whenever any method calls world.BlockAccessor.GetWindSpeedAt(). Used by the survival mod to set the wind speed event OnGetWindSpeedDelegate OnGetWindSpeed Event Type OnGetWindSpeedDelegate OnTestBlockAccess Triggered when block access is tested, allows you to override the engine response event TestBlockAccessDelegate OnTestBlockAccess Event Type TestBlockAccessDelegate OnTestBlockAccessClaim event TestBlockAccessClaimDelegate OnTestBlockAccessClaim Event Type TestBlockAccessClaimDelegate PlayerDimensionChanged Called when a player changed dimension event PlayerCommonDelegate PlayerDimensionChanged Event Type PlayerCommonDelegate"
  },
  "api/Vintagestory.API.Common.IFarmlandBlockEntity.html": {
    "href": "api/Vintagestory.API.Common.IFarmlandBlockEntity.html",
    "title": "Interface IFarmlandBlockEntity | VintageStory API",
    "keywords": "Interface IFarmlandBlockEntity Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IFarmlandBlockEntity Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties CropAttributes ITreeAttribute CropAttributes { get; } Property Value ITreeAttribute IsVisiblyMoist bool IsVisiblyMoist { get; } Property Value bool MoistureLevel The farmlands moisture level float MoistureLevel { get; } Property Value float Nutrients Farmland has 3 nutrient levels N, P and K located in this array in that order. Each nutrient level has a range of 0-100. float[] Nutrients { get; } Property Value float[] OriginalFertility The fertility the soil will recover to (the soil from which the farmland was made of) int[] OriginalFertility { get; } Property Value int[] Pos The position of the farmland BlockPos Pos { get; } Property Value BlockPos TotalHoursFertilityCheck The last time fertility increase was checked double TotalHoursFertilityCheck { get; } Property Value double TotalHoursForNextStage Total game hours from where on it can enter the next growth stage double TotalHoursForNextStage { get; } Property Value double UpPos The position directly above the farmland BlockPos UpPos { get; } Property Value BlockPos"
  },
  "api/Vintagestory.API.Common.IGameCalendar.html": {
    "href": "api/Vintagestory.API.Common.IGameCalendar.html",
    "title": "Interface IGameCalendar | VintageStory API",
    "keywords": "Interface IGameCalendar Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Main API for retrieving anything calender or astronomy related public interface IGameCalendar Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields StartYear public const int StartYear = 1386 Field Value int Properties CalendarSpeedMul A multiplier thats applied to the progression of the calendar. Set this to 0.1 and a day will last 10 times longer, does not affect physics. float CalendarSpeedMul { get; set; } Property Value float DayOfYear The current day of the year (goes from 0 to DaysPerYear) int DayOfYear { get; } Property Value int DayOfYearf The current day of the year (goes from 0 to DaysPerYear) float DayOfYearf { get; } Property Value float DaysPerMonth Amount of days per month int DaysPerMonth { get; } Property Value int DaysPerYear Amount of days per year int DaysPerYear { get; } Property Value int ElapsedDays Amount of in-game days that have passed since the game started double ElapsedDays { get; } Property Value double ElapsedHours Amount of in-game hours that have passed since the game started double ElapsedHours { get; } Property Value double ElapsedSeconds Amount of in-game seconds that have passed since the game started long ElapsedSeconds { get; } Property Value long FullHourOfDay The current hour of the day as integer int FullHourOfDay { get; } Property Value int HourOfDay The current hour of the day as decimal float HourOfDay { get; } Property Value float HoursPerDay Amount of hours per day float HoursPerDay { get; } Property Value float Month int Month { get; } Property Value int MonthName EnumMonth MonthName { get; } Property Value EnumMonth MoonPhase The current moonphase EnumMoonPhase MoonPhase { get; } Property Value EnumMoonPhase MoonPhaseBrightness The moons current brightness (higher during full moon) float MoonPhaseBrightness { get; } Property Value float MoonPhaseExact The current moonphase represented by number from 0..8 double MoonPhaseExact { get; } Property Value double MoonSize The moons current size (larger during full moon) float MoonSize { get; } Property Value float OnGetHemisphere Assigned by the survival mod. Must return the hemisphere at give location HemisphereDelegate OnGetHemisphere { get; set; } Property Value HemisphereDelegate OnGetLatitude Assigned by the survival mod. Must return the latitude for given position. If not set, the calendar uses a default value of 0.5 -1 for south pole, 0 for equater, 1 for north pole GetLatitudeDelegate OnGetLatitude { get; set; } Property Value GetLatitudeDelegate OnGetSolarSphericalCoords Assigned by the survival mod. The calendar uses this method to determine the solar altitude at given location and time. If not set, the calendar uses a default value of about 0.75 SolarSphericalCoordsDelegate OnGetSolarSphericalCoords { get; set; } Property Value SolarSphericalCoordsDelegate SeasonOverride float? SeasonOverride { get; set; } Property Value float? SpeedOfTime This acts as a multiplier on how much faster an ingame second passes by compared to a real life second. Affects physics, like the motion speed of waving grass. The default is 60, hence per default a day lasts 24 minutes, but it's also multiplied by CalendarSpeedMul which is 0.5 by default so the end result is 48 minutes per day This is the sum of all modifiers float SpeedOfTime { get; } Property Value float Timelapse Can be used to adjust apparent time of day and season for rendering, e.g. to create a series of timelapse images; restore to 0 when done float Timelapse { get; set; } Property Value float TotalDays Total passed days since the game has started double TotalDays { get; } Property Value double TotalHours Total passed hours since the game has started double TotalHours { get; } Property Value double Year Returns the year. Every game begins with 1386 int Year { get; } Property Value int YearRel Returns the current season in a value of 0 to 1 float YearRel { get; } Property Value float Methods Add(float) Adds given time to the calendar void Add(float hours) Parameters hours float GetDayLightStrength(double, double) Retrieve the current daylight strength at given coordinates, the values are roughly beween 0 and 1.2f float GetDayLightStrength(double x, double z) Parameters x double z double Returns float GetDayLightStrength(BlockPos) Retrieve the current daylight strength at given coordinates. The Y-Component is ignored float GetDayLightStrength(BlockPos pos) Parameters pos BlockPos Returns float GetHemisphere(BlockPos) Returns the hemisphere at given position EnumHemisphere GetHemisphere(BlockPos pos) Parameters pos BlockPos Returns EnumHemisphere GetMoonPosition(Vec3d, double) Get the moons position in the sky at given date as a normalized vector Vec3f GetMoonPosition(Vec3d position, double totaldays) Parameters position Vec3d totaldays double Returns Vec3f GetSeason(BlockPos) Returns the season at given position EnumSeason GetSeason(BlockPos pos) Parameters pos BlockPos Returns EnumSeason GetSeasonRel(BlockPos) Returns the season at given position between 0..1, respects hemisphere float GetSeasonRel(BlockPos pos) Parameters pos BlockPos Returns float GetSunPosition(Vec3d, double) Get the suns position in the sky at given date as a normalized vector Vec3f GetSunPosition(Vec3d pos, double totalDays) Parameters pos Vec3d totalDays double Returns Vec3f PrettyDate() The worlds current date, nicely formatted string PrettyDate() Returns string RemoveTimeSpeedModifier(string) To remove a previously added time speed modifier void RemoveTimeSpeedModifier(string name) Parameters name string SetSeasonOverride(float?) If non-null, will override the value retrieved by GetSeason(). Set to null to have seasons progress normally again. void SetSeasonOverride(float? seasonRel) Parameters seasonRel float? SetTimeSpeedModifier(string, float) If you want to modify the time speed, set a value here void SetTimeSpeedModifier(string name, float speed) Parameters name string speed float"
  },
  "api/Vintagestory.API.Common.IGeometryTester.html": {
    "href": "api/Vintagestory.API.Common.IGeometryTester.html",
    "title": "Interface IGeometryTester | VintageStory API",
    "keywords": "Interface IGeometryTester Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used for blocks (e.g. chiselled blocks) where the basic block geometry: AO shading, side opaque etc - depends on the individual block or blockEntity public interface IGeometryTester Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetCurrentBlockEntityOnSide(BlockFacing) BlockEntity GetCurrentBlockEntityOnSide(BlockFacing side) Parameters side BlockFacing Returns BlockEntity GetCurrentBlockEntityOnSide(Vec3iAndFacingFlags) BlockEntity GetCurrentBlockEntityOnSide(Vec3iAndFacingFlags vec) Parameters vec Vec3iAndFacingFlags Returns BlockEntity"
  },
  "api/Vintagestory.API.Common.IHeldBag.html": {
    "href": "api/Vintagestory.API.Common.IHeldBag.html",
    "title": "Interface IHeldBag | VintageStory API",
    "keywords": "Interface IHeldBag Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Bag is a non-placed block container, usually one that is attached to an entity public interface IHeldBag Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Clear(ItemStack) Delete all contents of this bag void Clear(ItemStack bagstack) Parameters bagstack ItemStack GetContents(ItemStack, IWorldAccessor) Should return all contents of this bag ItemStack[] GetContents(ItemStack bagstack, IWorldAccessor world) Parameters bagstack ItemStack world IWorldAccessor Returns ItemStack[] GetOrCreateSlots(ItemStack, InventoryBase, int, IWorldAccessor) List<ItemSlotBagContent> GetOrCreateSlots(ItemStack bagstack, InventoryBase parentinv, int bagIndex, IWorldAccessor world) Parameters bagstack ItemStack parentinv InventoryBase bagIndex int world IWorldAccessor Returns List<ItemSlotBagContent> GetQuantitySlots(ItemStack) Amount of slots this bag provides int GetQuantitySlots(ItemStack bagstack) Parameters bagstack ItemStack Returns int GetSlotBgColor(ItemStack) The Hex color the bag item slot should take, return null for default string GetSlotBgColor(ItemStack bagstack) Parameters bagstack ItemStack Returns string GetStorageFlags(ItemStack) The types of items that can be stored in this bag EnumItemStorageFlags GetStorageFlags(ItemStack bagstack) Parameters bagstack ItemStack Returns EnumItemStorageFlags IsEmpty(ItemStack) Should true if this this bag is empty bool IsEmpty(ItemStack bagstack) Parameters bagstack ItemStack Returns bool Store(ItemStack, ItemSlotBagContent) Save given itemstack into this bag void Store(ItemStack bagstack, ItemSlotBagContent slot) Parameters bagstack ItemStack slot ItemSlotBagContent"
  },
  "api/Vintagestory.API.Common.IHeldHandAnimOverrider.html": {
    "href": "api/Vintagestory.API.Common.IHeldHandAnimOverrider.html",
    "title": "Interface IHeldHandAnimOverrider | VintageStory API",
    "keywords": "Interface IHeldHandAnimOverrider Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IHeldHandAnimOverrider Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AllowHeldIdleHandAnim(Entity, ItemSlot, EnumHand) bool AllowHeldIdleHandAnim(Entity forEntity, ItemSlot slot, EnumHand hand) Parameters forEntity Entity slot ItemSlot hand EnumHand Returns bool"
  },
  "api/Vintagestory.API.Common.IInventory.html": {
    "href": "api/Vintagestory.API.Common.IInventory.html",
    "title": "Interface IInventory | VintageStory API",
    "keywords": "Interface IInventory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Basic interface representing an item inventory public interface IInventory : IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inherited Members IReadOnlyCollection<ItemSlot>.Count IEnumerable<ItemSlot>.GetEnumerator() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ClassName The name of the class for the inventory string ClassName { get; } Property Value string DirtySlots The slots marked dirty. HashSet<int> DirtySlots { get; } Property Value HashSet<int> Empty Convenience method to check if this inventory contains anything bool Empty { get; } Property Value bool InventoryID The internal named id for the inventory string InventoryID { get; } Property Value string this[int] Gets or sets the slot at the given slot number. Returns null for invalid slot number (below 0 or above Count-1). The setter allows for replacing slots with custom ones, though caution is advised. ItemSlot this[int slotId] { get; set; } Parameters slotId int Property Value ItemSlot LastChanged Milliseconds since server startup when the inventory was last changed (not used currently) long LastChanged { get; } Property Value long PutLocked Called by item slot, if true, player cannot take items from this chest bool PutLocked { get; } Property Value bool RemoveOnClose Wether or not to remove the inventory from the players inventory list upon closing it bool RemoveOnClose { get; } Property Value bool TakeLocked Called by item slot, if true, player cannot take items from this chest bool TakeLocked { get; } Property Value bool Methods ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) When the player clicks on this slot object ActivateSlot(int slotId, ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters slotId int sourceSlot ItemSlot op ItemStackMoveOperation Returns object Close(IPlayer) Removes ability to interact with this inventory for this player. Returns a close inventory packet that can be sent to the server for synchronization. object Close(IPlayer player) Parameters player IPlayer Returns object GetBestSuitedSlot(ItemSlot, List<ItemSlot>) [Obsolete(\"Use GetBestSuitedSlot(ItemSlot sourceSlot, ItemStackMoveOperation op, List<ItemSlot> skipSlots = null) instead\")] WeightedSlot GetBestSuitedSlot(ItemSlot sourceSlot, List<ItemSlot> skipSlots) Parameters sourceSlot ItemSlot skipSlots List<ItemSlot> Returns WeightedSlot GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) Returns the best suited slot to hold the item from the source slot. Attached is also a weight, indicating how well the item is suited for it. If no suitable slot was found, the weight will be 0 and the slot will be null. A higher weight means the slot is better suited to hold the item. This method does not check if the player is actually allowed to access or modify this inventory. Weight will be 1 for a default slot that is empty Weight will be 2 for a default slot that can take one or more items from the source slot Weight could be 10 for an empty armor slot and the source slot contains an armor itemtack WeightedSlot GetBestSuitedSlot(ItemSlot sourceSlot, ItemStackMoveOperation op = null, List<ItemSlot> skipSlots = null) Parameters sourceSlot ItemSlot op ItemStackMoveOperation skipSlots List<ItemSlot> Returns WeightedSlot GetSlotId(ItemSlot) Will return -1 if the slot is not found in this inventory int GetSlotId(ItemSlot slot) Parameters slot ItemSlot Returns int HasOpened(IPlayer) Checks if given player has this inventory currently opened bool HasOpened(IPlayer player) Parameters player IPlayer Returns bool MarkSlotDirty(int) Server Side: Will resent the slot contents to the client and mark them dirty there as well Client Side: Will refresh stack size, model and stuff if this stack is currently being rendered void MarkSlotDirty(int slotId) Parameters slotId int Open(IPlayer) Marks the inventory available for interaction for this player. Returns a open inventory packet that can be sent to the server for synchronization. object Open(IPlayer player) Parameters player IPlayer Returns object TryFlipItems(int, ItemSlot) Attempts to flip the contents of both slots object TryFlipItems(int targetSlotId, ItemSlot sourceSlot) Parameters targetSlotId int sourceSlot ItemSlot Returns object Events SlotModified Event that fires when a slot was modified event Action<int> SlotModified Event Type Action<int> SlotNotified Event that fires when NotifySlot was called event Action<int> SlotNotified Event Type Action<int>"
  },
  "api/Vintagestory.API.Common.IInventoryNetworkUtil.html": {
    "href": "api/Vintagestory.API.Common.IInventoryNetworkUtil.html",
    "title": "Interface IInventoryNetworkUtil | VintageStory API",
    "keywords": "Interface IInventoryNetworkUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IInventoryNetworkUtil Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Api The core API ICoreAPI Api { get; set; } Property Value ICoreAPI PauseInventoryUpdates bool PauseInventoryUpdates { get; set; } Property Value bool Methods DidClose(IPlayer) Closes the target inventory attached to a player. object DidClose(IPlayer player) Parameters player IPlayer Returns object DidOpen(IPlayer) Opens a target inventory, passing it to the player. object DidOpen(IPlayer player) Parameters player IPlayer Returns object GetActivateSlotPacket(int, ItemStackMoveOperation) Gets the active slot packet. object GetActivateSlotPacket(int slotId, ItemStackMoveOperation op) Parameters slotId int The slot ID op ItemStackMoveOperation The operation of the slot. Returns object GetFlipSlotsPacket(IInventory, int, int) Flips the items between the source slot and target slot. object GetFlipSlotsPacket(IInventory sourceInv, int sourceSlotId, int targetSlotId) Parameters sourceInv IInventory The inventory. sourceSlotId int The source slot ID targetSlotId int The target slot ID Returns object HandleClientPacket(IPlayer, int, byte[]) Handles the client packet. void HandleClientPacket(IPlayer byPlayer, int packetId, byte[] data) Parameters byPlayer IPlayer The player the packet came from packetId int the ID of the packet. data byte[] the contents of the packet."
  },
  "api/Vintagestory.API.Common.IItemStack.html": {
    "href": "api/Vintagestory.API.Common.IItemStack.html",
    "title": "Interface IItemStack | VintageStory API",
    "keywords": "Interface IItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a stack of items or blocks public interface IItemStack Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Attributes Attributes assigned to this itemstack. Modifiable. ITreeAttribute Attributes { get; set; } Property Value ITreeAttribute Block The Block if ItemClass==Block, otherwise null Block Block { get; } Property Value Block Class Is it a Block or Item? EnumItemClass Class { get; } Property Value EnumItemClass Collectible The base class the Item/Block inherits from CollectibleObject Collectible { get; } Property Value CollectibleObject Id The items or blocks unique id int Id { get; } Property Value int Item The Item if ItemClass==Item, otherwise null Item Item { get; } Property Value Item StackSize Amount of items or blocks in this stack int StackSize { get; set; } Property Value int Methods Clone() Creates a deep copy of the itemstack ItemStack Clone() Returns ItemStack Equals(IWorldAccessor, ItemStack, params string[]) Checks if this item stack is of the same class, id and has the same stack attributes. Ignores stack size bool Equals(IWorldAccessor worldForResolve, ItemStack sourceStack, params string[] ignoreAttributeSubTrees) Parameters worldForResolve IWorldAccessor sourceStack ItemStack ignoreAttributeSubTrees string[] Returns bool FromBytes(BinaryReader) Deserializes an itemstack from given byte stream void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetDescription(IWorldAccessor, ItemSlot, bool) Returns a multiline description text of the item string GetDescription(IWorldAccessor world, ItemSlot inSlot, bool debug = false) Parameters world IWorldAccessor inSlot ItemSlot debug bool Whether to show additional debug info Returns string GetName() Returns the name displayed in the players inventory string GetName() Returns string MatchesSearchText(IWorldAccessor, string) Checks if the contained item or block name contains given searchtext bool MatchesSearchText(IWorldAccessor world, string searchText) Parameters world IWorldAccessor searchText string Returns bool ToBytes(BinaryWriter) Serializes this itemstack into a byte stream void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Common.ILandClaimAPI.html": {
    "href": "api/Vintagestory.API.Common.ILandClaimAPI.html",
    "title": "Interface ILandClaimAPI | VintageStory API",
    "keywords": "Interface ILandClaimAPI Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ILandClaimAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties All List of all claims on the server. Same as WorldManager.SaveGame.Claims. List<LandClaim> All { get; } Property Value List<LandClaim> Methods Add(LandClaim) Add a new claim. void Add(LandClaim claim) Parameters claim LandClaim Get(BlockPos) Get all claims registered at this position LandClaim[] Get(BlockPos pos) Parameters pos BlockPos Returns LandClaim[] Remove(LandClaim) Remove a claim. Returns false if no such claim was registered bool Remove(LandClaim claim) Parameters claim LandClaim Returns bool TestAccess(IPlayer, BlockPos, EnumBlockAccessFlags) Checks with the permission system if given player has use or place/break permissions on supplied position. Returns always true when called on the client! EnumWorldAccessResponse TestAccess(IPlayer player, BlockPos pos, EnumBlockAccessFlags accessFlag) Parameters player IPlayer pos BlockPos accessFlag EnumBlockAccessFlags Returns EnumWorldAccessResponse TryAccess(IPlayer, BlockPos, EnumBlockAccessFlags) Same as TestAccess(IPlayer, BlockPos, EnumBlockAccessFlags) but also sends an error message to the player and executes a MarkDirty() event the block. Returns always true when called on the client! bool TryAccess(IPlayer player, BlockPos pos, EnumBlockAccessFlags accessFlag) Parameters player IPlayer pos BlockPos accessFlag EnumBlockAccessFlags Returns bool"
  },
  "api/Vintagestory.API.Common.ILogger.html": {
    "href": "api/Vintagestory.API.Common.ILogger.html",
    "title": "Interface ILogger | VintageStory API",
    "keywords": "Interface ILogger Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Interface to the client's and server's event, debug and error logging utilty. public interface ILogger Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties TraceLog If true, will also print to Diagnostics.Debug. bool TraceLog { get; set; } Property Value bool Methods Audit(string) Adds a new Audit log entry with the specified message. void Audit(string message) Parameters message string Audit(string, params object[]) Adds a new Audit log entry with the specified format string and arguments. void Audit(string format, params object[] args) Parameters format string args object[] Build(string) Adds a new Build log entry with the specified message. void Build(string message) Parameters message string Build(string, params object[]) Adds a new Build log entry with the specified format string and arguments. void Build(string format, params object[] args) Parameters format string args object[] Chat(string) Adds a new Chat log entry with the specified message. void Chat(string message) Parameters message string Chat(string, params object[]) Adds a new Chat log entry with the specified format string and arguments. void Chat(string format, params object[] args) Parameters format string args object[] ClearWatchers() Removes any handler that registered to the EntryAdded event. This method is called when the client leaves a world or server shuts down. void ClearWatchers() Debug(string) Adds a new Debug log entry with the specified message. void Debug(string message) Parameters message string Debug(string, params object[]) Adds a new Debug log entry with the specified format string and arguments. void Debug(string format, params object[] args) Parameters format string args object[] Error(Exception) Convenience method for logging exceptions in try/catch blocks void Error(Exception e) Parameters e Exception Error(string) Adds a new Error log entry with the specified message. void Error(string message) Parameters message string Error(string, params object[]) Adds a new Error log entry with the specified format string and arguments. void Error(string format, params object[] args) Parameters format string args object[] Event(string) Adds a new Event log entry with the specified message. void Event(string message) Parameters message string Event(string, params object[]) Adds a new Event log entry with the specified format string and arguments. void Event(string format, params object[] args) Parameters format string args object[] Fatal(Exception) Convenience method for logging exceptions in try/catch blocks void Fatal(Exception e) Parameters e Exception Fatal(string) Adds a new Fatal log entry with the specified message. void Fatal(string message) Parameters message string Fatal(string, params object[]) Adds a new Fatal log entry with the specified format string and arguments. void Fatal(string format, params object[] args) Parameters format string args object[] Log(EnumLogType, string) Adds a new log entry with the specified log type and message. void Log(EnumLogType logType, string message) Parameters logType EnumLogType message string Log(EnumLogType, string, params object[]) Adds a new log entry with the specified log type, format string and arguments. void Log(EnumLogType logType, string format, params object[] args) Parameters logType EnumLogType format string args object[] LogException(EnumLogType, Exception) Logs an exception with the specified log type. void LogException(EnumLogType logType, Exception e) Parameters logType EnumLogType e Exception Notification(string) Adds a new Notification log entry with the specified message. void Notification(string message) Parameters message string Notification(string, params object[]) Adds a new Notification log entry with the specified format string and arguments. void Notification(string format, params object[] args) Parameters format string args object[] StoryEvent(string) Adds a new StoryEvent log entry with the specified message. void StoryEvent(string message) Parameters message string StoryEvent(string, params object[]) Adds a new StoryEvent log entry with the specified format string and arguments. void StoryEvent(string format, params object[] args) Parameters format string args object[] VerboseDebug(string) Adds a new VerboseDebug log entry with the specified message. void VerboseDebug(string message) Parameters message string VerboseDebug(string, params object[]) Adds a new VerboseDebug log entry with the specified format string and arguments. void VerboseDebug(string format, params object[] args) Parameters format string args object[] Warning(Exception) Convenience method for logging exceptions in try/catch blocks void Warning(Exception e) Parameters e Exception Warning(string) Adds a new Warning log entry with the specified message. void Warning(string message) Parameters message string Warning(string, params object[]) Adds a new Warning log entry with the specified format string and arguments. void Warning(string format, params object[] args) Parameters format string args object[] Events EntryAdded Fired each time a new log entry has been added. event LogEntryDelegate EntryAdded Event Type LogEntryDelegate"
  },
  "api/Vintagestory.API.Common.IMapChunk.html": {
    "href": "api/Vintagestory.API.Common.IMapChunk.html",
    "title": "Interface IMapChunk | VintageStory API",
    "keywords": "Interface IMapChunk Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Holds 2 dimensional data for one chunk column public interface IMapChunk Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties CaveHeightDistort byte[] CaveHeightDistort { get; set; } Property Value byte[] CurrentPass The current world generation pass this chunk column is in EnumWorldGenPass CurrentPass { get; set; } Property Value EnumWorldGenPass MapRegion The map region this map chunk resides in IMapRegion MapRegion { get; } Property Value IMapRegion RainHeightMap The position of the last block that is not rain permeable before the first airblock ushort[] RainHeightMap { get; } Property Value ushort[] SedimentaryThicknessMap ushort[] SedimentaryThicknessMap { get; } Property Value ushort[] SnowAccum ConcurrentDictionary<Vec2i, float> SnowAccum { get; } Property Value ConcurrentDictionary<Vec2i, float> TopRockIdMap The rock block id of the topmost rock layer int[] TopRockIdMap { get; } Property Value int[] WorldGenTerrainHeightMap The position of the last block before the first airblock before world gen pass Vegetation ushort[] WorldGenTerrainHeightMap { get; } Property Value ushort[] YMax The highest position of any non-air block ushort YMax { get; set; } Property Value ushort Methods GetData(string) Server: Can be used to retrieve custom data from the map chunk (as previously set by SetModdata) Client: Not implemented. Map chunk Moddata is not synced from server to client [Obsolete(\"Use GetModData instead\")] byte[] GetData(string key) Parameters key string Returns byte[] GetModdata(string) Server: Retrieve arbitrary, permanently stored mod data Client: Not implemented. Map chunk Moddata is not synced from server to client byte[] GetModdata(string key) Parameters key string Returns byte[] GetModdata<T>(string, T) Server: Retrieve arbitrary, permantly stored mod data Client: Not implemented. Map chunk Moddata is not synced from server to client T GetModdata<T>(string key, T defaultValue = default) Parameters key string defaultValue T Default value Returns T Type Parameters T MarkDirty() Tells the server that it has to save the changes of this chunk to disk. No effect when called client side. void MarkDirty() MarkFresh() Causes the TTL counter to reset so that it the mapchunk does not unload. No effect when called client side. void MarkFresh() RemoveModdata(string) Server: Removes the permanently stored data. Client: Not implemented. Map chunk Moddata is not synced from server to client void RemoveModdata(string key) Parameters key string SetData(string, byte[]) Server: Can be used to store custom data along with the map chunk Client: Not implemented. Map chunk Moddata is not synced from server to client [Obsolete(\"Use SetModData instead\")] void SetData(string key, byte[] data) Parameters key string data byte[] SetModdata(string, byte[]) Server: Allows setting of arbitrary, permanently stored moddata of this map chunk. Client: Not implemented. Map chunk Moddata is not synced from server to client void SetModdata(string key, byte[] data) Parameters key string data byte[] SetModdata<T>(string, T) Server: Allows setting of arbitrary, permanantly stored moddata of this map chunk. Client: Not implemented. Map chunk Moddata is not synced from server to client void SetModdata<T>(string key, T data) Parameters key string data T Type Parameters T"
  },
  "api/Vintagestory.API.Common.IMapRegion.html": {
    "href": "api/Vintagestory.API.Common.IMapRegion.html",
    "title": "Interface IMapRegion | VintageStory API",
    "keywords": "Interface IMapRegion Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll 2D Map data for a 16x16 area of chunk columns. Holds a few maps for the chunk generation. public interface IMapRegion Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties BeachMap Holds a beach strength map IntDataMap2D BeachMap { get; set; } Property Value IntDataMap2D BlockPatchMaps Density maps for block patches Dictionary<string, IntDataMap2D> BlockPatchMaps { get; set; } Property Value Dictionary<string, IntDataMap2D> ClimateMap Holds temperature and rain fall. 16-23 bits = Red = temperature 8-15 bits = Green = rain 0-7 bits = Blue = unused IntDataMap2D ClimateMap { get; set; } Property Value IntDataMap2D DirtyForSaving bool DirtyForSaving { get; set; } Property Value bool FlowerMap Currently unuseds IntDataMap2D FlowerMap { get; set; } Property Value IntDataMap2D ForestMap Holds a forest density map IntDataMap2D ForestMap { get; set; } Property Value IntDataMap2D GeneratedStructures List of structures that were generated in this region List<GeneratedStructure> GeneratedStructures { get; } Property Value List<GeneratedStructure> GeologicProvinceMap Holds the geologic province indices IntDataMap2D GeologicProvinceMap { get; set; } Property Value IntDataMap2D LandformMap Holds the landform indices IntDataMap2D LandformMap { get; set; } Property Value IntDataMap2D ModData Holds the raw mod data. [Obsolete(\"Use Get/Set/RemoveModData instead\")] Dictionary<string, byte[]> ModData { get; } Property Value Dictionary<string, byte[]> ModMaps Holds the mod mappings. Dictionary<string, IntDataMap2D> ModMaps { get; } Property Value Dictionary<string, IntDataMap2D> OceanMap IntDataMap2D OceanMap { get; set; } Property Value IntDataMap2D OreMapVerticalDistortBottom IntDataMap2D OreMapVerticalDistortBottom { get; } Property Value IntDataMap2D OreMapVerticalDistortTop IntDataMap2D OreMapVerticalDistortTop { get; } Property Value IntDataMap2D OreMaps Gets the ore map for the given item. Dictionary<string, IntDataMap2D> OreMaps { get; } Property Value Dictionary<string, IntDataMap2D> RockStrata Holds the rock strata noise maps IntDataMap2D[] RockStrata { get; set; } Property Value IntDataMap2D[] ShrubMap Holds a shrub density map IntDataMap2D ShrubMap { get; set; } Property Value IntDataMap2D UpheavelMap IntDataMap2D UpheavelMap { get; set; } Property Value IntDataMap2D Methods AddGeneratedStructure(GeneratedStructure) A thread-safe way to add a new GeneratedStructure, also marks DirtyForSaving = true void AddGeneratedStructure(GeneratedStructure generatedStructure) Parameters generatedStructure GeneratedStructure GetModdata(string) Server: Retrieve arbitrary, permanently stored mod data Client: Not implemented. Map chunk Moddata is not synced from server to client byte[] GetModdata(string key) Parameters key string Returns byte[] GetModdata<T>(string) Server: Retrieve arbitrary, permantly stored mod data Client: Not implemented. Map chunk Moddata is not synced from server to client T GetModdata<T>(string key) Parameters key string Returns T Type Parameters T RemoveModdata(string) Server: Removes the permanently stored data. Client: Not implemented. Map chunk Moddata is not synced from server to client void RemoveModdata(string key) Parameters key string SetModdata(string, byte[]) Server: Allows setting of arbitrary, permanently stored moddata of this map region. Client: Not implemented. Map chunk Moddata is not synced from server to client void SetModdata(string key, byte[] data) Parameters key string data byte[] Use SerializerUtil to encode your data to bytes SetModdata<T>(string, T) Server: Allows setting of arbitrary, permanantly stored moddata of this map region. Client: Not implemented. Map chunk Moddata is not synced from server to client void SetModdata<T>(string key, T data) Parameters key string data T Type Parameters T"
  },
  "api/Vintagestory.API.Common.IMaterialExchangeable.html": {
    "href": "api/Vintagestory.API.Common.IMaterialExchangeable.html",
    "title": "Interface IMaterialExchangeable | VintageStory API",
    "keywords": "Interface IMaterialExchangeable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IMaterialExchangeable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods ExchangeWith(ItemSlot, ItemSlot) bool ExchangeWith(ItemSlot fromSlot, ItemSlot toSlot) Parameters fromSlot ItemSlot toSlot ItemSlot Returns bool"
  },
  "api/Vintagestory.API.Common.IMiniDimension.html": {
    "href": "api/Vintagestory.API.Common.IMiniDimension.html",
    "title": "Interface IMiniDimension | VintageStory API",
    "keywords": "Interface IMiniDimension Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Provides read/write access to the blocks of a movable mini-dimension. public interface IMiniDimension : IBlockAccessor Inherited Members IBlockAccessor.ChunkSize IBlockAccessor.RegionSize IBlockAccessor.MapSizeX IBlockAccessor.MapSizeY IBlockAccessor.MapSizeZ IBlockAccessor.RegionMapSizeX IBlockAccessor.RegionMapSizeY IBlockAccessor.RegionMapSizeZ IBlockAccessor.UpdateSnowAccumMap IBlockAccessor.MapSize IBlockAccessor.GetChunk(int, int, int) IBlockAccessor.GetChunk(long) IBlockAccessor.GetMapRegion(int, int) IBlockAccessor.GetChunkAtBlockPos(BlockPos) IBlockAccessor.GetBlockId(BlockPos) IBlockAccessor.GetBlock(BlockPos) IBlockAccessor.GetBlockRaw(int, int, int, int) IBlockAccessor.GetBlock(BlockPos, int) IBlockAccessor.GetMostSolidBlock(BlockPos) IBlockAccessor.GetChunkAtBlockPos(int, int, int) IBlockAccessor.GetBlockId(int, int, int) IBlockAccessor.GetBlockOrNull(int, int, int, int) IBlockAccessor.GetBlock(int, int, int, int) IBlockAccessor.GetBlock(int, int, int) IBlockAccessor.GetMostSolidBlock(int, int, int) IBlockAccessor.WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) IBlockAccessor.SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.WalkStructures(BlockPos, Action<GeneratedStructure>) IBlockAccessor.WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) IBlockAccessor.SetBlock(int, BlockPos) IBlockAccessor.SetBlock(int, BlockPos, int) IBlockAccessor.SetBlock(int, BlockPos, ItemStack) IBlockAccessor.ExchangeBlock(int, BlockPos) IBlockAccessor.BreakBlock(BlockPos, IPlayer, float) IBlockAccessor.DamageBlock(BlockPos, BlockFacing, float) IBlockAccessor.GetBlock(int) IBlockAccessor.GetBlock(AssetLocation) IBlockAccessor.SpawnBlockEntity(string, BlockPos, ItemStack) IBlockAccessor.SpawnBlockEntity(BlockEntity) IBlockAccessor.RemoveBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity<T>(BlockPos) IBlockAccessor.IsValidPos(int, int, int) IBlockAccessor.IsValidPos(BlockPos) IBlockAccessor.IsNotTraversable(double, double, double) IBlockAccessor.IsNotTraversable(double, double, double, int) IBlockAccessor.IsNotTraversable(BlockPos) IBlockAccessor.Commit() IBlockAccessor.Rollback() IBlockAccessor.MarkBlockEntityDirty(BlockPos) IBlockAccessor.TriggerNeighbourBlockUpdate(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, IPlayer) IBlockAccessor.MarkBlockModified(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, Action) IBlockAccessor.GetLightLevel(BlockPos, EnumLightLevelType) IBlockAccessor.GetLightLevel(int, int, int, EnumLightLevelType) IBlockAccessor.GetLightRGBs(int, int, int) IBlockAccessor.GetLightRGBs(BlockPos) IBlockAccessor.GetLightRGBsAsInt(int, int, int) IBlockAccessor.GetTerrainMapheightAt(BlockPos) IBlockAccessor.GetRainMapHeightAt(BlockPos) IBlockAccessor.GetDistanceToRainFall(BlockPos, int, int) IBlockAccessor.GetRainMapHeightAt(int, int) IBlockAccessor.GetMapChunk(Vec2i) IBlockAccessor.GetMapChunk(int, int) IBlockAccessor.GetMapChunkAtBlockPos(BlockPos) IBlockAccessor.GetClimateAt(BlockPos, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, int) IBlockAccessor.GetWindSpeedAt(Vec3d) IBlockAccessor.GetWindSpeedAt(BlockPos) IBlockAccessor.MarkAbsorptionChanged(int, int, BlockPos) IBlockAccessor.RemoveBlockLight(byte[], BlockPos) IBlockAccessor.SetDecor(Block, BlockPos, BlockFacing) IBlockAccessor.SetDecor(Block, BlockPos, int) IBlockAccessor.GetDecors(BlockPos) IBlockAccessor.GetSubDecors(BlockPos) IBlockAccessor.GetDecor(BlockPos, int) IBlockAccessor.BreakDecor(BlockPos, BlockFacing, int?) IBlockAccessor.MarkChunkDecorsModified(BlockPos) IBlockAccessor.IsSideSolid(int, int, int, BlockFacing) IBlockAccessor.CreateMiniDimension(Vec3d) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Properties BlocksPreviewSubDimension_Server If this matches the subDimensionId, it indicates that this is a blocks preview minidimension int BlocksPreviewSubDimension_Server { get; set; } Property Value int CurrentPos EntityPos CurrentPos { get; set; } Property Value EntityPos Dirty bool Dirty { get; set; } Property Value bool TrackSelection bool TrackSelection { get; set; } Property Value bool selectionTrackingOriginalPos BlockPos selectionTrackingOriginalPos { get; set; } Property Value BlockPos subDimensionId int subDimensionId { get; set; } Property Value int Methods AdjustPosForSubDimension(BlockPos) void AdjustPosForSubDimension(BlockPos pos) Parameters pos BlockPos ClearChunks() Clears this mini-dimension (and empties any chunks but does not unload them) ready for re-use void ClearChunks() CollectChunksForSending(IPlayer[]) Sends dirty chunks to nearby clients void CollectChunksForSending(IPlayer[] players) Parameters players IPlayer[] GetRenderOffset(float) Used when rendering FastVec3d GetRenderOffset(float dt) Parameters dt float Returns FastVec3d GetRenderTransformMatrix(float[], Vec3d) float[] GetRenderTransformMatrix(float[] currentModelViewMatrix, Vec3d playerPos) Parameters currentModelViewMatrix float[] playerPos Vec3d Returns float[] ReceiveClientChunk(long, IWorldChunk, IWorldAccessor) void ReceiveClientChunk(long chunkIndex3d, IWorldChunk chunk, IWorldAccessor world) Parameters chunkIndex3d long chunk IWorldChunk world IWorldAccessor SetRenderOffsetY(int) void SetRenderOffsetY(int offsetY) Parameters offsetY int SetSelectionTrackingSubId_Server(int) void SetSelectionTrackingSubId_Server(int dimensionId) Parameters dimensionId int SetSubDimensionId(int) void SetSubDimensionId(int dimensionId) Parameters dimensionId int UnloadUnusedServerChunks() Unload any chunks which are still empty after the dimension has been re-used void UnloadUnusedServerChunks()"
  },
  "api/Vintagestory.API.Common.IModLoader.html": {
    "href": "api/Vintagestory.API.Common.IModLoader.html",
    "title": "Interface IModLoader | VintageStory API",
    "keywords": "Interface IModLoader Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IModLoader Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Mods Gets a collection of all enabled mods. IEnumerable<Mod> Mods { get; } Property Value IEnumerable<Mod> Systems Gets a collection of all loaded and enabled mod systems. IEnumerable<ModSystem> Systems { get; } Property Value IEnumerable<ModSystem> Methods GetMod(string) Gets the enabled mod with the specified mod ID (domain). Returns null if no mod with that mod ID was found. Mod GetMod(string modID) Parameters modID string Returns Mod GetModSystem(string) Gets a loaded mod system with the specified full name, that is the namespace and class name, for example \"Vintagestory.ServerMods.Core\" for the survival mod. Returns null if no mod with that name was found. ModSystem GetModSystem(string fullName) Parameters fullName string Returns ModSystem GetModSystem<T>(bool) Gets a loaded mod system with the specified type. Returns null if no mod of that type was found. T GetModSystem<T>(bool withInheritance = true) where T : ModSystem Parameters withInheritance bool Returns T Type Parameters T IsModEnabled(string) Returns if the mod with the specified mod ID (domain) is enabled. bool IsModEnabled(string modID) Parameters modID string Returns bool IsModSystemEnabled(string) Returns if the mod system with the specified full name is loaded and enabled. bool IsModSystemEnabled(string fullName) Parameters fullName string Returns bool"
  },
  "api/Vintagestory.API.Common.IMountable.html": {
    "href": "api/Vintagestory.API.Common.IMountable.html",
    "title": "Interface IMountable | VintageStory API",
    "keywords": "Interface IMountable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents something the player can mount. Usually a block or an entity. public interface IMountable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) MountableUtil.GetSeatOfMountedEntity(IMountable, Entity) MountableUtil.IsBeingControlled(IMountable) MountableUtil.IsMountedBy(IMountable, Entity) Properties Controller The entity that controls this mountable - there can only be one Entity Controller { get; } Property Value Entity ControllingControls The controls of the controlling seat (if any) EntityControls ControllingControls { get; } Property Value EntityControls OnEntity The entity which this mountable really is (for example raft, boat or elk) - may be null if the IMountable is a bed or other block Entity OnEntity { get; } Property Value Entity Position Position of this mountable EntityPos Position { get; } Property Value EntityPos Seats The seats of this mountable IMountableSeat[] Seats { get; } Property Value IMountableSeat[] Methods AnyMounted() bool AnyMounted() Returns bool"
  },
  "api/Vintagestory.API.Common.IMountableListener.html": {
    "href": "api/Vintagestory.API.Common.IMountableListener.html",
    "title": "Interface IMountableListener | VintageStory API",
    "keywords": "Interface IMountableListener Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IMountableListener Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods DidMount(EntityAgent) void DidMount(EntityAgent entityAgent) Parameters entityAgent EntityAgent DidUnmount(EntityAgent) void DidUnmount(EntityAgent entityAgent) Parameters entityAgent EntityAgent"
  },
  "api/Vintagestory.API.Common.IMountableSeat.html": {
    "href": "api/Vintagestory.API.Common.IMountableSeat.html",
    "title": "Interface IMountableSeat | VintageStory API",
    "keywords": "Interface IMountableSeat Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a seat of a mountable object. public interface IMountableSeat Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AngleMode How the mounted entity should rotate EnumMountAngleMode AngleMode { get; } Property Value EnumMountAngleMode CanControl If this \"mountable seat\" is the one that controls the mountable entity/block bool CanControl { get; } Property Value bool Config SeatConfig Config { get; set; } Property Value SeatConfig Controls The control scheme of this seat EntityControls Controls { get; } Property Value EntityControls DoTeleportOnUnmount bool DoTeleportOnUnmount { get; set; } Property Value bool Entity The entity behind this mountable supplier, if any Entity Entity { get; } Property Value Entity FpHandPitchFollow float FpHandPitchFollow { get; } Property Value float LocalEyePos Where to place the first person camera Vec3f LocalEyePos { get; } Property Value Vec3f MountSupplier The supplier of this mount provider. e.g. the raft entity for the 2 raft seats IMountable MountSupplier { get; } Property Value IMountable Passenger The entity sitting on this seat Entity Passenger { get; } Property Value Entity PassengerEntityIdForInit long PassengerEntityIdForInit { get; set; } Property Value long RenderTransform Transformation matrix that can be used to render the mounted entity at the right position. The transform is relative to the SeatPosition. May be null. Matrixf RenderTransform { get; } Property Value Matrixf SeatId string SeatId { get; set; } Property Value string SeatPosition Exact position of this seat EntityPos SeatPosition { get; } Property Value EntityPos SkipIdleAnimation Whether or not the mount should play the idle anim bool SkipIdleAnimation { get; } Property Value bool SuggestedAnimation What animation the mounted entity should play AnimationMetaData SuggestedAnimation { get; } Property Value AnimationMetaData Methods CanMount(EntityAgent) bool CanMount(EntityAgent entityAgent) Parameters entityAgent EntityAgent Returns bool CanUnmount(EntityAgent) Return true if the currently mounted entity can unmount (or if not mounted in the first place) bool CanUnmount(EntityAgent entityAgent) Parameters entityAgent EntityAgent Returns bool DidMount(EntityAgent) Called when the entity mounted himself void DidMount(EntityAgent entityAgent) Parameters entityAgent EntityAgent DidUnmount(EntityAgent) Called when the entity unmounted himself void DidUnmount(EntityAgent entityAgent) Parameters entityAgent EntityAgent MountableToTreeAttributes(TreeAttribute) When the entity unloads you should write whatever you need in here to reconstruct the IMountable after it's loaded again Reconstruct it by registering a mountable instancer through api.RegisterMountable(string className, GetMountableDelegate mountableInstancer) You must also set a string with key className, that is the same string that you used for RegisterMountable() void MountableToTreeAttributes(TreeAttribute tree) Parameters tree TreeAttribute"
  },
  "api/Vintagestory.API.Common.IMultiblockOffset.html": {
    "href": "api/Vintagestory.API.Common.IMultiblockOffset.html",
    "title": "Interface IMultiblockOffset | VintageStory API",
    "keywords": "Interface IMultiblockOffset Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used to get the control / main block of a multiblock structure and to test for access right in land claims public interface IMultiblockOffset Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetControlBlockPos(BlockPos) BlockPos GetControlBlockPos(BlockPos pos) Parameters pos BlockPos Returns BlockPos"
  },
  "api/Vintagestory.API.Common.INetworkAPI.html": {
    "href": "api/Vintagestory.API.Common.INetworkAPI.html",
    "title": "Interface INetworkAPI | VintageStory API",
    "keywords": "Interface INetworkAPI Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface INetworkAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetChannel(string) Returns a previously registered channeled, null otherwise INetworkChannel GetChannel(string channelName) Parameters channelName string Returns INetworkChannel GetUdpChannel(string) Returns a previously registered channeled, null otherwise INetworkChannel GetUdpChannel(string channelName) Parameters channelName string Returns INetworkChannel RegisterChannel(string) Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up. INetworkChannel RegisterChannel(string channelName) Parameters channelName string Unique channel identifier Returns INetworkChannel RegisterUdpChannel(string) Supplies you with your very own and personal network channel with which you can send packets to the server. Use the same channelName on the client and server to have them link up. Do not send larger messages then 508 bytes since some clients may be behind NAT/firwalls that may drop your packets if they get fragmented INetworkChannel RegisterUdpChannel(string channelName) Parameters channelName string Unique channel identifier Returns INetworkChannel"
  },
  "api/Vintagestory.API.Common.IOwnedInventory.html": {
    "href": "api/Vintagestory.API.Common.IOwnedInventory.html",
    "title": "Interface IOwnedInventory | VintageStory API",
    "keywords": "Interface IOwnedInventory Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IOwnedInventory Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Owner Entity Owner { get; } Property Value Entity"
  },
  "api/Vintagestory.API.Common.IParticlePropertiesProvider.html": {
    "href": "api/Vintagestory.API.Common.IParticlePropertiesProvider.html",
    "title": "Interface IParticlePropertiesProvider | VintageStory API",
    "keywords": "Interface IParticlePropertiesProvider Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a provider of particle properties to be used when generating a particle public interface IParticlePropertiesProvider Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often bool Async { get; } Property Value bool BlueEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 EvolvingNatFloat BlueEvolve { get; } Property Value EvolvingNatFloat Bounciness float Bounciness { get; } Property Value float DeathParticles The particle to spawn upon the particle death. IParticlePropertiesProvider[] DeathParticles { get; } Property Value IParticlePropertiesProvider[] DieInAir Whether the particle should despawn when in contact with air (e.g. for water bubbles) bool DieInAir { get; } Property Value bool DieInLiquid Whether the particle should despawn when in contact with liquids bool DieInLiquid { get; } Property Value bool DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location bool DieOnRainHeightmap { get; } Property Value bool GravityEffect How strongly the particle is affected by gravity (0 = no gravity applied) float GravityEffect { get; } Property Value float GreenEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 EvolvingNatFloat GreenEvolve { get; } Property Value EvolvingNatFloat LifeLength How long the particle should live (default = 1) float LifeLength { get; } Property Value float LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark int LightEmission { get; } Property Value int OpacityEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat ParentVelocity Vec3f ParentVelocity { get; } Property Value Vec3f ParentVelocityWeight float ParentVelocityWeight { get; } Property Value float ParticleModel Cube or Quad? EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. float Quantity { get; } Property Value float RandomVelocityChange bool RandomVelocityChange { get; } Property Value bool RedEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 EvolvingNatFloat RedEvolve { get; } Property Value EvolvingNatFloat SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] SecondarySpawnInterval Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn. This is only honored if this particle is defined as a secondary particle. float SecondarySpawnInterval { get; } Property Value float SelfPropelled If true, a particle will restore it's initial velocity once it's obstruction has been cleared e.g. Smokes will start flying upwards again if is currently stuck under a block and the block is removed bool SelfPropelled { get; } Property Value bool Size Size of the particle float Size { get; } Property Value float SizeEvolve Size change over time EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid bool SwimOnLiquid { get; } Property Value bool TerrainCollision If true, the particle will collide with the terrain bool TerrainCollision { get; } Property Value bool VelocityEvolve Velocity change over time (acts as a multiplier to the velocity) EvolvingNatFloat[] VelocityEvolve { get; } Property Value EvolvingNatFloat[] VertexFlags See also VertexFlags int VertexFlags { get; } Property Value int Methods BeginParticle() Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles void BeginParticle() FromBytes(BinaryReader, IWorldAccessor) For reading from the network void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation void Init(ICoreAPI api) Parameters api ICoreAPI PrepareForSecondarySpawn(ParticleBase) Updates instance related state for secondary particles based on the given parent particle instance void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase The parent IParticleInstance from which this secondary particle is being spawned ToBytes(BinaryWriter) For sending over the network void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.IPlayer.html": {
    "href": "api/Vintagestory.API.Common.IPlayer.html",
    "title": "Interface IPlayer | VintageStory API",
    "keywords": "Interface IPlayer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a player public interface IPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ClientId The players current client id, 0 if not connected. This is the number thats assigned by the server for any connecting player. You probably don't need this number. int ClientId { get; } Property Value int CurrentBlockSelection The block the player is currently aiming at BlockSelection CurrentBlockSelection { get; } Property Value BlockSelection CurrentEntitySelection The entity the player is currently aiming at EntitySelection CurrentEntitySelection { get; } Property Value EntitySelection Entitlements List of the users entitlements, vanilla servers will list VIV and/or VS Team member entitlements List<Entitlement> Entitlements { get; } Property Value List<Entitlement> Entity The entity the player currently controls EntityPlayer Entity { get; } Property Value EntityPlayer Groups The players player group memberships PlayerGroupMembership[] Groups { get; } Property Value PlayerGroupMembership[] ImmersiveFpMode bool ImmersiveFpMode { get; } Property Value bool InventoryManager Returns the given players inventory manager that let's you do various interesting things with the players inventory. IPlayerInventoryManager InventoryManager { get; } Property Value IPlayerInventoryManager PlayerName Get the players character name. The character name can be changed every 60 days in the account manager, so don't consider the players name as a unique identifier for a player. Use PlayerUID instead string PlayerName { get; } Property Value string PlayerUID Returns the players identifier that is unique across all registered players and will never change. Use this to uniquely identify a player for all eternity. Shorthand for WorldData.PlayerUID string PlayerUID { get; } Property Value string Privileges The list of privileges the player currently has access to (by role or direct assignment) This list is available for the playing player on the client, but not for other players. string[] Privileges { get; } Property Value string[] Role Returns the players privilege role IPlayerRole Role { get; set; } Property Value IPlayerRole WorldData Some world-specific information about the player. This object is stored with the save game. If you modify it server side, be sure to call player.BroadcastPlayerData() to send it to affected clients. IWorldPlayerData WorldData { get; } Property Value IWorldPlayerData Methods GetGroup(int) Returns the membership data if player is part of this group, otherwise null PlayerGroupMembership GetGroup(int groupId) Parameters groupId int Returns PlayerGroupMembership GetGroups() Load the players group that he is a member of PlayerGroupMembership[] GetGroups() Returns PlayerGroupMembership[] HasPrivilege(string) Check if a player has the given privilege bool HasPrivilege(string privilegeCode) Parameters privilegeCode string The privilege to check Returns bool true if the player has the given privilege, false otherwise"
  },
  "api/Vintagestory.API.Common.IPlayerInventoryManager.html": {
    "href": "api/Vintagestory.API.Common.IPlayerInventoryManager.html",
    "title": "Interface IPlayerInventoryManager | VintageStory API",
    "keywords": "Interface IPlayerInventoryManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Let's you do various interesting things with the players inventory. public interface IPlayerInventoryManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ActiveHotbarSlot Returns the currently selected hotbar slot. Might return null if there is no hotbar! ItemSlot ActiveHotbarSlot { get; } Property Value ItemSlot ActiveHotbarSlotNumber The players currently active hot bar slot int ActiveHotbarSlotNumber { get; set; } Property Value int ActiveTool If the player currently holds a tool in the active hand, this value will be set EnumTool? ActiveTool { get; } Property Value EnumTool? CurrentHoveredSlot The slot the player currently hovers over with his mouse cursor ItemSlot CurrentHoveredSlot { get; set; } Property Value ItemSlot Inventories Dictionary of all inventories currently available to the player (some may however not be opened) Note: for iterating through these, Inventories.Values will not be ordered. Instead use InventoriesOrdered if you want consistent ordering on server and client e.g. for shift-click operations Dictionary<string, IInventory> Inventories { get; } Property Value Dictionary<string, IInventory> InventoriesOrdered An iterable collection of all inventories currently available to the player, arranged in the same order (by creation order) on both server and client to prevent syncing / ghosting issues IEnumerable<InventoryBase> InventoriesOrdered { get; } Property Value IEnumerable<InventoryBase> MouseItemSlot Returns the slot that holds the currently dragged itemstack ItemSlot MouseItemSlot { get; } Property Value ItemSlot OffhandHotbarSlot Returns the off hand hotbar slot. Might return null if there is no hotbar! ItemSlot OffhandHotbarSlot { get; } Property Value ItemSlot OffhandTool If the player currently holds a tool in the off hand, this value will be set EnumTool? OffhandTool { get; } Property Value EnumTool? OpenedInventories List of inventories currently opened by the player List<IInventory> OpenedInventories { get; } Property Value List<IInventory> Methods BroadcastHotbarSlot() Server Side: Resends the hotbar slot contents to all other clients to make sure they render the correct held item Client side: No effect void BroadcastHotbarSlot() CloseInventory(IInventory) Notifies the inventory manager that the player has closed an inventory. Should always be called on both sides (client and server). After closing interaction with given inventory becomes no longer possible until reopened object CloseInventory(IInventory inventory) Parameters inventory IInventory Returns object CloseInventoryAndSync(IInventory) Like CloseInventory() but also sends the necessary packet to the server, if called from the client side: exactly like CloseInventory() if called from the server side void CloseInventoryAndSync(IInventory inventory) Parameters inventory IInventory DiscardAll() Will discard all of the players inventory contents void DiscardAll() DropAllInventoryItems(IInventory) Drops the contents of given inventory void DropAllInventoryItems(IInventory inv) Parameters inv IInventory DropItem(ItemSlot, bool) Drops the current contents of given slot onto the ground bool DropItem(ItemSlot slot, bool fullStack) Parameters slot ItemSlot fullStack bool Returns bool DropMouseSlotItems(bool) Drops the current contents of the mouse slot onto the ground bool DropMouseSlotItems(bool dropAll) Parameters dropAll bool If false, will only drop 1 Returns bool Find(Func<ItemSlot, bool>) Iterates over all inventory slots, returns true if your matcher returns true bool Find(Func<ItemSlot, bool> matcher) Parameters matcher Func<ItemSlot, bool> Returns bool GetBestSuitedSlot(ItemSlot, bool, ItemStackMoveOperation, List<ItemSlot>) Returns a slot that would best fit the contents of the source slot. This checks all inventories currently opened by the player. ItemSlot GetBestSuitedSlot(ItemSlot sourceSlot, bool onlyPlayerInventory, ItemStackMoveOperation op = null, List<ItemSlot> skipSlots = null) Parameters sourceSlot ItemSlot onlyPlayerInventory bool op ItemStackMoveOperation skipSlots List<ItemSlot> Returns ItemSlot GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) [Obsolete(\"Use GetBestSuitedSlot(ItemSlot sourceSlot, bool onlyPlayerInventory, ItemStackMoveOperation op, List<ItemSlot> skipSlots = null) instead\")] ItemSlot GetBestSuitedSlot(ItemSlot sourceSlot, ItemStackMoveOperation op, List<ItemSlot> skipSlots) Parameters sourceSlot ItemSlot op ItemStackMoveOperation skipSlots List<ItemSlot> Returns ItemSlot GetHotbarInventory() Returns the hotbar inventory object. Obvious comment is being obvious. IInventory GetHotbarInventory() Returns IInventory GetHotbarItemstack(int) Gets the itemstack that in the given slot number of the players hotbar ItemStack GetHotbarItemstack(int slotId) Parameters slotId int Returns ItemStack GetInventory(string) Retrieve a players inventory. Returns null if not found. IInventory GetInventory(string inventoryId) Parameters inventoryId string Returns IInventory GetInventory(string, out InventoryBase) Returns true if the invID is found, and the found IInventory value is in invFound; similar to Dictionary.TryGetValue, invFound is undefined if the result is false bool GetInventory(string invID, out InventoryBase invFound) Parameters invID string invFound InventoryBase Returns bool GetInventoryName(string) Returns the full inventory id for given inventory class name, e.g. GlobalConstants.creativeInvClassName string GetInventoryName(string inventoryClassName) Parameters inventoryClassName string Returns string GetOwnInventory(string) Same as GetInventory() with playeruid appended to the inventoryClassName. Returns null if not found. You can use GlobalConstants.*ClassName to get the vanilla player inventories. IInventory GetOwnInventory(string inventoryClassName) Parameters inventoryClassName string Returns IInventory HasInventory(IInventory) Shorthand for Inventories.ContainsValue(inventory) bool HasInventory(IInventory inventory) Parameters inventory IInventory Returns bool NotifySlot(IPlayer, ItemSlot) Produces a visual cue on given slot, if it's currently part of an inventory and visible to the player If called on server side, the server will send a network packet to notify the client. void NotifySlot(IPlayer player, ItemSlot slot) Parameters player IPlayer slot ItemSlot OnDeath() Will drop all of the players inventory contents void OnDeath() OpenInventory(IInventory) Notifies the inventory manager that the player has opened an inventory. Should always be called on both sides (client and server). Only then interaction with other inventories becomes possible object OpenInventory(IInventory inventory) Parameters inventory IInventory Returns object TryGiveItemstack(ItemStack, bool) Tries to add given itemstack to the players inventory bool TryGiveItemstack(ItemStack itemstack, bool slotNotifyEffect = false) Parameters itemstack ItemStack slotNotifyEffect bool Returns bool TryTransferAway(ItemSlot, ref ItemStackMoveOperation, bool, bool) Tries to move away items from the source slot into any other slot of another inventory object[] TryTransferAway(ItemSlot sourceSlot, ref ItemStackMoveOperation op, bool onlyPlayerInventory, bool slotNotifyEffect = false) Parameters sourceSlot ItemSlot op ItemStackMoveOperation onlyPlayerInventory bool Forces to place the item only into the players personal inventory slotNotifyEffect bool Returns object[] One or more client packets that may be sent to the server for synchronisation TryTransferAway(ItemSlot, ref ItemStackMoveOperation, bool, StringBuilder, bool) object[] TryTransferAway(ItemSlot sourceSlot, ref ItemStackMoveOperation op, bool onlyPlayerInventory, StringBuilder shiftClickDebugText, bool slotNotifyEffect = false) Parameters sourceSlot ItemSlot op ItemStackMoveOperation onlyPlayerInventory bool shiftClickDebugText StringBuilder slotNotifyEffect bool Returns object[] TryTransferTo(ItemSlot, ItemSlot, ref ItemStackMoveOperation) Tries to move items from source slot to target slot (useful for client side inventory utilities) object TryTransferTo(ItemSlot sourceSlot, ItemSlot targetSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot targetSlot ItemSlot op ItemStackMoveOperation If successfull, a client packet that may be sent to the server for synchronisation Returns object"
  },
  "api/Vintagestory.API.Common.IPlayerRole.html": {
    "href": "api/Vintagestory.API.Common.IPlayerRole.html",
    "title": "Interface IPlayerRole | VintageStory API",
    "keywords": "Interface IPlayerRole Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IPlayerRole Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AutoGrant bool AutoGrant { get; set; } Property Value bool Code string Code { get; } Property Value string Color Color Color { get; } Property Value Color DefaultGameMode EnumGameMode DefaultGameMode { get; } Property Value EnumGameMode DefaultSpawn PlayerSpawnPos DefaultSpawn { get; } Property Value PlayerSpawnPos Description string Description { get; } Property Value string ForcedSpawn PlayerSpawnPos ForcedSpawn { get; } Property Value PlayerSpawnPos LandClaimAllowance int LandClaimAllowance { get; set; } Property Value int LandClaimMaxAreas int LandClaimMaxAreas { get; set; } Property Value int LandClaimMinSize Vec3i LandClaimMinSize { get; set; } Property Value Vec3i Name string Name { get; } Property Value string PrivilegeLevel int PrivilegeLevel { get; } Property Value int Privileges List<string> Privileges { get; } Property Value List<string> RuntimePrivileges HashSet<string> RuntimePrivileges { get; } Property Value HashSet<string> Methods EqualLevel(IPlayerRole) bool EqualLevel(IPlayerRole role) Parameters role IPlayerRole Returns bool GrantPrivilege(params string[]) void GrantPrivilege(params string[] privileges) Parameters privileges string[] IsSuperior(IPlayerRole) bool IsSuperior(IPlayerRole role) Parameters role IPlayerRole Returns bool RevokePrivilege(string) void RevokePrivilege(string privilege) Parameters privilege string"
  },
  "api/Vintagestory.API.Common.IRecipeBase-1.html": {
    "href": "api/Vintagestory.API.Common.IRecipeBase-1.html",
    "title": "Interface IRecipeBase<T> | VintageStory API",
    "keywords": "Interface IRecipeBase<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IRecipeBase<T> Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Enabled bool Enabled { get; set; } Property Value bool Ingredients IRecipeIngredient[] Ingredients { get; } Property Value IRecipeIngredient[] Name AssetLocation Name { get; set; } Property Value AssetLocation Output IRecipeOutput Output { get; } Property Value IRecipeOutput Methods Clone() T Clone() Returns T GetNameToCodeMapping(IWorldAccessor) Dictionary<string, string[]> GetNameToCodeMapping(IWorldAccessor world) Parameters world IWorldAccessor Returns Dictionary<string, string[]> Resolve(IWorldAccessor, string) bool Resolve(IWorldAccessor world, string sourceForErrorLogging) Parameters world IWorldAccessor sourceForErrorLogging string Returns bool"
  },
  "api/Vintagestory.API.Common.IRecipeIngredient.html": {
    "href": "api/Vintagestory.API.Common.IRecipeIngredient.html",
    "title": "Interface IRecipeIngredient | VintageStory API",
    "keywords": "Interface IRecipeIngredient Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IRecipeIngredient Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Code AssetLocation Code { get; set; } Property Value AssetLocation Name string Name { get; } Property Value string"
  },
  "api/Vintagestory.API.Common.IRecipeOutput.html": {
    "href": "api/Vintagestory.API.Common.IRecipeOutput.html",
    "title": "Interface IRecipeOutput | VintageStory API",
    "keywords": "Interface IRecipeOutput Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IRecipeOutput Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods FillPlaceHolder(string, string) void FillPlaceHolder(string key, string value) Parameters key string value string"
  },
  "api/Vintagestory.API.Common.IResolvableCollectible.html": {
    "href": "api/Vintagestory.API.Common.IResolvableCollectible.html",
    "title": "Interface IResolvableCollectible | VintageStory API",
    "keywords": "Interface IResolvableCollectible Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IResolvableCollectible Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetDropsForHandbook(ItemStack, IPlayer) BlockDropItemStack[] GetDropsForHandbook(ItemStack handbookStack, IPlayer forPlayer) Parameters handbookStack ItemStack forPlayer IPlayer Returns BlockDropItemStack[] Resolve(ItemSlot, IWorldAccessor, bool) void Resolve(ItemSlot intoslot, IWorldAccessor worldForResolve, bool resolveImports = true) Parameters intoslot ItemSlot worldForResolve IWorldAccessor resolveImports bool"
  },
  "api/Vintagestory.API.Common.IRotatable.html": {
    "href": "api/Vintagestory.API.Common.IRotatable.html",
    "title": "Interface IRotatable | VintageStory API",
    "keywords": "Interface IRotatable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Implement this interface if schematics containing this block entity needs to modify it's tree attribute data. Beware, this method is called without the block entity existing in the world (yet). The modified tree will then be used to actually create the block public interface IRotatable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods OnTransformed(IWorldAccessor, ITreeAttribute, int, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, EnumAxis?) If flipAxis is null it means it was not flipped, only horizontally rotated. Apply flip first, and then rotation. void OnTransformed(IWorldAccessor worldAccessor, ITreeAttribute tree, int degreeRotation, Dictionary<int, AssetLocation> oldBlockIdMapping, Dictionary<int, AssetLocation> oldItemIdMapping, EnumAxis? flipAxis) Parameters worldAccessor IWorldAccessor tree ITreeAttribute degreeRotation int oldBlockIdMapping Dictionary<int, AssetLocation> Used for rotation of schematics, so microblocks can update their materials oldItemIdMapping Dictionary<int, AssetLocation> flipAxis EnumAxis?"
  },
  "api/Vintagestory.API.Common.ISearchTextProvider.html": {
    "href": "api/Vintagestory.API.Common.ISearchTextProvider.html",
    "title": "Interface ISearchTextProvider | VintageStory API",
    "keywords": "Interface ISearchTextProvider Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ISearchTextProvider Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetSearchText(IWorldAccessor, ItemSlot) string GetSearchText(IWorldAccessor world, ItemSlot inSlot) Parameters world IWorldAccessor inSlot ItemSlot Returns string"
  },
  "api/Vintagestory.API.Common.IServerMapChunk.html": {
    "href": "api/Vintagestory.API.Common.IServerMapChunk.html",
    "title": "Interface IServerMapChunk | VintageStory API",
    "keywords": "Interface IServerMapChunk Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IServerMapChunk : IMapChunk Inherited Members IMapChunk.SnowAccum IMapChunk.MapRegion IMapChunk.CurrentPass IMapChunk.SetData(string, byte[]) IMapChunk.GetData(string) IMapChunk.SetModdata(string, byte[]) IMapChunk.RemoveModdata(string) IMapChunk.GetModdata(string) IMapChunk.SetModdata<T>(string, T) IMapChunk.GetModdata<T>(string, T) IMapChunk.CaveHeightDistort IMapChunk.RainHeightMap IMapChunk.WorldGenTerrainHeightMap IMapChunk.TopRockIdMap IMapChunk.SedimentaryThicknessMap IMapChunk.YMax IMapChunk.MarkFresh() IMapChunk.MarkDirty() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ISkillItemRenderer.html": {
    "href": "api/Vintagestory.API.Common.ISkillItemRenderer.html",
    "title": "Interface ISkillItemRenderer | VintageStory API",
    "keywords": "Interface ISkillItemRenderer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ISkillItemRenderer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Render(float, float, float, float) void Render(float dt, float x, float y, float z) Parameters dt float x float y float z float"
  },
  "api/Vintagestory.API.Common.ISlotProvider.html": {
    "href": "api/Vintagestory.API.Common.ISlotProvider.html",
    "title": "Interface ISlotProvider | VintageStory API",
    "keywords": "Interface ISlotProvider Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ISlotProvider Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Slots ItemSlot[] Slots { get; } Property Value ItemSlot[]"
  },
  "api/Vintagestory.API.Common.ITagRegistry.html": {
    "href": "api/Vintagestory.API.Common.ITagRegistry.html",
    "title": "Interface ITagRegistry | VintageStory API",
    "keywords": "Interface ITagRegistry Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll On server side: blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. On client side: all tags are received from server along side blocks, times, and entities, an available in 'AssetsFinalize' stage. Tags can be converted to tag array or tag id as soon as it is registered. Tags can be registered only on server side no later than 'AssetsFinalize' stage. public interface ITagRegistry Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods BlockTagIdToTag(ushort) Returns tag by block tag id. If the tag id is not registered, it will return empty string. string BlockTagIdToTag(ushort id) Parameters id ushort Block tag id Returns string tag BlockTagToTagId(string) Returns tag id of the block tag. If the tag is not registered, it will return 0. Blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. ushort BlockTagToTagId(string tag) Parameters tag string Block tag Returns ushort tag id BlockTagsToTagArray(params string[]) Converts list of block tags to tags array. Unknown tags are ignored. Blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. BlockTagArray BlockTagsToTagArray(params string[] tags) Parameters tags string[] List of block tags Returns BlockTagArray Tag array suitable for quick comparisons BlockTagsToTagIds(string[], bool) Converts a list of block tags to their corresponding tag IDs. If removeUnknownTags is true, any unknown tags will be removed from the list. Result is sorted in ascending order. ushort[] BlockTagsToTagIds(string[] tags, bool removeUnknownTags = false) Parameters tags string[] List of block tags removeUnknownTags bool If set to true, not registered tags wont be included in the result Returns ushort[] List of tag ids sorted in ascending order EntityTagIdToTag(ushort) Returns tag by entity tag id. If the tag id is not registered, it will return empty string. string EntityTagIdToTag(ushort id) Parameters id ushort Entity tag id Returns string tag EntityTagToTagId(string) Returns tag id of the entity tag. If the tag is not registered, it will return 0. Blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. ushort EntityTagToTagId(string tag) Parameters tag string Entity tag Returns ushort tag id EntityTagsToTagArray(params string[]) Converts list of entity tags to tags array. Unknown tags are ignored. Blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. EntityTagArray EntityTagsToTagArray(params string[] tags) Parameters tags string[] List of entity tags Returns EntityTagArray Tag array suitable for quick comparisons EntityTagsToTagIds(string[], bool) Converts a list of entity tags to their corresponding tag IDs. If removeUnknownTags is true, any unknown tags will be removed from the list. Result is sorted in ascending order. ushort[] EntityTagsToTagIds(string[] tags, bool removeUnknownTags = false) Parameters tags string[] List of entity tags removeUnknownTags bool If set to true, not registered tags wont be included in the result Returns ushort[] List of tag ids sorted in ascending order ItemTagIdToTag(ushort) Returns tag by item tag id. If the tag id is not registered, it will return empty string. string ItemTagIdToTag(ushort id) Parameters id ushort Item tag id Returns string tag ItemTagToTagId(string) Returns tag id of the item tag. If the tag is not registered, it will return 0. Blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. ushort ItemTagToTagId(string tag) Parameters tag string Item tag Returns ushort tag id ItemTagsToTagArray(params string[]) Converts list of item tags to tags array. Unknown tags are ignored. Blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. ItemTagArray ItemTagsToTagArray(params string[] tags) Parameters tags string[] List of item tags Returns ItemTagArray Tag array suitable for quick comparisons ItemTagsToTagIds(string[], bool) Converts a list of item tags to their corresponding tag IDs. If removeUnknownTags is true, any unknown tags will be removed from the list. Result is sorted in ascending order. ushort[] ItemTagsToTagIds(string[] tags, bool removeUnknownTags = false) Parameters tags string[] List of item tags removeUnknownTags bool If set to true, not registered tags wont be included in the result Returns ushort[] List of tag ids sorted in ascending order LoadTagsFromAssets(ICoreServerAPI) Loads tags from 'TagRegistry.TagsAssetPath' assets from all domains. Is only used by 'RegistryObjectTypeLoader'. Not meant to be called by mods. void LoadTagsFromAssets(ICoreServerAPI api) Parameters api ICoreServerAPI RegisterBlockTags(params string[]) Registers new block tags. Should be called only on server side. Should be called no later than 'AssetsFinalize' stage. void RegisterBlockTags(params string[] tags) Parameters tags string[] RegisterEntityTags(params string[]) Registers new entity tags. Should be called only on server side. Should be called no later than 'AssetsFinalize' stage. void RegisterEntityTags(params string[] tags) Parameters tags string[] RegisterItemTags(params string[]) Registers new item tags. Should be called only on server side. Should be called no later than 'AssetsFinalize' stage. void RegisterItemTags(params string[] tags) Parameters tags string[]"
  },
  "api/Vintagestory.API.Common.ITextureLocationDictionary.html": {
    "href": "api/Vintagestory.API.Common.ITextureLocationDictionary.html",
    "title": "Interface ITextureLocationDictionary | VintageStory API",
    "keywords": "Interface ITextureLocationDictionary Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ITextureLocationDictionary Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties this[AssetLocationAndSource] int this[AssetLocationAndSource textureLoc] { get; } Parameters textureLoc AssetLocationAndSource Property Value int Methods AddTextureLocation(AssetLocationAndSource) bool AddTextureLocation(AssetLocationAndSource textureLoc) Parameters textureLoc AssetLocationAndSource Returns bool CollectAndBakeTexturesFromShape(Shape, IDictionary<string, CompositeTexture>, AssetLocation) void CollectAndBakeTexturesFromShape(Shape compositeShape, IDictionary<string, CompositeTexture> targetDict, AssetLocation baseLoc) Parameters compositeShape Shape targetDict IDictionary<string, CompositeTexture> baseLoc AssetLocation ContainsKey(AssetLocation) bool ContainsKey(AssetLocation loc) Parameters loc AssetLocation Returns bool GetOrAddTextureLocation(AssetLocationAndSource) int GetOrAddTextureLocation(AssetLocationAndSource textureLoc) Parameters textureLoc AssetLocationAndSource Returns int SetTextureLocation(AssetLocationAndSource) void SetTextureLocation(AssetLocationAndSource assetLocationAndSource) Parameters assetLocationAndSource AssetLocationAndSource"
  },
  "api/Vintagestory.API.Common.ITimedDespawn.html": {
    "href": "api/Vintagestory.API.Common.ITimedDespawn.html",
    "title": "Interface ITimedDespawn | VintageStory API",
    "keywords": "Interface ITimedDespawn Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface ITimedDespawn Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties DespawnSeconds float DespawnSeconds { get; set; } Property Value float Methods SetDespawnByCalendarDate(double) void SetDespawnByCalendarDate(double value) Parameters value double"
  },
  "api/Vintagestory.API.Common.IVariableSeatsMountable.html": {
    "href": "api/Vintagestory.API.Common.IVariableSeatsMountable.html",
    "title": "Interface IVariableSeatsMountable | VintageStory API",
    "keywords": "Interface IVariableSeatsMountable Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IVariableSeatsMountable : IMountable Inherited Members IMountable.Seats IMountable.Position IMountable.AnyMounted() IMountable.Controller IMountable.OnEntity IMountable.ControllingControls Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) MountableUtil.GetSeatOfMountedEntity(IMountable, Entity) MountableUtil.IsBeingControlled(IMountable) MountableUtil.IsMountedBy(IMountable, Entity) Methods RegisterSeat(SeatConfig) void RegisterSeat(SeatConfig seat) Parameters seat SeatConfig RemoveSeat(string) void RemoveSeat(string seatId) Parameters seatId string"
  },
  "api/Vintagestory.API.Common.IWearableShapeSupplier.html": {
    "href": "api/Vintagestory.API.Common.IWearableShapeSupplier.html",
    "title": "Interface IWearableShapeSupplier | VintageStory API",
    "keywords": "Interface IWearableShapeSupplier Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IWearableShapeSupplier Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetShape(ItemStack, Entity, string) Shape GetShape(ItemStack stack, Entity forEntity, string texturePrefixCode) Parameters stack ItemStack forEntity Entity texturePrefixCode string Returns Shape null for returning back to default behavior (read shape from attributes)"
  },
  "api/Vintagestory.API.Common.IWithDrawnHeight.html": {
    "href": "api/Vintagestory.API.Common.IWithDrawnHeight.html",
    "title": "Interface IWithDrawnHeight | VintageStory API",
    "keywords": "Interface IWithDrawnHeight Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used for blocks (e.g. tallgrass and flowers) where the drawnHeight is set in attributes public interface IWithDrawnHeight Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties drawnHeight Measured in texture pixels based on our standard pixel density for 32x32 textures. So a value of 32 would be one block high; the typical value of 48 is the full height of tallgrass or a flowerTall because those use 48x48 pixel textures int drawnHeight { get; set; } Property Value int"
  },
  "api/Vintagestory.API.Common.IWorldAccessor.html": {
    "href": "api/Vintagestory.API.Common.IWorldAccessor.html",
    "title": "Interface IWorldAccessor | VintageStory API",
    "keywords": "Interface IWorldAccessor Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Important interface to access the game world. public interface IWorldAccessor Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AllOnlinePlayers Gets a list of all online players. Warning: Also returns currently connecting player whose player data may not have been fully initialized. Check for player.ConnectionState to avoid these. IPlayer[] AllOnlinePlayers { get; } Property Value IPlayer[] Array containing the IDs of online players AllPlayers Gets a list of all players that connected to this server at least once while the server was running. When called client side you will receive the same as AllOnlinePlayers IPlayer[] AllPlayers { get; } Property Value IPlayer[] Array containing the IDs of online players Api The api interface ICoreAPI Api { get; } Property Value ICoreAPI AssetManager Loaded game assets IAssetManager AssetManager { get; } Property Value IAssetManager BlockAccessor Access blocks and other world data from loaded chunks, fault tolerant IBlockAccessor BlockAccessor { get; } Property Value IBlockAccessor BlockLightLevels The currently configured block light brightness levels float[] BlockLightLevels { get; } Property Value float[] Blocks List of all loaded blocks. The array index is the block id. Some may be null or placeholders (then block.code is null). Client-side none are null, what was null return as air blocks. IList<Block> Blocks { get; } Property Value IList<Block> BulkBlockAccessor Fault tolerant bulk block access to the worlds block data. Since this is a single bulk block access instance the cached data is shared for everything accessing this method, hence should only be accessed from the main thread and any changed comitted within the same game tick. You can however use the WorldManager api to get your own instance of a bulk block accessor IBulkBlockAccessor BulkBlockAccessor { get; } Property Value IBulkBlockAccessor Calendar Interface to access the game calendar. On the server side only available after run stage 'LoadGamePre' (before that it is null) IGameCalendar Calendar { get; } Property Value IGameCalendar ChunkProvider IChunkProvider ChunkProvider { get; } Property Value IChunkProvider Claims The land claiming api interface ILandClaimAPI Claims { get; } Property Value ILandClaimAPI ClassRegistry Interface to create instance of certain classes IClassRegistryAPI ClassRegistry { get; } Property Value IClassRegistryAPI Collectibles List of all loaded blocks and items without placeholders List<CollectibleObject> Collectibles { get; } Property Value List<CollectibleObject> CollisionTester For collision testing in the main thread CollisionTester CollisionTester { get; } Property Value CollisionTester Config The current world config ITreeAttribute Config { get; } Property Value ITreeAttribute DefaultEntityTrackingRange The range in blocks within a client will receive regular updates for an entity int DefaultEntityTrackingRange { get; } Property Value int DefaultSpawnPosition The default spawn position as sent by the server (usually the map middle). Does not take player specific spawn point into account EntityPos DefaultSpawnPosition { get; } Property Value EntityPos ElapsedMilliseconds Amount of milliseconds ellapsed since startup long ElapsedMilliseconds { get; } Property Value long EntityDebugMode Whether the current side (client/server) is in entity debug mode bool EntityDebugMode { get; } Property Value bool EntityTypeCodes List of the codes of all loaded entity types, in the AssetLocation short string format (e.g. \"creature\" for entities with domain game:, \"domain:creature\" for entities with other domains) List<string> EntityTypeCodes { get; } Property Value List<string> EntityTypes List of all loaded entity types. List<EntityProperties> EntityTypes { get; } Property Value List<EntityProperties> FrameProfiler Gets the frame profiler utility. FrameProfilerUtil FrameProfiler { get; } Property Value FrameProfilerUtil GridRecipes List of all loaded crafting recipes List<GridRecipe> GridRecipes { get; } Property Value List<GridRecipe> InteresectionTester Utility for testing intersections. Only access from main thread. AABBIntersectionTest InteresectionTester { get; } Property Value AABBIntersectionTest Items List of all loaded items. The array index is the item id. Some may be placeholders (then item.code is null). Server-side, some may be null; client-side, a check for item == null is not necessary. IList<Item> Items { get; } Property Value IList<Item> LoadedChunkIndices Returns a list all loaded chunk positions in the form of a long index. Code to turn that into x/y/z coords: Vec3i coords = new Vec3i( (int)(chunkIndex3d % ChunkMapSizeX), (int)(chunkIndex3d / ((long)ChunkMapSizeX * ChunkMapSizeZ)), (int)((chunkIndex3d / ChunkMapSizeX) % ChunkMapSizeZ) ); Retrieving the list is not a very fast process, not suggested to be called every frame long[] LoadedChunkIndices { get; } Property Value long[] LoadedMapChunkIndices Returns a list all loaded chunk positions in the form of a long index long[] LoadedMapChunkIndices { get; } Property Value long[] Logger Logging Utility ILogger Logger { get; } Property Value ILogger Rand Just a random number generator. Makes use of ThreadLocal for thread safety. Random Rand { get; } Property Value Random SavegameIdentifier A globally unique identifier for this savegame string SavegameIdentifier { get; } Property Value string SeaLevel The currently configured sea level (y-coordinate) int SeaLevel { get; } Property Value int Seed The world seed. Accessible on the server and the client int Seed { get; } Property Value int Side The current side (client/server) EnumAppSide Side { get; } Property Value EnumAppSide SunBrightness The currently configured max sun light level int SunBrightness { get; } Property Value int SunLightLevels The currently configured sun light brightness levels float[] SunLightLevels { get; } Property Value float[] Methods GetBlock(int) Retrieve the block class from given block id Block GetBlock(int blockId) Parameters blockId int Returns Block GetBlock(AssetLocation) Retrieve the block class from given block code. Will return null if the block does not exist. Logs a warning if block does not exist Block GetBlock(AssetLocation blockCode) Parameters blockCode AssetLocation Returns Block GetBlockAccessor(bool, bool, bool, bool) Retrieve a customized interface to access blocks in the loaded game world. IBlockAccessor GetBlockAccessor(bool synchronize, bool relight, bool strict, bool debug = false) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after a call to SetBlock and the light values changed by that strict bool Log an error message if GetBlock/SetBlock was called to an unloaded chunk debug bool If strict, crashes the server if a unloaded chunk was crashed, prints an exception and exports a png image of the current loaded chunks Returns IBlockAccessor GetBlockAccessorBulkMinimalUpdate(bool, bool) Retrieve a customized interface to access blocks in the loaded game world. Does not relight. On commit all touched blocks are updated at once. This method is currently used for the snow accumulation system IBulkBlockAccessor GetBlockAccessorBulkMinimalUpdate(bool synchronize, bool debug = false) Parameters synchronize bool debug bool Returns IBulkBlockAccessor GetBlockAccessorBulkUpdate(bool, bool, bool) Retrieve a customized interface to access blocks in the loaded game world. Does not to relight/sync on a SetBlock until Commit() is called. On commit all touched blocks are relit/synced at once. This method should be used when setting many blocks (e.g. tree generation, explosion, etc.). IBulkBlockAccessor GetBlockAccessorBulkUpdate(bool synchronize, bool relight, bool debug = false) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after the a call to SetBlock and the light values changed by that debug bool Returns IBulkBlockAccessor GetBlockAccessorMapChunkLoading(bool, bool) Retrieve a special Bulk blockaccessor which can have the chunks it accesses directly provided to it from a loading mapchunk. On commit all touched blocks are updated at once. This method is currently used for the snow accumulation system IBulkBlockAccessor GetBlockAccessorMapChunkLoading(bool synchronize, bool debug = false) Parameters synchronize bool debug bool Returns IBulkBlockAccessor GetBlockAccessorPrefetch(bool, bool) Same as GetBlockAccessor but you have to call PrefetchBlocks() before using GetBlock(). It pre-loads all blocks in given area resulting in faster GetBlock() access IBlockAccessorPrefetch GetBlockAccessorPrefetch(bool synchronize, bool relight) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after a call to SetBlock and the light values changed by that Returns IBlockAccessorPrefetch GetBlockAccessorRevertable(bool, bool, bool) Same as GetBlockAccessorBulkUpdate, additionally, each Commit() stores the previous state and you can perform undo/redo operations on these. IBlockAccessorRevertable GetBlockAccessorRevertable(bool synchronize, bool relight, bool debug = false) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after a call to SetBlock and the light values changed by that debug bool Returns IBlockAccessorRevertable GetCachingBlockAccessor(bool, bool) Same as the normal block accessor but remembers the previous chunk that was accessed. This can give you a 10-50% performance boosts when you scan many blocks in tight loops DONT FORGET: Call .Begin() before getting/setting in a tight loop. Not calling it can cause the game to crash ICachingBlockAccessor GetCachingBlockAccessor(bool synchronize, bool relight) Parameters synchronize bool relight bool Returns ICachingBlockAccessor GetEntitiesAround(Vec3d, float, float, ActionConsumable<Entity>) Retrieve all entities within given range and given matcher method. If now matcher method is supplied, all entities are returned. Entity[] GetEntitiesAround(Vec3d position, float horRange, float vertRange, ActionConsumable<Entity> matches = null) Parameters position Vec3d horRange float vertRange float matches ActionConsumable<Entity> Returns Entity[] GetEntitiesInsideCuboid(BlockPos, BlockPos, ActionConsumable<Entity>) Retrieve all entities within a cuboid bound by startPos and endPos. If now matcher method is supplied, all entities are returned. Entity[] GetEntitiesInsideCuboid(BlockPos startPos, BlockPos endPos, ActionConsumable<Entity> matches = null) Parameters startPos BlockPos endPos BlockPos matches ActionConsumable<Entity> Returns Entity[] GetEntityById(long) Retrieve an entity by its unique id, returns null if no such entity exists or hasn't been loaded Entity GetEntityById(long entityId) Parameters entityId long Returns Entity GetEntityType(AssetLocation) Retrieve the entity class from given entity code. Will return null if the entity does not exist. EntityProperties GetEntityType(AssetLocation entityCode) Parameters entityCode AssetLocation Returns EntityProperties GetIntersectingEntities(BlockPos, Cuboidf[], ActionConsumable<Entity>) Retrieves the first found entity that intersects any of the supplied collisionboxes offseted by basePos. This is a helper method for you to determine if you can place a block at given position. You can also implement it yourself with intersection testing and GetEntitiesAround() Entity[] GetIntersectingEntities(BlockPos basePos, Cuboidf[] collisionBoxes, ActionConsumable<Entity> matches = null) Parameters basePos BlockPos collisionBoxes Cuboidf[] matches ActionConsumable<Entity> Returns Entity[] GetItem(int) Retrieve the item class from given item id Item GetItem(int itemId) Parameters itemId int Returns Item GetItem(AssetLocation) Retrieve the item class from given item code. Will return null if the item does not exist. Item GetItem(AssetLocation itemCode) Parameters itemCode AssetLocation Returns Item GetLockFreeBlockAccessor() This block accessor is read only and does not use lock() or chunk.Unpack() in order to make it very fast. This comes at the cost of sometimes reading invalid data (block id = 0) when the chunk is packed or being packed. IBlockAccessor GetLockFreeBlockAccessor() Returns IBlockAccessor GetNearestEntity(Vec3d, float, float, ActionConsumable<Entity>) Retrieve the nearest entity within given range and given matcher method Entity GetNearestEntity(Vec3d position, float horRange, float vertRange, ActionConsumable<Entity> matches = null) Parameters position Vec3d horRange float vertRange float matches ActionConsumable<Entity> Returns Entity GetPlayersAround(Vec3d, float, float, ActionConsumable<IPlayer>) Retrieve all players within given range and given matcher method. This method is faster than when using GetEntitiesAround with a matcher for players IPlayer[] GetPlayersAround(Vec3d position, float horRange, float vertRange, ActionConsumable<IPlayer> matches = null) Parameters position Vec3d horRange float vertRange float matches ActionConsumable<IPlayer> Returns IPlayer[] GetRecipeRegistry(string) Retrieve a previously registered recipe registry RecipeRegistryBase GetRecipeRegistry(string code) Parameters code string Returns RecipeRegistryBase HighlightBlocks(IPlayer, int, List<BlockPos>, List<int>, EnumHighlightBlocksMode, EnumHighlightShape, float) Sends given player a list of block positions that should be highlighted void HighlightBlocks(IPlayer player, int highlightSlotId, List<BlockPos> blocks, List<int> colors, EnumHighlightBlocksMode mode = EnumHighlightBlocksMode.Absolute, EnumHighlightShape shape = EnumHighlightShape.Arbitrary, float scale = 1) Parameters player IPlayer highlightSlotId int for multiple highlights use a different number blocks List<BlockPos> colors List<int> mode EnumHighlightBlocksMode shape EnumHighlightShape scale float HighlightBlocks(IPlayer, int, List<BlockPos>, EnumHighlightBlocksMode, EnumHighlightShape) Sends given player a list of block positions that should be highlighted (using a default color) void HighlightBlocks(IPlayer player, int highlightSlotId, List<BlockPos> blocks, EnumHighlightBlocksMode mode = EnumHighlightBlocksMode.Absolute, EnumHighlightShape shape = EnumHighlightShape.Arbitrary) Parameters player IPlayer highlightSlotId int for multiple highlights use a different number blocks List<BlockPos> mode EnumHighlightBlocksMode shape EnumHighlightShape When arbitrary, the blocks list represents the blocks to be highlighted. When Cube the blocks list should contain 2 positions for start and end LoadEntity(Entity, long) Loads a previously created entity into the loadedEntities list. Used when a chunk is loaded. bool LoadEntity(Entity entity, long fromChunkIndex3d) Parameters entity Entity fromChunkIndex3d long Returns bool NearestPlayer(double, double, double) Find the nearest player to the given position IPlayer NearestPlayer(double x, double y, double z) Parameters x double x coordinate y double y coordinate z double z coordinate Returns IPlayer ID of the nearest player PlaySoundAt(AssetLocation, double, double, double, IPlayer, bool, float, float) Plays given sound at given position. void PlaySoundAt(AssetLocation location, double posx, double posy, double posz, IPlayer dualCallByPlayer = null, bool randomizePitch = true, float range = 32, float volume = 1) Parameters location AssetLocation The sound path, without sounds/ prefix or the .ogg ending posx double posy double posz double dualCallByPlayer IPlayer If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client randomizePitch bool range float The range at which the gain will be attenuated to 1% of the supplied volume volume float PlaySoundAt(AssetLocation, double, double, double, IPlayer, float, float, float) Plays given sound at given position. void PlaySoundAt(AssetLocation location, double posx, double posy, double posz, IPlayer dualCallByPlayer, float pitch, float range = 32, float volume = 1) Parameters location AssetLocation posx double posy double posz double dualCallByPlayer IPlayer pitch float range float volume float PlaySoundAt(AssetLocation, double, double, double, IPlayer, EnumSoundType, float, float, float) void PlaySoundAt(AssetLocation location, double posx, double posy, double posz, IPlayer dualCallByPlayer, EnumSoundType soundType, float pitch, float range = 32, float volume = 1) Parameters location AssetLocation posx double posy double posz double dualCallByPlayer IPlayer soundType EnumSoundType pitch float range float volume float PlaySoundAt(AssetLocation, Entity, IPlayer, bool, float, float) Plays given sound at given position. void PlaySoundAt(AssetLocation location, Entity atEntity, IPlayer dualCallByPlayer = null, bool randomizePitch = true, float range = 32, float volume = 1) Parameters location AssetLocation The sound path, without sounds/ prefix or the .ogg ending atEntity Entity dualCallByPlayer IPlayer If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client randomizePitch bool range float The range at which the gain will be attenuated to 1% of the supplied volume volume float PlaySoundAt(AssetLocation, Entity, IPlayer, float, float, float) Plays given sound at given position. void PlaySoundAt(AssetLocation location, Entity atEntity, IPlayer dualCallByPlayer, float pitch, float range = 32, float volume = 1) Parameters location AssetLocation atEntity Entity dualCallByPlayer IPlayer pitch float range float volume float PlaySoundAt(AssetLocation, IPlayer, IPlayer, bool, float, float) Plays given sound at given player position. void PlaySoundAt(AssetLocation location, IPlayer atPlayer, IPlayer dualCallByPlayer = null, bool randomizePitch = true, float range = 32, float volume = 1) Parameters location AssetLocation The sound path, without sounds/ prefix or the .ogg ending atPlayer IPlayer dualCallByPlayer IPlayer If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client randomizePitch bool range float The range at which the gain will be attenuated to 1% of the supplied volume volume float PlaySoundAt(AssetLocation, BlockPos, double, IPlayer, bool, float, float) Plays given sound at given position - dimension aware. Plays at the center of the BlockPos void PlaySoundAt(AssetLocation location, BlockPos pos, double yOffsetFromCenter, IPlayer dualCallByPlayer = null, bool randomizePitch = true, float range = 32, float volume = 1) Parameters location AssetLocation The sound path, without sounds/ prefix or the .ogg ending pos BlockPos yOffsetFromCenter double How much above or below the central Y position of the block to play dualCallByPlayer IPlayer If this call is made on client and on server, set this the causing playerUID to prevent double playing. Essentially dualCall will play the sound on the client, and send it to all other players except source client randomizePitch bool range float The range at which the gain will be attenuated to 1% of the supplied volume volume float PlaySoundFor(AssetLocation, IPlayer, bool, float, float) Plays given sound only for given player. Useful when called server side, for the client side there is no difference over using PlaySoundAt or PlaySoundFor void PlaySoundFor(AssetLocation location, IPlayer forPlayer, bool randomizePitch = true, float range = 32, float volume = 1) Parameters location AssetLocation The sound path, without sounds/ prefix or the .ogg ending forPlayer IPlayer randomizePitch bool range float The range at which the gain will be attenuated to 1% of the supplied volume volume float PlaySoundFor(AssetLocation, IPlayer, float, float, float) void PlaySoundFor(AssetLocation location, IPlayer forPlayer, float pitch, float range = 32, float volume = 1) Parameters location AssetLocation forPlayer IPlayer pitch float range float volume float PlayerByUid(string) Retrieves the worldplayer data object of given player. When called server side the player does not need to be connected. IPlayer PlayerByUid(string playerUid) Parameters playerUid string Returns IPlayer PlayerHasPrivilege(int, string) Returns true if given client has a privilege. Always returns true on the client. bool PlayerHasPrivilege(int clientid, string privilege) Parameters clientid int privilege string Returns bool RayTraceForSelection(IWorldIntersectionSupplier, Vec3d, Vec3d, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) Shoots out a virtual ray at between given positions and stops when the ray hits a block or entity intersection box supplied by given supplier. The block/entity it struck first is then returned by reference. void RayTraceForSelection(IWorldIntersectionSupplier supplier, Vec3d fromPos, Vec3d toPos, ref BlockSelection blockSelection, ref EntitySelection entitySelection, BlockFilter bfilter = null, EntityFilter efilter = null) Parameters supplier IWorldIntersectionSupplier fromPos Vec3d toPos Vec3d blockSelection BlockSelection entitySelection EntitySelection bfilter BlockFilter Can be used to ignore certain blocks. Return false to ignore efilter EntityFilter Can be used to ignore certain entities. Return false to ignore RayTraceForSelection(Ray, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) Shoots out a given ray and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference. void RayTraceForSelection(Ray ray, ref BlockSelection blockSelection, ref EntitySelection entitySelection, BlockFilter filter = null, EntityFilter efilter = null) Parameters ray Ray blockSelection BlockSelection entitySelection EntitySelection filter BlockFilter efilter EntityFilter Can be used to ignore certain entities. Return false to ignore RayTraceForSelection(Vec3d, float, float, float, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) Shoots out a virtual ray at given position and angle and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference. void RayTraceForSelection(Vec3d fromPos, float pitch, float yaw, float range, ref BlockSelection blockSelection, ref EntitySelection entitySelection, BlockFilter bfilter = null, EntityFilter efilter = null) Parameters fromPos Vec3d pitch float yaw float range float blockSelection BlockSelection entitySelection EntitySelection bfilter BlockFilter Can be used to ignore certain blocks. Return false to ignore efilter EntityFilter Can be used to ignore certain entities. Return false to ignore RayTraceForSelection(Vec3d, Vec3d, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) Shoots out a virtual ray at between given positions and stops when the ray hits a block or entity selection box. The block/entity it struck first is then returned by reference. void RayTraceForSelection(Vec3d fromPos, Vec3d toPos, ref BlockSelection blockSelection, ref EntitySelection entitySelection, BlockFilter bfilter = null, EntityFilter efilter = null) Parameters fromPos Vec3d toPos Vec3d blockSelection BlockSelection entitySelection EntitySelection bfilter BlockFilter Can be used to ignore certain blocks. Return false to ignore efilter EntityFilter Can be used to ignore certain entities. Return false to ignore RegisterCallback(Action<float>, int) Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterCallback(Action<float> OnTimePassed, int millisecondDelay) Parameters OnTimePassed Action<float> millisecondDelay int Returns long listenerId RegisterCallback(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) Calls given method after supplied amount of milliseconds, lets you supply a block position to be passed to the method. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterCallback(Action<IWorldAccessor, BlockPos, float> OnTimePassed, BlockPos pos, int millisecondDelay) Parameters OnTimePassed Action<IWorldAccessor, BlockPos, float> pos BlockPos millisecondDelay int Returns long listenerId RegisterCallbackUnique(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) Calls given method after supplied amount of milliseconds. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. Ignores any subsequent registers for the same blockpos while a callback is still in the queue. Used e.g. for liquid physics to prevent unnecessary multiple updates long RegisterCallbackUnique(Action<IWorldAccessor, BlockPos, float> OnGameTick, BlockPos pos, int millisecondInterval) Parameters OnGameTick Action<IWorldAccessor, BlockPos, float> pos BlockPos millisecondInterval int Returns long listenerId RegisterGameTickListener(Action<float>, int, int) Calls given method after every given interval until unregistered. The engine may call your method slightly later since these event are handled only during fixed interval game ticks. long RegisterGameTickListener(Action<float> onGameTick, int millisecondInterval, int initialDelayOffsetMs = 0) Parameters onGameTick Action<float> millisecondInterval int initialDelayOffsetMs int Returns long listenerId SearchBlocks(AssetLocation) Returns all blocktypes matching given wildcard Block[] SearchBlocks(AssetLocation wildcard) Parameters wildcard AssetLocation Returns Block[] SearchItems(AssetLocation) Returns all item types matching given wildcard Item[] SearchItems(AssetLocation wildcard) Parameters wildcard AssetLocation Returns Item[] SpawnCubeParticles(BlockPos, Vec3d, float, int, float, IPlayer, Vec3f) Spawn a bunch of particles colored by the block at given position void SpawnCubeParticles(BlockPos blockPos, Vec3d pos, float radius, int quantity, float scale = 1, IPlayer dualCallByPlayer = null, Vec3f velocity = null) Parameters blockPos BlockPos The position of the block to take the color from pos Vec3d The position where the particles should spawn radius float quantity int scale float dualCallByPlayer IPlayer If this call is made on client and on server, set this to the causing playerUID to prevent double spawning. Essentially dualCall will spawn the particles on the client, and send it to all other players except source client velocity Vec3f SpawnCubeParticles(Vec3d, ItemStack, float, int, float, IPlayer, Vec3f) Spawn a bunch of particles colored by given itemstack void SpawnCubeParticles(Vec3d pos, ItemStack item, float radius, int quantity, float scale = 1, IPlayer dualCallByPlayer = null, Vec3f velocity = null) Parameters pos Vec3d The position where the particles should spawn item ItemStack radius float quantity int scale float dualCallByPlayer IPlayer If this call is made on client and on server, set this to the causing playerUID to prevent double spawning. Essentially dualCall will spawn the particles on the client, and send it to all other players except source client velocity Vec3f SpawnEntity(Entity) Creates a new entity. It's the responsibility of the given Entity to call set its EntityType. This should be done inside its Initialize method before base.Initialize is called. void SpawnEntity(Entity entity) Parameters entity Entity SpawnItemEntity(ItemStack, BlockPos, Vec3d) Spawns a dropped itemstack at given position. Will immediately disappear if stacksize==0 Returns the entity spawned (may be null!) Entity SpawnItemEntity(ItemStack itemstack, BlockPos pos, Vec3d velocity = null) Parameters itemstack ItemStack pos BlockPos velocity Vec3d Returns Entity SpawnItemEntity(ItemStack, Vec3d, Vec3d) Spawns a dropped itemstack at given position. Will immediately disappear if stacksize==0 Returns the entity spawned (may be null!) Entity SpawnItemEntity(ItemStack itemstack, Vec3d position, Vec3d velocity = null) Parameters itemstack ItemStack position Vec3d velocity Vec3d Returns Entity SpawnParticles(float, int, Vec3d, Vec3d, Vec3f, Vec3f, float, float, float, EnumParticleModel, IPlayer) Spawn a bunch of particles void SpawnParticles(float quantity, int color, Vec3d minPos, Vec3d maxPos, Vec3f minVelocity, Vec3f maxVelocity, float lifeLength, float gravityEffect, float scale = 1, EnumParticleModel model = EnumParticleModel.Quad, IPlayer dualCallByPlayer = null) Parameters quantity float color int minPos Vec3d maxPos Vec3d minVelocity Vec3f maxVelocity Vec3f lifeLength float gravityEffect float scale float model EnumParticleModel dualCallByPlayer IPlayer If this call is made on client and on server, set this to the causing playerUID to prevent double spawning. Essentially dualCall will spawn the particles on the client, and send it to all other players except source client SpawnParticles(IParticlePropertiesProvider, IPlayer) Spawn a bunch of particles void SpawnParticles(IParticlePropertiesProvider particlePropertiesProvider, IPlayer dualCallByPlayer = null) Parameters particlePropertiesProvider IParticlePropertiesProvider dualCallByPlayer IPlayer If this call is made on client and on server, set this to the causing playerUID to prevent double spawning. Essentially dualCall will spawn the particles on the client, and send it to all other players except source client SpawnPriorityEntity(Entity) Like SpawnEntity() but sends out the entity spawn and motion packets to nearby clients immediately. Use this e.g. for more responsive projectiles void SpawnPriorityEntity(Entity entity) Parameters entity Entity UnregisterCallback(long) Removes a delayed callback void UnregisterCallback(long listenerId) Parameters listenerId long UnregisterGameTickListener(long) Removes a game tick listener void UnregisterGameTickListener(long listenerId) Parameters listenerId long UpdateEntityChunk(Entity, long) Removes an entity from its old chunk and adds it to the chunk with newChunkIndex3d void UpdateEntityChunk(Entity entity, long newChunkIndex3d) Parameters entity Entity newChunkIndex3d long"
  },
  "api/Vintagestory.API.Common.IWorldChunk.html": {
    "href": "api/Vintagestory.API.Common.IWorldChunk.html",
    "title": "Interface IWorldChunk | VintageStory API",
    "keywords": "Interface IWorldChunk Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public interface IWorldChunk Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties BlockEntities An array holding block Entities currently residing in this chunk. This array may be larger than the amount of block entities in the chunk. Dictionary<BlockPos, BlockEntity> BlockEntities { get; set; } Property Value Dictionary<BlockPos, BlockEntity> Blocks Use Data instead [Obsolete(\"Use Data field\")] IChunkBlocks Blocks { get; } Property Value IChunkBlocks Data Holds all the blockids for each coordinate, access via index: (y * chunksize + z) * chunksize + x IChunkBlocks Data { get; } Property Value IChunkBlocks Disposed Whether this chunk got unloaded bool Disposed { get; } Property Value bool Empty bool Empty { get; set; } Property Value bool Entities An array holding all Entities currently residing in this chunk. This array may be larger than the amount of entities in the chunk. Entity[] Entities { get; } Property Value Entity[] EntitiesCount Actual count of entities in this chunk int EntitiesCount { get; } Property Value int LightPositions Returns a list of a in-chunk indexed positions of all light sources in this chunk HashSet<int> LightPositions { get; set; } Property Value HashSet<int> Lighting Holds all the lighting data for each coordinate, access via index: (y * chunksize + z) * chunksize + x IChunkLight Lighting { get; } Property Value IChunkLight LiveModData Can be used to store non-serialized mod data that is only serialized into the standard moddata dictionary on unload. This prevents the need for constant serializing/deserializing. Useful when storing large amounts of data. Is not populated on chunk load, you need to populate it with stored data yourself using GetModData() Dictionary<string, object> LiveModData { get; set; } Property Value Dictionary<string, object> MapChunk Holds a reference to the current map data of this chunk column IMapChunk MapChunk { get; } Property Value IMapChunk MaybeBlocks Faster (non-blocking) access to blocks at the cost of sometimes returning 0 instead of the real block. Use Data if you need reliable block access. Also should only be used for reading. Currently used for the particle system. IChunkBlocks MaybeBlocks { get; } Property Value IChunkBlocks Methods AcquireBlockReadLock() For bulk chunk GetBlock operations, allows the chunkDataLayers to be pre-locked for reading, instead of entering and releasing one lock per read Best used mainly on the server side unless you know what you are doing. The client-side Chunk Tesselator can need read-access to a chunk at any time so making heavy use of this would cause rendering delays on the client Make sure always to call ReleaseBulkReadLock() when finished. Use a try/finally block if necessary, and complete all read operations within 8 seconds void AcquireBlockReadLock() AddEntity(Entity) Adds an entity to the chunk. void AddEntity(Entity entity) Parameters entity Entity The entity to add. AdjustSelectionBoxForDecor(IBlockAccessor, BlockPos, Cuboidf[]) Adds extra selection boxes in case a decor block is attached at given position Cuboidf[] AdjustSelectionBoxForDecor(IBlockAccessor blockAccessor, BlockPos pos, Cuboidf[] orig) Parameters blockAccessor IBlockAccessor pos BlockPos orig Cuboidf[] Returns Cuboidf[] BreakAllDecorFast(IWorldAccessor, BlockPos, int, bool) Removes a decor block from given position, saves a few cpu cycles by not calculating index3d void BreakAllDecorFast(IWorldAccessor world, BlockPos pos, int index3d, bool callOnBrokenAsDecor = true) Parameters world IWorldAccessor pos BlockPos index3d int callOnBrokenAsDecor bool When set to true it will call block.OnBrokenAsDecor(...) which is used to drop the decors of that block BreakDecor(IWorldAccessor, BlockPos, BlockFacing, int?) If allowed by a player action, removes all decors at given position and calls OnBrokenAsDecor() on all selected decors and drops the items that are returned from Block.GetDrops() bool BreakDecor(IWorldAccessor world, BlockPos pos, BlockFacing side = null, int? decorIndex = null) Parameters world IWorldAccessor pos BlockPos side BlockFacing If null, all the decor blocks on all sides are removed decorIndex int? If not null breaks only this part of the decor for give face. Requires side to be set. Returns bool Dispose() Free up chunk data and pool void Dispose() FinishLightDoubleBuffering() Only to be implemented client side void FinishLightDoubleBuffering() GetDecor(IBlockAccessor, BlockPos, int) Block GetDecor(IBlockAccessor blockAccessor, BlockPos pos, int decorIndex) Parameters blockAccessor IBlockAccessor pos BlockPos decorIndex int Returns Block GetDecors(IBlockAccessor, BlockPos) Block[] GetDecors(IBlockAccessor blockAccessor, BlockPos pos) Parameters blockAccessor IBlockAccessor pos BlockPos Returns Block[] GetLightAbsorptionAt(int, BlockPos, IList<Block>) Returns the higher light absorption between solids and fluids block layers int GetLightAbsorptionAt(int index3d, BlockPos blockPos, IList<Block> blockTypes) Parameters index3d int blockPos BlockPos blockTypes IList<Block> Returns int GetLocalBlockAtBlockPos(IWorldAccessor, int, int, int, int) Block GetLocalBlockAtBlockPos(IWorldAccessor world, int posX, int posY, int posZ, int layer) Parameters world IWorldAccessor posX int posY int posZ int layer int Returns Block GetLocalBlockAtBlockPos(IWorldAccessor, BlockPos) Retrieve a block from this chunk ignoring ice/water layer, performs Unpack() and a modulo operation on the position arg to get a local position in the 0..chunksize range (it's your job to pick out the right chunk before calling this method) Block GetLocalBlockAtBlockPos(IWorldAccessor world, BlockPos position) Parameters world IWorldAccessor position BlockPos Returns Block GetLocalBlockAtBlockPos_LockFree(IWorldAccessor, BlockPos, int) As GetLocalBlockAtBlockPos except lock-free, use it inside paired LockForReading(true/false) calls Block GetLocalBlockAtBlockPos_LockFree(IWorldAccessor world, BlockPos position, int layer = 0) Parameters world IWorldAccessor position BlockPos layer int Returns Block GetLocalBlockEntityAtBlockPos(BlockPos) Retrieve a block entity from this chunk BlockEntity GetLocalBlockEntityAtBlockPos(BlockPos pos) Parameters pos BlockPos Returns BlockEntity GetModdata(string) Retrieve arbitrary, permantly stored mod data byte[] GetModdata(string key) Parameters key string Returns byte[] GetModdata<T>(string, T) Retrieve arbitrary, permantly stored mod data T GetModdata<T>(string key, T defaultValue = default) Parameters key string defaultValue T Returns T Type Parameters T GetSubDecors(IBlockAccessor, BlockPos) Dictionary<int, Block> GetSubDecors(IBlockAccessor blockAccessor, BlockPos position) Parameters blockAccessor IBlockAccessor position BlockPos Returns Dictionary<int, Block> MarkFresh() Marks this chunk as recently accessed. This will prevent the chunk from getting compressed by the in-memory chunk compression algorithm void MarkFresh() MarkModified() Marks this chunk as modified. If called on server side it will be stored to disk on the next autosave or during shutdown, if called on client not much happens (but it will be preserved from packing for next ~8 seconds) void MarkModified() ReleaseBlockReadLock() For bulk chunk GetBlock operations, allows the chunkDataLayers to be pre-locked for reading, instead of entering and releasing one lock per read Make sure always to call ReleaseBulkReadLock() when finished. Use a try/finally block if necessary, and complete all read operations within 8 seconds void ReleaseBlockReadLock() RemoveEntity(long) Removes an entity from the chunk. bool RemoveEntity(long entityId) Parameters entityId long the ID for the entity Returns bool Whether or not the entity was removed. RemoveModdata(string) Removes the permanently stored data. void RemoveModdata(string key) Parameters key string SetDecor(Block, int, int) Sets a decor block to a specific sub-position on the side of an existing block. Use air block (id 0) to remove a decor. bool SetDecor(Block block, int index3d, int faceAndSubposition) Parameters block Block index3d int faceAndSubposition int Returns bool False if there already exists a block in this position and facing SetDecor(Block, int, BlockFacing) Sets a decor block to the side of an existing block. Use air block (id 0) to remove a decor. bool SetDecor(Block block, int index3d, BlockFacing onFace) Parameters block Block index3d int onFace BlockFacing Returns bool False if there already exists a block in this position and facing SetDecors(Dictionary<int, Block>) Set entire Decors for a chunk - used in Server->Client updates void SetDecors(Dictionary<int, Block> newDecors) Parameters newDecors Dictionary<int, Block> SetModdata(string, byte[]) Allows setting of arbitrary, permanantly stored moddata of this chunk. When set on the server before the chunk is sent to the client, the data will also be sent to the client. When set on the client the data is discarded once the chunk gets unloaded void SetModdata(string key, byte[] data) Parameters key string data byte[] SetModdata<T>(string, T) Allows setting of arbitrary, permanantly stored moddata of this chunk. When set on the server before the chunk is sent to the client, the data will also be sent to the client. When set on the client the data is discarded once the chunk gets unloaded void SetModdata<T>(string key, T data) Parameters key string data T Type Parameters T Unpack() Blockdata and Light might be compressed, always call this method if you want to access these void Unpack() UnpackAndReadBlock(int, int) Like Unpack_ReadOnly(), except it actually reads and returns the block ID at index (Returns 0 if the chunk was disposed) int UnpackAndReadBlock(int index, int layer) Parameters index int layer int Returns int Unpack_AndReadLight(int) Like Unpack_ReadOnly(), except it actually reads and returns the Light at index (Returns 0 if the chunk was disposed) ushort Unpack_AndReadLight(int index) Parameters index int Returns ushort Unpack_AndReadLight(int, out int) A version of Unpack_AndReadLight which also returns the lightSat (Returns 0 if the chunk was disposed) ushort Unpack_AndReadLight(int index, out int lightSat) Parameters index int lightSat int Returns ushort Unpack_ReadOnly() Like Unpack(), except it must be used readonly: the calling code promises not to write any changes to this chunk's blocks or lighting bool Unpack_ReadOnly() Returns bool"
  },
  "api/Vintagestory.API.Common.IWorldPlayerData.html": {
    "href": "api/Vintagestory.API.Common.IWorldPlayerData.html",
    "title": "Interface IWorldPlayerData | VintageStory API",
    "keywords": "Interface IWorldPlayerData Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Some world-specific information about a connected player. If you want modify any value, also broadcast the playerdata to all connected clients. This is the object that stored and loaded with the save game public interface IWorldPlayerData Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AreaSelectionMode Block selection mode bool AreaSelectionMode { get; set; } Property Value bool CurrentGameMode The players current game mode. Will return Spectator mode while the player is connecting. EnumGameMode CurrentGameMode { get; set; } Property Value EnumGameMode Deaths int Deaths { get; } Property Value int DesiredViewDistance The players desired viewing distance in blocks int DesiredViewDistance { get; set; } Property Value int EntityControls The controls that moves around the EntityPlayer EntityControls EntityControls { get; } Property Value EntityControls EntityPlayer The player entity this player is currently controlling EntityPlayer EntityPlayer { get; } Property Value EntityPlayer FreeMove Whether the player can freely fly around bool FreeMove { get; set; } Property Value bool FreeMovePlaneLock Whether the player is forcefully kept on vertical or horizontal plane during freemove EnumFreeMovAxisLock FreeMovePlaneLock { get; set; } Property Value EnumFreeMovAxisLock LastApprovedViewDistance The players viewing distance in blocks that is allowed by the server int LastApprovedViewDistance { get; set; } Property Value int MoveSpeedMultiplier The players movement speed float MoveSpeedMultiplier { get; set; } Property Value float NoClip Affected by collision boxes or not bool NoClip { get; set; } Property Value bool PickingRange Range of selectable blox float PickingRange { get; set; } Property Value float PlayerUID The players unique identifier string PlayerUID { get; } Property Value string Methods GetModData<T>(string, T) T GetModData<T>(string key, T defaultValue = default) Parameters key string defaultValue T Returns T Type Parameters T GetModdata(string) Retrieve arbitrary, permantly stored mod data byte[] GetModdata(string key) Parameters key string Returns byte[] RemoveModdata(string) Removes the permanently stored mod data void RemoveModdata(string key) Parameters key string SetModData<T>(string, T) void SetModData<T>(string key, T data) Parameters key string data T Type Parameters T SetModdata(string, byte[]) Allows setting of arbitrary, permanantly stored moddata attached to this player. Not synced to client. void SetModdata(string key, byte[] data) Parameters key string data byte[]"
  },
  "api/Vintagestory.API.Common.IXPlatformInterface.html": {
    "href": "api/Vintagestory.API.Common.IXPlatformInterface.html",
    "title": "Interface IXPlatformInterface | VintageStory API",
    "keywords": "Interface IXPlatformInterface Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The platform interface for various controls. Used by the game to handle various properties. public interface IXPlatformInterface Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Window GameWindow Window { get; set; } Property Value GameWindow Methods AvailableCodecs() AvailableCodec[] AvailableCodecs() Returns AvailableCodec[] FocusWindow() void FocusWindow() GetAviWriter(int, double, string) IAviWriter GetAviWriter(int recordingBufferSize, double framerate, string codeccode) Parameters recordingBufferSize int framerate double codeccode string Returns IAviWriter GetClipboardText() string GetClipboardText() Returns string GetCpuInfo() string GetCpuInfo() Returns string GetFreeDiskSpace(string) Total disk space in bytes long GetFreeDiskSpace(string filepath) Parameters filepath string Returns long GetRamCapacity() Total system ram in bytes long GetRamCapacity() Returns long GetScreenSize() Size2i GetScreenSize() Returns Size2i MoveFileToRecyclebin(string) void MoveFileToRecyclebin(string filepath) Parameters filepath string SetClipboardText(string) void SetClipboardText(string text) Parameters text string ShowMessageBox(string, string) void ShowMessageBox(string title, string text) Parameters title string text string"
  },
  "api/Vintagestory.API.Common.IntArgParser.html": {
    "href": "api/Vintagestory.API.Common.IntArgParser.html",
    "title": "Class IntArgParser | VintageStory API",
    "keywords": "Class IntArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class IntArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase IntArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IntArgParser(string, int, bool) public IntArgParser(string argName, int defaultValue, bool isMandatoryArg) Parameters argName string defaultValue int isMandatoryArg bool IntArgParser(string, int, int, int, bool) public IntArgParser(string argName, int min, int max, int defaultValue, bool isMandatoryArg) Parameters argName string min int max int defaultValue int isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.InventoryBase.html": {
    "href": "api/Vintagestory.API.Common.InventoryBase.html",
    "title": "Class InventoryBase | VintageStory API",
    "keywords": "Class InventoryBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Basic class representing an item inventory Open in GitHub public abstract class InventoryBase : IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object InventoryBase Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Derived DummyInventory InventoryBasePlayer InventoryGeneric Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors InventoryBase(string, string, ICoreAPI) Create a new instance of an inventory. You may choose any value for className and instanceID, but if more than one of these inventories can be opened at the same time, make sure for both of them to have a different id public InventoryBase(string className, string instanceID, ICoreAPI api) Parameters className string instanceID string api ICoreAPI InventoryBase(string, ICoreAPI) Create a new instance of an inventory. InvetoryID must have the format [className]-[instanceId]. You may choose any value for className and instanceID, but if more than one of these inventories can be opened at the same time, make sure for both of them to have a different id public InventoryBase(string inventoryID, ICoreAPI api) Parameters inventoryID string api ICoreAPI Fields Api The world in which the inventory is operating in. Gives inventories access to block types, item types and the ability to drop items on the ground. public ICoreAPI Api Field Value ICoreAPI InvNetworkUtil The network utility for the inventory public IInventoryNetworkUtil InvNetworkUtil Field Value IInventoryNetworkUtil Pos Optional field that can be used to define in-world position of the inventory. Is set by most container block entities. Might be null! public BlockPos Pos Field Value BlockPos baseWeight Is this inventory generally better suited to hold items? (e.g. set to 3 for armor in armor inventory, 2 for any item in hotbar inventory, 1 for any item in normal inventory) protected float baseWeight Field Value float className The name of the class for the invnentory. protected string className Field Value string dirtySlots Slots that have been recently modified. This list is used on the server to update the clients (then cleared) and on the client to redraw itemstacks in guis (then cleared) public HashSet<int> dirtySlots Field Value HashSet<int> instanceID the ID of the instance for the inventory. protected string instanceID Field Value string lastChangedSinceServerStart (Not implemented!) The time it was last changed since the server was started. public long lastChangedSinceServerStart Field Value long openedByPlayerGUIds The players that had opened the inventory. public HashSet<string> openedByPlayerGUIds Field Value HashSet<string> Properties AuditLogAccess If opening or closing should produce a log line in the audit log. Since when items are moved the source and destination is logged already public virtual bool AuditLogAccess { get; set; } Property Value bool ClassName The class name of the inventory. public string ClassName { get; } Property Value string Count Returns the number of slots in this inventory. public abstract int Count { get; } Property Value int CountForNetworkPacket public virtual int CountForNetworkPacket { get; } Property Value int DirtySlots The slots that have been modified server side and need to be resent to the client or need to be redrawn on the client public HashSet<int> DirtySlots { get; } Property Value HashSet<int> Empty Convenience method to check if this inventory contains anything public virtual bool Empty { get; } Property Value bool FirstNonEmptySlot Returns the first slot that is not empty or null public ItemSlot FirstNonEmptySlot { get; } Property Value ItemSlot InventoryID The internal name of the inventory instance. public string InventoryID { get; } Property Value string IsDirty True if this inventory has to be resent to the client or when the client has to redraw them public virtual bool IsDirty { get; } Property Value bool this[int] Gets or sets the slot at the given slot number. Returns null for invalid slot number (below 0 or above Count-1). The setter allows for replacing slots with custom ones, though caution is advised. public abstract ItemSlot this[int slotId] { get; set; } Parameters slotId int Property Value ItemSlot LastChanged Milliseconds since server startup when the inventory was last changed public long LastChanged { get; } Property Value long MaxContentDimensions Optional field, if set, will check against the collectible dimensions and deny placecment if too large public virtual Size3f MaxContentDimensions { get; set; } Property Value Size3f PutLocked Called by item slot, if true, player cannot put items into this inventory public virtual bool PutLocked { get; set; } Property Value bool RemoveOnClose If true, the inventory will be removed from the list of available inventories once closed (i.e. is not a personal inventory that the player carries with him) public virtual bool RemoveOnClose { get; } Property Value bool TakeLocked Called by item slot, if true, player cannot take items from this inventory public virtual bool TakeLocked { get; set; } Property Value bool Methods ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) Call when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items. public virtual object ActivateSlot(int slotId, ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters slotId int sourceSlot ItemSlot op ItemStackMoveOperation Returns object The appropriate packet needed to reflect the changes on the opposing side AfterBlocksLoaded(IWorldAccessor) The event fired after all the blocks have loaded. public virtual void AfterBlocksLoaded(IWorldAccessor world) Parameters world IWorldAccessor CanContain(ItemSlot, ItemSlot) public virtual bool CanContain(ItemSlot sinkSlot, ItemSlot sourceSlot) Parameters sinkSlot ItemSlot sourceSlot ItemSlot Returns bool CanPlayerAccess(IPlayer, EntityPos) Determines whether or not the player can access the invnetory. public virtual bool CanPlayerAccess(IPlayer player, EntityPos position) Parameters player IPlayer The player attempting access. position EntityPos The postion of the entity. Returns bool CanPlayerModify(IPlayer, EntityPos) Determines whether or not the player can modify the invnetory. public virtual bool CanPlayerModify(IPlayer player, EntityPos position) Parameters player IPlayer The player attempting access. position EntityPos The postion of the entity. Returns bool Clear() Deletes the contents of all the slots public void Clear() Close(IPlayer) Removes ability to interact with this inventory for this player. Returns a close inventory packet that can be sent to the server for synchronization. public virtual object Close(IPlayer player) Parameters player IPlayer Returns object DidModifyItemSlot(ItemSlot, ItemStack) Called when one of the containing slots has been modified public virtual void DidModifyItemSlot(ItemSlot slot, ItemStack extractedStack = null) Parameters slot ItemSlot extractedStack ItemStack If non null the itemstack that was taken out DiscardAll() Discards everything in the item slots. public virtual void DiscardAll() DropAll(Vec3d, int) Drops the contents of all the slots into the world. public virtual void DropAll(Vec3d pos, int maxStackSize = 0) Parameters pos Vec3d Where to drop all this stuff. maxStackSize int If non-zero, will split up the stacks into stacks of give max stack size DropSlotIfHot(ItemSlot, IPlayer) public virtual void DropSlotIfHot(ItemSlot slot, IPlayer player = null) Parameters slot ItemSlot player IPlayer DropSlots(Vec3d, params int[]) Drops the contents of the specified slots in the world. public virtual void DropSlots(Vec3d pos, params int[] slotsIds) Parameters pos Vec3d The position of the inventory attached to the slots. slotsIds int[] The slots to have their inventory drop. FromTreeAttributes(ITreeAttribute) Called when the game is loaded or loaded from server public abstract void FromTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute GenEmptySlots(int) Gets a specified number of empty slots. public ItemSlot[] GenEmptySlots(int quantity) Parameters quantity int the number of empty slots to get. Returns ItemSlot[] The pre-specified slots. GetAutoPullFromSlot(BlockFacing) Return the slot where a chute may pull items from. Return null if it is now allowed to pull any items from this inventory public virtual ItemSlot GetAutoPullFromSlot(BlockFacing atBlockFace) Parameters atBlockFace BlockFacing Returns ItemSlot GetAutoPushIntoSlot(BlockFacing, ItemSlot) Return the slot where a chute may push items into. Return null if it shouldn't move items into this inventory. public virtual ItemSlot GetAutoPushIntoSlot(BlockFacing atBlockFace, ItemSlot fromSlot) Parameters atBlockFace BlockFacing fromSlot ItemSlot Returns ItemSlot GetBestSuitedSlot(ItemSlot, List<ItemSlot>) [Obsolete(\"Use GetBestSuitedSlot(ItemSlot sourceSlot, ItemStackMoveOperation op, List<ItemSlot> skipSlots = null) instead\")] public WeightedSlot GetBestSuitedSlot(ItemSlot sourceSlot, List<ItemSlot> skipSlots) Parameters sourceSlot ItemSlot skipSlots List<ItemSlot> Returns WeightedSlot GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) Gets the best sorted slot for the given item. public virtual WeightedSlot GetBestSuitedSlot(ItemSlot sourceSlot, ItemStackMoveOperation op = null, List<ItemSlot> skipSlots = null) Parameters sourceSlot ItemSlot The source item slot. op ItemStackMoveOperation Can be null. If provided allows the inventory to make a better guess at suitability skipSlots List<ItemSlot> The slots to skip. Returns WeightedSlot A weighted slot set. GetDefaultTransitionSpeedMul(EnumTransitionType) protected virtual float GetDefaultTransitionSpeedMul(EnumTransitionType transitionType) Parameters transitionType EnumTransitionType Returns float GetEnumerator() Gets the enumerator for the inventory. public IEnumerator<ItemSlot> GetEnumerator() Returns IEnumerator<ItemSlot> GetSlotId(ItemSlot) Will return -1 if the slot is not found in this inventory public virtual int GetSlotId(ItemSlot slot) Parameters slot ItemSlot Returns int GetSlotsIfExists(IPlayer, string[], int[]) Attempts to get specified slots if the slots exists. public virtual ItemSlot[] GetSlotsIfExists(IPlayer player, string[] invIds, int[] slotIds) Parameters player IPlayer The player owning the slots invIds string[] The inventory IDs slotIds int[] The slot ids Returns ItemSlot[] The slots obtained. GetSuitability(ItemSlot, ItemSlot, bool) How well a stack fits into this inventory. By default 1 for new itemstacks and 3 for an itemstack merge. Chests and other stationary container also add a +1 to the suitability if the source slot is from the players inventory. public virtual float GetSuitability(ItemSlot sourceSlot, ItemSlot targetSlot, bool isMerge) Parameters sourceSlot ItemSlot targetSlot ItemSlot isMerge bool Returns float GetTransitionSpeedMul(EnumTransitionType, ItemStack) Does this inventory speed up or slow down a transition for given itemstack? (Default: 1 for perish and 0 otherwise) public virtual float GetTransitionSpeedMul(EnumTransitionType transType, ItemStack stack) Parameters transType EnumTransitionType stack ItemStack Returns float HasOpened(IPlayer) Checks if given player has this inventory currently opened public virtual bool HasOpened(IPlayer player) Parameters player IPlayer Returns bool InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) public float InvokeTransitionSpeedDelegates(EnumTransitionType transType, ItemStack stack, float mul) Parameters transType EnumTransitionType stack ItemStack mul float Returns float LateInitialize(string, ICoreAPI) You can initialize an InventoryBase with null as parameters and use LateInitialize to set these values later. This is sometimes required during chunk loading. public virtual void LateInitialize(string inventoryID, ICoreAPI api) Parameters inventoryID string api ICoreAPI MarkSlotDirty(int) Server Side: Will resent the slot contents to the client and mark them dirty there as well Client Side: Will refresh stack size, model and stuff if this stack is currently being rendered public virtual void MarkSlotDirty(int slotId) Parameters slotId int NewSlot(int) A command to build a new empty slot. protected virtual ItemSlot NewSlot(int i) Parameters i int the index of the slot. Returns ItemSlot An empty slot bound to this inventory. OnItemSlotModified(ItemSlot) Called when one of the containing slots has been modified public virtual void OnItemSlotModified(ItemSlot slot) Parameters slot ItemSlot OnOwningEntityDeath(Vec3d) public virtual void OnOwningEntityDeath(Vec3d pos) Parameters pos Vec3d OnSearchTerm(string) The event fired when the search is applied to the item. public virtual void OnSearchTerm(string text) Parameters text string Open(IPlayer) Marks the inventory available for interaction for this player. Returns a open inventory packet that can be sent to the server for synchronization. public virtual object Open(IPlayer player) Parameters player IPlayer Returns object PerformNotifySlot(int) Called when one of the containing slot was notified via NotifySlot public virtual void PerformNotifySlot(int slotId) Parameters slotId int ResolveBlocksOrItems() Tells the invnetory to update blocks and items within the invnetory. public virtual void ResolveBlocksOrItems() SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) Creates a collection of slots from a tree. public virtual ItemSlot[] SlotsFromTreeAttributes(ITreeAttribute tree, ItemSlot[] slots = null, List<ItemSlot> modifiedSlots = null) Parameters tree ITreeAttribute The tree to build slots from slots ItemSlot[] pre-existing slots. (default: null) modifiedSlots List<ItemSlot> Pre-modified slots. (default: null) Returns ItemSlot[] SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) Sets the tree attribute using the slots. public void SlotsToTreeAttributes(ItemSlot[] slots, ITreeAttribute tree) Parameters slots ItemSlot[] tree ITreeAttribute ToTreeAttributes(ITreeAttribute) Called when the game is saved or sent to client public abstract void ToTreeAttributes(ITreeAttribute tree) Parameters tree ITreeAttribute TryFlipItemStack(IPlayer, string[], int[], long[]) Attempts to flip the inventory slots. public virtual bool TryFlipItemStack(IPlayer owningPlayer, string[] invIds, int[] slotIds, long[] lastChanged) Parameters owningPlayer IPlayer The player owner of the invnetory slots. invIds string[] The IDs of the player inventory. slotIds int[] The IDs of the target inventory. lastChanged long[] The times these ids were last changed. Returns bool TryFlipItems(int, ItemSlot) Attempts to flip the contents of both slots public object TryFlipItems(int targetSlotId, ItemSlot itemSlot) Parameters targetSlotId int itemSlot ItemSlot Returns object TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) Attempts to move the item stack from the inventory to another slot. public virtual bool TryMoveItemStack(IPlayer player, string[] invIds, int[] slotIds, ref ItemStackMoveOperation op) Parameters player IPlayer The player moving the items invIds string[] The player inventory IDs slotIds int[] The target Ids op ItemStackMoveOperation The operation type. Returns bool Events OnAcquireTransitionSpeed If set, the value is returned when GetTransitionSpeedMul() is called instead of the default value. public event CustomGetTransitionSpeedMulDelegate OnAcquireTransitionSpeed Event Type CustomGetTransitionSpeedMulDelegate OnInventoryClosed Called whenever this inventory was closed public event OnInventoryClosedDelegate OnInventoryClosed Event Type OnInventoryClosedDelegate OnInventoryOpened Called whenever this inventory was opened public event OnInventoryOpenedDelegate OnInventoryOpened Event Type OnInventoryOpenedDelegate SlotModified Called whenever a slot has been modified public event Action<int> SlotModified Event Type Action<int> SlotNotified Called whenever a slot notification event has been fired. Is used by the slot grid gui element to visually wiggle the slot contents public event Action<int> SlotNotified Event Type Action<int>"
  },
  "api/Vintagestory.API.Common.InventoryBasePlayer.html": {
    "href": "api/Vintagestory.API.Common.InventoryBasePlayer.html",
    "title": "Class InventoryBasePlayer | VintageStory API",
    "keywords": "Class InventoryBasePlayer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Abstract class used for all inventories that are \"on\" the player. Any inventory not inheriting from this class will not be stored to the savegame as part of the players inventory. Open in GitHub public abstract class InventoryBasePlayer : InventoryBase, IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable, IOwnedInventory Inheritance object InventoryBase InventoryBasePlayer Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable IOwnedInventory Inherited Members InventoryBase.Api InventoryBase.Pos InventoryBase.MaxContentDimensions InventoryBase.baseWeight InventoryBase.className InventoryBase.instanceID InventoryBase.lastChangedSinceServerStart InventoryBase.openedByPlayerGUIds InventoryBase.InvNetworkUtil InventoryBase.dirtySlots InventoryBase.InventoryID InventoryBase.ClassName InventoryBase.LastChanged InventoryBase.Count InventoryBase.CountForNetworkPacket InventoryBase.this[int] InventoryBase.IsDirty InventoryBase.DirtySlots InventoryBase.TakeLocked InventoryBase.PutLocked InventoryBase.SlotModified InventoryBase.SlotNotified InventoryBase.OnInventoryOpened InventoryBase.OnInventoryClosed InventoryBase.OnAcquireTransitionSpeed InventoryBase.Empty InventoryBase.FirstNonEmptySlot InventoryBase.AuditLogAccess InventoryBase.LateInitialize(string, ICoreAPI) InventoryBase.AfterBlocksLoaded(IWorldAccessor) InventoryBase.ResolveBlocksOrItems() InventoryBase.GetSlotId(ItemSlot) InventoryBase.GetBestSuitedSlot(ItemSlot, List<ItemSlot>) InventoryBase.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) InventoryBase.GetSuitability(ItemSlot, ItemSlot, bool) InventoryBase.CanContain(ItemSlot, ItemSlot) InventoryBase.TryFlipItems(int, ItemSlot) InventoryBase.CanPlayerModify(IPlayer, EntityPos) InventoryBase.OnSearchTerm(string) InventoryBase.ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) InventoryBase.OnItemSlotModified(ItemSlot) InventoryBase.DidModifyItemSlot(ItemSlot, ItemStack) InventoryBase.PerformNotifySlot(int) InventoryBase.FromTreeAttributes(ITreeAttribute) InventoryBase.ToTreeAttributes(ITreeAttribute) InventoryBase.TryFlipItemStack(IPlayer, string[], int[], long[]) InventoryBase.TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) InventoryBase.GetSlotsIfExists(IPlayer, string[], int[]) InventoryBase.SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) InventoryBase.SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) InventoryBase.GenEmptySlots(int) InventoryBase.NewSlot(int) InventoryBase.MarkSlotDirty(int) InventoryBase.DiscardAll() InventoryBase.DropSlotIfHot(ItemSlot, IPlayer) InventoryBase.DropSlots(Vec3d, params int[]) InventoryBase.Clear() InventoryBase.OnOwningEntityDeath(Vec3d) InventoryBase.GetTransitionSpeedMul(EnumTransitionType, ItemStack) InventoryBase.InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) InventoryBase.GetDefaultTransitionSpeedMul(EnumTransitionType) InventoryBase.Open(IPlayer) InventoryBase.Close(IPlayer) InventoryBase.GetEnumerator() InventoryBase.GetAutoPushIntoSlot(BlockFacing, ItemSlot) InventoryBase.GetAutoPullFromSlot(BlockFacing) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors InventoryBasePlayer(string, string, ICoreAPI) public InventoryBasePlayer(string className, string playerUID, ICoreAPI api) Parameters className string playerUID string api ICoreAPI InventoryBasePlayer(string, ICoreAPI) public InventoryBasePlayer(string inventoryID, ICoreAPI api) Parameters inventoryID string api ICoreAPI Fields playerUID The player ID for the inventory. protected string playerUID Field Value string Properties Owner public Entity Owner { get; } Property Value Entity Player The owning player of this inventory public IPlayer Player { get; } Property Value IPlayer RemoveOnClose If true, the inventory will be removed from the list of available inventories once closed (i.e. is not a personal inventory that the player carries with him) public override bool RemoveOnClose { get; } Property Value bool Methods CanPlayerAccess(IPlayer, EntityPos) Determines whether or not the player can access the invnetory. public override bool CanPlayerAccess(IPlayer player, EntityPos position) Parameters player IPlayer The player attempting access. position EntityPos The postion of the entity. Returns bool DropAll(Vec3d, int) Drops the contents of all the slots into the world. public override void DropAll(Vec3d pos, int maxStackSize = 0) Parameters pos Vec3d Where to drop all this stuff. maxStackSize int If non-zero, will split up the stacks into stacks of give max stack size HasOpened(IPlayer) Checks if given player has this inventory currently opened public override bool HasOpened(IPlayer player) Parameters player IPlayer Returns bool spawnItemEntity(ItemStack, Vec3d, int) protected void spawnItemEntity(ItemStack itemstack, Vec3d pos, int despawnSeconds) Parameters itemstack ItemStack pos Vec3d despawnSeconds int"
  },
  "api/Vintagestory.API.Common.InventoryDisplayed.html": {
    "href": "api/Vintagestory.API.Common.InventoryDisplayed.html",
    "title": "Class InventoryDisplayed | VintageStory API",
    "keywords": "Class InventoryDisplayed Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A general purpose inventory which sends update packets to nearby players (used for rendering Display Case, Pulveriser, etc) Open in GitHub public class InventoryDisplayed : InventoryGeneric, IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object InventoryBase InventoryGeneric InventoryDisplayed Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Inherited Members InventoryGeneric.slots InventoryGeneric.TransitionableSpeedMulByType InventoryGeneric.PerishableFactorByFoodCategory InventoryGeneric.OnGetSuitability InventoryGeneric.OnGetAutoPushIntoSlot InventoryGeneric.OnGetAutoPullFromSlot InventoryGeneric.BaseWeight InventoryGeneric.Init(int, string, string, NewSlotDelegate) InventoryGeneric.Count InventoryGeneric.this[int] InventoryGeneric.GetSuitability(ItemSlot, ItemSlot, bool) InventoryGeneric.FromTreeAttributes(ITreeAttribute) InventoryGeneric.AddSlots(int) InventoryGeneric.ToTreeAttributes(ITreeAttribute) InventoryGeneric.NewSlot(int) InventoryGeneric.GetTransitionSpeedMul(EnumTransitionType, ItemStack) InventoryGeneric.GetAutoPullFromSlot(BlockFacing) InventoryGeneric.GetAutoPushIntoSlot(BlockFacing, ItemSlot) InventoryBase.Api InventoryBase.Pos InventoryBase.MaxContentDimensions InventoryBase.baseWeight InventoryBase.className InventoryBase.instanceID InventoryBase.lastChangedSinceServerStart InventoryBase.openedByPlayerGUIds InventoryBase.InvNetworkUtil InventoryBase.dirtySlots InventoryBase.InventoryID InventoryBase.ClassName InventoryBase.LastChanged InventoryBase.CountForNetworkPacket InventoryBase.IsDirty InventoryBase.DirtySlots InventoryBase.TakeLocked InventoryBase.PutLocked InventoryBase.RemoveOnClose InventoryBase.SlotModified InventoryBase.SlotNotified InventoryBase.OnInventoryOpened InventoryBase.OnInventoryClosed InventoryBase.OnAcquireTransitionSpeed InventoryBase.Empty InventoryBase.FirstNonEmptySlot InventoryBase.AuditLogAccess InventoryBase.LateInitialize(string, ICoreAPI) InventoryBase.AfterBlocksLoaded(IWorldAccessor) InventoryBase.ResolveBlocksOrItems() InventoryBase.GetSlotId(ItemSlot) InventoryBase.GetBestSuitedSlot(ItemSlot, List<ItemSlot>) InventoryBase.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) InventoryBase.CanContain(ItemSlot, ItemSlot) InventoryBase.TryFlipItems(int, ItemSlot) InventoryBase.CanPlayerAccess(IPlayer, EntityPos) InventoryBase.CanPlayerModify(IPlayer, EntityPos) InventoryBase.OnSearchTerm(string) InventoryBase.ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) InventoryBase.DidModifyItemSlot(ItemSlot, ItemStack) InventoryBase.PerformNotifySlot(int) InventoryBase.TryFlipItemStack(IPlayer, string[], int[], long[]) InventoryBase.TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) InventoryBase.GetSlotsIfExists(IPlayer, string[], int[]) InventoryBase.SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) InventoryBase.SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) InventoryBase.GenEmptySlots(int) InventoryBase.MarkSlotDirty(int) InventoryBase.DiscardAll() InventoryBase.DropSlotIfHot(ItemSlot, IPlayer) InventoryBase.DropSlots(Vec3d, params int[]) InventoryBase.DropAll(Vec3d, int) InventoryBase.Clear() InventoryBase.OnOwningEntityDeath(Vec3d) InventoryBase.InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) InventoryBase.GetDefaultTransitionSpeedMul(EnumTransitionType) InventoryBase.Open(IPlayer) InventoryBase.Close(IPlayer) InventoryBase.HasOpened(IPlayer) InventoryBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors InventoryDisplayed(BlockEntity, int, string, ICoreAPI, NewSlotDelegate) public InventoryDisplayed(BlockEntity be, int quantitySlots, string invId, ICoreAPI api, NewSlotDelegate onNewSlot = null) Parameters be BlockEntity quantitySlots int invId string api ICoreAPI onNewSlot NewSlotDelegate Methods OnItemSlotModified(ItemSlot) Called when one of the containing slots has been modified (the base version of this is empty) public override void OnItemSlotModified(ItemSlot slot) Parameters slot ItemSlot"
  },
  "api/Vintagestory.API.Common.InventoryGeneric.html": {
    "href": "api/Vintagestory.API.Common.InventoryGeneric.html",
    "title": "Class InventoryGeneric | VintageStory API",
    "keywords": "Class InventoryGeneric Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A general purpose inventory Open in GitHub public class InventoryGeneric : InventoryBase, IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object InventoryBase InventoryGeneric Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Derived CreativeInventoryTab InventoryDisplayed InventoryPerPlayer Inherited Members InventoryBase.Api InventoryBase.Pos InventoryBase.MaxContentDimensions InventoryBase.baseWeight InventoryBase.className InventoryBase.instanceID InventoryBase.lastChangedSinceServerStart InventoryBase.openedByPlayerGUIds InventoryBase.InvNetworkUtil InventoryBase.dirtySlots InventoryBase.InventoryID InventoryBase.ClassName InventoryBase.LastChanged InventoryBase.CountForNetworkPacket InventoryBase.IsDirty InventoryBase.DirtySlots InventoryBase.TakeLocked InventoryBase.PutLocked InventoryBase.RemoveOnClose InventoryBase.SlotModified InventoryBase.SlotNotified InventoryBase.OnInventoryOpened InventoryBase.OnInventoryClosed InventoryBase.OnAcquireTransitionSpeed InventoryBase.Empty InventoryBase.FirstNonEmptySlot InventoryBase.AuditLogAccess InventoryBase.LateInitialize(string, ICoreAPI) InventoryBase.AfterBlocksLoaded(IWorldAccessor) InventoryBase.ResolveBlocksOrItems() InventoryBase.GetSlotId(ItemSlot) InventoryBase.GetBestSuitedSlot(ItemSlot, List<ItemSlot>) InventoryBase.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) InventoryBase.CanContain(ItemSlot, ItemSlot) InventoryBase.TryFlipItems(int, ItemSlot) InventoryBase.CanPlayerAccess(IPlayer, EntityPos) InventoryBase.CanPlayerModify(IPlayer, EntityPos) InventoryBase.OnSearchTerm(string) InventoryBase.ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) InventoryBase.OnItemSlotModified(ItemSlot) InventoryBase.DidModifyItemSlot(ItemSlot, ItemStack) InventoryBase.PerformNotifySlot(int) InventoryBase.TryFlipItemStack(IPlayer, string[], int[], long[]) InventoryBase.TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) InventoryBase.GetSlotsIfExists(IPlayer, string[], int[]) InventoryBase.SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) InventoryBase.SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) InventoryBase.GenEmptySlots(int) InventoryBase.MarkSlotDirty(int) InventoryBase.DiscardAll() InventoryBase.DropSlotIfHot(ItemSlot, IPlayer) InventoryBase.DropSlots(Vec3d, params int[]) InventoryBase.DropAll(Vec3d, int) InventoryBase.Clear() InventoryBase.OnOwningEntityDeath(Vec3d) InventoryBase.InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) InventoryBase.GetDefaultTransitionSpeedMul(EnumTransitionType) InventoryBase.Open(IPlayer) InventoryBase.Close(IPlayer) InventoryBase.HasOpened(IPlayer) InventoryBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors InventoryGeneric(int, string, string, ICoreAPI, NewSlotDelegate) Create a new general purpose inventory public InventoryGeneric(int quantitySlots, string className, string instanceId, ICoreAPI api, NewSlotDelegate onNewSlot = null) Parameters quantitySlots int className string instanceId string api ICoreAPI onNewSlot NewSlotDelegate InventoryGeneric(int, string, ICoreAPI, NewSlotDelegate) Create a new general purpose inventory public InventoryGeneric(int quantitySlots, string invId, ICoreAPI api, NewSlotDelegate onNewSlot = null) Parameters quantitySlots int invId string api ICoreAPI onNewSlot NewSlotDelegate InventoryGeneric(ICoreAPI) Creates an empty (invalid) inventory. Must call init() to propery init the inventory public InventoryGeneric(ICoreAPI api) Parameters api ICoreAPI Fields OnGetAutoPullFromSlot public GetAutoPullFromSlotDelegate OnGetAutoPullFromSlot Field Value GetAutoPullFromSlotDelegate OnGetAutoPushIntoSlot public GetAutoPushIntoSlotDelegate OnGetAutoPushIntoSlot Field Value GetAutoPushIntoSlotDelegate OnGetSuitability public GetSuitabilityDelegate OnGetSuitability Field Value GetSuitabilityDelegate slots protected ItemSlot[] slots Field Value ItemSlot[] Properties BaseWeight public float BaseWeight { get; set; } Property Value float Count Amount of available slots public override int Count { get; } Property Value int this[int] Get slot for given slot index public override ItemSlot this[int slotId] { get; set; } Parameters slotId int Property Value ItemSlot PerishableFactorByFoodCategory public Dictionary<EnumFoodCategory, float> PerishableFactorByFoodCategory { get; set; } Property Value Dictionary<EnumFoodCategory, float> TransitionableSpeedMulByType public Dictionary<EnumTransitionType, float> TransitionableSpeedMulByType { get; set; } Property Value Dictionary<EnumTransitionType, float> Methods AddSlots(int) public void AddSlots(int amount) Parameters amount int FromTreeAttributes(ITreeAttribute) Loads the slot contents from given treeAttribute public override void FromTreeAttributes(ITreeAttribute treeAttribute) Parameters treeAttribute ITreeAttribute GetAutoPullFromSlot(BlockFacing) Return the slot where a chute may pull items from. Return null if it is now allowed to pull any items from this inventory public override ItemSlot GetAutoPullFromSlot(BlockFacing atBlockFace) Parameters atBlockFace BlockFacing Returns ItemSlot GetAutoPushIntoSlot(BlockFacing, ItemSlot) Return the slot where a chute may push items into. Return null if it shouldn't move items into this inventory. public override ItemSlot GetAutoPushIntoSlot(BlockFacing atBlockFace, ItemSlot fromSlot) Parameters atBlockFace BlockFacing fromSlot ItemSlot Returns ItemSlot GetSuitability(ItemSlot, ItemSlot, bool) How well a stack fits into this inventory. By default 1 for new itemstacks and 3 for an itemstack merge. Chests and other stationary container also add a +1 to the suitability if the source slot is from the players inventory. public override float GetSuitability(ItemSlot sourceSlot, ItemSlot targetSlot, bool isMerge) Parameters sourceSlot ItemSlot targetSlot ItemSlot isMerge bool Returns float GetTransitionSpeedMul(EnumTransitionType, ItemStack) Does this inventory speed up or slow down a transition for given itemstack? (Default: 1 for perish and 0 otherwise) public override float GetTransitionSpeedMul(EnumTransitionType transType, ItemStack stack) Parameters transType EnumTransitionType stack ItemStack Returns float Init(int, string, string, NewSlotDelegate) public void Init(int quantitySlots, string className, string instanceId, NewSlotDelegate onNewSlot = null) Parameters quantitySlots int className string instanceId string onNewSlot NewSlotDelegate NewSlot(int) Called when initializing the inventory or when loading the contents protected override ItemSlot NewSlot(int slotId) Parameters slotId int Returns ItemSlot ToTreeAttributes(ITreeAttribute) Stores the slot contents to invtree public override void ToTreeAttributes(ITreeAttribute invtree) Parameters invtree ITreeAttribute"
  },
  "api/Vintagestory.API.Common.InventoryPerPlayer.html": {
    "href": "api/Vintagestory.API.Common.InventoryPerPlayer.html",
    "title": "Class InventoryPerPlayer | VintageStory API",
    "keywords": "Class InventoryPerPlayer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class InventoryPerPlayer : InventoryGeneric, IInventory, IReadOnlyCollection<ItemSlot>, IEnumerable<ItemSlot>, IEnumerable Inheritance object InventoryBase InventoryGeneric InventoryPerPlayer Implements IInventory IReadOnlyCollection<ItemSlot> IEnumerable<ItemSlot> IEnumerable Inherited Members InventoryGeneric.slots InventoryGeneric.TransitionableSpeedMulByType InventoryGeneric.PerishableFactorByFoodCategory InventoryGeneric.OnGetSuitability InventoryGeneric.OnGetAutoPushIntoSlot InventoryGeneric.OnGetAutoPullFromSlot InventoryGeneric.BaseWeight InventoryGeneric.Init(int, string, string, NewSlotDelegate) InventoryGeneric.Count InventoryGeneric.this[int] InventoryGeneric.GetSuitability(ItemSlot, ItemSlot, bool) InventoryGeneric.AddSlots(int) InventoryGeneric.GetTransitionSpeedMul(EnumTransitionType, ItemStack) InventoryGeneric.GetAutoPullFromSlot(BlockFacing) InventoryGeneric.GetAutoPushIntoSlot(BlockFacing, ItemSlot) InventoryBase.Api InventoryBase.Pos InventoryBase.MaxContentDimensions InventoryBase.baseWeight InventoryBase.className InventoryBase.instanceID InventoryBase.lastChangedSinceServerStart InventoryBase.openedByPlayerGUIds InventoryBase.InvNetworkUtil InventoryBase.dirtySlots InventoryBase.InventoryID InventoryBase.ClassName InventoryBase.LastChanged InventoryBase.CountForNetworkPacket InventoryBase.IsDirty InventoryBase.DirtySlots InventoryBase.TakeLocked InventoryBase.RemoveOnClose InventoryBase.SlotModified InventoryBase.SlotNotified InventoryBase.OnInventoryOpened InventoryBase.OnInventoryClosed InventoryBase.OnAcquireTransitionSpeed InventoryBase.Empty InventoryBase.FirstNonEmptySlot InventoryBase.AuditLogAccess InventoryBase.LateInitialize(string, ICoreAPI) InventoryBase.AfterBlocksLoaded(IWorldAccessor) InventoryBase.ResolveBlocksOrItems() InventoryBase.GetSlotId(ItemSlot) InventoryBase.GetBestSuitedSlot(ItemSlot, List<ItemSlot>) InventoryBase.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) InventoryBase.CanContain(ItemSlot, ItemSlot) InventoryBase.TryFlipItems(int, ItemSlot) InventoryBase.CanPlayerAccess(IPlayer, EntityPos) InventoryBase.CanPlayerModify(IPlayer, EntityPos) InventoryBase.OnSearchTerm(string) InventoryBase.ActivateSlot(int, ItemSlot, ref ItemStackMoveOperation) InventoryBase.OnItemSlotModified(ItemSlot) InventoryBase.DidModifyItemSlot(ItemSlot, ItemStack) InventoryBase.PerformNotifySlot(int) InventoryBase.TryFlipItemStack(IPlayer, string[], int[], long[]) InventoryBase.TryMoveItemStack(IPlayer, string[], int[], ref ItemStackMoveOperation) InventoryBase.GetSlotsIfExists(IPlayer, string[], int[]) InventoryBase.SlotsFromTreeAttributes(ITreeAttribute, ItemSlot[], List<ItemSlot>) InventoryBase.SlotsToTreeAttributes(ItemSlot[], ITreeAttribute) InventoryBase.GenEmptySlots(int) InventoryBase.DiscardAll() InventoryBase.DropSlotIfHot(ItemSlot, IPlayer) InventoryBase.DropSlots(Vec3d, params int[]) InventoryBase.DropAll(Vec3d, int) InventoryBase.Clear() InventoryBase.OnOwningEntityDeath(Vec3d) InventoryBase.InvokeTransitionSpeedDelegates(EnumTransitionType, ItemStack, float) InventoryBase.GetDefaultTransitionSpeedMul(EnumTransitionType) InventoryBase.Open(IPlayer) InventoryBase.Close(IPlayer) InventoryBase.HasOpened(IPlayer) InventoryBase.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors InventoryPerPlayer(int, string?, ICoreAPI?, NewSlotDelegate?) public InventoryPerPlayer(int quantitySlots, string? invId, ICoreAPI? api, NewSlotDelegate? onNewSlot = null) Parameters quantitySlots int invId string api ICoreAPI onNewSlot NewSlotDelegate Fields PlayerQuantities public Dictionary<string, int[]> PlayerQuantities Field Value Dictionary<string, int[]> Quantities public int[] Quantities Field Value int[] Properties PutLocked Called by item slot, if true, player cannot put items into this inventory public override bool PutLocked { get; set; } Property Value bool Methods AddPlayerUsage(string, int, int) public void AddPlayerUsage(string playerUid, int slotId, int value) Parameters playerUid string slotId int value int CanTake(ItemSlot, ItemStackMoveOperation) public bool CanTake(ItemSlot fromSlot, ItemStackMoveOperation op) Parameters fromSlot ItemSlot op ItemStackMoveOperation Returns bool FromTreeAttributes(ITreeAttribute) Loads the slot contents from given treeAttribute public override void FromTreeAttributes(ITreeAttribute treeAttribute) Parameters treeAttribute ITreeAttribute GetPlayerRemaining(string, int) public int GetPlayerRemaining(string playerUid, int slotId) Parameters playerUid string slotId int Returns int MarkDirty() allow the server to resend changed PlayerQuantities public void MarkDirty() MarkSlotDirty(int) Server Side: Will resent the slot contents to the client and mark them dirty there as well Client Side: Will refresh stack size, model and stuff if this stack is currently being rendered public override void MarkSlotDirty(int slotId) Parameters slotId int NewSlot(int) Called when initializing the inventory or when loading the contents protected override ItemSlot NewSlot(int slotId) Parameters slotId int Returns ItemSlot OnPlacementBySchematic() public void OnPlacementBySchematic() ToTreeAttributes(ITreeAttribute) Stores the slot contents to invtree public override void ToTreeAttributes(ITreeAttribute invtree) Parameters invtree ITreeAttribute"
  },
  "api/Vintagestory.API.Common.IsBlockArgParser.html": {
    "href": "api/Vintagestory.API.Common.IsBlockArgParser.html",
    "title": "Class IsBlockArgParser | VintageStory API",
    "keywords": "Class IsBlockArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class IsBlockArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase IsBlockArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) ArgumentParserBase.PreProcess(TextCommandCallingArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IsBlockArgParser(string, ICoreAPI, bool) public IsBlockArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetValue() public override object GetValue() Returns object SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object Test(ICoreAPI, Caller, string) public static string Test(ICoreAPI api, Caller caller, string testcmd) Parameters api ICoreAPI caller Caller testcmd string Returns string TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.Item.html": {
    "href": "api/Vintagestory.API.Common.Item.html",
    "title": "Class Item | VintageStory API",
    "keywords": "Class Item Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents an in game Item of Vintage Story Open in GitHub public class Item : CollectibleObject Inheritance object RegistryObject CollectibleObject Item Inherited Members CollectibleObject.DefaultSize CollectibleObject.MatterState CollectibleObject.IsMissing CollectibleObject.GetHashCode() CollectibleObject.MaxStackSize CollectibleObject.Durability CollectibleObject.Dimensions CollectibleObject.LiquidSelectable CollectibleObject.AttackPower CollectibleObject.HeldPriorityInteract CollectibleObject.AttackRange CollectibleObject.DamagedBy CollectibleObject.MiningSpeed CollectibleObject.ToolTier CollectibleObject.MiningTier CollectibleObject.HeldSounds CollectibleObject.CreativeInventoryTabs CollectibleObject.CreativeInventoryStacks CollectibleObject.RenderAlphaTest CollectibleObject.GuiTransform CollectibleObject.FpHandTransform CollectibleObject.TpHandTransform CollectibleObject.TpOffHandTransform CollectibleObject.GroundTransform CollectibleObject.Attributes CollectibleObject.CombustibleProps CollectibleObject.NutritionProps CollectibleObject.TransitionableProps CollectibleObject.GrindingProps CollectibleObject.CrushingProps CollectibleObject.ParticleProperties CollectibleObject.TopMiddlePos CollectibleObject.Tool CollectibleObject.StorageFlags CollectibleObject.MaterialDensity CollectibleObject.HeldTpHitAnimation CollectibleObject.HeldRightTpIdleAnimation CollectibleObject.HeldLeftTpIdleAnimation CollectibleObject.HeldLeftReadyAnimation CollectibleObject.HeldRightReadyAnimation CollectibleObject.HeldTpUseAnimation CollectibleObject.api CollectibleObject.CollectibleBehaviors CollectibleObject.LightHsv CollectibleObject.OnLoadedNative(ICoreAPI) CollectibleObject.OnLoaded(ICoreAPI) CollectibleObject.OnUnloaded(ICoreAPI) CollectibleObject.GetLightHsv(IBlockAccessor, BlockPos, ItemStack) CollectibleObject.GetNutritionProperties(IWorldAccessor, ItemStack, Entity) CollectibleObject.GetTransitionableProperties(IWorldAccessor, ItemStack, Entity) CollectibleObject.RequiresTransitionableTicking(IWorldAccessor, ItemStack) CollectibleObject.GetStorageFlags(ItemStack) CollectibleObject.GetItemDamageColor(ItemStack) CollectibleObject.ShouldDisplayItemDamage(ItemStack) CollectibleObject.OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) CollectibleObject.GetDurability(IItemStack) CollectibleObject.GetMaxDurability(ItemStack) CollectibleObject.GetRemainingDurability(ItemStack) CollectibleObject.GetAttackPower(IItemStack) CollectibleObject.GetAttackRange(IItemStack) CollectibleObject.OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int) CollectibleObject.OnModifiedInInventorySlot(IWorldAccessor, ItemSlot, ItemStack) CollectibleObject.OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float) CollectibleObject.GetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer) CollectibleObject.GeldHeldFpHitAnimation(ItemSlot, Entity) CollectibleObject.GetHeldTpHitAnimation(ItemSlot, Entity) CollectibleObject.GetHeldReadyAnimation(ItemSlot, Entity, EnumHand) CollectibleObject.GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand) CollectibleObject.GetHeldTpUseAnimation(ItemSlot, Entity) CollectibleObject.OnAttackingWith(IWorldAccessor, Entity, Entity, ItemSlot) CollectibleObject.MatchesForCrafting(ItemStack, GridRecipe, CraftingRecipeIngredient) CollectibleObject.OnConsumedByCrafting(ItemSlot[], ItemSlot, GridRecipe, CraftingRecipeIngredient, IPlayer, int) CollectibleObject.OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe) CollectibleObject.ConsumeCraftingIngredients(ItemSlot[], ItemSlot, GridRecipe) CollectibleObject.SetDurability(ItemStack, int) CollectibleObject.DamageItem(IWorldAccessor, Entity, ItemSlot, int) CollectibleObject.RefillSlotIfEmpty(ItemSlot, EntityAgent, ActionConsumable<ItemStack>) CollectibleObject.GetToolModes(ItemSlot, IClientPlayer, BlockSelection) CollectibleObject.GetToolMode(ItemSlot, IPlayer, BlockSelection) CollectibleObject.SetToolMode(ItemSlot, IPlayer, BlockSelection, int) CollectibleObject.OnHeldRenderOpaque(ItemSlot, IClientPlayer) CollectibleObject.OnHeldRenderOit(ItemSlot, IClientPlayer) CollectibleObject.OnHeldRenderOrtho(ItemSlot, IClientPlayer) CollectibleObject.OnHeldIdle(ItemSlot, EntityAgent) CollectibleObject.OnHeldActionAnimStart(ItemSlot, EntityAgent, EnumHandInteract) CollectibleObject.OnGroundIdle(EntityItem) CollectibleObject.InGuiIdle(IWorldAccessor, ItemStack) CollectibleObject.OnCollected(ItemStack, Entity) CollectibleObject.OnHeldUseStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract, bool, ref EnumHandHandling) CollectibleObject.OnHeldUseCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.OnHeldUseStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldUseStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumHandInteract) CollectibleObject.OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling) CollectibleObject.OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling) CollectibleObject.OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection) CollectibleObject.OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason) CollectibleObject.tryEatBegin(ItemSlot, EntityAgent, ref EnumHandHandling, string, int) CollectibleObject.playEatSound(EntityAgent, string, int) CollectibleObject.tryEatStep(float, ItemSlot, EntityAgent, ItemStack) CollectibleObject.tryEatStop(float, ItemSlot, EntityAgent) CollectibleObject.OnHeldDropped(IWorldAccessor, IPlayer, ItemSlot, int, ref EnumHandling) CollectibleObject.GetHeldItemName(ItemStack) CollectibleObject.GetItemDescText() CollectibleObject.GetHeldInteractionHelp(ItemSlot) CollectibleObject.AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor) CollectibleObject.AppendPerishableInfoText(ItemSlot, StringBuilder, IWorldAccessor, TransitionState, bool) CollectibleObject.OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) CollectibleObject.GetHandBookStacks(ICoreClientAPI) CollectibleObject.CanBePlacedInto(ItemStack, ItemSlot) CollectibleObject.GetMergableQuantity(ItemStack, ItemStack, EnumMergePriority) CollectibleObject.TryMergeStacks(ItemStackMergeOperation) CollectibleObject.GetMeltingDuration(IWorldAccessor, ISlotProvider, ItemSlot) CollectibleObject.GetMeltingPoint(IWorldAccessor, ISlotProvider, ItemSlot) CollectibleObject.CanSmelt(IWorldAccessor, ISlotProvider, ItemStack, ItemStack) CollectibleObject.DoSmelt(IWorldAccessor, ISlotProvider, ItemSlot, ItemSlot) CollectibleObject.CanSpoil(ItemStack) CollectibleObject.UpdateAndGetTransitionState(IWorldAccessor, ItemSlot, EnumTransitionType) CollectibleObject.SetTransitionState(ItemStack, EnumTransitionType, float) CollectibleObject.GetTransitionRateMul(IWorldAccessor, ItemSlot, EnumTransitionType) CollectibleObject.UpdateAndGetTransitionStates(IWorldAccessor, ItemSlot) CollectibleObject.UpdateAndGetTransitionStatesNative(IWorldAccessor, ItemSlot) CollectibleObject.OnTransitionNow(ItemSlot, TransitionableProperties) CollectibleObject.CarryOverFreshness(ICoreAPI, ItemSlot, ItemStack, TransitionableProperties) CollectibleObject.CarryOverFreshness(ICoreAPI, ItemSlot[], ItemStack[], TransitionableProperties) CollectibleObject.IsReasonablyFresh(IWorldAccessor, ItemStack) CollectibleObject.HasTemperature(IItemStack) CollectibleObject.GetTemperature(IWorldAccessor, ItemStack, double) CollectibleObject.GetTemperature(IWorldAccessor, ItemStack) CollectibleObject.SetTemperature(IWorldAccessor, ItemStack, float, bool) CollectibleObject.Equals(ItemStack, ItemStack, params string[]) CollectibleObject.Satisfies(ItemStack, ItemStack) CollectibleObject.OnStoreCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) CollectibleObject.OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>) CollectibleObject.OnLoadCollectibleMappings(IWorldAccessor, ItemSlot, Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, bool) CollectibleObject.IsLiquid() CollectibleObject.GetCollectibleBehavior(Type, bool) CollectibleObject.GetCollectibleBehavior<T>(bool) CollectibleObject.GetBehavior(CollectibleBehavior[], Type, bool) CollectibleObject.GetCollectibleInterface<T>() CollectibleObject.HasBehavior<T>(bool) CollectibleObject.HasBehavior(Type, bool) CollectibleObject.HasBehavior(string, IClassRegistryAPI) CollectibleObject.GetBehavior(Type) CollectibleObject.GetBehavior<T>() CollectibleObject.OnSmeltAttempt(InventoryBase) CollectibleObject.IsEmptyBackPack(IItemStack) CollectibleObject.IsBackPack(IItemStack) CollectibleObject.QuantityBackPackSlots(IItemStack) RegistryObject.Code RegistryObject.VariantStrict RegistryObject.Variant RegistryObject.Class RegistryObject.CodeWithPath(string) RegistryObject.CodeWithoutParts(int) RegistryObject.CodeEndWithoutParts(int) RegistryObject.CodeWithParts(params string[]) RegistryObject.CodeWithParts(string) RegistryObject.CodeWithVariant(string, string) RegistryObject.CodeWithVariants(Dictionary<string, string>) RegistryObject.CodeWithVariants(string[], string[]) RegistryObject.CodeWithPart(string, int) RegistryObject.LastCodePart(int) RegistryObject.FirstCodePart(int) RegistryObject.WildCardMatch(AssetLocation[]) RegistryObject.WildCardMatch(AssetLocation) RegistryObject.WildCardMatch(string[]) RegistryObject.WildCardMatch(string) RegistryObject.FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, OrderedDictionary<string, string>) RegistryObject.FillPlaceHolder(string, string, string) object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Item() Instantiate a new item with null model transforms; ItemTypeNet will add default transforms client-side if they are null in the ItemType packet; transforms should not be needed on a server public Item() Item(int) Instantiates a new item with given item id and stacksize = 1 public Item(int itemId) Parameters itemId int Fields ItemId The unique number of the item, dynamically assigned by the game public int ItemId Field Value int Shape The item's shape. Null for automatic shape based on the texture. public CompositeShape Shape Field Value CompositeShape Tags public ItemTagArray Tags Field Value ItemTagArray Textures Default textures to be used for this item. The Dictionary keys are the texture short names, as referenced in this item's shape ShapeElementFaces (may be null on clients, prior to receipt of server assets) Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public Dictionary<string, CompositeTexture> Textures Field Value Dictionary<string, CompositeTexture> Properties FirstTexture Returns the first texture in Textures public CompositeTexture FirstTexture { get; } Property Value CompositeTexture Id The unique number of the item, dynamically assigned by the game public override int Id { get; } Property Value int ItemClass The type of the collectible object public override EnumItemClass ItemClass { get; } Property Value EnumItemClass Methods Clone() Creates a deep copy of the item public Item Clone() Returns Item FreeRAMServer() public virtual void FreeRAMServer() GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) Called by the inventory system when you hover over an item stack. This is the text that is getting displayed. public override void GetHeldItemInfo(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, bool withDebugInfo) Parameters inSlot ItemSlot dsc StringBuilder world IWorldAccessor withDebugInfo bool GetRandomColor(ICoreClientAPI, ItemStack) Should return a random pixel within the items/blocks texture public override int GetRandomColor(ICoreClientAPI capi, ItemStack stack) Parameters capi ICoreClientAPI stack ItemStack Returns int"
  },
  "api/Vintagestory.API.Common.ItemClassMethods.html": {
    "href": "api/Vintagestory.API.Common.ItemClassMethods.html",
    "title": "Class ItemClassMethods | VintageStory API",
    "keywords": "Class ItemClassMethods Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class ItemClassMethods Inheritance object ItemClassMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Name(EnumItemClass) public static string Name(this EnumItemClass s1) Parameters s1 EnumItemClass Returns string"
  },
  "api/Vintagestory.API.Common.ItemSlot.html": {
    "href": "api/Vintagestory.API.Common.ItemSlot.html",
    "title": "Class ItemSlot | VintageStory API",
    "keywords": "Class ItemSlot Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The default item slot to item stacks Open in GitHub public class ItemSlot Inheritance object ItemSlot Derived DummySlot ItemSlotBackpack ItemSlotCharacter ItemSlotCreative ItemSlotOffhand ItemSlotOutput ItemSlotPerPlayer ItemSlotSkill ItemSlotSurvival ItemSlotUniversal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlot(InventoryBase) Create a new instance of an item slot public ItemSlot(InventoryBase inventory) Parameters inventory InventoryBase Fields BackgroundIcon Icon name to be drawn in the slot background public string BackgroundIcon Field Value string HexBackgroundColor If set will be used as the background color public string HexBackgroundColor Field Value string inventory protected InventoryBase inventory Field Value InventoryBase itemstack protected ItemStack itemstack Field Value ItemStack Properties DrawUnavailable public virtual bool DrawUnavailable { get; set; } Property Value bool Empty Whether or not the stack is empty. public virtual bool Empty { get; } Property Value bool Inventory Gets the inventory attached to this ItemSlot. public InventoryBase Inventory { get; } Property Value InventoryBase Itemstack The ItemStack contained within the slot. public ItemStack Itemstack { get; set; } Property Value ItemStack MaxSlotStackSize The upper holding limit of the slot itself. Standard slots are only limited by the item stacks maxstack size. public virtual int MaxSlotStackSize { get; set; } Property Value int StackSize The number of items in the stack. public int StackSize { get; } Property Value int StorageType The storage type of this slot. public virtual EnumItemStorageFlags StorageType { get; set; } Property Value EnumItemStorageFlags Methods ActivateSlot(ItemSlot, ref ItemStackMoveOperation) Called when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items. public virtual void ActivateSlot(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) Activates the left click functions of the given slot. protected virtual void ActivateSlotLeftClick(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) Activates the middle click functions of the given slot. protected virtual void ActivateSlotMiddleClick(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) Activates the right click functions of the given slot. protected virtual void ActivateSlotRightClick(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation CanHold(ItemSlot) Whether or not this slot can hold the item from the source slot. public virtual bool CanHold(ItemSlot sourceSlot) Parameters sourceSlot ItemSlot Returns bool CanTake() Whether or not this slots item can be retrieved. public virtual bool CanTake() Returns bool CanTakeFrom(ItemSlot, EnumMergePriority) Whether or not this slot can take the item from the source slot. public virtual bool CanTakeFrom(ItemSlot sourceSlot, EnumMergePriority priority = EnumMergePriority.AutoMerge) Parameters sourceSlot ItemSlot priority EnumMergePriority Returns bool FlipWith(ItemSlot) Forces a flip with the given ItemSlot protected virtual void FlipWith(ItemSlot withSlot) Parameters withSlot ItemSlot GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) public virtual WeightedSlot GetBestSuitedSlot(ItemSlot sourceSlot, ItemStackMoveOperation op = null, List<ItemSlot> skipSlots = null) Parameters sourceSlot ItemSlot op ItemStackMoveOperation skipSlots List<ItemSlot> Returns WeightedSlot GetRemainingSlotSpace(ItemStack) Amount of space left, independent of item MaxStacksize public virtual int GetRemainingSlotSpace(ItemStack forItemstack) Parameters forItemstack ItemStack Returns int GetStackDescription(IClientWorldAccessor, bool) Gets the StackDescription for the item. public virtual string GetStackDescription(IClientWorldAccessor world, bool extendedDebugInfo) Parameters world IClientWorldAccessor The world the item resides in. extendedDebugInfo bool Whether or not we have Extended Debug Info enabled. Returns string GetStackName() Gets the name of the itemstack- if it exists. public virtual string GetStackName() Returns string The name of the itemStack or null. MarkDirty() Marks the slot as dirty which queues it up for saving and resends it to the clients. Does not sync from client to server. public virtual void MarkDirty() OnBeforeRender(ItemRenderInfo) public virtual void OnBeforeRender(ItemRenderInfo renderInfo) Parameters renderInfo ItemRenderInfo OnItemSlotModified(ItemStack) The event fired when the slot is modified. public virtual void OnItemSlotModified(ItemStack sinkStack) Parameters sinkStack ItemStack TakeOut(int) Gets some of the contents of the stack. public virtual ItemStack TakeOut(int quantity) Parameters quantity int The amount to get from the stack. Returns ItemStack The stack with the quantity take out (or as much as was available) TakeOutWhole() Gets the entire contents of the stack, setting the base stack to null. public virtual ItemStack TakeOutWhole() Returns ItemStack ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TryFlipWith(ItemSlot) Attempts to flip the ItemSlots. public virtual bool TryFlipWith(ItemSlot itemSlot) Parameters itemSlot ItemSlot Returns bool Whether or no the flip was successful. TryPutInto(IWorldAccessor, ItemSlot, int) Attempts to place item in this slot into the target slot. public virtual int TryPutInto(IWorldAccessor world, ItemSlot sinkSlot, int quantity = 1) Parameters world IWorldAccessor sinkSlot ItemSlot quantity int Returns int Amount of moved items TryPutInto(ItemSlot, ref ItemStackMoveOperation) Returns the quantity of items that were not merged (left over in the source slot) public virtual int TryPutInto(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation Returns int Amount of moved items Events MarkedDirty Can be used to interecept marked dirty calls. public event ActionConsumable MarkedDirty Event Type ActionConsumable"
  },
  "api/Vintagestory.API.Common.ItemSlotBackpack.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotBackpack.html",
    "title": "Class ItemSlotBackpack | VintageStory API",
    "keywords": "Class ItemSlotBackpack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A slot that can hold mobile containers Open in GitHub public class ItemSlotBackpack : ItemSlot Inheritance object ItemSlot ItemSlotBackpack Inherited Members ItemSlot.MarkedDirty ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotBackpack(InventoryBase) public ItemSlotBackpack(InventoryBase inventory) Parameters inventory InventoryBase Properties MaxSlotStackSize The upper holding limit of the slot itself. Standard slots are only limited by the item stacks maxstack size. public override int MaxSlotStackSize { get; } Property Value int StorageType The storage type of this slot. public override EnumItemStorageFlags StorageType { get; } Property Value EnumItemStorageFlags"
  },
  "api/Vintagestory.API.Common.ItemSlotBagContent.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotBagContent.html",
    "title": "Class ItemSlotBagContent | VintageStory API",
    "keywords": "Class ItemSlotBagContent Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemSlotBagContent : ItemSlotSurvival Inheritance object ItemSlot ItemSlotSurvival ItemSlotBagContent Inherited Members ItemSlotSurvival.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlotSurvival.CanHold(ItemSlot) ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotBagContent(InventoryBase, int, int, EnumItemStorageFlags) public ItemSlotBagContent(InventoryBase inventory, int BagIndex, int SlotIndex, EnumItemStorageFlags storageType) Parameters inventory InventoryBase BagIndex int SlotIndex int storageType EnumItemStorageFlags Fields BagIndex public int BagIndex Field Value int SlotIndex public int SlotIndex Field Value int storageType public EnumItemStorageFlags storageType Field Value EnumItemStorageFlags Properties StorageType The storage type of this slot. public override EnumItemStorageFlags StorageType { get; } Property Value EnumItemStorageFlags"
  },
  "api/Vintagestory.API.Common.ItemSlotCharacter.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotCharacter.html",
    "title": "Class ItemSlotCharacter | VintageStory API",
    "keywords": "Class ItemSlotCharacter Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemSlotCharacter : ItemSlot Inheritance object ItemSlot ItemSlotCharacter Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotCharacter(EnumCharacterDressType, InventoryBase) public ItemSlotCharacter(EnumCharacterDressType type, InventoryBase inventory) Parameters type EnumCharacterDressType inventory InventoryBase Fields Type public EnumCharacterDressType Type Field Value EnumCharacterDressType Properties StorageType The storage type of this slot. public override EnumItemStorageFlags StorageType { get; } Property Value EnumItemStorageFlags Methods CanHold(ItemSlot) Whether or not this slot can hold the item from the source slot. public override bool CanHold(ItemSlot itemstackFromSourceSlot) Parameters itemstackFromSourceSlot ItemSlot Returns bool CanTakeFrom(ItemSlot, EnumMergePriority) Whether or not this slot can take the item from the source slot. public override bool CanTakeFrom(ItemSlot sourceSlot, EnumMergePriority priority = EnumMergePriority.AutoMerge) Parameters sourceSlot ItemSlot priority EnumMergePriority Returns bool IsDressType(IItemStack, EnumCharacterDressType) Checks to see what dress type the given item is. public static bool IsDressType(IItemStack itemstack, EnumCharacterDressType dressType) Parameters itemstack IItemStack dressType EnumCharacterDressType Returns bool"
  },
  "api/Vintagestory.API.Common.ItemSlotCreative.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotCreative.html",
    "title": "Class ItemSlotCreative | VintageStory API",
    "keywords": "Class ItemSlotCreative Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemSlotCreative : ItemSlot Inheritance object ItemSlot ItemSlotCreative Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.StorageType ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotCreative(InventoryBase) public ItemSlotCreative(InventoryBase inventory) Parameters inventory InventoryBase Methods ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) Activates the left click functions of the given slot. protected override void ActivateSlotLeftClick(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) Activates the middle click functions of the given slot. protected override void ActivateSlotMiddleClick(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) Activates the right click functions of the given slot. protected override void ActivateSlotRightClick(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation FlipWith(ItemSlot) Forces a flip with the given ItemSlot protected override void FlipWith(ItemSlot withslot) Parameters withslot ItemSlot OnItemSlotModified(ItemStack) The event fired when the slot is modified. public override void OnItemSlotModified(ItemStack sinkStack) Parameters sinkStack ItemStack TakeOut(int) Gets some of the contents of the stack. public override ItemStack TakeOut(int quantity) Parameters quantity int The amount to get from the stack. Returns ItemStack The stack with the quantity take out (or as much as was available) TakeOutWhole() Gets the entire contents of the stack, setting the base stack to null. public override ItemStack TakeOutWhole() Returns ItemStack TryFlipWith(ItemSlot) Attempts to flip the ItemSlots. public override bool TryFlipWith(ItemSlot itemSlot) Parameters itemSlot ItemSlot Returns bool Whether or no the flip was successful. TryPutInto(ItemSlot, ref ItemStackMoveOperation) Returns the quantity of items that were not merged (left over in the source slot) public override int TryPutInto(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation Returns int Amount of moved items"
  },
  "api/Vintagestory.API.Common.ItemSlotOffhand.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotOffhand.html",
    "title": "Class ItemSlotOffhand | VintageStory API",
    "keywords": "Class ItemSlotOffhand Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A slot that only accepts collectibles designated for the off-hand slot Open in GitHub public class ItemSlotOffhand : ItemSlot Inheritance object ItemSlot ItemSlotOffhand Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotOffhand(InventoryBase) public ItemSlotOffhand(InventoryBase inventory) Parameters inventory InventoryBase Properties StorageType The storage type of this slot. public override EnumItemStorageFlags StorageType { get; } Property Value EnumItemStorageFlags"
  },
  "api/Vintagestory.API.Common.ItemSlotOutput.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotOutput.html",
    "title": "Class ItemSlotOutput | VintageStory API",
    "keywords": "Class ItemSlotOutput Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A slot from which the player can only take stuff out of, but not place anything in it Open in GitHub public class ItemSlotOutput : ItemSlot Inheritance object ItemSlot ItemSlotOutput Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.StorageType ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotOutput(InventoryBase) public ItemSlotOutput(InventoryBase inventory) Parameters inventory InventoryBase Methods ActivateSlot(ItemSlot, ref ItemStackMoveOperation) Called when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items. public override void ActivateSlot(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation CanHold(ItemSlot) Whether or not this slot can hold the item from the source slot. public override bool CanHold(ItemSlot itemstackFromSourceSlot) Parameters itemstackFromSourceSlot ItemSlot Returns bool CanTake() Whether or not this slots item can be retrieved. public override bool CanTake() Returns bool CanTakeFrom(ItemSlot, EnumMergePriority) Whether or not this slot can take the item from the source slot. public override bool CanTakeFrom(ItemSlot sourceSlot, EnumMergePriority priority = EnumMergePriority.AutoMerge) Parameters sourceSlot ItemSlot priority EnumMergePriority Returns bool"
  },
  "api/Vintagestory.API.Common.ItemSlotPerPlayer.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotPerPlayer.html",
    "title": "Class ItemSlotPerPlayer | VintageStory API",
    "keywords": "Class ItemSlotPerPlayer Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemSlotPerPlayer : ItemSlot Inheritance object ItemSlot ItemSlotPerPlayer Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.BackgroundIcon ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.StorageType ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotPerPlayer(InventoryBase, int) public ItemSlotPerPlayer(InventoryBase inventory, int slotid) Parameters inventory InventoryBase slotid int Fields Slotid public int Slotid Field Value int Properties DrawUnavailable public override bool DrawUnavailable { get; set; } Property Value bool Inventory public InventoryPerPlayer Inventory { get; } Property Value InventoryPerPlayer Methods ActivateSlot(ItemSlot, ref ItemStackMoveOperation) Called when a player has clicked on this slot. The source slot is the mouse cursor slot. This handles the logic of either taking, putting or exchanging items. public override void ActivateSlot(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) Activates the left click functions of the given slot. protected override void ActivateSlotLeftClick(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) Activates the right click functions of the given slot. protected override void ActivateSlotRightClick(ItemSlot sourceSlot, ref ItemStackMoveOperation op) Parameters sourceSlot ItemSlot op ItemStackMoveOperation CanHold(ItemSlot) Whether or not this slot can hold the item from the source slot. public override bool CanHold(ItemSlot sourceSlot) Parameters sourceSlot ItemSlot Returns bool CanTake() Whether or not this slots item can be retrieved. public override bool CanTake() Returns bool CanTakeFrom(ItemSlot, EnumMergePriority) Whether or not this slot can take the item from the source slot. public override bool CanTakeFrom(ItemSlot sourceSlot, EnumMergePriority priority = EnumMergePriority.AutoMerge) Parameters sourceSlot ItemSlot priority EnumMergePriority Returns bool FlipWith(ItemSlot) Forces a flip with the given ItemSlot protected override void FlipWith(ItemSlot withslot) Parameters withslot ItemSlot TakeOut(int) Gets some of the contents of the stack. public override ItemStack? TakeOut(int quantity) Parameters quantity int The amount to get from the stack. Returns ItemStack The stack with the quantity take out (or as much as was available) TakeOutWhole() Gets the entire contents of the stack, setting the base stack to null. public override ItemStack? TakeOutWhole() Returns ItemStack TryFlipWith(ItemSlot) Attempts to flip the ItemSlots. public override bool TryFlipWith(ItemSlot itemSlot) Parameters itemSlot ItemSlot Returns bool Whether or no the flip was successful. TryPutInto(IWorldAccessor, ItemSlot, int) Attempts to place item in this slot into the target slot. public override int TryPutInto(IWorldAccessor world, ItemSlot sinkSlot, int quantity = 1) Parameters world IWorldAccessor sinkSlot ItemSlot quantity int Returns int Amount of moved items TryPutInto(ItemSlot, ref ItemStackMoveOperation) Returns the quantity of items that were not merged (left over in the source slot) public override int TryPutInto(ItemSlot sinkSlot, ref ItemStackMoveOperation op) Parameters sinkSlot ItemSlot op ItemStackMoveOperation Returns int Amount of moved items"
  },
  "api/Vintagestory.API.Common.ItemSlotSkill.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotSkill.html",
    "title": "Class ItemSlotSkill | VintageStory API",
    "keywords": "Class ItemSlotSkill Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemSlotSkill : ItemSlot Inheritance object ItemSlot ItemSlotSkill Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotSkill(InventoryBase) public ItemSlotSkill(InventoryBase inventory) Parameters inventory InventoryBase Properties StorageType The storage type of this slot. public override EnumItemStorageFlags StorageType { get; } Property Value EnumItemStorageFlags"
  },
  "api/Vintagestory.API.Common.ItemSlotSurvival.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotSurvival.html",
    "title": "Class ItemSlotSurvival | VintageStory API",
    "keywords": "Class ItemSlotSurvival Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Standard survival mode slot that can hold everything except full backpacks Open in GitHub public class ItemSlotSurvival : ItemSlot Inheritance object ItemSlot ItemSlotSurvival Derived ItemSlotBagContent Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.StorageType ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotSurvival(InventoryBase) public ItemSlotSurvival(InventoryBase inventory) Parameters inventory InventoryBase Methods CanHold(ItemSlot) Whether or not this slot can hold the item from the source slot. public override bool CanHold(ItemSlot sourceSlot) Parameters sourceSlot ItemSlot Returns bool CanTakeFrom(ItemSlot, EnumMergePriority) Whether or not this slot can take the item from the source slot. public override bool CanTakeFrom(ItemSlot sourceSlot, EnumMergePriority priority = EnumMergePriority.AutoMerge) Parameters sourceSlot ItemSlot priority EnumMergePriority Returns bool"
  },
  "api/Vintagestory.API.Common.ItemSlotUniversal.html": {
    "href": "api/Vintagestory.API.Common.ItemSlotUniversal.html",
    "title": "Class ItemSlotUniversal | VintageStory API",
    "keywords": "Class ItemSlotUniversal Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A universal item slot type that can hold anything. Open in GitHub public class ItemSlotUniversal : ItemSlot Inheritance object ItemSlot ItemSlotUniversal Inherited Members ItemSlot.MarkedDirty ItemSlot.MaxSlotStackSize ItemSlot.itemstack ItemSlot.inventory ItemSlot.Inventory ItemSlot.BackgroundIcon ItemSlot.DrawUnavailable ItemSlot.HexBackgroundColor ItemSlot.Itemstack ItemSlot.StackSize ItemSlot.Empty ItemSlot.GetRemainingSlotSpace(ItemStack) ItemSlot.CanTakeFrom(ItemSlot, EnumMergePriority) ItemSlot.CanHold(ItemSlot) ItemSlot.CanTake() ItemSlot.TakeOutWhole() ItemSlot.TakeOut(int) ItemSlot.TryPutInto(IWorldAccessor, ItemSlot, int) ItemSlot.TryPutInto(ItemSlot, ref ItemStackMoveOperation) ItemSlot.TryFlipWith(ItemSlot) ItemSlot.FlipWith(ItemSlot) ItemSlot.ActivateSlot(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotLeftClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotMiddleClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.ActivateSlotRightClick(ItemSlot, ref ItemStackMoveOperation) ItemSlot.OnItemSlotModified(ItemStack) ItemSlot.MarkDirty() ItemSlot.GetStackName() ItemSlot.GetStackDescription(IClientWorldAccessor, bool) ItemSlot.ToString() ItemSlot.GetBestSuitedSlot(ItemSlot, ItemStackMoveOperation, List<ItemSlot>) ItemSlot.OnBeforeRender(ItemRenderInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemSlotUniversal(InventoryBase) public ItemSlotUniversal(InventoryBase inventory) Parameters inventory InventoryBase Properties StorageType The storage type of this slot. public override EnumItemStorageFlags StorageType { get; } Property Value EnumItemStorageFlags"
  },
  "api/Vintagestory.API.Common.ItemStack.html": {
    "href": "api/Vintagestory.API.Common.ItemStack.html",
    "title": "Class ItemStack | VintageStory API",
    "keywords": "Class ItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemStack : IItemStack Inheritance object ItemStack Implements IItemStack Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemStack() Create a new empty itemstack public ItemStack() ItemStack(byte[]) Create a new itemstack from a byte serialized array(without resolving the block/item) public ItemStack(byte[] data) Parameters data byte[] ItemStack(BinaryReader) Create a new itemstack from a byte serialized stream (without resolving the block/item) public ItemStack(BinaryReader reader) Parameters reader BinaryReader ItemStack(BinaryReader, IWorldAccessor) Create a new itemstack from a byte serialized stream (with resolving the block/item) public ItemStack(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor ItemStack(int, EnumItemClass, int, TreeAttribute, IWorldAccessor) Create a new itemstack with given collectible id, itemclass, stacksize, attributes and a resolver to turn the collectibe + itemclass into an Item/Block public ItemStack(int id, EnumItemClass itemClass, int stacksize, TreeAttribute stackAttributes, IWorldAccessor resolver) Parameters id int itemClass EnumItemClass stacksize int stackAttributes TreeAttribute resolver IWorldAccessor ItemStack(Block, int) Create a new itemstack from given block and given stack size public ItemStack(Block block, int stacksize = 1) Parameters block Block stacksize int ItemStack(CollectibleObject, int) Create a new itemstack from given block/item and given stack size public ItemStack(CollectibleObject collectible, int stacksize = 1) Parameters collectible CollectibleObject stacksize int ItemStack(Item, int) Create a new itemstack from given item and given stack size public ItemStack(Item item, int stacksize = 1) Parameters item Item stacksize int Fields Class Wether its a block Block or Item public EnumItemClass Class Field Value EnumItemClass Id The id of the block or item public int Id Field Value int block protected Block block Field Value Block item protected Item item Field Value Item stacksize protected int stacksize Field Value int Properties Attributes Attributes assigned to this particular itemstack which are saved and synchronized. public ITreeAttribute Attributes { get; set; } Property Value ITreeAttribute Block If this is a stack of blocks, this is the type of block it's holding, otherwise null public Block Block { get; } Property Value Block Collectible The item/block base class this stack is holding public CollectibleObject Collectible { get; } Property Value CollectibleObject Item If this is a stack of items, this is the type of items it's holding, otherwise null public Item Item { get; } Property Value Item ItemAttributes The Attributes assigned to the underlying block/item. Should not be modified, as it applies to globally. public JsonObject ItemAttributes { get; } Property Value JsonObject StackSize The amount of items/blocks in this stack public int StackSize { get; set; } Property Value int TempAttributes Temporary Attributes assigned to this particular itemstack, not synchronized, not saved! Modifiable. public ITreeAttribute TempAttributes { get; set; } Property Value ITreeAttribute Methods Clone() Creates a full copy of the item stack public ItemStack Clone() Returns ItemStack Equals(IWorldAccessor, ItemStack, params string[]) Returns true if both stacks exactly match public bool Equals(IWorldAccessor worldForResolve, ItemStack sourceStack, params string[] ignoreAttributeSubTrees) Parameters worldForResolve IWorldAccessor sourceStack ItemStack ignoreAttributeSubTrees string[] Returns bool FixMapping(Dictionary<int, AssetLocation>, Dictionary<int, AssetLocation>, IWorldAccessor) This method should always be called when an itemstack got loaded from the savegame or when it got imported. When this method return false, you should discard the itemstack because it could not get resolved and a warning will be logged. public bool FixMapping(Dictionary<int, AssetLocation> oldBlockMapping, Dictionary<int, AssetLocation> oldItemMapping, IWorldAccessor worldForNewMapping) Parameters oldBlockMapping Dictionary<int, AssetLocation> oldItemMapping Dictionary<int, AssetLocation> worldForNewMapping IWorldAccessor Returns bool FromBytes(BinaryReader) Reads all the itemstacks properties from a series of bytes, including its stack attributes public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetDescription(IWorldAccessor, ItemSlot, bool) Returns a human readable description of the item/block public string GetDescription(IWorldAccessor world, ItemSlot inSlot, bool debug = false) Parameters world IWorldAccessor inSlot ItemSlot debug bool Returns string GetEmptyClone() Creates a full copy of the item stack, except for its stack size. public ItemStack GetEmptyClone() Returns ItemStack GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetHashCode(string[]) public int GetHashCode(string[] ignoredAttributes) Parameters ignoredAttributes string[] Returns int GetName() Returns a human readable name of the item/block public string GetName() Returns string MatchesSearchText(IWorldAccessor, string) Returns true if searchText is found in the item/block name as supplied from GetName() public bool MatchesSearchText(IWorldAccessor world, string searchText) Parameters world IWorldAccessor searchText string Returns bool ResolveBlockOrItem(IWorldAccessor) Sets the item/block based on the currently set itemclass + id public bool ResolveBlockOrItem(IWorldAccessor resolver) Parameters resolver IWorldAccessor Returns bool Satisfies(ItemStack) Returns true if this item stack is a satisfactory replacement for given itemstack. It's basically an Equals() test, but ignores additional attributes of the sourceStack public bool Satisfies(ItemStack sourceStack) Parameters sourceStack ItemStack Returns bool SetFrom(ItemStack) Replace all the properties (id, class, attributes, stacksize, etc...) from this item stack by given stack public void SetFrom(ItemStack stack) Parameters stack ItemStack ToBytes() Serializes the itemstack into a series of bytes, including its stack attributes public byte[] ToBytes() Returns byte[] ToBytes(BinaryWriter) Serializes the itemstack into a series of bytes, including its stack attributes public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToString() Turn the itemstack into a simple string representation public override string ToString() Returns string"
  },
  "api/Vintagestory.API.Common.ItemStackMergeOperation.html": {
    "href": "api/Vintagestory.API.Common.ItemStackMergeOperation.html",
    "title": "Class ItemStackMergeOperation | VintageStory API",
    "keywords": "Class ItemStackMergeOperation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemStackMergeOperation : ItemStackMoveOperation Inheritance object ItemStackMoveOperation ItemStackMergeOperation Inherited Members ItemStackMoveOperation.World ItemStackMoveOperation.ActingPlayer ItemStackMoveOperation.MouseButton ItemStackMoveOperation.Modifiers ItemStackMoveOperation.CurrentPriority ItemStackMoveOperation.RequiredPriority ItemStackMoveOperation.ConfirmationMessageCode ItemStackMoveOperation.RequestedQuantity ItemStackMoveOperation.MovableQuantity ItemStackMoveOperation.MovedQuantity ItemStackMoveOperation.NotMovedQuantity ItemStackMoveOperation.ShiftDown ItemStackMoveOperation.CtrlDown ItemStackMoveOperation.AltDown ItemStackMoveOperation.WheelDir ItemStackMoveOperation.ToMergeOperation(ItemSlot, ItemSlot) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemStackMergeOperation(IWorldAccessor, EnumMouseButton, EnumModifierKey, EnumMergePriority, int) public ItemStackMergeOperation(IWorldAccessor world, EnumMouseButton mouseButton, EnumModifierKey modifiers, EnumMergePriority currentPriority, int requestedQuantity) Parameters world IWorldAccessor mouseButton EnumMouseButton modifiers EnumModifierKey currentPriority EnumMergePriority requestedQuantity int Fields SinkSlot The slot that the item is attempting transfer to. public ItemSlot SinkSlot Field Value ItemSlot SourceSlot The slot that the item is being transferred from public ItemSlot SourceSlot Field Value ItemSlot"
  },
  "api/Vintagestory.API.Common.ItemStackMoveOperation.html": {
    "href": "api/Vintagestory.API.Common.ItemStackMoveOperation.html",
    "title": "Class ItemStackMoveOperation | VintageStory API",
    "keywords": "Class ItemStackMoveOperation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ItemStackMoveOperation Inheritance object ItemStackMoveOperation Derived ItemStackMergeOperation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemStackMoveOperation(IWorldAccessor, EnumMouseButton, EnumModifierKey, EnumMergePriority, int) public ItemStackMoveOperation(IWorldAccessor world, EnumMouseButton mouseButton, EnumModifierKey modifiers, EnumMergePriority currentPriority, int requestedQuantity = 0) Parameters world IWorldAccessor mouseButton EnumMouseButton modifiers EnumModifierKey currentPriority EnumMergePriority requestedQuantity int Fields ActingPlayer The acting player within the world. public IPlayer ActingPlayer Field Value IPlayer ConfirmationMessageCode The confirmation message code for this operation. public string ConfirmationMessageCode Field Value string CurrentPriority The current Priority for merging slots. public EnumMergePriority CurrentPriority Field Value EnumMergePriority Modifiers Any modifiers that the ActingPlayer is using for the operation (Ctrl, shift, alt) public EnumModifierKey Modifiers Field Value EnumModifierKey MouseButton The mouse button the ActingPlayer has pressed. public EnumMouseButton MouseButton Field Value EnumMouseButton MovableQuantity The amount moveable. public int MovableQuantity Field Value int MovedQuantity The amount moved. public int MovedQuantity Field Value int RequestedQuantity The amount requested. public int RequestedQuantity Field Value int RequiredPriority The required Priority (can be null) public EnumMergePriority? RequiredPriority Field Value EnumMergePriority? WheelDir public int WheelDir Field Value int World The world that the move operation is being performed. public IWorldAccessor World Field Value IWorldAccessor Properties AltDown Checks if the Alt key is held down. public bool AltDown { get; } Property Value bool CtrlDown Checks if the Ctrl key is held down. public bool CtrlDown { get; } Property Value bool NotMovedQuantity The amount not moved. public int NotMovedQuantity { get; } Property Value int ShiftDown Checks if the Shift Key is held down. public bool ShiftDown { get; } Property Value bool Methods ToMergeOperation(ItemSlot, ItemSlot) Converts this MoveOperation to a Merge Operation. public ItemStackMergeOperation ToMergeOperation(ItemSlot SinkSlot, ItemSlot SourceSlot) Parameters SinkSlot ItemSlot The slot to put items. SourceSlot ItemSlot The slot to take items. Returns ItemStackMergeOperation"
  },
  "api/Vintagestory.API.Common.JsonAttributesConverter.html": {
    "href": "api/Vintagestory.API.Common.JsonAttributesConverter.html",
    "title": "Class JsonAttributesConverter | VintageStory API",
    "keywords": "Class JsonAttributesConverter Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class JsonAttributesConverter : JsonConverter Inheritance object JsonConverter JsonAttributesConverter Inherited Members JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods CanConvert(Type) public override bool CanConvert(Type objectType) Parameters objectType Type Returns bool ReadJson(JsonReader, Type, object, JsonSerializer) public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters reader JsonReader objectType Type existingValue object serializer JsonSerializer Returns object WriteJson(JsonWriter, object, JsonSerializer) public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters writer JsonWriter value object serializer JsonSerializer"
  },
  "api/Vintagestory.API.Common.JsonItemStack.html": {
    "href": "api/Vintagestory.API.Common.JsonItemStack.html",
    "title": "Class JsonItemStack | VintageStory API",
    "keywords": "Class JsonItemStack Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a representation of an item stack in JSON. It resembles a standard in-game item stack but can be stored before the game is loaded. Open in GitHub [DocumentAsJson] [ProtoContract] public class JsonItemStack : IRecipeOutput Inheritance object JsonItemStack Implements IRecipeOutput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"output\": { \"type\": \"item\", \"code\": \"knifeblade-flint\", \"stacksize\": 1 }, \"output\": { \"type\": \"block\", \"code\": \"ladder-wood-north\", \"quantity\": 3 }, Fields Attributes Tree Attributes that should be attached to the resulting itemstack. [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] [ProtoMember(4)] public JsonObject Attributes Field Value JsonObject Code The asset location code of the block or item. [ProtoMember(2)] [DocumentAsJson] public AssetLocation Code Field Value AssetLocation ResolvedItemstack The resolved item after conversion. public ItemStack ResolvedItemstack Field Value ItemStack StackSize Amount of items in this stacks [ProtoMember(3)] [DocumentAsJson] public int StackSize Field Value int Type Block or Item? [ProtoMember(1)] [DocumentAsJson] public EnumItemClass Type Field Value EnumItemClass Properties Quantity Alias of StackSize. No real need to use this instead of it. [DocumentAsJson] public int Quantity { get; set; } Property Value int Methods Clone() Creates a deep copy of this object public JsonItemStack Clone() Returns JsonItemStack FillPlaceHolder(string, string) public void FillPlaceHolder(string key, string value) Parameters key string value string FromBytes(BinaryReader, IClassRegistryAPI) Loads the ItemStack from the reader. public virtual void FromBytes(BinaryReader reader, IClassRegistryAPI instancer) Parameters reader BinaryReader The reader to get the ItemStack from instancer IClassRegistryAPI The instancer for the ItemStack. FromString(string) public static JsonItemStack FromString(string jsonItemstack) Parameters jsonItemstack string Returns JsonItemStack Matches(IWorldAccessor, ItemStack) public bool Matches(IWorldAccessor worldForResolve, ItemStack inputStack) Parameters worldForResolve IWorldAccessor inputStack ItemStack Returns bool Resolve(IWorldAccessor, string, bool) public bool Resolve(IWorldAccessor resolver, string sourceForErrorLogging, bool printWarningOnError = true) Parameters resolver IWorldAccessor sourceForErrorLogging string printWarningOnError bool Returns bool Resolve(IWorldAccessor, string, AssetLocation, bool) Sets itemstack.block or itemstack.item public bool Resolve(IWorldAccessor resolver, string sourceForErrorLogging, AssetLocation assetLoc, bool printWarningOnError = true) Parameters resolver IWorldAccessor sourceForErrorLogging string assetLoc AssetLocation printWarningOnError bool Returns bool ToBytes(BinaryWriter) Saves the ItemStack to file. public virtual void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter The writer to save the item to."
  },
  "api/Vintagestory.API.Common.JsonUtil.html": {
    "href": "api/Vintagestory.API.Common.JsonUtil.html",
    "title": "Class JsonUtil | VintageStory API",
    "keywords": "Class JsonUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class JsonUtil Inheritance object JsonUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateSerializerForDomain(string, JsonSerializerSettings) public static JsonSerializer CreateSerializerForDomain(string domain, JsonSerializerSettings settings = null) Parameters domain string settings JsonSerializerSettings Returns JsonSerializer FromBytes<T>(byte[]) Reads a Json object, and converts it to the designated type. public static T FromBytes<T>(byte[] data) Parameters data byte[] The json object. Returns T Type Parameters T The designated type FromString<T>(string) public static T FromString<T>(string data) Parameters data string Returns T Type Parameters T PopulateObject(object, JToken, JsonSerializer) public static void PopulateObject(object toPopulate, JToken token, JsonSerializer js) Parameters toPopulate object token JToken js JsonSerializer PopulateObject(object, string, string, JsonSerializerSettings) public static void PopulateObject(object toPopulate, string text, string domain, JsonSerializerSettings settings = null) Parameters toPopulate object text string domain string settings JsonSerializerSettings Populate<T>(JToken, T) public static void Populate<T>(this JToken value, T target) where T : class Parameters value JToken target T Type Parameters T ToBytes<T>(T) Converts the object to json. public static byte[] ToBytes<T>(T obj) Parameters obj T The object to convert Returns byte[] Type Parameters T The type to convert ToObject<T>(JToken, string, JsonSerializerSettings) Converts a Json token to a typed object. public static T ToObject<T>(this JToken token, string domain, JsonSerializerSettings settings = null) Parameters token JToken The token to deserialize domain string The domain of the text. settings JsonSerializerSettings The settings of the deserializer. (default: Null) Returns T Type Parameters T The type to convert. ToObject<T>(string, string, JsonSerializerSettings) Converts a Json object to a typed object. public static T ToObject<T>(string text, string domain, JsonSerializerSettings settings = null) Parameters text string The text to deserialize domain string The domain of the text. settings JsonSerializerSettings The settings of the deserializer. (default: Null) Returns T Type Parameters T The type to convert. ToPrettyString<T>(T) public static string ToPrettyString<T>(T obj) Parameters obj T Returns string Type Parameters T ToString<T>(T) public static string ToString<T>(T obj) Parameters obj T Returns string Type Parameters T"
  },
  "api/Vintagestory.API.Common.LandClaim.html": {
    "href": "api/Vintagestory.API.Common.LandClaim.html",
    "title": "Class LandClaim | VintageStory API",
    "keywords": "Class LandClaim Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [ProtoContract] public class LandClaim Inheritance object LandClaim Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AllowTraverseEveryone [ProtoMember(12)] public bool AllowTraverseEveryone Field Value bool AllowUseEveryone [ProtoMember(11)] public bool AllowUseEveryone Field Value bool Areas [ProtoMember(1)] public List<Cuboidi> Areas Field Value List<Cuboidi> Description [ProtoMember(7)] public string Description Field Value string LastKnownOwnerName [ProtoMember(6)] public string LastKnownOwnerName Field Value string OwnedByEntityId [ProtoMember(3)] public long OwnedByEntityId Field Value long OwnedByPlayerGroupUid [ProtoMember(5)] public uint OwnedByPlayerGroupUid Field Value uint OwnedByPlayerUid [ProtoMember(4)] public string OwnedByPlayerUid Field Value string PermittedPlayerGroupIds Other groups allowed to use this land [ProtoMember(8)] public Dictionary<int, EnumBlockAccessFlags> PermittedPlayerGroupIds Field Value Dictionary<int, EnumBlockAccessFlags> PermittedPlayerLastKnownPlayerName Other players allowed to use this land, name of the player at the time the privilege was granted [ProtoMember(10)] public Dictionary<string, string> PermittedPlayerLastKnownPlayerName Field Value Dictionary<string, string> PermittedPlayerUids Other players allowed to use this land [ProtoMember(9)] public Dictionary<string, EnumBlockAccessFlags> PermittedPlayerUids Field Value Dictionary<string, EnumBlockAccessFlags> ProtectionLevel [ProtoMember(2)] public int ProtectionLevel Field Value int Properties Center public BlockPos Center { get; } Property Value BlockPos SizeXYZ public int SizeXYZ { get; } Property Value int SizeXZ public int SizeXZ { get; } Property Value int Methods AddArea(Cuboidi) public EnumClaimError AddArea(Cuboidi cuboidi) Parameters cuboidi Cuboidi Returns EnumClaimError Clone() public LandClaim Clone() Returns LandClaim CreateClaim(string, int) public static LandClaim CreateClaim(string ownerName, int protectionLevel = 1) Parameters ownerName string protectionLevel int Returns LandClaim CreateClaim(EntityAgent, int) public static LandClaim CreateClaim(EntityAgent entity, int protectionLevel = 1) Parameters entity EntityAgent protectionLevel int Returns LandClaim CreateClaim(IPlayer, int) public static LandClaim CreateClaim(IPlayer player, int protectionLevel = 1) Parameters player IPlayer protectionLevel int Returns LandClaim Intersects(Cuboidi) public bool Intersects(Cuboidi cuboidi) Parameters cuboidi Cuboidi Returns bool Intersects2d(HorRectanglei) Ignores y-values public bool Intersects2d(HorRectanglei rec) Parameters rec HorRectanglei Returns bool PositionInside(BlockPos) public bool PositionInside(BlockPos position) Parameters position BlockPos Returns bool PositionInside(Vec3d) public bool PositionInside(Vec3d position) Parameters position Vec3d Returns bool TestPlayerAccess(IPlayer, EnumBlockAccessFlags) public EnumPlayerAccessResult TestPlayerAccess(IPlayer player, EnumBlockAccessFlags claimFlag) Parameters player IPlayer claimFlag EnumBlockAccessFlags Returns EnumPlayerAccessResult"
  },
  "api/Vintagestory.API.Common.LayeredVoxelRecipe-1.html": {
    "href": "api/Vintagestory.API.Common.LayeredVoxelRecipe-1.html",
    "title": "Class LayeredVoxelRecipe<T> | VintageStory API",
    "keywords": "Class LayeredVoxelRecipe<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Creates a recipe using a 3D voxel-based system. Used for recipes types such as clayforming, smithing, or stone-knapping. [DocumentAsJson] public abstract class LayeredVoxelRecipe<T> : RecipeBase<T>, IRecipeBase<T> Type Parameters T Inheritance object RecipeBase<T> LayeredVoxelRecipe<T> Implements IRecipeBase<T> Inherited Members RecipeBase<T>.RecipeId RecipeBase<T>.Ingredients RecipeBase<T>.Ingredient RecipeBase<T>.Output RecipeBase<T>.Name RecipeBase<T>.Enabled RecipeBase<T>.Clone() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LayeredVoxelRecipe() public LayeredVoxelRecipe() Fields Pattern A 2D array of strings that are layered together to form the recipe. Use \"#\" for solid, and \"_\" or \" \" for a gap. [DocumentAsJson] public string[][] Pattern Field Value string[][] Voxels An array of voxels, created from Pattern during loading. This array is cloned when a player starts creating the recipe. public bool[,,] Voxels Field Value bool[,,] Properties QuantityLayers The number of layers in this recipe, in the Y-axis. public abstract int QuantityLayers { get; } Property Value int RecipeCategoryCode A category code for this recipe type. Used for error logging. public abstract string RecipeCategoryCode { get; } Property Value string RotateRecipe If true, the recipe is rotated 90 degrees in the Y axis. protected virtual bool RotateRecipe { get; set; } Property Value bool Methods FromBytes(BinaryReader, IWorldAccessor) Deserializes the alloy public void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GenVoxels() Generates the voxels for the recipe. public void GenVoxels() GetNameToCodeMapping(IWorldAccessor) Resolves Wildcards in the ingredients public override Dictionary<string, string[]> GetNameToCodeMapping(IWorldAccessor world) Parameters world IWorldAccessor Returns Dictionary<string, string[]> Resolve(IWorldAccessor, string) Resolves the recipe. public override bool Resolve(IWorldAccessor world, string sourceForErrorLogging) Parameters world IWorldAccessor sourceForErrorLogging string Returns bool ToBytes(BinaryWriter) Serialized the recipe public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter WildCardMatch(AssetLocation, AssetLocation) Matches the wildcards for the clay recipe. public static bool WildCardMatch(AssetLocation wildCard, AssetLocation blockCode) Parameters wildCard AssetLocation blockCode AssetLocation Returns bool"
  },
  "api/Vintagestory.API.Common.LogEntryDelegate.html": {
    "href": "api/Vintagestory.API.Common.LogEntryDelegate.html",
    "title": "Delegate LogEntryDelegate | VintageStory API",
    "keywords": "Delegate LogEntryDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void LogEntryDelegate(EnumLogType logType, string message, params object[] args) Parameters logType EnumLogType message string args object[] Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.LoggerBase.html": {
    "href": "api/Vintagestory.API.Common.LoggerBase.html",
    "title": "Class LoggerBase | VintageStory API",
    "keywords": "Class LoggerBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Base implementation for ILogger which implements all methods besides a new abstract method LogImpl(EnumLogType, string, params object[]). Open in GitHub public abstract class LoggerBase : ILogger Inheritance object LoggerBase Implements ILogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields SourcePath public static string SourcePath Field Value string Properties TraceLog If true, will also print to Diagnostics.Debug. public bool TraceLog { get; set; } Property Value bool Methods Audit(string) Adds a new Audit log entry with the specified message. public void Audit(string message) Parameters message string Audit(string, params object[]) Adds a new Audit log entry with the specified format string and arguments. public void Audit(string format, params object[] args) Parameters format string args object[] Build(string) Adds a new Build log entry with the specified message. public void Build(string message) Parameters message string Build(string, params object[]) Adds a new Build log entry with the specified format string and arguments. public void Build(string format, params object[] args) Parameters format string args object[] Chat(string) Adds a new Chat log entry with the specified message. public void Chat(string message) Parameters message string Chat(string, params object[]) Adds a new Chat log entry with the specified format string and arguments. public void Chat(string format, params object[] args) Parameters format string args object[] CleanStackTrace(string) Remove the full path from the stacktrace of the machine that compiled the code public static string CleanStackTrace(string stackTrace) Parameters stackTrace string Returns string ClearWatchers() Removes any handler that registered to the EntryAdded event. This method is called when the client leaves a world or server shuts down. public void ClearWatchers() Debug(string) Adds a new Debug log entry with the specified message. public void Debug(string message) Parameters message string Debug(string, params object[]) Adds a new Debug log entry with the specified format string and arguments. public void Debug(string format, params object[] args) Parameters format string args object[] Error(Exception) Convenience method for logging exceptions in try/catch blocks public void Error(Exception e) Parameters e Exception Error(string) Adds a new Error log entry with the specified message. public void Error(string message) Parameters message string Error(string, params object[]) Adds a new Error log entry with the specified format string and arguments. public void Error(string format, params object[] args) Parameters format string args object[] Event(string) Adds a new Event log entry with the specified message. public void Event(string message) Parameters message string Event(string, params object[]) Adds a new Event log entry with the specified format string and arguments. public void Event(string format, params object[] args) Parameters format string args object[] Fatal(Exception) Convenience method for logging exceptions in try/catch blocks public void Fatal(Exception e) Parameters e Exception Fatal(string) Adds a new Fatal log entry with the specified message. public void Fatal(string message) Parameters message string Fatal(string, params object[]) Adds a new Fatal log entry with the specified format string and arguments. public void Fatal(string format, params object[] args) Parameters format string args object[] Log(EnumLogType, string) Adds a new log entry with the specified log type and message. public void Log(EnumLogType logType, string message) Parameters logType EnumLogType message string Log(EnumLogType, string, params object[]) Adds a new log entry with the specified log type, format string and arguments. public void Log(EnumLogType logType, string format, params object[] args) Parameters logType EnumLogType format string args object[] LogException(EnumLogType, Exception) Logs an exception with the specified log type. public void LogException(EnumLogType logType, Exception e) Parameters logType EnumLogType e Exception LogImpl(EnumLogType, string, params object[]) This is the only method necessary to be overridden by the implementing class, actually does the logging as necessary. protected abstract void LogImpl(EnumLogType logType, string format, params object[] args) Parameters logType EnumLogType format string args object[] Notification(string) Adds a new Notification log entry with the specified message. public void Notification(string message) Parameters message string Notification(string, params object[]) Adds a new Notification log entry with the specified format string and arguments. public void Notification(string format, params object[] args) Parameters format string args object[] StoryEvent(string) Adds a new StoryEvent log entry with the specified message. public void StoryEvent(string message) Parameters message string StoryEvent(string, params object[]) Adds a new StoryEvent log entry with the specified format string and arguments. public void StoryEvent(string format, params object[] args) Parameters format string args object[] VerboseDebug(string) Adds a new VerboseDebug log entry with the specified message. public void VerboseDebug(string message) Parameters message string VerboseDebug(string, params object[]) Adds a new VerboseDebug log entry with the specified format string and arguments. public void VerboseDebug(string format, params object[] args) Parameters format string args object[] Warning(Exception) Convenience method for logging exceptions in try/catch blocks public void Warning(Exception e) Parameters e Exception Warning(string) Adds a new Warning log entry with the specified message. public void Warning(string message) Parameters message string Warning(string, params object[]) Adds a new Warning log entry with the specified format string and arguments. public void Warning(string format, params object[] args) Parameters format string args object[] Worldgen(Exception) public void Worldgen(Exception e) Parameters e Exception Worldgen(string) public void Worldgen(string message) Parameters message string Worldgen(string, params object[]) public void Worldgen(string format, params object[] args) Parameters format string args object[] Events EntryAdded Fired each time a new log entry has been added. public event LogEntryDelegate EntryAdded Event Type LogEntryDelegate"
  },
  "api/Vintagestory.API.Common.LongArgParser.html": {
    "href": "api/Vintagestory.API.Common.LongArgParser.html",
    "title": "Class LongArgParser | VintageStory API",
    "keywords": "Class LongArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class LongArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase LongArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LongArgParser(string, long, bool) public LongArgParser(string argName, long defaultValue, bool isMandatoryArg) Parameters argName string defaultValue long isMandatoryArg bool LongArgParser(string, long, long, long, bool) public LongArgParser(string argName, long min, long max, long defaultValue, bool isMandatoryArg) Parameters argName string min long max long defaultValue long isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.MapChunkGeneratorDelegate.html": {
    "href": "api/Vintagestory.API.Common.MapChunkGeneratorDelegate.html",
    "title": "Delegate MapChunkGeneratorDelegate | VintageStory API",
    "keywords": "Delegate MapChunkGeneratorDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void MapChunkGeneratorDelegate(IMapChunk mapChunk, int chunkX, int chunkZ) Parameters mapChunk IMapChunk chunkX int chunkZ int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.MapRegionGeneratorDelegate.html": {
    "href": "api/Vintagestory.API.Common.MapRegionGeneratorDelegate.html",
    "title": "Delegate MapRegionGeneratorDelegate | VintageStory API",
    "keywords": "Delegate MapRegionGeneratorDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void MapRegionGeneratorDelegate(IMapRegion mapRegion, int regionX, int regionZ, ITreeAttribute chunkGenParams = null) Parameters mapRegion IMapRegion regionX int regionZ int chunkGenParams ITreeAttribute Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.MapRegionLoadedDelegate.html": {
    "href": "api/Vintagestory.API.Common.MapRegionLoadedDelegate.html",
    "title": "Delegate MapRegionLoadedDelegate | VintageStory API",
    "keywords": "Delegate MapRegionLoadedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Triggered when the server loaded a map region from disk or generated a new one public delegate void MapRegionLoadedDelegate(Vec2i mapCoord, IMapRegion region) Parameters mapCoord Vec2i regionX and regionZ (multiply with region size to get block position) region IMapRegion Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.MapRegionUnloadDelegate.html": {
    "href": "api/Vintagestory.API.Common.MapRegionUnloadDelegate.html",
    "title": "Delegate MapRegionUnloadDelegate | VintageStory API",
    "keywords": "Delegate MapRegionUnloadDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Triggered just before a map region gets unloaded public delegate void MapRegionUnloadDelegate(Vec2i mapCoord, IMapRegion region) Parameters mapCoord Vec2i regionX and regionZ (multiply with region size to get block position) region IMapRegion Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.MatchGridRecipeDelegate.html": {
    "href": "api/Vintagestory.API.Common.MatchGridRecipeDelegate.html",
    "title": "Delegate MatchGridRecipeDelegate | VintageStory API",
    "keywords": "Delegate MatchGridRecipeDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate bool MatchGridRecipeDelegate(IPlayer player, GridRecipe recipe, ItemSlot[] ingredients, int gridWidth) Parameters player IPlayer recipe GridRecipe ingredients ItemSlot[] gridWidth int Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.MetalProperty.html": {
    "href": "api/Vintagestory.API.Common.MetalProperty.html",
    "title": "Class MetalProperty | VintageStory API",
    "keywords": "Class MetalProperty Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class MetalProperty : WorldProperty<MetalPropertyVariant> Inheritance object WorldProperty<MetalPropertyVariant> MetalProperty Inherited Members WorldProperty<MetalPropertyVariant>.Code WorldProperty<MetalPropertyVariant>.Variants object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BoilPoint public float BoilPoint Field Value float Density public float Density Field Value float Elemental public bool Elemental Field Value bool MeltPoint public float MeltPoint Field Value float SpecificHeatCapacity public float SpecificHeatCapacity Field Value float Tier public int Tier Field Value int"
  },
  "api/Vintagestory.API.Common.MetalPropertyVariant.html": {
    "href": "api/Vintagestory.API.Common.MetalPropertyVariant.html",
    "title": "Class MetalPropertyVariant | VintageStory API",
    "keywords": "Class MetalPropertyVariant Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class MetalPropertyVariant : WorldPropertyVariant Inheritance object WorldPropertyVariant MetalPropertyVariant Inherited Members WorldPropertyVariant.Code object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Tier [JsonProperty] public int Tier Field Value int"
  },
  "api/Vintagestory.API.Common.Mod.html": {
    "href": "api/Vintagestory.API.Common.Mod.html",
    "title": "Class Mod | VintageStory API",
    "keywords": "Class Mod Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a mod in the mod manager. May contain zero to multiple ModSystem instances within it. Open in GitHub public abstract class Mod Inheritance object Mod Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties FileName Gets the file name of this mod. public string FileName { get; } Property Value string Icon Holds the icon of this mod. Found as \"modicon.png\" in the root of the mod's folder or archive. May be null. public BitmapExternal Icon { get; } Property Value BitmapExternal Info Gets the info of this mod. Found either as \"modinfo.json\" in the of the mod's folder or archive, or in the case of raw .cs and .dll files, using the ModInfoAttribute on the assembly. public ModInfo Info { get; } Property Value ModInfo Logger Gets the logger associated with this mod. public ILogger Logger { get; } Property Value ILogger SourcePath Gets the full path to where this mod originated from, including file name. public string SourcePath { get; } Property Value string SourceType Gets the origin file type of the mod (.cs, .dll, .zip or folder). public EnumModSourceType SourceType { get; } Property Value EnumModSourceType Systems Gets a collection of systems belonging to this mod. public IReadOnlyCollection<ModSystem> Systems { get; } Property Value IReadOnlyCollection<ModSystem> WorldConfig public ModWorldConfiguration WorldConfig { get; } Property Value ModWorldConfiguration Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.ModDependency.html": {
    "href": "api/Vintagestory.API.Common.ModDependency.html",
    "title": "Class ModDependency | VintageStory API",
    "keywords": "Class ModDependency Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a mod dependency requirement of one mod for another. Open in GitHub public class ModDependency Inheritance object ModDependency Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ModDependency(string, string) Creates a new ModDependancy object. public ModDependency(string modID, string version = \"\") Parameters modID string The ID of the required mod. version string The version of the required mod (default: empty string.) Properties ModID The required mod id (domain) of this dependency. public string ModID { get; } Property Value string Version The minimum version requirement of this dependency. May be empty if the no specific version is required. public string Version { get; } Property Value string Methods ToString() Returns the Mod Dependancy as a string. public override string ToString() Returns string"
  },
  "api/Vintagestory.API.Common.ModDependencyAttribute.html": {
    "href": "api/Vintagestory.API.Common.ModDependencyAttribute.html",
    "title": "Class ModDependencyAttribute | VintageStory API",
    "keywords": "Class ModDependencyAttribute Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Applied to a mod assembly multiple times for each required dependency. Superseded by this mod's \"modinfo.json\" file, if available. Open in GitHub [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class ModDependencyAttribute : Attribute Inheritance object Attribute ModDependencyAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ModDependencyAttribute(string, string) public ModDependencyAttribute(string modID, string version = \"\") Parameters modID string version string Properties ModID The required mod id (domain) of this dependency. public string ModID { get; } Property Value string Version The minimum version requirement of this dependency. May be empty if the no specific version is required. public string Version { get; } Property Value string"
  },
  "api/Vintagestory.API.Common.ModInfo.html": {
    "href": "api/Vintagestory.API.Common.ModInfo.html",
    "title": "Class ModInfo | VintageStory API",
    "keywords": "Class ModInfo Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Meta data for a specific mod folder, archive, source file or assembly. Either loaded from a \"modinfo.json\" or from the assembly's ModInfoAttribute. Open in GitHub public class ModInfo : IComparable<ModInfo> Inheritance object ModInfo Implements IComparable<ModInfo> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ModInfo() public ModInfo() ModInfo(EnumModType, string, string, string, string, IEnumerable<string>, IEnumerable<string>, string, EnumAppSide, bool, bool, IEnumerable<ModDependency>) public ModInfo(EnumModType type, string name, string modID, string version, string description, IEnumerable<string> authors, IEnumerable<string> contributors, string website, EnumAppSide side, bool requiredOnClient, bool requiredOnServer, IEnumerable<ModDependency> dependencies) Parameters type EnumModType name string modID string version string description string authors IEnumerable<string> contributors IEnumerable<string> website string side EnumAppSide requiredOnClient bool requiredOnServer bool dependencies IEnumerable<ModDependency> Fields CoreMod Not exposed as a JsonProperty, only coded mods can set this to true public bool CoreMod Field Value bool Description A short description of what this mod does. (optional) [JsonProperty] public string Description Field Value string IconPath The path relative to the mod root to load the icon from. If this is not set, the game will also try to load \"./modicon.png\" before giving up. [JsonProperty] public string IconPath Field Value string Name The name of this mod. For example \"My Example Mod\". [JsonRequired] public string Name Field Value string NetworkVersion The network version of this mod. Change this number when a user that has an older version of your mod should not be allowed to connected to server with a newer version. If not set, the version value is used. [JsonProperty] public string NetworkVersion Field Value string TextureSize If the mod is a texture pack that changes topsoil grass textures, define the texture size here [JsonProperty] public int TextureSize Field Value int Type The type of this mod. Can be \"Theme\", \"Content\" or \"Code\". [JsonRequired] public EnumModType Type Field Value EnumModType Version The version of this mod. For example \"2.10.4\". (optional) [JsonProperty] public string Version Field Value string Website Location of the website or project site of this mod. (optional) [JsonProperty] public string Website Field Value string Properties Authors Names of people working on this mod. (optional) [JsonProperty] public IReadOnlyList<string> Authors { get; set; } Property Value IReadOnlyList<string> Contributors Names of people contributing to this mod. (optional) [JsonProperty] public IReadOnlyList<string> Contributors { get; set; } Property Value IReadOnlyList<string> Dependencies List of mods (and versions) this mod depends on. [JsonProperty] [JsonConverter(typeof(ModInfo.DependenciesConverter))] public IReadOnlyList<ModDependency> Dependencies { get; set; } Property Value IReadOnlyList<ModDependency> ModID The mod id (domain) of this mod. For example \"myexamplemod\". (Optional. Uses mod name (converted to lowercase, stripped of whitespace and special characters) if missing.) [JsonProperty] public string ModID { get; set; } Property Value string RequiredOnClient If set to false and the mod is universal, clients don't need the mod to join. (Optional. True by default.) [JsonProperty] public bool RequiredOnClient { get; set; } Property Value bool RequiredOnServer If set to false and the mod is universal, the mod is not disabled if it's not present on the server. (Optional. True by default.) [JsonProperty] public bool RequiredOnServer { get; set; } Property Value bool Side Which side(s) this mod runs on. Can be \"Server\", \"Client\" or \"Universal\". (Optional. Universal (both server and client) by default.) [JsonProperty] [JsonConverter(typeof(StringEnumConverter))] public EnumAppSide Side { get; set; } Property Value EnumAppSide Methods CompareTo(ModInfo) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(ModInfo other) Parameters other ModInfo An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Init() public void Init() IsValidModID(string) Returns whether the specified domain is valid. Tests if the string is non-null, has a length of at least 1, starts with a basic lowercase letter and contains only lowercase letters and numbers. public static bool IsValidModID(string str) Parameters str string Returns bool ToModID(string) Attempts to convert the specified mod name to a mod ID, stripping any non-alphanumerical (including spaces and dashes) and lowercasing letters. public static string ToModID(string name) Parameters name string Returns string"
  },
  "api/Vintagestory.API.Common.ModInfoAttribute.html": {
    "href": "api/Vintagestory.API.Common.ModInfoAttribute.html",
    "title": "Class ModInfoAttribute | VintageStory API",
    "keywords": "Class ModInfoAttribute Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Applied to a mod assembly to provide additional meta data information about a code mod. Superseded by \"modinfo.json\" file, if available. Open in GitHub [AttributeUsage(AttributeTargets.Assembly)] public sealed class ModInfoAttribute : Attribute Inheritance object Attribute ModInfoAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ModInfoAttribute(string) public ModInfoAttribute(string name) Parameters name string ModInfoAttribute(string, string) public ModInfoAttribute(string name, string modID) Parameters name string modID string Properties Authors Names of people working on this mod. (optional) public string[] Authors { get; set; } Property Value string[] Contributors Names of people contributing to this mod. (optional) public string[] Contributors { get; set; } Property Value string[] CoreMod Is this mod part of the core game, i.e. vanilla Vintage Story? (optional) Only affects whether the player is given a warning when attempting to disable this mod. Mods other than VSSurvival, VSEssentials, VSCreative should not use this, obviously... public bool CoreMod { get; set; } Property Value bool Description A short description of what this mod does. (optional) public string Description { get; set; } Property Value string IconPath public string IconPath { get; set; } Property Value string ModID The mod ID (domain) of this mod. For example \"myexamplemod\". public string ModID { get; } Property Value string Name The name of this mod. For example \"My Example Mod\". public string Name { get; } Property Value string NetworkVersion The network version of this mod. Change this number when a user that has an older version of your mod should not be allowed to connected to server with a newer version. If not set, the version value is used. public string NetworkVersion { get; set; } Property Value string RequiredOnClient If set to false and the mod is universal, clients don't need it to join. (Optional. True (required) by default.) public bool RequiredOnClient { get; set; } Property Value bool RequiredOnServer If set to false and the mod is universal, the mod is not disabled if it's not present on the server. (Optional. True by default.) public bool RequiredOnServer { get; set; } Property Value bool Side Which side(s) this mod runs on. Can be \"Server\", \"Client\" or \"Universal\". (Optional. Universal (both server and client) by default.) public string Side { get; set; } Property Value string Version The version of this mod. For example \"2.10.4\". (optional) public string Version { get; set; } Property Value string Website Location of the website or project site of this mod. (optional) public string Website { get; set; } Property Value string WorldConfig public string WorldConfig { get; set; } Property Value string"
  },
  "api/Vintagestory.API.Common.ModSystem.html": {
    "href": "api/Vintagestory.API.Common.ModSystem.html",
    "title": "Class ModSystem | VintageStory API",
    "keywords": "Class ModSystem Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Base of a system, which is part of a code mod. Takes care of setting up, registering and handling all sorts of things. You may choose to split up a mod into multiple distinct systems if you so choose, but there may also be just one. Open in GitHub public abstract class ModSystem Inheritance object ModSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Mod Gets the Mod this mod system is part of. public Mod Mod { get; } Property Value Mod Methods AssetsFinalize(ICoreAPI) When called on a server, all Block.OnLoaded() methods etc. have already been called, this is for any final asset set-up steps to be done after that. See VSSurvivalMod system BlockReinforcement.cs for an example. public virtual void AssetsFinalize(ICoreAPI api) Parameters api ICoreAPI AssetsLoaded(ICoreAPI) Called on the server or the client; implementing code may need to check which side it is. On a server, called only after all mods have received Start(), and after asset JSONs have been read from disk and patched, but before runphase ModsAndConfigReady. Asset files are now available to load using api.Assets.TryGet() calls or similar. If your execute order is below 0.2, blocks and items are not yet registered at this point, if below 0.6 recipes are not yet registered. public virtual void AssetsLoaded(ICoreAPI api) Parameters api ICoreAPI Dispose() If this mod allows runtime reloading, you must implement this method to unregister any listeners / handlers public virtual void Dispose() ExecuteOrder() If you need mods to be executed in a certain order, adjust this methods return value. The server will call each Mods StartPre() and Start() methods in ascending order of each mods execute order value. And thus, as long as every mod registers it's event handlers in the Start() method, all event handlers will be called in the same execution order. Default execute order of some survival mod parts Worldgen: GenTerra: 0 RockStrata: 0.1 Deposits: 0.2 Caves: 0.3 Blocklayers: 0.4 AssetsLoaded event JsonPatch loader: 0.05 Load hardcoded mantle block: 0.1 Block and Item Loader: 0.2 Recipes (Smithing, Knapping, Clayforming, Grid recipes, Alloys) Loader: 1 public virtual double ExecuteOrder() Returns double ShouldLoad(EnumAppSide) Returns if this mod should be loaded for the given app side, called by ShouldLoad(ICoreApi api) public virtual bool ShouldLoad(EnumAppSide forSide) Parameters forSide EnumAppSide Returns bool ShouldLoad(ICoreAPI) Returns if this mod should be loaded for the given app side. public virtual bool ShouldLoad(ICoreAPI api) Parameters api ICoreAPI Returns bool Start(ICoreAPI) Start method, called on both server and client after all mods already received a call to StartPre(), but before Blocks/Items/Entities/Recipes etc are loaded and some time before StartServerSide / StartClientSide. Typically used to register for events and network packets etc Typically also used in a mod's core to register the classes for your blocks, items, entities, blockentities, behaviors etc, prior to loading assets Do not make calls to api.Assets at this stage, the assets may not be found, resulting in errors (even if the json file exists on disk). Use AssetsLoaded() stage instead. public virtual void Start(ICoreAPI api) Parameters api ICoreAPI StartClientSide(ICoreClientAPI) Full start to the mod on the client side. Note, in multiplayer games, the server assets (blocks, items, entities, recipes) have not yet been received and so no blocks etc. are yet registered For code that must run only after we have blocks, items, entities and recipes all registered and loaded, add your method to event BlockTexturesLoaded public virtual void StartClientSide(ICoreClientAPI api) Parameters api ICoreClientAPI StartPre(ICoreAPI) Called during intial mod loading, called before any mod receives the call to Start() public virtual void StartPre(ICoreAPI api) Parameters api ICoreAPI StartServerSide(ICoreServerAPI) Full start to the mod on the server side Note: preferably, your code which adds or updates behaviors or attributes or other fixed properties of any block, item or entity, should have been run before now. For example, code which needs to do that could be placed in an overridden AssetsFinalize() method. See VSSurvivalMod system BlockReinforcement.cs for an example. public virtual void StartServerSide(ICoreServerAPI api) Parameters api ICoreServerAPI"
  },
  "api/Vintagestory.API.Common.ModWorldConfiguration.html": {
    "href": "api/Vintagestory.API.Common.ModWorldConfiguration.html",
    "title": "Class ModWorldConfiguration | VintageStory API",
    "keywords": "Class ModWorldConfiguration Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ModWorldConfiguration Inheritance object ModWorldConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields PlayStyles public PlayStyle[] PlayStyles Field Value PlayStyle[] WorldConfigAttributes public WorldConfigurationAttribute[] WorldConfigAttributes Field Value WorldConfigurationAttribute[]"
  },
  "api/Vintagestory.API.Common.ModelTransform.html": {
    "href": "api/Vintagestory.API.Common.ModelTransform.html",
    "title": "Class ModelTransform | VintageStory API",
    "keywords": "Class ModelTransform Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Used for transformations applied to a block or item model. Uses values from ModelTransformNoDefaults but will assign defaults if not included. Open in GitHub [DocumentAsJson] public class ModelTransform : ModelTransformNoDefaults Inheritance object ModelTransformNoDefaults ModelTransform Inherited Members ModelTransformNoDefaults.defaultTf ModelTransformNoDefaults.Translation ModelTransformNoDefaults.Rotation ModelTransformNoDefaults.Scale ModelTransformNoDefaults.Origin ModelTransformNoDefaults.Rotate ModelTransformNoDefaults.ScaleXYZ ModelTransformNoDefaults.AsMatrix ModelTransformNoDefaults.Clear() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples Use '.tfedit' in game to help customize these values, just make sure to copy them into your json file when you finish. \"tpHandTransform\": { \"translation\": { \"x\": -0.87, \"y\": -0.01, \"z\": -0.56 }, \"rotation\": { \"x\": -90, \"y\": 0, \"z\": 0 }, \"origin\": { \"x\": 0.5, \"y\": 0, \"z\": 0.5 }, \"scale\": 0.8 }, Constructors ModelTransform() public ModelTransform() ModelTransform(ModelTransformNoDefaults, ModelTransform) public ModelTransform(ModelTransformNoDefaults baseTf, ModelTransform defaults) Parameters baseTf ModelTransformNoDefaults defaults ModelTransform Properties NoTransform Gets a new model with all values set to default. public static ModelTransform NoTransform { get; } Property Value ModelTransform Methods BlockDefaultFp() Scale = 1, No Translation, Rotation by -45 deg in Y-Axis public static ModelTransform BlockDefaultFp() Returns ModelTransform BlockDefaultGround() Scale = 1, No Translation, Rotation by -45 deg in Y-Axis, 1.5x scale public static ModelTransform BlockDefaultGround() Returns ModelTransform BlockDefaultGui() Scale = 1, No Translation, Rotation by -45 deg in Y-Axis public static ModelTransform BlockDefaultGui() Returns ModelTransform BlockDefaultTp() Scale = 1, No Translation, Rotation by -45 deg in Y-Axis public static ModelTransform BlockDefaultTp() Returns ModelTransform Clone() Clones this specific transform. public ModelTransform Clone() Returns ModelTransform EnsureDefaultValues() Makes sure that Translation and Rotation is not null public ModelTransform EnsureDefaultValues() Returns ModelTransform ItemDefaultFp() Scale = 1, No Translation, Rotation by 180 deg in X-Axis public static ModelTransform ItemDefaultFp() Returns ModelTransform ItemDefaultGround() Creates a default transform for a model that is now on the ground public static ModelTransform ItemDefaultGround() Returns ModelTransform ItemDefaultGui() Scale = 1, No Translation, No Rotation public static ModelTransform ItemDefaultGui() Returns ModelTransform ItemDefaultTp() Scale = 1, No Translation, Rotation by 180 deg in X-Axis public static ModelTransform ItemDefaultTp() Returns ModelTransform WithRotation(Vec3f) public ModelTransform WithRotation(Vec3f rot) Parameters rot Vec3f Returns ModelTransform"
  },
  "api/Vintagestory.API.Common.ModelTransformKeyFrame.html": {
    "href": "api/Vintagestory.API.Common.ModelTransformKeyFrame.html",
    "title": "Class ModelTransformKeyFrame | VintageStory API",
    "keywords": "Class ModelTransformKeyFrame Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A keyframe for model transformation. Open in GitHub public class ModelTransformKeyFrame Inheritance object ModelTransformKeyFrame Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields FrameNumber The frame number for the keyframe public int FrameNumber Field Value int Transform The new transform set for the keyframe. public ModelTransform Transform Field Value ModelTransform"
  },
  "api/Vintagestory.API.Common.ModelTransformNoDefaults.html": {
    "href": "api/Vintagestory.API.Common.ModelTransformNoDefaults.html",
    "title": "Class ModelTransformNoDefaults | VintageStory API",
    "keywords": "Class ModelTransformNoDefaults Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Controls the transformations of 3D shapes. Note that defaults change depending on where this class is used. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class ModelTransformNoDefaults Inheritance object ModelTransformNoDefaults Derived ModelTransform Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples Use '.tfedit' in game to help customize these values, just make sure to copy them into your json file when you finish. \"tpHandTransform\": { \"translation\": { \"x\": -0.87, \"y\": -0.01, \"z\": -0.56 }, \"rotation\": { \"x\": -90, \"y\": 0, \"z\": 0 }, \"origin\": { \"x\": 0.5, \"y\": 0, \"z\": 0.5 }, \"scale\": 0.8 }, Fields Origin Rotation/Scaling Origin [JsonProperty] public FastVec3f Origin Field Value FastVec3f Rotate For Gui Transform: Whether to slowly spin in gui item preview For Ground Transform: Whether to apply a random rotation to the dropped item No effect on other transforms [JsonProperty] public bool Rotate Field Value bool Rotation Rotation in degrees [JsonProperty] public FastVec3f Rotation Field Value FastVec3f ScaleXYZ Scaling per axis [JsonProperty] public FastVec3f ScaleXYZ Field Value FastVec3f Translation Offsetting [JsonProperty] public FastVec3f Translation Field Value FastVec3f defaultTf public static readonly FastVec3f defaultTf Field Value FastVec3f Properties AsMatrix Converts the transform into a matrix. public float[] AsMatrix { get; } Property Value float[] Scale Sets the same scale of an object for all axes. [JsonProperty] public float Scale { set; } Property Value float Methods Clear() Clears the transformation values. public void Clear()"
  },
  "api/Vintagestory.API.Common.MountableUtil.html": {
    "href": "api/Vintagestory.API.Common.MountableUtil.html",
    "title": "Class MountableUtil | VintageStory API",
    "keywords": "Class MountableUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class MountableUtil Inheritance object MountableUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSeatOfMountedEntity(IMountable, Entity) public static IMountableSeat GetSeatOfMountedEntity(this IMountable mountable, Entity entity) Parameters mountable IMountable entity Entity Returns IMountableSeat IsBeingControlled(IMountable) public static bool IsBeingControlled(this IMountable mountable) Parameters mountable IMountable Returns bool IsMountedBy(IMountable, Entity) public static bool IsMountedBy(this IMountable mountable, Entity entity) Parameters mountable IMountable entity Entity Returns bool"
  },
  "api/Vintagestory.API.Common.MouseButtonConverter.html": {
    "href": "api/Vintagestory.API.Common.MouseButtonConverter.html",
    "title": "Class MouseButtonConverter | VintageStory API",
    "keywords": "Class MouseButtonConverter Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class MouseButtonConverter Inheritance object MouseButtonConverter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods ToEnumMouseButton(MouseButton) public static EnumMouseButton ToEnumMouseButton(MouseButton button) Parameters button MouseButton Returns EnumMouseButton"
  },
  "api/Vintagestory.API.Common.MultiblockStructure.html": {
    "href": "api/Vintagestory.API.Common.MultiblockStructure.html",
    "title": "Class MultiblockStructure | VintageStory API",
    "keywords": "Class MultiblockStructure Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll You can export one of these by making a selection with worldedit, looking at the center block (which should be your controller/master) then typing /we mgencode. Please note, air blocks are not exported Open in GitHub public class MultiblockStructure Inheritance object MultiblockStructure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlockNumbers public Dictionary<AssetLocation, int> BlockNumbers Field Value Dictionary<AssetLocation, int> HighlightSlotId public static int HighlightSlotId Field Value int Offsets public List<BlockOffsetAndNumber> Offsets Field Value List<BlockOffsetAndNumber> OffsetsOrientation public string OffsetsOrientation Field Value string Methods ClearHighlights(IWorldAccessor, IPlayer) public void ClearHighlights(IWorldAccessor world, IPlayer player) Parameters world IWorldAccessor player IPlayer GetOrCreateBlockNumber(Block) public int GetOrCreateBlockNumber(Block block) Parameters block Block Returns int HighlightIncompleteParts(IWorldAccessor, IPlayer, BlockPos) public void HighlightIncompleteParts(IWorldAccessor world, IPlayer player, BlockPos centerPos) Parameters world IWorldAccessor player IPlayer centerPos BlockPos InCompleteBlockCount(IWorldAccessor, BlockPos, PositionMismatchDelegate) Check if the multiblock structure is complete. Ignores air blocks public int InCompleteBlockCount(IWorldAccessor world, BlockPos centerPos, PositionMismatchDelegate onMismatch = null) Parameters world IWorldAccessor centerPos BlockPos onMismatch PositionMismatchDelegate Returns int InitForUse(float) public void InitForUse(float rotateYDeg) Parameters rotateYDeg float WalkMatchingBlocks(IWorldAccessor, BlockPos, Action<Block, BlockPos>) public void WalkMatchingBlocks(IWorldAccessor world, BlockPos centerPos, Action<Block, BlockPos> onBlock) Parameters world IWorldAccessor centerPos BlockPos onBlock Action<Block, BlockPos>"
  },
  "api/Vintagestory.API.Common.NewSlotDelegate.html": {
    "href": "api/Vintagestory.API.Common.NewSlotDelegate.html",
    "title": "Delegate NewSlotDelegate | VintageStory API",
    "keywords": "Delegate NewSlotDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate ItemSlot NewSlotDelegate(int slotId, InventoryGeneric self) Parameters slotId int self InventoryGeneric Returns ItemSlot Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.NoAnimationManager.html": {
    "href": "api/Vintagestory.API.Common.NoAnimationManager.html",
    "title": "Class NoAnimationManager | VintageStory API",
    "keywords": "Class NoAnimationManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A No-Animation Manager built off of IAnimationManager. Open in GitHub public class NoAnimationManager : IAnimationManager, IDisposable Inheritance object NoAnimationManager Implements IAnimationManager IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) AnimationCache.LoadAnimatorCached(IAnimationManager, ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) Constructors NoAnimationManager() public NoAnimationManager() Properties ActiveAnimationsByAnimCode Gets the AnimationMetaData for the target action. public Dictionary<string, AnimationMetaData> ActiveAnimationsByAnimCode { get; } Property Value Dictionary<string, AnimationMetaData> AdjustCollisionBoxToAnimation public bool AdjustCollisionBoxToAnimation { get; } Property Value bool AnimationsDirty Whether or not the animation is dirty. public bool AnimationsDirty { get; set; } Property Value bool Animator The animator for this animation manager public IAnimator Animator { get; set; } Property Value IAnimator HeadController The head controller for this manager. public EntityHeadController HeadController { get; set; } Property Value EntityHeadController Methods CopyOverAnimStates(RunningAnimation[], IAnimator) public void CopyOverAnimStates(RunningAnimation[] copyOverAnims, IAnimator animator) Parameters copyOverAnims RunningAnimation[] animator IAnimator Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() FromAttributes(ITreeAttribute, string) Additional attributes applied to the animation public void FromAttributes(ITreeAttribute tree, string version) Parameters tree ITreeAttribute version string GetAnimationState(string) public RunningAnimation GetAnimationState(string anim) Parameters anim string Returns RunningAnimation Init(ICoreAPI, Entity) Initialization call for the animation manager. public void Init(ICoreAPI api, Entity entity) Parameters api ICoreAPI The core API entity Entity The entity being animated. IsAnimationActive(params string[]) public bool IsAnimationActive(params string[] anims) Parameters anims string[] Returns bool LoadAnimator(ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) public IAnimator LoadAnimator(ICoreAPI api, Entity entity, Shape entityShape, RunningAnimation[] copyOverAnims, bool requirePosesOnServer, params string[] requireJointsForElements) Parameters api ICoreAPI entity Entity entityShape Shape copyOverAnims RunningAnimation[] requirePosesOnServer bool requireJointsForElements string[] Returns IAnimator OnClientFrame(float) public void OnClientFrame(float dt) Parameters dt float OnReceivedServerAnimations(int[], int, float[]) The event fired when the client recieves the server animations public void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] all of active animations activeAnimationsCount int the number of the animations activeAnimationSpeeds float[] The speed of those animations. OnServerTick(float) public void OnServerTick(float dt) Parameters dt float RegisterFrameCallback(AnimFrameCallback) public void RegisterFrameCallback(AnimFrameCallback trigger) Parameters trigger AnimFrameCallback ResetAnimation(string) If given animation is running, will set its progress to the first animation frame public void ResetAnimation(string beginholdAnim) Parameters beginholdAnim string ShouldPlaySound(AnimationSound) public void ShouldPlaySound(AnimationSound sound) Parameters sound AnimationSound StartAnimation(string) Starts an animation based on JSON code. public bool StartAnimation(string configCode) Parameters configCode string The json code. Returns bool StartAnimation(AnimationMetaData) Starts an animation based on the AnimationMetaData public bool StartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool StopAnimation(string) Stops the animation. public void StopAnimation(string code) Parameters code string The code to stop the animation on ToAttributes(ITreeAttribute, bool) Additional attributes applied from the animation public void ToAttributes(ITreeAttribute tree, bool forClient) Parameters tree ITreeAttribute forClient bool TriggerAnimationStopped(string) The event fired when the animation is stopped. public void TriggerAnimationStopped(string code) Parameters code string The code that the animation stopped with. TryStartAnimation(AnimationMetaData) Starts an animation based on the AnimationMetaData, if it exists; returns false if it does not exist (or if unable to start it, e.g. because it is already playing) public bool TryStartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool Events OnAnimationReceived public event StartAnimationDelegate OnAnimationReceived Event Type StartAnimationDelegate OnAnimationStopped public event Action<string> OnAnimationStopped Event Type Action<string> OnStartAnimation public event StartAnimationDelegate OnStartAnimation Event Type StartAnimationDelegate"
  },
  "api/Vintagestory.API.Common.NoAnimator.html": {
    "href": "api/Vintagestory.API.Common.NoAnimator.html",
    "title": "Class NoAnimator | VintageStory API",
    "keywords": "Class NoAnimator Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A NoAnimator built off of IAnimator Open in GitHub public class NoAnimator : IAnimator Inheritance object NoAnimator Implements IAnimator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ActiveAnimationCount The active animation count for this no animator. public int ActiveAnimationCount { get; } Property Value int Animations Holds data over all animations. This list always contains all animations of the creature. You have to check yourself which of them are active public RunningAnimation[] Animations { get; } Property Value RunningAnimation[] CalculateMatrices Whether or not to calculate the animation matrices, required for GetAttachmentPointPose() to deliver correct values. Default on on the client, server side only on when the creature is dead public bool CalculateMatrices { get; set; } Property Value bool Matrices The matrices for this No-Animator public float[] Matrices { get; } Property Value float[] MaxJointId public int MaxJointId { get; } Property Value int Methods DumpCurrentState() public string DumpCurrentState() Returns string GetAnimationState(string) public RunningAnimation GetAnimationState(string code) Parameters code string Returns RunningAnimation GetAttachmentPointPose(string) Gets the attachment point for this pose. public AttachmentPointAndPose GetAttachmentPointPose(string code) Parameters code string Returns AttachmentPointAndPose GetPosebyName(string, StringComparison) public ElementPose GetPosebyName(string name, StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase) Parameters name string stringComparison StringComparison Returns ElementPose OnFrame(Dictionary<string, AnimationMetaData>, float) The event fired when a specified frame has been hit. public void OnFrame(Dictionary<string, AnimationMetaData> activeAnimationsByAnimCode, float dt) Parameters activeAnimationsByAnimCode Dictionary<string, AnimationMetaData> dt float ReloadAttachmentPoints() public void ReloadAttachmentPoints()"
  },
  "api/Vintagestory.API.Common.OnCommandDelegate.html": {
    "href": "api/Vintagestory.API.Common.OnCommandDelegate.html",
    "title": "Delegate OnCommandDelegate | VintageStory API",
    "keywords": "Delegate OnCommandDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate TextCommandResult OnCommandDelegate(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs Returns TextCommandResult Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnEntityAction.html": {
    "href": "api/Vintagestory.API.Common.OnEntityAction.html",
    "title": "Delegate OnEntityAction | VintageStory API",
    "keywords": "Delegate OnEntityAction Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void OnEntityAction(EnumEntityAction action, bool on, ref EnumHandling handled) Parameters action EnumEntityAction on bool handled EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnGetClimateDelegate.html": {
    "href": "api/Vintagestory.API.Common.OnGetClimateDelegate.html",
    "title": "Delegate OnGetClimateDelegate | VintageStory API",
    "keywords": "Delegate OnGetClimateDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void OnGetClimateDelegate(ref ClimateCondition climate, BlockPos pos, EnumGetClimateMode mode = EnumGetClimateMode.WorldGenValues, double totalDays = 0) Parameters climate ClimateCondition pos BlockPos mode EnumGetClimateMode totalDays double Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnGetWindSpeedDelegate.html": {
    "href": "api/Vintagestory.API.Common.OnGetWindSpeedDelegate.html",
    "title": "Delegate OnGetWindSpeedDelegate | VintageStory API",
    "keywords": "Delegate OnGetWindSpeedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void OnGetWindSpeedDelegate(Vec3d pos, ref Vec3d windSpeed) Parameters pos Vec3d windSpeed Vec3d Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnInteractDelegate.html": {
    "href": "api/Vintagestory.API.Common.OnInteractDelegate.html",
    "title": "Delegate OnInteractDelegate | VintageStory API",
    "keywords": "Delegate OnInteractDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void OnInteractDelegate(Entity entity, IPlayer byPlayer, ItemSlot slot, Vec3d hitPosition, int mode, ref EnumHandling handling) Parameters entity Entity byPlayer IPlayer slot ItemSlot hitPosition Vec3d mode int handling EnumHandling Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnInventoryClosedDelegate.html": {
    "href": "api/Vintagestory.API.Common.OnInventoryClosedDelegate.html",
    "title": "Delegate OnInventoryClosedDelegate | VintageStory API",
    "keywords": "Delegate OnInventoryClosedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void OnInventoryClosedDelegate(IPlayer player) Parameters player IPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnInventoryOpenedDelegate.html": {
    "href": "api/Vintagestory.API.Common.OnInventoryOpenedDelegate.html",
    "title": "Delegate OnInventoryOpenedDelegate | VintageStory API",
    "keywords": "Delegate OnInventoryOpenedDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void OnInventoryOpenedDelegate(IPlayer player) Parameters player IPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnInventorySlot.html": {
    "href": "api/Vintagestory.API.Common.OnInventorySlot.html",
    "title": "Delegate OnInventorySlot | VintageStory API",
    "keywords": "Delegate OnInventorySlot Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Return false to stop walking the inventory public delegate bool OnInventorySlot(ItemSlot slot) Parameters slot ItemSlot Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.OnlinePlayerArgParser.html": {
    "href": "api/Vintagestory.API.Common.OnlinePlayerArgParser.html",
    "title": "Class OnlinePlayerArgParser | VintageStory API",
    "keywords": "Class OnlinePlayerArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class OnlinePlayerArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase OnlinePlayerArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors OnlinePlayerArgParser(string, ICoreAPI, bool) public OnlinePlayerArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Fields api protected ICoreAPI api Field Value ICoreAPI player protected IPlayer player Field Value IPlayer Methods GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.ParticleBase.html": {
    "href": "api/Vintagestory.API.Common.ParticleBase.html",
    "title": "Class ParticleBase | VintageStory API",
    "keywords": "Class ParticleBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Represents a particle that has been spawned Open in GitHub public abstract class ParticleBase Inheritance object ParticleBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Alive public bool Alive Field Value bool Bounciness public float Bounciness Field Value float ColorAlpha public byte ColorAlpha Field Value byte ColorBlue public byte ColorBlue Field Value byte ColorGreen public byte ColorGreen Field Value byte ColorRed public byte ColorRed Field Value byte LifeLength public float LifeLength Field Value float Next public ParticleBase Next Field Value ParticleBase Position public Vec3d Position Field Value Vec3d Prev public ParticleBase Prev Field Value ParticleBase SecondsAlive public float SecondsAlive Field Value float Velocity public Vec3f Velocity Field Value Vec3f VertexFlags public int VertexFlags Field Value int accum public float accum Field Value float flags protected EnumCollideFlags flags Field Value EnumCollideFlags lightrgbs public int lightrgbs Field Value int motion protected Vec3f motion Field Value Vec3f prevPosAdvance public float prevPosAdvance Field Value float prevPosDeltaX public float prevPosDeltaX Field Value float prevPosDeltaY public float prevPosDeltaY Field Value float prevPosDeltaZ public float prevPosDeltaZ Field Value float rnddrag protected float rnddrag Field Value float tdragnow protected float tdragnow Field Value float tickCount protected byte tickCount Field Value byte Methods TickFixedStep(float, ICoreClientAPI, ParticlePhysics) Advances the physics simulation of the particle if \"physicsSim.PhysicsTickTime\" seconds have passed by, otherwise it will only advance PrevPosition by the particles velocity. public virtual void TickFixedStep(float dt, ICoreClientAPI api, ParticlePhysics physicsSim) Parameters dt float Will never be above PhysicsTickTime api ICoreClientAPI physicsSim ParticlePhysics TickNow(float, float, ICoreClientAPI, ParticlePhysics) public abstract void TickNow(float dt, float physicsdt, ICoreClientAPI api, ParticlePhysics physicsSim) Parameters dt float physicsdt float api ICoreClientAPI physicsSim ParticlePhysics UpdateBuffers(MeshData, Vec3d, ref int, ref int, ref int) public abstract void UpdateBuffers(MeshData buffer, Vec3d cameraPos, ref int posPosition, ref int rgbaPosition, ref int flagPosition) Parameters buffer MeshData cameraPos Vec3d posPosition int rgbaPosition int flagPosition int updatePositionWithCollision(float, ICoreClientAPI, ParticlePhysics, float) protected void updatePositionWithCollision(float pdt, ICoreClientAPI api, ParticlePhysics physicsSim, float height) Parameters pdt float api ICoreClientAPI physicsSim ParticlePhysics height float"
  },
  "api/Vintagestory.API.Common.ParticlesProviderBase.html": {
    "href": "api/Vintagestory.API.Common.ParticlesProviderBase.html",
    "title": "Class ParticlesProviderBase | VintageStory API",
    "keywords": "Class ParticlesProviderBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A base class for all particle providers. Open in GitHub public abstract class ParticlesProviderBase : IParticlePropertiesProvider Inheritance object ParticlesProviderBase Implements IParticlePropertiesProvider Derived FloatingSedimentParticles WaterSplashParticles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often public bool Async { get; } Property Value bool BlueEvolve Gets the evolving blue value of the particle. public virtual EvolvingNatFloat BlueEvolve { get; } Property Value EvolvingNatFloat Bounciness public float Bounciness { get; set; } Property Value float DeathParticles Gets the death particle for this type of particle. public IParticlePropertiesProvider[] DeathParticles { get; } Property Value IParticlePropertiesProvider[] DieInAir Whether or not the particle dies in air. public virtual bool DieInAir { get; } Property Value bool DieInLiquid Determines whether or not the particle dies in liquid public virtual bool DieInLiquid { get; } Property Value bool DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location public bool DieOnRainHeightmap { get; set; } Property Value bool GravityEffect Gets the gravity effect on the particle. public virtual float GravityEffect { get; } Property Value float GreenEvolve Gets the evolving green value of the particle. public virtual EvolvingNatFloat GreenEvolve { get; } Property Value EvolvingNatFloat LifeLength gets the life length of the particle. public virtual float LifeLength { get; } Property Value float LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark public int LightEmission { get; set; } Property Value int OpacityEvolve Gets the evolving opacity value of the particle. public virtual EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat An evolving value based on opacity. ParentVelocity public Vec3f ParentVelocity { get; set; } Property Value Vec3f ParentVelocityWeight public float ParentVelocityWeight { get; set; } Property Value float ParticleModel Gets the model type of the particle. public virtual EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Gets the position of particles. public virtual Vec3d Pos { get; } Property Value Vec3d Quantity Gets the quantity of particles. public virtual float Quantity { get; } Property Value float RandomVelocityChange public bool RandomVelocityChange { get; set; } Property Value bool RedEvolve Gets the evolving red value of the particle. public virtual EvolvingNatFloat RedEvolve { get; } Property Value EvolvingNatFloat SecondaryParticles Gets the secondary particle type for this particle. public virtual IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] SecondarySpawnInterval Gets the secondary particle spawn interval. public virtual float SecondarySpawnInterval { get; } Property Value float SelfPropelled Whether or not the particle is self-propelled. public virtual bool SelfPropelled { get; } Property Value bool Size gets the size of the particle. public virtual float Size { get; } Property Value float SizeEvolve gets the dynamic size of the particle. public virtual EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public virtual bool SwimOnLiquid { get; } Property Value bool TerrainCollision Whether or not the particle collides with the terrain or not. public bool TerrainCollision { get; } Property Value bool VelocityEvolve Get the dynamic speeds of the particle. public virtual EvolvingNatFloat[] VelocityEvolve { get; } Property Value EvolvingNatFloat[] VertexFlags gets the glow level of the particle. public virtual int VertexFlags { get; } Property Value int WindAffected public bool WindAffected { get; set; } Property Value bool Methods BeginParticle() Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles public virtual void BeginParticle() FromBytes(BinaryReader, IWorldAccessor) How the particle is read from the save. public virtual void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) Gets the color of the particle. public virtual int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) Gets the velocity of the particles. public virtual Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation public virtual void Init(ICoreAPI api) Parameters api ICoreAPI PrepareForSecondarySpawn(ParticleBase) Updates instance related state for secondary particles based on the given parent particle instance public virtual void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase The parent IParticleInstance from which this secondary particle is being spawned ToBytes(BinaryWriter) How the particle is written to the save. (if it is) public virtual void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.PermaFertilityBoost.html": {
    "href": "api/Vintagestory.API.Common.PermaFertilityBoost.html",
    "title": "Class PermaFertilityBoost | VintageStory API",
    "keywords": "Class PermaFertilityBoost Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PermaFertilityBoost Inheritance object PermaFertilityBoost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code public string Code Field Value string K public int K Field Value int N public int N Field Value int P public int P Field Value int"
  },
  "api/Vintagestory.API.Common.PlaceBlockDelegate.html": {
    "href": "api/Vintagestory.API.Common.PlaceBlockDelegate.html",
    "title": "Delegate PlaceBlockDelegate | VintageStory API",
    "keywords": "Delegate PlaceBlockDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate int PlaceBlockDelegate(IBlockAccessor blockAccessor, BlockPos pos, Block newBlock, bool replaceMeta) Parameters blockAccessor IBlockAccessor pos BlockPos newBlock Block replaceMeta bool Returns int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PlayStyle.html": {
    "href": "api/Vintagestory.API.Common.PlayStyle.html",
    "title": "Class PlayStyle | VintageStory API",
    "keywords": "Class PlayStyle Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayStyle Inheritance object PlayStyle Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code [JsonProperty] public string Code Field Value string LangCode [JsonProperty] public string LangCode Field Value string ListOrder [JsonProperty] public double ListOrder Field Value double Mods [JsonProperty] public string[] Mods Field Value string[] PlayListCode [JsonProperty] public string PlayListCode Field Value string WorldConfig [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject WorldConfig Field Value JsonObject WorldType [JsonProperty] public string WorldType Field Value string"
  },
  "api/Vintagestory.API.Common.PlayerAnimationManager.html": {
    "href": "api/Vintagestory.API.Common.PlayerAnimationManager.html",
    "title": "Class PlayerAnimationManager | VintageStory API",
    "keywords": "Class PlayerAnimationManager Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayerAnimationManager : AnimationManager, IAnimationManager, IDisposable Inheritance object AnimationManager PlayerAnimationManager Implements IAnimationManager IDisposable Inherited Members AnimationManager.api AnimationManager.capi AnimationManager.AnimationsDirty AnimationManager.Animator AnimationManager.HeadController AnimationManager.ActiveAnimationsByAnimCode AnimationManager.AdjustCollisionBoxToAnimation AnimationManager.Triggers AnimationManager.OnStartAnimation AnimationManager.OnAnimationReceived AnimationManager.OnAnimationStopped AnimationManager.entity AnimationManager.LoadAnimator(ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) AnimationManager.CopyOverAnimStates(RunningAnimation[], IAnimator) AnimationManager.TryStartAnimation(AnimationMetaData) AnimationManager.SerializeActiveAnimations(bool, Action<string, FastMemoryStream>) AnimationManager.OnServerTick(float) AnimationManager.Dispose() AnimationManager.TriggerAnimationStopped(string) AnimationManager.ShouldPlaySound(AnimationSound) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) AnimationCache.LoadAnimatorCached(IAnimationManager, ICoreAPI, Entity, Shape, RunningAnimation[], bool, params string[]) Fields UseFpAnmations public bool UseFpAnmations Field Value bool lastActiveHeldHitAnimation protected string lastActiveHeldHitAnimation Field Value string lastActiveHeldReadyAnimation protected string lastActiveHeldReadyAnimation Field Value string lastActiveHeldUseAnimation protected string lastActiveHeldUseAnimation Field Value string lastActiveLeftHeldIdleAnimation protected string lastActiveLeftHeldIdleAnimation Field Value string lastActiveRightHeldIdleAnimation protected string lastActiveRightHeldIdleAnimation Field Value string lastRunningHeldHitAnimation public string lastRunningHeldHitAnimation Field Value string lastRunningHeldUseAnimation public string lastRunningHeldUseAnimation Field Value string Methods FromAttributes(ITreeAttribute, string) Loads the entity from a stored byte array from the SaveGame public override void FromAttributes(ITreeAttribute tree, string version) Parameters tree ITreeAttribute version string GetAnimationState(string) public override RunningAnimation GetAnimationState(string anim) Parameters anim string Returns RunningAnimation HeldHitAnimChanged(string) public bool HeldHitAnimChanged(string nowHeldRightHitAnim) Parameters nowHeldRightHitAnim string Returns bool HeldRightReadyAnimChanged(string) public bool HeldRightReadyAnimChanged(string nowHeldRightReadyAnim) Parameters nowHeldRightReadyAnim string Returns bool HeldUseAnimChanged(string) public bool HeldUseAnimChanged(string nowHeldRightUseAnim) Parameters nowHeldRightUseAnim string Returns bool Init(ICoreAPI, Entity) Initializes the Animation Manager. public override void Init(ICoreAPI api, Entity entity) Parameters api ICoreAPI The Core API. entity Entity The entity this manager is attached to. IsAnimationActive(params string[]) public override bool IsAnimationActive(params string[] anims) Parameters anims string[] Returns bool IsAnimationActiveOrRunning(string, float) public bool IsAnimationActiveOrRunning(string anim, float untilProgress = 0.95) Parameters anim string untilProgress float Returns bool IsAnimationMostlyRunning(string, float) protected bool IsAnimationMostlyRunning(string anim, float untilProgress = 0.95) Parameters anim string untilProgress float Returns bool IsAuthoritative(string) public bool IsAuthoritative(string anim) Parameters anim string Returns bool IsHeldHitActive(float) public bool IsHeldHitActive(float untilProgress = 0.95) Parameters untilProgress float Returns bool IsHeldHitAuthoritative() public bool IsHeldHitAuthoritative() Returns bool IsHeldUseActive() public bool IsHeldUseActive() Returns bool IsLeftHeldActive() public bool IsLeftHeldActive() Returns bool IsRightHeldActive() public bool IsRightHeldActive() Returns bool IsRightHeldReadyActive() public bool IsRightHeldReadyActive() Returns bool LeftHeldIdleChanged(string) public bool LeftHeldIdleChanged(string nowHeldLeftIdleAnim) Parameters nowHeldLeftIdleAnim string Returns bool OnActiveSlotChanged(ItemSlot) public void OnActiveSlotChanged(ItemSlot slot) Parameters slot ItemSlot OnClientFrame(float) The event fired each time the client ticks. public override void OnClientFrame(float dt) Parameters dt float OnIfpModeChanged(bool, bool) public void OnIfpModeChanged(bool prev, bool now) Parameters prev bool now bool OnReceivedServerAnimations(int[], int, float[]) The event fired when the manager recieves the server animations. public override void OnReceivedServerAnimations(int[] activeAnimations, int activeAnimationsCount, float[] activeAnimationSpeeds) Parameters activeAnimations int[] activeAnimationsCount int activeAnimationSpeeds float[] RegisterFrameCallback(AnimFrameCallback) public override void RegisterFrameCallback(AnimFrameCallback trigger) Parameters trigger AnimFrameCallback ResetAnimation(string) If given animation is running, will set its progress to the first animation frame public override void ResetAnimation(string animCode) Parameters animCode string RightHeldIdleChanged(string) public bool RightHeldIdleChanged(string nowHeldRightIdleAnim) Parameters nowHeldRightIdleAnim string Returns bool StartAnimation(string) Start a new animation defined in the entity config file. If it's not defined, it won't play. Use StartAnimation(AnimationMetaData animdata) to circumvent the entity config anim data. public override bool StartAnimation(string configCode) Parameters configCode string Anim config code, not the animation code! Returns bool StartAnimation(AnimationMetaData) Client: Starts given animation Server: Sends all active anims to all connected clients then purges the ActiveAnimationsByAnimCode list public override bool StartAnimation(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool StartAnimationBase(string) public bool StartAnimationBase(string configCode) Parameters configCode string Returns bool StartAnimationBase(AnimationMetaData) public bool StartAnimationBase(AnimationMetaData animdata) Parameters animdata AnimationMetaData Returns bool StartHeldHitAnim(string) public void StartHeldHitAnim(string animCode) Parameters animCode string StartHeldReadyAnim(string, bool) public void StartHeldReadyAnim(string heldReadyAnim, bool force = false) Parameters heldReadyAnim string force bool StartHeldUseAnim(string) public void StartHeldUseAnim(string animCode) Parameters animCode string StartLeftHeldIdleAnim(string) public void StartLeftHeldIdleAnim(string animCode) Parameters animCode string StartRightHeldIdleAnim(string) public void StartRightHeldIdleAnim(string animCode) Parameters animCode string StopAnimation(string) Stops given animation public override void StopAnimation(string code) Parameters code string StopHeldAttackAnim() public void StopHeldAttackAnim() StopHeldReadyAnim() public void StopHeldReadyAnim() StopHeldUseAnim() public void StopHeldUseAnim() StopLeftHeldIdleAnim() public void StopLeftHeldIdleAnim() StopRightHeldIdleAnim() public void StopRightHeldIdleAnim() StopSelfAnimation(string) public void StopSelfAnimation(string code) Parameters code string ToAttributeBytes(BinaryWriter, bool) For performance, serializes the animations to be stored directly to the provided stream public override void ToAttributeBytes(BinaryWriter writer, bool forClient) Parameters writer BinaryWriter forClient bool ToAttributes(ITreeAttribute, bool) Serializes the animations to be stored in the SaveGame public override void ToAttributes(ITreeAttribute tree, bool forClient) Parameters tree ITreeAttribute forClient bool onReceivedServerAnimation(AnimationMetaData) protected override void onReceivedServerAnimation(AnimationMetaData animmetadata) Parameters animmetadata AnimationMetaData"
  },
  "api/Vintagestory.API.Common.PlayerChatDelegate.html": {
    "href": "api/Vintagestory.API.Common.PlayerChatDelegate.html",
    "title": "Delegate PlayerChatDelegate | VintageStory API",
    "keywords": "Delegate PlayerChatDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll When the player wrote a chat message. Set consumed.value to true to prevent further processing of this chat message public delegate void PlayerChatDelegate(IServerPlayer byPlayer, int channelId, ref string message, ref string data, BoolRef consumed) Parameters byPlayer IServerPlayer The player that submitted the chat message channelId int The chat group id from where the message was sent from message string The chat message data string consumed BoolRef If set, the even is considered consumed, i.e. should no longer be handled further by the game engine Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PlayerCommonDelegate.html": {
    "href": "api/Vintagestory.API.Common.PlayerCommonDelegate.html",
    "title": "Delegate PlayerCommonDelegate | VintageStory API",
    "keywords": "Delegate PlayerCommonDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void PlayerCommonDelegate(IPlayer byPlayer) Parameters byPlayer IPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PlayerDeathDelegate.html": {
    "href": "api/Vintagestory.API.Common.PlayerDeathDelegate.html",
    "title": "Delegate PlayerDeathDelegate | VintageStory API",
    "keywords": "Delegate PlayerDeathDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll When the player died, this delegate will fire. public delegate void PlayerDeathDelegate(IServerPlayer byPlayer, DamageSource damageSource) Parameters byPlayer IServerPlayer The player that died. damageSource DamageSource The source of the damage. Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PlayerDelegate.html": {
    "href": "api/Vintagestory.API.Common.PlayerDelegate.html",
    "title": "Delegate PlayerDelegate | VintageStory API",
    "keywords": "Delegate PlayerDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void PlayerDelegate(IServerPlayer byPlayer) Parameters byPlayer IServerPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PlayerGroupMembership.html": {
    "href": "api/Vintagestory.API.Common.PlayerGroupMembership.html",
    "title": "Class PlayerGroupMembership | VintageStory API",
    "keywords": "Class PlayerGroupMembership Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayerGroupMembership Inheritance object PlayerGroupMembership Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields GroupName The last known group name public string GroupName Field Value string GroupUid The group id public int GroupUid Field Value int Level The member ship level in this group public EnumPlayerGroupMemberShip Level Field Value EnumPlayerGroupMemberShip"
  },
  "api/Vintagestory.API.Common.PlayerHeadController.html": {
    "href": "api/Vintagestory.API.Common.PlayerHeadController.html",
    "title": "Class PlayerHeadController | VintageStory API",
    "keywords": "Class PlayerHeadController Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayerHeadController : EntityHeadController Inheritance object EntityHeadController PlayerHeadController Inherited Members EntityHeadController.HeadPose EntityHeadController.NeckPose EntityHeadController.UpperTorsoPose EntityHeadController.LowerTorsoPose EntityHeadController.UpperFootLPose EntityHeadController.UpperFootRPose EntityHeadController.entity EntityHeadController.animManager EntityHeadController.yawOffset EntityHeadController.pitchOffset object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PlayerHeadController(IAnimationManager, EntityPlayer, Shape) public PlayerHeadController(IAnimationManager animator, EntityPlayer entity, Shape entityShape) Parameters animator IAnimationManager entity EntityPlayer entityShape Shape Fields player protected IPlayer player Field Value IPlayer rotateTpYawNow protected bool rotateTpYawNow Field Value bool turnOpposite protected bool turnOpposite Field Value bool Methods OnFrame(float) The event fired when the game ticks. public override void OnFrame(float dt) Parameters dt float"
  },
  "api/Vintagestory.API.Common.PlayerRoleArgParser.html": {
    "href": "api/Vintagestory.API.Common.PlayerRoleArgParser.html",
    "title": "Class PlayerRoleArgParser | VintageStory API",
    "keywords": "Class PlayerRoleArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayerRoleArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase PlayerRoleArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PlayerRoleArgParser(string, ICoreAPI, bool) public PlayerRoleArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.PlayerSpawnPos.html": {
    "href": "api/Vintagestory.API.Common.PlayerSpawnPos.html",
    "title": "Class PlayerSpawnPos | VintageStory API",
    "keywords": "Class PlayerSpawnPos Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [ProtoContract] public class PlayerSpawnPos Inheritance object PlayerSpawnPos Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PlayerSpawnPos() public PlayerSpawnPos() PlayerSpawnPos(int, int?, int) public PlayerSpawnPos(int x, int? y, int z) Parameters x int y int? z int Fields RemainingUses [ProtoMember(7)] public int RemainingUses Field Value int pitch [ProtoMember(5)] public float? pitch Field Value float? roll [ProtoMember(6)] public float? roll Field Value float? x [ProtoMember(1)] public int x Field Value int y [ProtoMember(2)] public int? y Field Value int? yaw [ProtoMember(4)] public float? yaw Field Value float? z [ProtoMember(3)] public int z Field Value int Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Common.PlayerUidName.html": {
    "href": "api/Vintagestory.API.Common.PlayerUidName.html",
    "title": "Class PlayerUidName | VintageStory API",
    "keywords": "Class PlayerUidName Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayerUidName Inheritance object PlayerUidName Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PlayerUidName() public PlayerUidName() PlayerUidName(string, string) public PlayerUidName(string uid, string name) Parameters uid string name string Fields Name public string Name Field Value string Uid public string Uid Field Value string"
  },
  "api/Vintagestory.API.Common.PlayersArgParser.html": {
    "href": "api/Vintagestory.API.Common.PlayersArgParser.html",
    "title": "Class PlayersArgParser | VintageStory API",
    "keywords": "Class PlayersArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PlayersArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase PlayersArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PlayersArgParser(string, ICoreAPI, bool) public PlayersArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Fields api protected ICoreServerAPI api Field Value ICoreServerAPI Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.PositionArgumentParserBase.html": {
    "href": "api/Vintagestory.API.Common.PositionArgumentParserBase.html",
    "title": "Class PositionArgumentParserBase | VintageStory API",
    "keywords": "Class PositionArgumentParserBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public abstract class PositionArgumentParserBase : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase PositionArgumentParserBase Implements ICommandArgumentParser Derived WorldPosition2DArgParser WorldPositionArgParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetValue() ArgumentParserBase.SetValue(object) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) ArgumentParserBase.parseSubArgs(string) ArgumentParserBase.PreProcess(TextCommandCallingArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PositionArgumentParserBase(string, bool) protected PositionArgumentParserBase(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool Methods tryGetPositionBySelector(char, TextCommandCallingArgs, ref Vec3d, ICoreAPI) protected EnumParseResult tryGetPositionBySelector(char v, TextCommandCallingArgs args, ref Vec3d pos, ICoreAPI api) Parameters v char args TextCommandCallingArgs pos Vec3d api ICoreAPI Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.PositionMismatchDelegate.html": {
    "href": "api/Vintagestory.API.Common.PositionMismatchDelegate.html",
    "title": "Delegate PositionMismatchDelegate | VintageStory API",
    "keywords": "Delegate PositionMismatchDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void PositionMismatchDelegate(Block haveBlock, AssetLocation wantBlockCode) Parameters haveBlock Block wantBlockCode AssetLocation Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PositionProviderDelegate.html": {
    "href": "api/Vintagestory.API.Common.PositionProviderDelegate.html",
    "title": "Delegate PositionProviderDelegate | VintageStory API",
    "keywords": "Delegate PositionProviderDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate Vec3d PositionProviderDelegate() Returns Vec3d Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.PrivilegeArgParser.html": {
    "href": "api/Vintagestory.API.Common.PrivilegeArgParser.html",
    "title": "Class PrivilegeArgParser | VintageStory API",
    "keywords": "Class PrivilegeArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class PrivilegeArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase PrivilegeArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PrivilegeArgParser(string, ICoreAPI, bool) public PrivilegeArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.ProfileEntry.html": {
    "href": "api/Vintagestory.API.Common.ProfileEntry.html",
    "title": "Class ProfileEntry | VintageStory API",
    "keywords": "Class ProfileEntry Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ProfileEntry Inheritance object ProfileEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ProfileEntry() public ProfileEntry() ProfileEntry(int, int) public ProfileEntry(int elaTicks, int callCount) Parameters elaTicks int callCount int Fields CallCount public int CallCount Field Value int ElapsedTicks public int ElapsedTicks Field Value int"
  },
  "api/Vintagestory.API.Common.ProfileEntryRange.html": {
    "href": "api/Vintagestory.API.Common.ProfileEntryRange.html",
    "title": "Class ProfileEntryRange | VintageStory API",
    "keywords": "Class ProfileEntryRange Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ProfileEntryRange Inheritance object ProfileEntryRange Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CallCount public int CallCount Field Value int ChildRanges public Dictionary<string, ProfileEntryRange> ChildRanges Field Value Dictionary<string, ProfileEntryRange> Code public string Code Field Value string ElapsedTicks public long ElapsedTicks Field Value long LastMark public long LastMark Field Value long Marks public Dictionary<string, ProfileEntry> Marks Field Value Dictionary<string, ProfileEntry> ParentRange public ProfileEntryRange ParentRange Field Value ProfileEntryRange Start public long Start Field Value long"
  },
  "api/Vintagestory.API.Common.RecipeBase-1.html": {
    "href": "api/Vintagestory.API.Common.RecipeBase-1.html",
    "title": "Class RecipeBase<T> | VintageStory API",
    "keywords": "Class RecipeBase<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Creates a new base recipe type. Almost all recipe types extend from this. [DocumentAsJson] public abstract class RecipeBase<T> : IRecipeBase<T> Type Parameters T The resulting recipe type. Inheritance object RecipeBase<T> Implements IRecipeBase<T> Derived LayeredVoxelRecipe<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Ingredients An array of ingredients for this recipe. If only using a single ingredient, see Ingredient. Required if not using Ingredient. [DocumentAsJson] public CraftingRecipeIngredient[] Ingredients Field Value CraftingRecipeIngredient[] Output The output when the recipe is successful. [DocumentAsJson] public JsonItemStack Output Field Value JsonItemStack RecipeId The ID of the recipe. Automatically generated when the recipe is loaded. public int RecipeId Field Value int Properties Enabled Should this recipe be loaded by the game? [DocumentAsJson] public bool Enabled { get; set; } Property Value bool Ingredient A single ingredient for this recipe. If you need to use more than one ingredient, see Ingredients. Required if not using Ingredients. [DocumentAsJson] public CraftingRecipeIngredient Ingredient { get; set; } Property Value CraftingRecipeIngredient Name Adds a name to this recipe. Used for logging, and determining helve hammer workability for smithing recipes. [DocumentAsJson] public AssetLocation Name { get; set; } Property Value AssetLocation Methods Clone() public abstract T Clone() Returns T GetNameToCodeMapping(IWorldAccessor) public abstract Dictionary<string, string[]> GetNameToCodeMapping(IWorldAccessor world) Parameters world IWorldAccessor Returns Dictionary<string, string[]> Resolve(IWorldAccessor, string) public abstract bool Resolve(IWorldAccessor world, string sourceForErrorLogging) Parameters world IWorldAccessor sourceForErrorLogging string Returns bool"
  },
  "api/Vintagestory.API.Common.RecipeRegistryBase.html": {
    "href": "api/Vintagestory.API.Common.RecipeRegistryBase.html",
    "title": "Class RecipeRegistryBase | VintageStory API",
    "keywords": "Class RecipeRegistryBase Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public abstract class RecipeRegistryBase Inheritance object RecipeRegistryBase Derived RecipeRegistryGeneric<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods FromBytes(IWorldAccessor, int, byte[]) public abstract void FromBytes(IWorldAccessor resolver, int quantity, byte[] data) Parameters resolver IWorldAccessor quantity int data byte[] ToBytes(IWorldAccessor, out byte[], out int) public abstract void ToBytes(IWorldAccessor resolver, out byte[] data, out int quantity) Parameters resolver IWorldAccessor data byte[] quantity int"
  },
  "api/Vintagestory.API.Common.RecipeRegistryGeneric-1.html": {
    "href": "api/Vintagestory.API.Common.RecipeRegistryGeneric-1.html",
    "title": "Class RecipeRegistryGeneric<T> | VintageStory API",
    "keywords": "Class RecipeRegistryGeneric<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public class RecipeRegistryGeneric<T> : RecipeRegistryBase where T : IByteSerializable, new() Type Parameters T Inheritance object RecipeRegistryBase RecipeRegistryGeneric<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors RecipeRegistryGeneric() public RecipeRegistryGeneric() RecipeRegistryGeneric(List<T>) public RecipeRegistryGeneric(List<T> recipes) Parameters recipes List<T> Fields Recipes public List<T> Recipes Field Value List<T> Methods FreeRAMServer() public virtual void FreeRAMServer() FromBytes(IWorldAccessor, int, byte[]) public override void FromBytes(IWorldAccessor resolver, int quantity, byte[] data) Parameters resolver IWorldAccessor quantity int data byte[] ToBytes(IWorldAccessor, out byte[], out int) public override void ToBytes(IWorldAccessor resolver, out byte[] data, out int quantity) Parameters resolver IWorldAccessor data byte[] quantity int ToBytes(IWorldAccessor, out byte[], out int, FastMemoryStream) public void ToBytes(IWorldAccessor resolver, out byte[] data, out int quantity, FastMemoryStream ms) Parameters resolver IWorldAccessor data byte[] quantity int ms FastMemoryStream"
  },
  "api/Vintagestory.API.Common.RegistryObject.html": {
    "href": "api/Vintagestory.API.Common.RegistryObject.html",
    "title": "Class RegistryObject | VintageStory API",
    "keywords": "Class RegistryObject Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A registerable object with variants, i.e. an item, a block or an entity Open in GitHub public abstract class RegistryObject Inheritance object RegistryObject Derived CollectibleObject Entity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors RegistryObject() public RegistryObject() Fields Class The class handeling the object public string Class Field Value string Code A unique domain + code of the object. Must be globally unique for all items / all blocks / all entities. public AssetLocation Code Field Value AssetLocation Variant Variant values as resolved from blocktype/itemtype. Will not throw an null pointer exception when the key does not exist, but return null instead. NOT set for entities - use entity.Properties.Variant instead public RelaxedReadOnlyDictionary<string, string> Variant Field Value RelaxedReadOnlyDictionary<string, string> VariantStrict Variant values as resolved from blocktype/itemtype. NOT set for entities - use entity.Properties.VariantStrict instead. public OrderedDictionary<string, string> VariantStrict Field Value OrderedDictionary<string, string> Methods CodeEndWithoutParts(int) Removes componentsToRemove parts from the blocks code beginning by splitting it up at every occurence of a dash ('-'). Left to Right public string CodeEndWithoutParts(int componentsToRemove) Parameters componentsToRemove int Returns string CodeWithPart(string, int) Replaces one part from the blocks code and replaces it with components by splitting it up at every occurence of a dash ('-') public AssetLocation CodeWithPart(string part, int atPosition = 0) Parameters part string atPosition int Returns AssetLocation CodeWithParts(string) More efficient version of CodeWithParts if there is only a single parameter public AssetLocation CodeWithParts(string component) Parameters component string Returns AssetLocation CodeWithParts(params string[]) Replaces the last parts from the blocks code and replaces it with components by splitting it up at every occurence of a dash ('-') public AssetLocation CodeWithParts(params string[] components) Parameters components string[] Returns AssetLocation CodeWithPath(string) Returns a new assetlocation with an equal domain and the given path public AssetLocation CodeWithPath(string path) Parameters path string Returns AssetLocation CodeWithVariant(string, string) public AssetLocation CodeWithVariant(string type, string value) Parameters type string value string Returns AssetLocation CodeWithVariants(Dictionary<string, string>) public AssetLocation CodeWithVariants(Dictionary<string, string> valuesByType) Parameters valuesByType Dictionary<string, string> Returns AssetLocation CodeWithVariants(string[], string[]) public AssetLocation CodeWithVariants(string[] types, string[] values) Parameters types string[] values string[] Returns AssetLocation CodeWithoutParts(int) Removes componentsToRemove parts from the blocks code end by splitting it up at every occurence of a dash ('-'). Right to left. public string CodeWithoutParts(int componentsToRemove) Parameters componentsToRemove int Returns string FillPlaceHolder(string, string, string) Used by the block loader to replace wildcards with their final values public static string FillPlaceHolder(string input, string search, string replace) Parameters input string search string replace string Returns string FillPlaceHolder(string, OrderedDictionary<string, string>) Used by the block loader to replace wildcards with their final values public static string FillPlaceHolder(string input, OrderedDictionary<string, string> searchReplace) Parameters input string searchReplace OrderedDictionary<string, string> Returns string FillPlaceHolder(AssetLocation, OrderedDictionary<string, string>) Used by the block loader to replace wildcards with their final values public static AssetLocation FillPlaceHolder(AssetLocation input, OrderedDictionary<string, string> searchReplace) Parameters input AssetLocation searchReplace OrderedDictionary<string, string> Returns AssetLocation FirstCodePart(int) Returns the n-th code part. If the code contains no dash ('-') the whole code is returned. Returns null if posFromLeft is too high. public string FirstCodePart(int posFromLeft = 0) Parameters posFromLeft int Returns string LastCodePart(int) Returns the n-th code part in inverse order. If the code contains no dash ('-') the whole code is returned. Returns null if posFromRight is too high. public string LastCodePart(int posFromRight = 0) Parameters posFromRight int Returns string WildCardMatch(string) Returns true if given wildcard matches the blocks/items code. E.g. water-* will match all water blocks public bool WildCardMatch(string wildCard) Parameters wildCard string Returns bool WildCardMatch(string[]) Returns true if any given wildcard matches the blocks/items code. E.g. water-* will match all water blocks public bool WildCardMatch(string[] wildcards) Parameters wildcards string[] Returns bool WildCardMatch(AssetLocation) Returns true if given wildcard matches the blocks/items code. E.g. water-* will match all water blocks public bool WildCardMatch(AssetLocation wildCard) Parameters wildCard AssetLocation Returns bool WildCardMatch(AssetLocation[]) Returns true if any given wildcard matches the blocks/items code. E.g. water-* will match all water blocks public bool WildCardMatch(AssetLocation[] wildcards) Parameters wildcards AssetLocation[] Returns bool"
  },
  "api/Vintagestory.API.Common.ResumeServerDelegate.html": {
    "href": "api/Vintagestory.API.Common.ResumeServerDelegate.html",
    "title": "Delegate ResumeServerDelegate | VintageStory API",
    "keywords": "Delegate ResumeServerDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void ResumeServerDelegate() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.RunningAnimation.html": {
    "href": "api/Vintagestory.API.Common.RunningAnimation.html",
    "title": "Class RunningAnimation | VintageStory API",
    "keywords": "Class RunningAnimation Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class RunningAnimation Inheritance object RunningAnimation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Active The animation is required to be active: if not started it should now start; if it ever ceases to be Active it should do whatever stop behavior is required (e.g. ease-out) public bool Active Field Value bool Animation public Animation Animation Field Value Animation BlendedWeight public float BlendedWeight Field Value float CurrentFrame public float CurrentFrame Field Value float EasingFactor public float EasingFactor Field Value float ElementWeights public ShapeElementWeights[] ElementWeights Field Value ShapeElementWeights[] Iterations public int Iterations Field Value int Running The animation is currently running in any way, including play-till-end after it is no longer active public bool Running Field Value bool ShouldPlayTillEnd public bool ShouldPlayTillEnd Field Value bool ShouldRewind public bool ShouldRewind Field Value bool SoundPlayedAtIteration public int SoundPlayedAtIteration Field Value int meta public AnimationMetaData meta Field Value AnimationMetaData Properties AnimProgress Between 0 and 1 public float AnimProgress { get; } Property Value float Methods EaseOut(float) public void EaseOut(float dt) Parameters dt float LoadWeights(ShapeElement[]) public void LoadWeights(ShapeElement[] rootElements) Parameters rootElements ShapeElement[] Progress(float, float) public void Progress(float dt, float walkspeed) Parameters dt float walkspeed float Stop() public void Stop()"
  },
  "api/Vintagestory.API.Common.SQLiteDBConnection.html": {
    "href": "api/Vintagestory.API.Common.SQLiteDBConnection.html",
    "title": "Class SQLiteDBConnection | VintageStory API",
    "keywords": "Class SQLiteDBConnection Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class SQLiteDBConnection : IDisposable Inheritance object SQLiteDBConnection Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SQLiteDBConnection(ILogger) public SQLiteDBConnection(ILogger logger) Parameters logger ILogger Fields databaseFileName protected string databaseFileName Field Value string logger protected ILogger logger Field Value ILogger sqliteConn protected SqliteConnection sqliteConn Field Value SqliteConnection transactionLock public object transactionLock Field Value object Properties DBTypeCode public virtual string DBTypeCode { get; } Property Value string IsReadOnly public bool IsReadOnly { get; protected set; } Property Value bool Methods Close() public virtual void Close() CreateParameter(string, DbType, object, DbCommand) protected DbParameter CreateParameter(string parameterName, DbType dbType, object value, DbCommand command) Parameters parameterName string dbType DbType value object command DbCommand Returns DbParameter CreateTablesIfNotExists(SqliteConnection) protected virtual void CreateTablesIfNotExists(SqliteConnection sqliteConn) Parameters sqliteConn SqliteConnection Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public virtual void Dispose() DoIntegrityCheck(SqliteConnection, bool) public bool DoIntegrityCheck(SqliteConnection sqliteConn, bool logResults = true) Parameters sqliteConn SqliteConnection logResults bool Returns bool HaveWriteAccessFile(FileInfo) public static bool HaveWriteAccessFile(FileInfo file) Parameters file FileInfo Returns bool HaveWriteAccessFolder(string) public static bool HaveWriteAccessFolder(string folderPath) Parameters folderPath string Returns bool OnOpened() public virtual void OnOpened() OpenOrCreate(string, ref string, bool, bool, bool) public bool OpenOrCreate(string filename, ref string errorMessage, bool requireWriteAccess, bool corruptionProtection, bool doIntegrityCheck) Parameters filename string errorMessage string requireWriteAccess bool corruptionProtection bool doIntegrityCheck bool Returns bool Vacuum() public void Vacuum()"
  },
  "api/Vintagestory.API.Common.SeatConfig.html": {
    "href": "api/Vintagestory.API.Common.SeatConfig.html",
    "title": "Class SeatConfig | VintageStory API",
    "keywords": "Class SeatConfig Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class SeatConfig Inheritance object SeatConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields APName Attachment point name public string APName Field Value string AngleMode public EnumMountAngleMode AngleMode Field Value EnumMountAngleMode Attributes [JsonProperty] [JsonConverter(typeof(JsonAttributesConverter))] public JsonObject Attributes Field Value JsonObject BodyYawLimit public float? BodyYawLimit Field Value float? Controllable public bool Controllable Field Value bool EyeHeight public float EyeHeight Field Value float MountOffset public Vec3f MountOffset Field Value Vec3f MountRotation public Vec3f MountRotation Field Value Vec3f SeatId public string SeatId Field Value string SelectionBox public string SelectionBox Field Value string Properties Animation public string Animation { get; set; } Property Value string"
  },
  "api/Vintagestory.API.Common.SelectedHotbarSlotDelegate.html": {
    "href": "api/Vintagestory.API.Common.SelectedHotbarSlotDelegate.html",
    "title": "Delegate SelectedHotbarSlotDelegate | VintageStory API",
    "keywords": "Delegate SelectedHotbarSlotDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void SelectedHotbarSlotDelegate(IServerPlayer byPlayer) Parameters byPlayer IServerPlayer Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.ServerAnimator.html": {
    "href": "api/Vintagestory.API.Common.ServerAnimator.html",
    "title": "Class ServerAnimator | VintageStory API",
    "keywords": "Class ServerAnimator Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ServerAnimator : ClientAnimator, IAnimator Inheritance object AnimatorBase ClientAnimator ServerAnimator Implements IAnimator Inherited Members ClientAnimator.jointsById ClientAnimator.jointsDone ClientAnimator.MaxConcurrentAnimations ClientAnimator.CreateForEntity(Entity, List<ElementPose>, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>) ClientAnimator.CreateForEntity(Entity, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>) ClientAnimator.initFields() ClientAnimator.initMatrices(int) ClientAnimator.ReloadAttachmentPoints() ClientAnimator.LoadAttachmentPoints(List<ElementPose>) ClientAnimator.GetPosebyName(string, StringComparison) ClientAnimator.AnimNowActive(RunningAnimation, AnimationMetaData) ClientAnimator.MaxJointId ClientAnimator.OnFrame(Dictionary<string, AnimationMetaData>, float) ClientAnimator.calculateMatrices(float) ClientAnimator.DumpCurrentState() AnimatorBase.identMat AnimatorBase.logAntiSpam AnimatorBase.activeAnimCount AnimatorBase.RootElements AnimatorBase.RootPoses AnimatorBase.anims AnimatorBase.TransformationMatrices AnimatorBase.TransformationMatricesDefaultPose AnimatorBase.AttachmentPointByCode AnimatorBase.CurAnims AnimatorBase.entityForLogging AnimatorBase.CalculateMatrices AnimatorBase.Matrices AnimatorBase.ActiveAnimationCount AnimatorBase.RunningAnimations AnimatorBase.Animations AnimatorBase.GetAnimationState(string) AnimatorBase.GetAttachmentPointPose(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ServerAnimator(WalkSpeedSupplierDelegate, List<ElementPose>, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>, Action<string>, bool) public ServerAnimator(WalkSpeedSupplierDelegate walkSpeedSupplier, List<ElementPose> rootPoses, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, Action<string> onAnimationStoppedListener = null, bool loadFully = false) Parameters walkSpeedSupplier WalkSpeedSupplierDelegate rootPoses List<ElementPose> animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> onAnimationStoppedListener Action<string> loadFully bool ServerAnimator(WalkSpeedSupplierDelegate, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>, Action<string>, bool) public ServerAnimator(WalkSpeedSupplierDelegate walkSpeedSupplier, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, Action<string> onAnimationStoppedListener = null, bool loadFully = false) Parameters walkSpeedSupplier WalkSpeedSupplierDelegate animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> onAnimationStoppedListener Action<string> loadFully bool Methods CreateForEntity(Entity, List<ElementPose>, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>, bool) public static ServerAnimator CreateForEntity(Entity entity, List<ElementPose> rootPoses, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, bool requirePosesOnServer) Parameters entity Entity rootPoses List<ElementPose> animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> requirePosesOnServer bool Returns ServerAnimator CreateForEntity(Entity, Animation[], ShapeElement[], Dictionary<int, AnimationJoint>, bool) public static ServerAnimator CreateForEntity(Entity entity, Animation[] animations, ShapeElement[] rootElements, Dictionary<int, AnimationJoint> jointsById, bool requirePosesOnServer) Parameters entity Entity animations Animation[] rootElements ShapeElement[] jointsById Dictionary<int, AnimationJoint> requirePosesOnServer bool Returns ServerAnimator LoadPosesAndAttachmentPoints(ShapeElement[], List<ElementPose>) protected override void LoadPosesAndAttachmentPoints(ShapeElement[] elements, List<ElementPose> intoPoses) Parameters elements ShapeElement[] intoPoses List<ElementPose>"
  },
  "api/Vintagestory.API.Common.ServerChatCommand.html": {
    "href": "api/Vintagestory.API.Common.ServerChatCommand.html",
    "title": "Class ServerChatCommand | VintageStory API",
    "keywords": "Class ServerChatCommand Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A handler for creating server commands. Open in GitHub public class ServerChatCommand : ChatCommand Inheritance object ChatCommand ServerChatCommand Inherited Members ChatCommand.Command ChatCommand.Syntax ChatCommand.Description ChatCommand.RequiredPrivilege ChatCommand.GetDescription() ChatCommand.GetSyntax() ChatCommand.GetHelpMessage() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields handler public ServerChatCommandDelegate handler Field Value ServerChatCommandDelegate Methods CallHandler(IPlayer, int, CmdArgs) The call handler for the command. public override void CallHandler(IPlayer player, int groupId, CmdArgs args) Parameters player IPlayer The player calling the command. groupId int The groupID of the player. args CmdArgs The arguments of the command. HasPrivilege(IServerPlayer) Whether or not the player has the privilage to run the command. public bool HasPrivilege(IServerPlayer player) Parameters player IServerPlayer Returns bool"
  },
  "api/Vintagestory.API.Common.ServerChatCommandDelegate.html": {
    "href": "api/Vintagestory.API.Common.ServerChatCommandDelegate.html",
    "title": "Delegate ServerChatCommandDelegate | VintageStory API",
    "keywords": "Delegate ServerChatCommandDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void ServerChatCommandDelegate(IServerPlayer player, int groupId, CmdArgs args) Parameters player IServerPlayer groupId int args CmdArgs Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Shape.html": {
    "href": "api/Vintagestory.API.Common.Shape.html",
    "title": "Class Shape | VintageStory API",
    "keywords": "Class Shape Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll The base shape for all json objects. Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class Shape Inheritance object Shape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Animations The animations for the shape. [JsonProperty] public Animation[] Animations Field Value Animation[] AnimationsByCrc32 public Dictionary<uint, Animation> AnimationsByCrc32 Field Value Dictionary<uint, Animation> Elements The elements of the shape. [JsonProperty] public ShapeElement[] Elements Field Value ShapeElement[] JointsById public Dictionary<int, AnimationJoint> JointsById Field Value Dictionary<int, AnimationJoint> TextureHeight The height of the texture (default: 16) [JsonProperty] public int TextureHeight Field Value int TextureSizes [JsonProperty] public Dictionary<string, int[]> TextureSizes Field Value Dictionary<string, int[]> TextureWidth The width of the texture. (default: 16) [JsonProperty] public int TextureWidth Field Value int Textures The collection of textures in the shape. The Dictionary keys are the texture short names, used in each ShapeElementFace Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) [JsonProperty] public Dictionary<string, AssetLocation> Textures Field Value Dictionary<string, AssetLocation> Methods CacheInvTransforms() public void CacheInvTransforms() CacheInvTransforms(ShapeElement[]) public static void CacheInvTransforms(ShapeElement[] elements) Parameters elements ShapeElement[] Clone() Creates a deep copy of the shape. If the shape has animations, then it also resolves references and joints to ensure the cloned shape is fully initialized public Shape Clone() Returns Shape CloneAnimations() public Animation[] CloneAnimations() Returns Animation[] CloneElements() public ShapeElement[] CloneElements() Returns ShapeElement[] CollectAndResolveReferences(ILogger, string) Attempts to resolve all references within the shape. Logs missing references them to the errorLogger public Dictionary<string, ShapeElement> CollectAndResolveReferences(ILogger errorLogger, string shapeNameForLogging) Parameters errorLogger ILogger shapeNameForLogging string Returns Dictionary<string, ShapeElement> CollectElements(ShapeElement[], IDictionary<string, ShapeElement>) Collects all the elements in the shape recursively. public void CollectElements(ShapeElement[] elements, IDictionary<string, ShapeElement> elementsByName) Parameters elements ShapeElement[] elementsByName IDictionary<string, ShapeElement> FindElement(string, StringComparison) public ShapeElement FindElement(string wildcard, StringComparison stringComparison = StringComparison.OrdinalIgnoreCase) Parameters wildcard string stringComparison StringComparison Returns ShapeElement FreeRAMServer() public virtual void FreeRAMServer() GetElementByName(string, StringComparison) Recursively searches the element by name from the shape. public ShapeElement GetElementByName(string name, StringComparison stringComparison = StringComparison.OrdinalIgnoreCase) Parameters name string The name of the element to get. stringComparison StringComparison Ignored but retained for API backwards compatibility. The implementation always uses OrdinalIgnoreCase comparison Returns ShapeElement The shape element or null if none was found InitForAnimations(ILogger, string, params string[]) public void InitForAnimations(ILogger logger, string shapeNameForLogging, params string[] requireJointsForElements) Parameters logger ILogger shapeNameForLogging string requireJointsForElements string[] RemoveElementByName(string, StringComparison) Removes all elements with given name public bool RemoveElementByName(string name, StringComparison stringComparison = StringComparison.InvariantCultureIgnoreCase) Parameters name string stringComparison StringComparison Returns bool RemoveElements(string[]) public void RemoveElements(string[] elementNames) Parameters elementNames string[] ResolveAndFindJoints(ILogger, string, Dictionary<string, ShapeElement>, params string[]) public void ResolveAndFindJoints(ILogger errorLogger, string shapeName, Dictionary<string, ShapeElement> elementsByName, params string[] requireJointsForElements) Parameters errorLogger ILogger shapeName string elementsByName Dictionary<string, ShapeElement> requireJointsForElements string[] ResolveAndFindJoints(ILogger, string, params string[]) Resolves all joints and loads them. public void ResolveAndFindJoints(ILogger errorLogger, string shapeName, params string[] requireJointsForElements) Parameters errorLogger ILogger shapeName string requireJointsForElements string[] ResolveAndLoadJoints(params string[]) [Obsolete(\"Must call ResolveAndFindJoints(errorLogger, shapeName, joints) instead\")] public void ResolveAndLoadJoints(params string[] requireJointsForElements) Parameters requireJointsForElements string[] ResolveReferences(ILogger, string) public void ResolveReferences(ILogger errorLogger, string shapeNameForLogging) Parameters errorLogger ILogger shapeNameForLogging string StepParentShape(Shape, string, string, string, ILogger, Action<string, AssetLocation>, float) Adds a step parented shape to this shape. If you plan to cache the childShape use the shorter argument method and call SubclassForStepParenting() only once on it public bool StepParentShape(Shape childShape, string texturePrefixCode, string childLocationForLogging, string parentLocationForLogging, ILogger logger, Action<string, AssetLocation> onTexture, float damageEffect = 0) Parameters childShape Shape texturePrefixCode string childLocationForLogging string parentLocationForLogging string logger ILogger onTexture Action<string, AssetLocation> damageEffect float Returns bool StepParentShape(Shape, string, string, ILogger, Action<string, AssetLocation>) Adds a step parented shape to this shape, does not call the required pre-step SubclassForStepParenting() public bool StepParentShape(Shape childShape, string childLocationForLogging, string parentLocationForLogging, ILogger logger, Action<string, AssetLocation> onTexture) Parameters childShape Shape childLocationForLogging string parentLocationForLogging string logger ILogger onTexture Action<string, AssetLocation> Returns bool SubclassForStepParenting(string, float) Prefixes texturePrefixCode to all textures in this shape. Required pre-step for stepparenting. The long arguments StepParentShape() calls this method. public bool SubclassForStepParenting(string texturePrefixCode, float damageEffect = 0) Parameters texturePrefixCode string damageEffect float Returns bool TrimTextureNamesAndResolveFaces(StreamingContext) [OnDeserialized] public void TrimTextureNamesAndResolveFaces(StreamingContext context) Parameters context StreamingContext TryGet(ICoreAPI, string) Tries to load the shape from the specified JSON file, with error logging Returns null if the file could not be found, or if there was an error public static Shape TryGet(ICoreAPI api, string shapePath) Parameters api ICoreAPI shapePath string Returns Shape TryGet(ICoreAPI, AssetLocation) Tries to load the shape from the specified JSON file, with error logging Returns null if the file could not be found, or if there was an error public static Shape TryGet(ICoreAPI api, AssetLocation shapePath) Parameters api ICoreAPI shapePath AssetLocation Returns Shape WalkElements(string, Action<ShapeElement>) public void WalkElements(string wildcardpath, Action<ShapeElement> onElement) Parameters wildcardpath string onElement Action<ShapeElement>"
  },
  "api/Vintagestory.API.Common.ShapeElement.html": {
    "href": "api/Vintagestory.API.Common.ShapeElement.html",
    "title": "Class ShapeElement | VintageStory API",
    "keywords": "Class ShapeElement Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A shape element built from JSON data within the model. Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class ShapeElement Inheritance object ShapeElement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AttachmentPoints The attachment points for this shape. [JsonProperty] public AttachmentPoint[] AttachmentPoints Field Value AttachmentPoint[] Children The child shapes of this shape element [JsonProperty] public ShapeElement[] Children Field Value ShapeElement[] ClimateColorMap [JsonProperty] public string ClimateColorMap Field Value string Color For entity animations public int Color Field Value int DamageEffect public float DamageEffect Field Value float DisableRandomDrawOffset Set this to true to disable randomDrawOffset and randomRotations on this specific element (e.g. used for the ice element of Coopers Reeds in Ice) [JsonProperty] public bool DisableRandomDrawOffset Field Value bool Faces The faces of the shape element by name (will normally be null except during object deserialization: use FacesResolved instead!) [JsonProperty] [Obsolete(\"Use FacesResolved instead\")] public Dictionary<string, ShapeElementFace> Faces Field Value Dictionary<string, ShapeElementFace> FacesResolved An array holding the faces of this shape element in BlockFacing order: North, East, South, West, Up, Down. May be null if not present or not enabled. Note: from game version 1.20.4, this is null on server-side (except during asset loading start-up stage) public ShapeElementFace[] FacesResolved Field Value ShapeElementFace[] From [JsonProperty] public double[] From Field Value double[] GradientShade [JsonProperty] public bool GradientShade Field Value bool JointId The id of the joint attached to the parent element. public int JointId Field Value int Logger A static reference to the logger (null on a server) - we don't want to hold a reference to the platform or api in every ShapeElement public static ILogger Logger Field Value ILogger Name The name of the ShapeElement [JsonProperty] public string Name Field Value string ParentElement The parent element reference for this shape. public ShapeElement ParentElement Field Value ShapeElement RenderPass [JsonProperty] public short RenderPass Field Value short RotationOrigin The origin point for rotation. [JsonProperty] public double[] RotationOrigin Field Value double[] RotationX The forward vertical rotation of the shape element. [JsonProperty] public double RotationX Field Value double RotationY The forward vertical rotation of the shape element. [JsonProperty] public double RotationY Field Value double RotationZ The left/right tilt of the shape element [JsonProperty] public double RotationZ Field Value double ScaleX How far away are the left/right sides of the shape from the center [JsonProperty] public double ScaleX Field Value double ScaleY How far away are the top/bottom sides of the shape from the center [JsonProperty] public double ScaleY Field Value double ScaleZ How far away are the front/back sides of the shape from the center. [JsonProperty] public double ScaleZ Field Value double SeasonColorMap [JsonProperty] public string SeasonColorMap Field Value string Shade Whether or not the shape element is shaded. [JsonProperty] public bool Shade Field Value bool StepParentName The \"remote\" parent for this element [JsonProperty] public string StepParentName Field Value string To [JsonProperty] public double[] To Field Value double[] ZOffset [JsonProperty] public short ZOffset Field Value short inverseModelTransform public float[] inverseModelTransform Field Value float[] locationForLogging public static object locationForLogging Field Value object Methods CacheInverseTransformMatrix() public void CacheInverseTransformMatrix() CacheInverseTransformMatrixRecursive() public void CacheInverseTransformMatrixRecursive() Clone() public ShapeElement Clone() Returns ShapeElement CountParents() public int CountParents() Returns int FreeRAMServer() public virtual void FreeRAMServer() GetInverseModelMatrix() Returns the full inverse model matrix (includes all parent transforms) public float[] GetInverseModelMatrix() Returns float[] GetLocalTransformMatrix(int, float[], ElementPose) public float[] GetLocalTransformMatrix(int animVersion, float[] output = null, ElementPose tf = null) Parameters animVersion int output float[] tf ElementPose Returns float[] GetParentPath() Walks the element tree and collects all parents, starting with the root element public List<ShapeElement> GetParentPath() Returns List<ShapeElement> SetJointIdRecursive(int) public void SetJointIdRecursive(int jointId) Parameters jointId int WalkRecursive(Action<ShapeElement>) public void WalkRecursive(Action<ShapeElement> onElem) Parameters onElem Action<ShapeElement>"
  },
  "api/Vintagestory.API.Common.ShapeElementFace.html": {
    "href": "api/Vintagestory.API.Common.ShapeElementFace.html",
    "title": "Class ShapeElementFace | VintageStory API",
    "keywords": "Class ShapeElementFace Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ShapeElementFace Inheritance object ShapeElementFace Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Enabled Whether or not the element is enabled. public bool Enabled Field Value bool Glow The glow on the face. public int Glow Field Value int ReflectiveMode public EnumReflectiveMode ReflectiveMode Field Value EnumReflectiveMode Rotation The rotation of the face. public float Rotation Field Value float Texture The texture of the face. public string Texture Field Value string Uv The UV array of the face. public float[] Uv Field Value float[] WindData public sbyte[] WindData Field Value sbyte[] WindMode public sbyte[] WindMode Field Value sbyte[]"
  },
  "api/Vintagestory.API.Common.ShapeElementWeights.html": {
    "href": "api/Vintagestory.API.Common.ShapeElementWeights.html",
    "title": "Class ShapeElementWeights | VintageStory API",
    "keywords": "Class ShapeElementWeights Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class ShapeElementWeights Inheritance object ShapeElementWeights Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlendMode public EnumAnimationBlendMode BlendMode Field Value EnumAnimationBlendMode ChildElements public ShapeElementWeights[] ChildElements Field Value ShapeElementWeights[] Weight public float Weight Field Value float"
  },
  "api/Vintagestory.API.Common.SimpleParticleProperties.html": {
    "href": "api/Vintagestory.API.Common.SimpleParticleProperties.html",
    "title": "Class SimpleParticleProperties | VintageStory API",
    "keywords": "Class SimpleParticleProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A configurable implementation of IParticlePropertiesProvider Open in GitHub public class SimpleParticleProperties : IParticlePropertiesProvider Inheritance object SimpleParticleProperties Implements IParticlePropertiesProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SimpleParticleProperties() public SimpleParticleProperties() SimpleParticleProperties(float, float, int, Vec3d, Vec3d, Vec3f, Vec3f, float, float, float, float, EnumParticleModel) public SimpleParticleProperties(float minQuantity, float maxQuantity, int color, Vec3d minPos, Vec3d maxPos, Vec3f minVelocity, Vec3f maxVelocity, float lifeLength = 1, float gravityEffect = 1, float minSize = 1, float maxSize = 1, EnumParticleModel model = EnumParticleModel.Cube) Parameters minQuantity float maxQuantity float color int minPos Vec3d maxPos Vec3d minVelocity Vec3f maxVelocity Vec3f lifeLength float gravityEffect float minSize float maxSize float model EnumParticleModel Fields AddPos public Vec3d AddPos Field Value Vec3d AddQuantity public float AddQuantity Field Value float AddVelocity public Vec3f AddVelocity Field Value Vec3f ClimateColorMap The color map for climate color mapping. Leave null for no coloring by climate public string ClimateColorMap Field Value string Color public int Color Field Value int ColorByBlock public Block ColorByBlock Field Value Block LifeLength public float LifeLength Field Value float MaxSize public float MaxSize Field Value float MinPos public Vec3d MinPos Field Value Vec3d MinQuantity public float MinQuantity Field Value float MinSize public float MinSize Field Value float MinVelocity public Vec3f MinVelocity Field Value Vec3f SeasonColorMap The color map for season color mapping. Leave null for no coloring by season public string SeasonColorMap Field Value string SelfPropelled public bool SelfPropelled Field Value bool WindAffectednes public float WindAffectednes Field Value float addLifeLength public float addLifeLength Field Value float randTL public static ThreadLocal<Random> randTL Field Value ThreadLocal<Random> tmpPos protected Vec3d tmpPos Field Value Vec3d Properties Async If true, will be be spawned in the async particle system, which does not affect main game performance, recommended for large quantities of particles, slightly less optimal for particles that spawn very often public bool Async { get; set; } Property Value bool BlueEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat BlueEvolve { get; set; } Property Value EvolvingNatFloat Bounciness public float Bounciness { get; set; } Property Value float DeathParticles The particle to spawn upon the particle death. public IParticlePropertiesProvider[] DeathParticles { get; set; } Property Value IParticlePropertiesProvider[] DieInAir Whether the particle should despawn when in contact with air (e.g. for water bubbles) public bool DieInAir { get; } Property Value bool DieInLiquid Whether the particle should despawn when in contact with liquids public bool DieInLiquid { get; } Property Value bool DieOnRainHeightmap If true, particle dies if it falls below the rain height at its given location public bool DieOnRainHeightmap { get; set; } Property Value bool GravityEffect How strongly the particle is affected by gravity (0 = no gravity applied) public float GravityEffect { get; set; } Property Value float GreenEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat GreenEvolve { get; set; } Property Value EvolvingNatFloat LightEmission If this particle emits light, this is its RGBA. Does not actually brighten the scene around it, but prevents incorrect lighting of particles when everything else around it is dark public int LightEmission { get; set; } Property Value int OpacityEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat OpacityEvolve { get; set; } Property Value EvolvingNatFloat ParentVelocity public Vec3f ParentVelocity { get; set; } Property Value Vec3f ParentVelocityWeight public float ParentVelocityWeight { get; set; } Property Value float ParticleModel Cube or Quad? public EnumParticleModel ParticleModel { get; set; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public virtual Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public float Quantity { get; } Property Value float RandomVelocityChange public bool RandomVelocityChange { get; set; } Property Value bool RedEvolve Return null or 1 if opacity should remain unchanged over time. lifetimeLeft is always a value between 0 and 1 public EvolvingNatFloat RedEvolve { get; set; } Property Value EvolvingNatFloat SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. public IParticlePropertiesProvider[] SecondaryParticles { get; set; } Property Value IParticlePropertiesProvider[] SecondarySpawnInterval Determines the interval of time that must elapse during it's parent particle's lifetime before this one will spawn. This is only honored if this particle is defined as a secondary particle. public float SecondarySpawnInterval { get; } Property Value float ShouldDieInAir public bool ShouldDieInAir { get; set; } Property Value bool ShouldDieInLiquid public bool ShouldDieInLiquid { get; set; } Property Value bool ShouldSwimOnLiquid public bool ShouldSwimOnLiquid { get; set; } Property Value bool Size Size of the particle public float Size { get; } Property Value float SizeEvolve Size change over time public EvolvingNatFloat SizeEvolve { get; set; } Property Value EvolvingNatFloat SwimOnLiquid public bool SwimOnLiquid { get; } Property Value bool TerrainCollision If true, the particle will collide with the terrain public bool TerrainCollision { get; } Property Value bool VelocityEvolve Velocity change over time (acts as a multiplier to the velocity) public EvolvingNatFloat[] VelocityEvolve { get; } Property Value EvolvingNatFloat[] VertexFlags See also VertexFlags public int VertexFlags { get; set; } Property Value int WindAffected public bool WindAffected { get; set; } Property Value bool WithTerrainCollision public bool WithTerrainCollision { get; set; } Property Value bool rand public static Random rand { get; } Property Value Random Methods BeginParticle() Called just before a new particle is being created. You can use this to produce e.g. alternating kinds of particles public void BeginParticle() Clone(IWorldAccessor) public SimpleParticleProperties Clone(IWorldAccessor worldForResovle) Parameters worldForResovle IWorldAccessor Returns SimpleParticleProperties FromBytes(BinaryReader, IWorldAccessor) For reading from the network public void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f Init(ICoreAPI) Called before the particle provider is used for particle creation public void Init(ICoreAPI api) Parameters api ICoreAPI PrepareForSecondarySpawn(ParticleBase) Updates instance related state for secondary particles based on the given parent particle instance public void PrepareForSecondarySpawn(ParticleBase particleInstance) Parameters particleInstance ParticleBase The parent IParticleInstance from which this secondary particle is being spawned ToBytes(BinaryWriter) For sending over the network public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter UseLighting() public bool UseLighting() Returns bool"
  },
  "api/Vintagestory.API.Common.SolarSphericalCoords.html": {
    "href": "api/Vintagestory.API.Common.SolarSphericalCoords.html",
    "title": "Struct SolarSphericalCoords | VintageStory API",
    "keywords": "Struct SolarSphericalCoords Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public struct SolarSphericalCoords Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SolarSphericalCoords(float, float) public SolarSphericalCoords(float zenithAngle, float azimuthAngle) Parameters zenithAngle float azimuthAngle float Fields AzimuthAngle public float AzimuthAngle Field Value float ZenithAngle public float ZenithAngle Field Value float"
  },
  "api/Vintagestory.API.Common.SolarSphericalCoordsDelegate.html": {
    "href": "api/Vintagestory.API.Common.SolarSphericalCoordsDelegate.html",
    "title": "Delegate SolarSphericalCoordsDelegate | VintageStory API",
    "keywords": "Delegate SolarSphericalCoordsDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Should return sin(solar altitude angle). i.e. -1 for 90 degrees far below horizon, 0 for horizon and 1 for vertical public delegate SolarSphericalCoords SolarSphericalCoordsDelegate(double posX, double posZ, float yearRel, float dayRel) Parameters posX double World x coordinate posZ double World z coordinate yearRel float Current year progress, from 0..1 dayRel float Current day progress, from 0..1 Returns SolarSphericalCoords Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.SourceStringComponents.html": {
    "href": "api/Vintagestory.API.Common.SourceStringComponents.html",
    "title": "Struct SourceStringComponents | VintageStory API",
    "keywords": "Struct SourceStringComponents Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll For performance, don't build and store new concatenated strings for every block variant, item and entity, when these will only be used (if ever) for error logging public struct SourceStringComponents Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SourceStringComponents(string, params object[]) public SourceStringComponents(string formattedString, params object[] arguments) Parameters formattedString string arguments object[] SourceStringComponents(string, string, string, int) Store references to the source strings, to be able to build a logging string later if necessary public SourceStringComponents(string message, string sourceDomain, string sourcePath, int sourceAlt) Parameters message string sourceDomain string sourcePath string sourceAlt int SourceStringComponents(string, AssetLocation, int) public SourceStringComponents(string message, AssetLocation source, int sourceAlt = -1) Parameters message string source AssetLocation sourceAlt int Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/Vintagestory.API.Common.StackCubeParticles.html": {
    "href": "api/Vintagestory.API.Common.StackCubeParticles.html",
    "title": "Class StackCubeParticles | VintageStory API",
    "keywords": "Class StackCubeParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class StackCubeParticles : CollectibleParticleProperties, IParticlePropertiesProvider Inheritance object CollectibleParticleProperties StackCubeParticles Implements IParticlePropertiesProvider Inherited Members CollectibleParticleProperties.rand CollectibleParticleProperties.Async CollectibleParticleProperties.Bounciness CollectibleParticleProperties.DieOnRainHeightmap CollectibleParticleProperties.RandomVelocityChange CollectibleParticleProperties.DieInAir CollectibleParticleProperties.LightEmission CollectibleParticleProperties.api CollectibleParticleProperties.SelfPropelled CollectibleParticleProperties.TerrainCollision CollectibleParticleProperties.GravityEffect CollectibleParticleProperties.UseLighting() CollectibleParticleProperties.RandomBlockPos(IBlockAccessor, BlockPos, Block, BlockFacing) CollectibleParticleProperties.OpacityEvolve CollectibleParticleProperties.RedEvolve CollectibleParticleProperties.GreenEvolve CollectibleParticleProperties.BlueEvolve CollectibleParticleProperties.SizeEvolve CollectibleParticleProperties.ColorByBlock() CollectibleParticleProperties.BeginParticle() CollectibleParticleProperties.VelocityEvolve CollectibleParticleProperties.DeathParticles CollectibleParticleProperties.SecondarySpawnInterval CollectibleParticleProperties.PrepareForSecondarySpawn(ParticleBase) CollectibleParticleProperties.Init(ICoreAPI) CollectibleParticleProperties.ParentVelocity CollectibleParticleProperties.ParentVelocityWeight object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StackCubeParticles() public StackCubeParticles() StackCubeParticles(Vec3d, ItemStack, float, int, float, Vec3f) public StackCubeParticles(Vec3d collisionPos, ItemStack stack, float radius, int quantity, float scale, Vec3f velocity = null) Parameters collisionPos Vec3d stack ItemStack radius float quantity int scale float velocity Vec3f Fields collisionPos The position of the collision to create these particles. public Vec3d collisionPos Field Value Vec3d quantity The amount of particles to be released. public int quantity Field Value int radius The radius to release the particles. public float radius Field Value float scale The scale of the particles. public float scale Field Value float stack The contents that the particles are built off of. public ItemStack stack Field Value ItemStack velocity public Vec3f velocity Field Value Vec3f Properties DieInLiquid Whether the particle should despawn when in contact with liquids public override bool DieInLiquid { get; } Property Value bool LifeLength How long the particle should live (default = 1) public override float LifeLength { get; } Property Value float ParticleModel Cube or Quad? public override EnumParticleModel ParticleModel { get; } Property Value EnumParticleModel Pos Position in the world where the particle should spawn public override Vec3d Pos { get; } Property Value Vec3d Quantity How many particles should spawn? For every particle spawned, all of belows methods are called once. E.g. if quantity is 10, GetPos(), GetVelocity(),... is called 10 times. public override float Quantity { get; } Property Value float SecondaryParticles The secondary particle properties. Secondary particles are particles that are emitted from an in-flight particle. public override IParticlePropertiesProvider[] SecondaryParticles { get; } Property Value IParticlePropertiesProvider[] Size Size of the particle public override float Size { get; } Property Value float SwimOnLiquid public override bool SwimOnLiquid { get; } Property Value bool VertexFlags See also VertexFlags public override int VertexFlags { get; } Property Value int Methods FromBytes(BinaryReader, IWorldAccessor) For reading from the network public override void FromBytes(BinaryReader reader, IWorldAccessor resolver) Parameters reader BinaryReader resolver IWorldAccessor GetRgbaColor(ICoreClientAPI) The particles Rgba Color public override int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) In what direction should the particle fly/fall public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f ToBytes(BinaryWriter) For sending over the network public override void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.StandardWorldProperty.html": {
    "href": "api/Vintagestory.API.Common.StandardWorldProperty.html",
    "title": "Class StandardWorldProperty | VintageStory API",
    "keywords": "Class StandardWorldProperty Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class StandardWorldProperty : WorldProperty<WorldPropertyVariant> Inheritance object WorldProperty<WorldPropertyVariant> StandardWorldProperty Inherited Members WorldProperty<WorldPropertyVariant>.Code WorldProperty<WorldPropertyVariant>.Variants object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.StartAnimationDelegate.html": {
    "href": "api/Vintagestory.API.Common.StartAnimationDelegate.html",
    "title": "Delegate StartAnimationDelegate | VintageStory API",
    "keywords": "Delegate StartAnimationDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate bool StartAnimationDelegate(ref AnimationMetaData animationMeta, ref EnumHandling handling) Parameters animationMeta AnimationMetaData handling EnumHandling Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.StringArgParser.html": {
    "href": "api/Vintagestory.API.Common.StringArgParser.html",
    "title": "Class StringArgParser | VintageStory API",
    "keywords": "Class StringArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class StringArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase StringArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StringArgParser(string, bool) public StringArgParser(string argName, bool isMandatoryArg) Parameters argName string isMandatoryArg bool Methods GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.StrongBlockBehavior.html": {
    "href": "api/Vintagestory.API.Common.StrongBlockBehavior.html",
    "title": "Class StrongBlockBehavior | VintageStory API",
    "keywords": "Class StrongBlockBehavior Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Same as block behavior but allows even more control over a block, such as the blocks collision boxes and world gen behavior. These are not part of default block behaviors for performance reasons. Requires the block to use the GenericBlock block class (or inherit from it) Open in GitHub public abstract class StrongBlockBehavior : BlockBehavior Inheritance object CollectibleBehavior BlockBehavior StrongBlockBehavior Inherited Members BlockBehavior.block BlockBehavior.OnBlockBroken(IWorldAccessor, BlockPos, IPlayer, ref EnumHandling) BlockBehavior.OnPickBlock(IWorldAccessor, BlockPos, ref EnumHandling) BlockBehavior.GetDrops(IWorldAccessor, BlockPos, IPlayer, ref float, ref EnumHandling) BlockBehavior.OnNeighbourBlockChange(IWorldAccessor, BlockPos, BlockPos, ref EnumHandling) BlockBehavior.CanAttachBlockAt(IBlockAccessor, Block, BlockPos, BlockFacing, ref EnumHandling, Cuboidi) BlockBehavior.CanCreatureSpawnOn(IBlockAccessor, BlockPos, EntityProperties, BaseSpawnConditions, ref EnumHandling) BlockBehavior.GetRotatedBlockCode(int, ref EnumHandling) BlockBehavior.GetVerticallyFlippedBlockCode(ref EnumHandling) BlockBehavior.GetHorizontallyFlippedBlockCode(EnumAxis, ref EnumHandling) BlockBehavior.IsReplacableBy(Block, ref EnumHandling) BlockBehavior.ShouldReceiveClientParticleTicks(IWorldAccessor, IPlayer, BlockPos, ref EnumHandling) BlockBehavior.OnAsyncClientParticleTick(IAsyncParticleManager, BlockPos, float, float) BlockBehavior.OnBlockRemoved(IWorldAccessor, BlockPos, ref EnumHandling) BlockBehavior.Activate(IWorldAccessor, Caller, BlockSelection, ITreeAttribute, ref EnumHandling) BlockBehavior.OnBlockInteractStart(IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) BlockBehavior.GetPlacedBlockInfo(IWorldAccessor, BlockPos, IPlayer) BlockBehavior.OnBlockExploded(IWorldAccessor, BlockPos, BlockPos, EnumBlastType, ref EnumHandling) BlockBehavior.GetPlacedBlockInteractionHelp(IWorldAccessor, BlockSelection, IPlayer, ref EnumHandling) BlockBehavior.OnBlockInteractStop(float, IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) BlockBehavior.OnBlockInteractStep(float, IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) BlockBehavior.OnBlockInteractCancel(float, IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling) BlockBehavior.TryPlaceBlock(IWorldAccessor, IPlayer, ItemStack, BlockSelection, ref EnumHandling, ref string) BlockBehavior.CanPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ref EnumHandling, ref string) BlockBehavior.DoPlaceBlock(IWorldAccessor, IPlayer, BlockSelection, ItemStack, ref EnumHandling) BlockBehavior.OnBlockPlaced(IWorldAccessor, BlockPos, ref EnumHandling) BlockBehavior.OnCreatedByCrafting(ItemSlot[], ItemSlot, GridRecipe, ref EnumHandling) BlockBehavior.GetHeldBlockInfo(IWorldAccessor, ItemSlot) BlockBehavior.GetSnowCoveredBlockCode(float) BlockBehavior.GetMiningSpeedModifier(IWorldAccessor, BlockPos, IPlayer) BlockBehavior.GetPlacedBlockName(StringBuilder, IWorldAccessor, BlockPos) BlockBehavior.GetHeatRetention(BlockPos, BlockFacing, ref EnumHandling) BlockBehavior.GetRetention(BlockPos, BlockFacing, EnumRetentionType, ref EnumHandling) BlockBehavior.GetLiquidBarrierHeightOnSide(BlockFacing, BlockPos, ref EnumHandling) CollectibleBehavior.collObj CollectibleBehavior.propertiesAtString CollectibleBehavior.ClientSideOptional CollectibleBehavior.Initialize(JsonObject) CollectibleBehavior.OnLoaded(ICoreAPI) CollectibleBehavior.OnUnloaded(ICoreAPI) CollectibleBehavior.GetStorageFlags(ItemStack, ref EnumHandling) CollectibleBehavior.OnHeldAttackStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandHandling, ref EnumHandling) CollectibleBehavior.OnHeldAttackCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason, ref EnumHandling) CollectibleBehavior.OnHeldAttackStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldAttackStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldInteractStart(ItemSlot, EntityAgent, BlockSelection, EntitySelection, bool, ref EnumHandHandling, ref EnumHandling) CollectibleBehavior.OnHeldInteractStep(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldInteractStop(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, ref EnumHandling) CollectibleBehavior.OnHeldInteractCancel(float, ItemSlot, EntityAgent, BlockSelection, EntitySelection, EnumItemUseCancelReason, ref EnumHandling) CollectibleBehavior.OnBeforeRender(ICoreClientAPI, ItemStack, EnumItemRenderTarget, ref ItemRenderInfo) CollectibleBehavior.GetHeldInteractionHelp(ItemSlot, ref EnumHandling) CollectibleBehavior.GetToolModes(ItemSlot, IClientPlayer, BlockSelection) CollectibleBehavior.GetToolMode(ItemSlot, IPlayer, BlockSelection) CollectibleBehavior.SetToolMode(ItemSlot, IPlayer, BlockSelection, int) CollectibleBehavior.GetHeldItemInfo(ItemSlot, StringBuilder, IWorldAccessor, bool) CollectibleBehavior.GetHeldItemName(StringBuilder, ItemStack) CollectibleBehavior.OnBlockBrokenWith(IWorldAccessor, Entity, ItemSlot, BlockSelection, float, ref EnumHandling) CollectibleBehavior.OnBlockBreaking(IPlayer, BlockSelection, ItemSlot, float, float, int, ref EnumHandling) CollectibleBehavior.GetHeldTpHitAnimation(ItemSlot, Entity, ref EnumHandling) CollectibleBehavior.GetHeldReadyAnimation(ItemSlot, Entity, EnumHand, ref EnumHandling) CollectibleBehavior.GetHeldTpIdleAnimation(ItemSlot, Entity, EnumHand, ref EnumHandling) CollectibleBehavior.GetHeldTpUseAnimation(ItemSlot, Entity, ref EnumHandling) CollectibleBehavior.OnCreatedByCrafting(ItemSlot[], ItemSlot, ref EnumHandling) CollectibleBehavior.OnGetMiningSpeed(IItemStack, BlockSelection, Block, IPlayer, ref EnumHandling) CollectibleBehavior.OnGetMaxDurability(ItemStack, ref EnumHandling) CollectibleBehavior.OnGetRemainingDurability(ItemStack, ref EnumHandling) CollectibleBehavior.OnDamageItem(IWorldAccessor, Entity, ItemSlot, ref int, ref EnumHandling) CollectibleBehavior.OnSetDurability(ItemStack, ref int, ref EnumHandling) CollectibleBehavior.OnTransitionNow(ItemSlot, TransitionableProperties, ref EnumHandling) CollectibleBehavior.OnHandbookRecipeRender(ICoreClientAPI, GridRecipe, ItemSlot, double, double, double, double) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StrongBlockBehavior(Block) protected StrongBlockBehavior(Block block) Parameters block Block Methods DoParticalSelection(IWorldAccessor, BlockPos, ref EnumHandling) public virtual bool DoParticalSelection(IWorldAccessor world, BlockPos pos, ref EnumHandling handled) Parameters world IWorldAccessor pos BlockPos handled EnumHandling Returns bool GetCollisionBoxes(IBlockAccessor, BlockPos, ref EnumHandling) public virtual Cuboidf[] GetCollisionBoxes(IBlockAccessor blockAccessor, BlockPos pos, ref EnumHandling handled) Parameters blockAccessor IBlockAccessor pos BlockPos handled EnumHandling Returns Cuboidf[] GetDecal(IWorldAccessor, BlockPos, ITexPositionSource, ref MeshData, ref MeshData, ref EnumHandling) public virtual void GetDecal(IWorldAccessor world, BlockPos pos, ITexPositionSource decalTexSource, ref MeshData decalModelData, ref MeshData blockModelData, ref EnumHandling handled) Parameters world IWorldAccessor pos BlockPos decalTexSource ITexPositionSource decalModelData MeshData blockModelData MeshData handled EnumHandling GetParticleBreakBox(IBlockAccessor, BlockPos, BlockFacing, ref EnumHandling) public virtual Cuboidf GetParticleBreakBox(IBlockAccessor blockAccess, BlockPos pos, BlockFacing facing, ref EnumHandling handled) Parameters blockAccess IBlockAccessor pos BlockPos facing BlockFacing handled EnumHandling Returns Cuboidf GetParticleCollisionBoxes(IBlockAccessor, BlockPos, ref EnumHandling) public virtual Cuboidf[] GetParticleCollisionBoxes(IBlockAccessor blockAccessor, BlockPos pos, ref EnumHandling handled) Parameters blockAccessor IBlockAccessor pos BlockPos handled EnumHandling Returns Cuboidf[] GetSelectionBoxes(IBlockAccessor, BlockPos, ref EnumHandling) public virtual Cuboidf[] GetSelectionBoxes(IBlockAccessor blockAccessor, BlockPos pos, ref EnumHandling handled) Parameters blockAccessor IBlockAccessor pos BlockPos handled EnumHandling Returns Cuboidf[] OnDecalTesselation(IWorldAccessor, MeshData, BlockPos, ref EnumHandling) public virtual void OnDecalTesselation(IWorldAccessor world, MeshData decalMesh, BlockPos pos, ref EnumHandling handled) Parameters world IWorldAccessor decalMesh MeshData pos BlockPos handled EnumHandling TryPlaceBlockForWorldGen(IBlockAccessor, BlockPos, BlockFacing, IRandom, ref EnumHandling) public virtual bool TryPlaceBlockForWorldGen(IBlockAccessor blockAccessor, BlockPos pos, BlockFacing onBlockFace, IRandom worldgenRandom, ref EnumHandling handled) Parameters blockAccessor IBlockAccessor pos BlockPos onBlockFace BlockFacing worldgenRandom IRandom handled EnumHandling Returns bool"
  },
  "api/Vintagestory.API.Common.SurfaceDrawImage.html": {
    "href": "api/Vintagestory.API.Common.SurfaceDrawImage.html",
    "title": "Class SurfaceDrawImage | VintageStory API",
    "keywords": "Class SurfaceDrawImage Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class SurfaceDrawImage Inheritance object SurfaceDrawImage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Image(ImageSurface, BitmapRef, int, int, int, int) public static void Image(this ImageSurface surface, BitmapRef bmp, int xPos, int yPos, int width, int height) Parameters surface ImageSurface bmp BitmapRef xPos int yPos int width int height int"
  },
  "api/Vintagestory.API.Common.SuspendServerDelegate.html": {
    "href": "api/Vintagestory.API.Common.SuspendServerDelegate.html",
    "title": "Delegate SuspendServerDelegate | VintageStory API",
    "keywords": "Delegate SuspendServerDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate EnumSuspendState SuspendServerDelegate() Returns EnumSuspendState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Tag2RichTextDelegate.html": {
    "href": "api/Vintagestory.API.Common.Tag2RichTextDelegate.html",
    "title": "Delegate Tag2RichTextDelegate | VintageStory API",
    "keywords": "Delegate Tag2RichTextDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll A tag parser public delegate RichTextComponentBase Tag2RichTextDelegate(ICoreClientAPI capi, VtmlTagToken token, Stack<CairoFont> fontStack, Action<LinkTextComponent> didClickLink) Parameters capi ICoreClientAPI token VtmlTagToken The currently parsed token, its attributes, and child elements fontStack Stack<CairoFont> The current font, you and push a new font if this tag modifies the current font or call .Peek() to get the current one didClickLink Action<LinkTextComponent> Handler passed on by the displaying dialog that should be called if a user pressed a piece of text, if it is clickable at all Returns RichTextComponentBase Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.TestBlockAccessClaimDelegate.html": {
    "href": "api/Vintagestory.API.Common.TestBlockAccessClaimDelegate.html",
    "title": "Delegate TestBlockAccessClaimDelegate | VintageStory API",
    "keywords": "Delegate TestBlockAccessClaimDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate EnumWorldAccessResponse TestBlockAccessClaimDelegate(IPlayer player, BlockSelection blockSel, EnumBlockAccessFlags accessType, ref string claimant, LandClaim claim, EnumWorldAccessResponse response) Parameters player IPlayer blockSel BlockSelection accessType EnumBlockAccessFlags claimant string claim LandClaim response EnumWorldAccessResponse Returns EnumWorldAccessResponse Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.TestBlockAccessDelegate.html": {
    "href": "api/Vintagestory.API.Common.TestBlockAccessDelegate.html",
    "title": "Delegate TestBlockAccessDelegate | VintageStory API",
    "keywords": "Delegate TestBlockAccessDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate EnumWorldAccessResponse TestBlockAccessDelegate(IPlayer player, BlockSelection blockSel, EnumBlockAccessFlags accessType, ref string claimant, EnumWorldAccessResponse response) Parameters player IPlayer blockSel BlockSelection accessType EnumBlockAccessFlags claimant string response EnumWorldAccessResponse Returns EnumWorldAccessResponse Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.TextCommandCallingArgs.html": {
    "href": "api/Vintagestory.API.Common.TextCommandCallingArgs.html",
    "title": "Class TextCommandCallingArgs | VintageStory API",
    "keywords": "Class TextCommandCallingArgs Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class TextCommandCallingArgs Inheritance object TextCommandCallingArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Caller public Caller Caller Field Value Caller Command public IChatCommand Command Field Value IChatCommand LanguageCode public string LanguageCode Field Value string Parsers public List<ICommandArgumentParser> Parsers Field Value List<ICommandArgumentParser> RawArgs public CmdArgs RawArgs Field Value CmdArgs SubCmdCode public string SubCmdCode Field Value string Properties ArgCount public int ArgCount { get; } Property Value int this[int] public object this[int index] { get; } Parameters index int Property Value object LastArg public object LastArg { get; } Property Value object"
  },
  "api/Vintagestory.API.Common.TextCommandResult.html": {
    "href": "api/Vintagestory.API.Common.TextCommandResult.html",
    "title": "Class TextCommandResult | VintageStory API",
    "keywords": "Class TextCommandResult Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class TextCommandResult Inheritance object TextCommandResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Data public object Data Field Value object ErrorCode public string ErrorCode Field Value string MessageParams public object[] MessageParams Field Value object[] Status public EnumCommandStatus Status Field Value EnumCommandStatus StatusMessage Will be displayed with a Lang.Get() public string StatusMessage Field Value string Properties Deferred public static TextCommandResult Deferred { get; } Property Value TextCommandResult DeferredHandler public static OnCommandDelegate DeferredHandler { get; } Property Value OnCommandDelegate Methods Error(string, string) public static TextCommandResult Error(string message, string errorCode = \"\") Parameters message string errorCode string Returns TextCommandResult Success(string, object) public static TextCommandResult Success(string message = \"\", object data = null) Parameters message string data object Returns TextCommandResult"
  },
  "api/Vintagestory.API.Common.ThreadExtensions.html": {
    "href": "api/Vintagestory.API.Common.ThreadExtensions.html",
    "title": "Class ThreadExtensions | VintageStory API",
    "keywords": "Class ThreadExtensions Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class ThreadExtensions Inheritance object ThreadExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryStart(Thread) public static void TryStart(this Thread t) Parameters t Thread"
  },
  "api/Vintagestory.API.Common.TransitionState.html": {
    "href": "api/Vintagestory.API.Common.TransitionState.html",
    "title": "Class TransitionState | VintageStory API",
    "keywords": "Class TransitionState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class TransitionState Inheritance object TransitionState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields FreshHours public float FreshHours Field Value float FreshHoursLeft public float FreshHoursLeft Field Value float Props public TransitionableProperties Props Field Value TransitionableProperties TransitionHours public float TransitionHours Field Value float TransitionLevel public float TransitionLevel Field Value float TransitionedHours public float TransitionedHours Field Value float"
  },
  "api/Vintagestory.API.Common.TransitionableProperties.html": {
    "href": "api/Vintagestory.API.Common.TransitionableProperties.html",
    "title": "Class TransitionableProperties | VintageStory API",
    "keywords": "Class TransitionableProperties Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll This is a versatile way of allowing a collectible to change to another after a certain time in the inventory. Open in GitHub [DocumentAsJson] public class TransitionableProperties Inheritance object TransitionableProperties Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"transitionablePropsByType\": { \"*-long-raw\": [ { \"type\": \"Dry\", \"freshHours\": { \"avg\": 0 }, \"transitionHours\": { \"avg\": 168 }, \"transitionedStack\": { \"type\": \"item\", \"code\": \"bowstave-long-dry\" }, \"transitionRatio\": 1 } ] }, \"transitionableProps\": [ { \"type\": \"Perish\", \"freshHours\": { \"avg\": 120 }, \"transitionHours\": { \"avg\": 24 }, \"transitionedStack\": { \"type\": \"item\", \"code\": \"rot\" }, \"transitionRatio\": 0.5 } ], Fields FreshHours The amount of hours before this item starts the transitioning process. [DocumentAsJson] public NatFloat FreshHours Field Value NatFloat TransitionHours The amount of hours it takes for the item to transition, after FreshHours has elapsed. [DocumentAsJson] public NatFloat TransitionHours Field Value NatFloat TransitionRatio Conversion ratio of fresh stacksize to transitioned stack size [DocumentAsJson] public float TransitionRatio Field Value float TransitionedStack The itemstack the collectible turns into upon transitioning. [DocumentAsJson] public JsonItemStack TransitionedStack Field Value JsonItemStack Type What kind of transition can it make? [DocumentAsJson] public EnumTransitionType Type Field Value EnumTransitionType Methods Clone() Duplicates the properties, which includes cloning the stack that was eaten. public TransitionableProperties Clone() Returns TransitionableProperties FromBytes(BinaryReader, IClassRegistryAPI) public void FromBytes(BinaryReader reader, IClassRegistryAPI instancer) Parameters reader BinaryReader instancer IClassRegistryAPI ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.Common.TrySpawnEntityDelegate.html": {
    "href": "api/Vintagestory.API.Common.TrySpawnEntityDelegate.html",
    "title": "Delegate TrySpawnEntityDelegate | VintageStory API",
    "keywords": "Delegate TrySpawnEntityDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate bool TrySpawnEntityDelegate(IBlockAccessor blockAccessor, ref EntityProperties properties, Vec3d spawnPosition, long herdId) Parameters blockAccessor IBlockAccessor properties EntityProperties spawnPosition Vec3d herdId long Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.TyronThreadPool.html": {
    "href": "api/Vintagestory.API.Common.TyronThreadPool.html",
    "title": "Class TyronThreadPool | VintageStory API",
    "keywords": "Class TyronThreadPool Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class TyronThreadPool Inheritance object TyronThreadPool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TyronThreadPool() public TyronThreadPool() Fields DedicatedThreads public ConcurrentDictionary<int, Thread> DedicatedThreads Field Value ConcurrentDictionary<int, Thread> Inst public static TyronThreadPool Inst Field Value TyronThreadPool Logger public ILogger Logger Field Value ILogger RunningTasks public ConcurrentDictionary<int, string> RunningTasks Field Value ConcurrentDictionary<int, string> Methods CreateDedicatedThread(ThreadStart, string) Use this to create any dedicated thread (by default, IsBackground is true, but that can be changed by calling code) This records the thread in the list of DedicatedThreads we maintain here, for stats purposes public static Thread CreateDedicatedThread(ThreadStart starter, string name) Parameters starter ThreadStart name string Returns Thread Dispose() public void Dispose() ListAllRunningTasks() public string ListAllRunningTasks() Returns string ListAllThreads() public string ListAllThreads() Returns string QueueLongDurationTask(Action) public static void QueueLongDurationTask(Action callback) Parameters callback Action QueueLongDurationTask(Action, string) public static void QueueLongDurationTask(Action callback, string caller) Parameters callback Action caller string QueueTask(Action) public static void QueueTask(Action callback) Parameters callback Action QueueTask(Action, string) public static void QueueTask(Action callback, string caller) Parameters callback Action caller string"
  },
  "api/Vintagestory.API.Common.UnparsedArg.html": {
    "href": "api/Vintagestory.API.Common.UnparsedArg.html",
    "title": "Class UnparsedArg | VintageStory API",
    "keywords": "Class UnparsedArg Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class UnparsedArg : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase UnparsedArg Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) ArgumentParserBase.PreProcess(TextCommandCallingArgs) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors UnparsedArg(string, params string[]) public UnparsedArg(string argName, params string[] validRange) Parameters argName string validRange string[] Methods GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.UpdateEntityDelegate.html": {
    "href": "api/Vintagestory.API.Common.UpdateEntityDelegate.html",
    "title": "Delegate UpdateEntityDelegate | VintageStory API",
    "keywords": "Delegate UpdateEntityDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void UpdateEntityDelegate(int chunkx, int chunky, int chunkz, int id) Parameters chunkx int chunky int chunkz int id int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.UseEntityDelegate.html": {
    "href": "api/Vintagestory.API.Common.UseEntityDelegate.html",
    "title": "Delegate UseEntityDelegate | VintageStory API",
    "keywords": "Delegate UseEntityDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void UseEntityDelegate(IServerPlayer byPlayer, int chunkx, int chunky, int chunkz, int id) Parameters byPlayer IServerPlayer chunkx int chunky int chunkz int id int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.Vec3iArgParser.html": {
    "href": "api/Vintagestory.API.Common.Vec3iArgParser.html",
    "title": "Class Vec3iArgParser | VintageStory API",
    "keywords": "Class Vec3iArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class Vec3iArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase Vec3iArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetValidRange(CmdArgs) ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec3iArgParser(string, ICoreAPI, bool) public Vec3iArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.VertexFlags.html": {
    "href": "api/Vintagestory.API.Common.VertexFlags.html",
    "title": "Class VertexFlags | VintageStory API",
    "keywords": "Class VertexFlags Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Special class to handle the vertex flagging in a very nicely compressed space. Bit 0-7: Glow level Bit 8-10: Z-Offset Bit 11: Reflective bit Bit 12: Lod 0 Bit Bit 13-24: X/Y/Z Normals Bit 25, 26, 27, 28: Wind mode Bit 29, 30, 31: Wind data (also sometimes used for other data, e.g. reflection mode if Reflective bit is set, or additional water surface data if this is a water block) Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class VertexFlags Inheritance object VertexFlags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"vertexFlagsByType\": { \"metalblock-new-*\": { \"reflective\": true, \"windDataByType\": { \"*-gold\": 1, \"*\": 1 } } }, Constructors VertexFlags() public VertexFlags() VertexFlags(int) public VertexFlags(int flags) Parameters flags int Fields ClearNormalBitMask public const int ClearNormalBitMask = -33546241 Field Value int ClearWindBitsMask public const int ClearWindBitsMask = 33554431 Field Value int ClearWindDataBitsMask public const int ClearWindDataBitsMask = 536870911 Field Value int ClearWindModeBitsMask public const int ClearWindModeBitsMask = -503316481 Field Value int ClearZOffsetMask public const int ClearZOffsetMask = -1793 Field Value int GlowLevelBitMask Bit 0..7 public const int GlowLevelBitMask = 255 Field Value int LiquidExposedToSkyBitMask public const int LiquidExposedToSkyBitMask = -2147483648 Field Value int LiquidFullAlphaBitMask public const int LiquidFullAlphaBitMask = 1073741824 Field Value int LiquidIsLavaBitMask public const int LiquidIsLavaBitMask = 134217728 Field Value int LiquidWeakFoamBitMask public const int LiquidWeakFoamBitMask = 268435456 Field Value int LiquidWeakWaveBitMask public const int LiquidWeakWaveBitMask = 536870912 Field Value int Lod0BitMask Bit 12 public const int Lod0BitMask = 4096 Field Value int NormalBitMask Bit 13..24 public const int NormalBitMask = 33546240 Field Value int NormalBitPos public const int NormalBitPos = 13 Field Value int ReflectiveBitMask Bit 11. Note if this is set to 1, then WindData has a different meaning, public const int ReflectiveBitMask = 2048 Field Value int WindBitsMask Bit 26..31 public const int WindBitsMask = -33554432 Field Value int WindDataBitsMask Bit 29..31 Note that WindData is sometimes used for other purposes if WindMode == 0, for example it can hold reflections data, see EnumReflectiveMode. Also worth noting that WindMode and WindData have totally different meanings for liquid water public const int WindDataBitsMask = -536870912 Field Value int WindDataBitsPos public const int WindDataBitsPos = 29 Field Value int WindModeBitsMask Bit 25..28 public const int WindModeBitsMask = 503316480 Field Value int WindModeBitsPos public const int WindModeBitsPos = 25 Field Value int ZOffsetBitMask Bit 8..10 public const int ZOffsetBitMask = 1792 Field Value int ZOffsetBitPos public const int ZOffsetBitPos = 8 Field Value int Properties All Sets all the vertex flags from one integer. [JsonProperty] public int All { get; set; } Property Value int GlowLevel [JsonProperty] public byte GlowLevel { get; set; } Property Value byte Lod0 [JsonProperty] public bool Lod0 { get; set; } Property Value bool Normal [JsonProperty] public short Normal { get; set; } Property Value short Reflective [JsonProperty] public bool Reflective { get; set; } Property Value bool WindData [JsonProperty] public byte WindData { get; set; } Property Value byte WindMode [JsonProperty] public EnumWindBitMode WindMode { get; set; } Property Value EnumWindBitMode ZOffset [JsonProperty] public byte ZOffset { get; set; } Property Value byte Methods Clone() Clones this set of vertex flags. public VertexFlags Clone() Returns VertexFlags PackNormal(double, double, double) Creates an already bit shifted normal public static int PackNormal(double x, double y, double z) Parameters x double y double z double Returns int PackNormal(Vec3d) Creates an already bit shifted normal public static int PackNormal(Vec3d normal) Parameters normal Vec3d Returns int PackNormal(Vec3f) Creates an already bit shifted normal public static int PackNormal(Vec3f normal) Parameters normal Vec3f Returns int PackNormal(Vec3i) Creates an already bit shifted normal public static int PackNormal(Vec3i normal) Parameters normal Vec3i Returns int ReplaceWindData(ref int, int) public static void ReplaceWindData(ref int flags, int windData) Parameters flags int windData int SetWindData(ref int, int) public static void SetWindData(ref int flags, int windData) Parameters flags int windData int SetWindMode(ref int, int) public static void SetWindMode(ref int flags, int windMode) Parameters flags int windMode int ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. UnpackNormal(int, double[]) public static void UnpackNormal(int vertexFlags, double[] intoDouble) Parameters vertexFlags int intoDouble double[] UnpackNormal(int, float[]) public static void UnpackNormal(int vertexFlags, float[] intoFloats) Parameters vertexFlags int intoFloats float[]"
  },
  "api/Vintagestory.API.Common.VtmlParser.ParseState.html": {
    "href": "api/Vintagestory.API.Common.VtmlParser.ParseState.html",
    "title": "Enum VtmlParser.ParseState | VintageStory API",
    "keywords": "Enum VtmlParser.ParseState Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public enum VtmlParser.ParseState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ParseKey = 2 ParseQuotedValue = 4 ParseTagName = 1 ParseValue = 5 SeekKey = 0 SeekValue = 3"
  },
  "api/Vintagestory.API.Common.VtmlParser.html": {
    "href": "api/Vintagestory.API.Common.VtmlParser.html",
    "title": "Class VtmlParser | VintageStory API",
    "keywords": "Class VtmlParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class VtmlParser Inheritance object VtmlParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Tokenize(ILogger, string) public static VtmlToken[] Tokenize(ILogger errorLogger, string vtml) Parameters errorLogger ILogger vtml string Returns VtmlToken[]"
  },
  "api/Vintagestory.API.Common.VtmlTagToken.html": {
    "href": "api/Vintagestory.API.Common.VtmlTagToken.html",
    "title": "Class VtmlTagToken | VintageStory API",
    "keywords": "Class VtmlTagToken Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class VtmlTagToken : VtmlToken Inheritance object VtmlToken VtmlTagToken Inherited Members VtmlToken.StartPosition object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Attributes Collection of attribute names and values for this tag public Dictionary<string, string> Attributes { get; set; } Property Value Dictionary<string, string> ChildElements public List<VtmlToken> ChildElements { get; set; } Property Value List<VtmlToken> ContentText public string ContentText { get; } Property Value string Name Name of this tag public string Name { get; set; } Property Value string"
  },
  "api/Vintagestory.API.Common.VtmlTextToken.html": {
    "href": "api/Vintagestory.API.Common.VtmlTextToken.html",
    "title": "Class VtmlTextToken | VintageStory API",
    "keywords": "Class VtmlTextToken Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class VtmlTextToken : VtmlToken Inheritance object VtmlToken VtmlTextToken Inherited Members VtmlToken.StartPosition object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Text public string Text Field Value string"
  },
  "api/Vintagestory.API.Common.VtmlToken.html": {
    "href": "api/Vintagestory.API.Common.VtmlToken.html",
    "title": "Class VtmlToken | VintageStory API",
    "keywords": "Class VtmlToken Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class VtmlToken Inheritance object VtmlToken Derived VtmlTagToken VtmlTextToken Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties StartPosition public int StartPosition { get; set; } Property Value int"
  },
  "api/Vintagestory.API.Common.VtmlUtil.html": {
    "href": "api/Vintagestory.API.Common.VtmlUtil.html",
    "title": "Class VtmlUtil | VintageStory API",
    "keywords": "Class VtmlUtil Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class VtmlUtil Inheritance object VtmlUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields TagConverters You can register your own tag converters here public static Dictionary<string, Tag2RichTextDelegate> TagConverters Field Value Dictionary<string, Tag2RichTextDelegate> Methods Richtextify(ICoreClientAPI, string, CairoFont, Action<LinkTextComponent>) public static RichTextComponentBase[] Richtextify(ICoreClientAPI capi, string vtmlCode, CairoFont baseFont, Action<LinkTextComponent> didClickLink = null) Parameters capi ICoreClientAPI vtmlCode string baseFont CairoFont didClickLink Action<LinkTextComponent> Returns RichTextComponentBase[] parseHexColor(string, out double[]) public static bool parseHexColor(string colorText, out double[] color) Parameters colorText string color double[] Returns bool toHexColor(double[]) public static string toHexColor(double[] color) Parameters color double[] Returns string"
  },
  "api/Vintagestory.API.Common.VtmlUtilApiAdditions.html": {
    "href": "api/Vintagestory.API.Common.VtmlUtilApiAdditions.html",
    "title": "Class VtmlUtilApiAdditions | VintageStory API",
    "keywords": "Class VtmlUtilApiAdditions Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public static class VtmlUtilApiAdditions Inheritance object VtmlUtilApiAdditions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterVtmlTagConverter(ICoreAPI, string, Tag2RichTextDelegate) public static void RegisterVtmlTagConverter(this ICoreAPI api, string tagName, Tag2RichTextDelegate converterHandler) Parameters api ICoreAPI tagName string converterHandler Tag2RichTextDelegate"
  },
  "api/Vintagestory.API.Common.WalkSpeedSupplierDelegate.html": {
    "href": "api/Vintagestory.API.Common.WalkSpeedSupplierDelegate.html",
    "title": "Delegate WalkSpeedSupplierDelegate | VintageStory API",
    "keywords": "Delegate WalkSpeedSupplierDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate double WalkSpeedSupplierDelegate() Returns double Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.WaterSplashParticles.html": {
    "href": "api/Vintagestory.API.Common.WaterSplashParticles.html",
    "title": "Class WaterSplashParticles | VintageStory API",
    "keywords": "Class WaterSplashParticles Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WaterSplashParticles : ParticlesProviderBase, IParticlePropertiesProvider Inheritance object ParticlesProviderBase WaterSplashParticles Implements IParticlePropertiesProvider Inherited Members ParticlesProviderBase.Async ParticlesProviderBase.Bounciness ParticlesProviderBase.RandomVelocityChange ParticlesProviderBase.DieOnRainHeightmap ParticlesProviderBase.DieInAir ParticlesProviderBase.RedEvolve ParticlesProviderBase.GreenEvolve ParticlesProviderBase.BlueEvolve ParticlesProviderBase.ParticleModel ParticlesProviderBase.VelocityEvolve ParticlesProviderBase.VertexFlags ParticlesProviderBase.SelfPropelled ParticlesProviderBase.TerrainCollision ParticlesProviderBase.ToBytes(BinaryWriter) ParticlesProviderBase.FromBytes(BinaryReader, IWorldAccessor) ParticlesProviderBase.SecondarySpawnInterval ParticlesProviderBase.SecondaryParticles ParticlesProviderBase.DeathParticles ParticlesProviderBase.BeginParticle() ParticlesProviderBase.PrepareForSecondarySpawn(ParticleBase) ParticlesProviderBase.Init(ICoreAPI) ParticlesProviderBase.ParentVelocity ParticlesProviderBase.WindAffected ParticlesProviderBase.ParentVelocityWeight ParticlesProviderBase.LightEmission object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AddPos public Vec3d AddPos Field Value Vec3d AddVelocity public Vec3f AddVelocity Field Value Vec3f BasePos public Vec3d BasePos Field Value Vec3d QuantityMul public float QuantityMul Field Value float Properties DieInLiquid Determines whether or not the particle dies in liquid public override bool DieInLiquid { get; } Property Value bool GravityEffect Gets the gravity effect on the particle. public override float GravityEffect { get; } Property Value float LifeLength gets the life length of the particle. public override float LifeLength { get; } Property Value float OpacityEvolve Gets the evolving opacity value of the particle. public override EvolvingNatFloat OpacityEvolve { get; } Property Value EvolvingNatFloat An evolving value based on opacity. Pos Gets the position of particles. public override Vec3d Pos { get; } Property Value Vec3d Quantity Gets the quantity of particles. public override float Quantity { get; } Property Value float Size gets the size of the particle. public override float Size { get; } Property Value float SizeEvolve gets the dynamic size of the particle. public override EvolvingNatFloat SizeEvolve { get; } Property Value EvolvingNatFloat SwimOnLiquid public override bool SwimOnLiquid { get; } Property Value bool Methods GetRgbaColor(ICoreClientAPI) Gets the color of the particle. public override int GetRgbaColor(ICoreClientAPI capi) Parameters capi ICoreClientAPI Returns int GetVelocity(Vec3d) Gets the velocity of the particles. public override Vec3f GetVelocity(Vec3d pos) Parameters pos Vec3d Returns Vec3f"
  },
  "api/Vintagestory.API.Common.WeightedSlot.html": {
    "href": "api/Vintagestory.API.Common.WeightedSlot.html",
    "title": "Class WeightedSlot | VintageStory API",
    "keywords": "Class WeightedSlot Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WeightedSlot Inheritance object WeightedSlot Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields slot The slot that is weighted. public ItemSlot slot Field Value ItemSlot weight The weight of the slot. public float weight Field Value float"
  },
  "api/Vintagestory.API.Common.WordArgParser.html": {
    "href": "api/Vintagestory.API.Common.WordArgParser.html",
    "title": "Class WordArgParser | VintageStory API",
    "keywords": "Class WordArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WordArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase WordArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WordArgParser(string, bool, string[]) public WordArgParser(string argName, bool isMandatoryArg, string[] suggestions = null) Parameters argName string isMandatoryArg bool suggestions string[] Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.WordRangeArgParser.html": {
    "href": "api/Vintagestory.API.Common.WordRangeArgParser.html",
    "title": "Class WordRangeArgParser | VintageStory API",
    "keywords": "Class WordRangeArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WordRangeArgParser : ArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase WordRangeArgParser Implements ICommandArgumentParser Inherited Members ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WordRangeArgParser(string, bool, params string[]) public WordRangeArgParser(string argName, bool isMandatoryArg, params string[] words) Parameters argName string isMandatoryArg bool words string[] Fields word protected string word Field Value string Methods GetSyntax() public override string GetSyntax() Returns string GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetSyntaxUnformatted() public override string GetSyntaxUnformatted() Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.WorldConfigurationAttribute.html": {
    "href": "api/Vintagestory.API.Common.WorldConfigurationAttribute.html",
    "title": "Class WorldConfigurationAttribute | VintageStory API",
    "keywords": "Class WorldConfigurationAttribute Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WorldConfigurationAttribute Inheritance object WorldConfigurationAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Alarm public double Alarm Field Value double Category public string Category Field Value string Code public string Code Field Value string DataType public EnumDataType DataType Field Value EnumDataType Default public string Default Field Value string DisplayUnit public decimal DisplayUnit Field Value decimal Max public double Max Field Value double Min public double Min Field Value double Multiplier public decimal Multiplier Field Value decimal Names public string[] Names Field Value string[] OnCustomizeScreen public bool OnCustomizeScreen Field Value bool OnlyDuringWorldCreate public bool OnlyDuringWorldCreate Field Value bool SkipValues public string[] SkipValues Field Value string[] Step public double Step Field Value double Values public string[] Values Field Value string[] Properties ModInfo [JsonIgnore] public ModInfo ModInfo { get; set; } Property Value ModInfo TypedDefault public object TypedDefault { get; } Property Value object Methods stringToValue(string) public object stringToValue(string text) Parameters text string Returns object valueToHumanReadable(string) public string valueToHumanReadable(string value) Parameters value string Returns string"
  },
  "api/Vintagestory.API.Common.WorldConfigurationValue.html": {
    "href": "api/Vintagestory.API.Common.WorldConfigurationValue.html",
    "title": "Class WorldConfigurationValue | VintageStory API",
    "keywords": "Class WorldConfigurationValue Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WorldConfigurationValue Inheritance object WorldConfigurationValue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Attribute public WorldConfigurationAttribute Attribute Field Value WorldConfigurationAttribute Code public string Code Field Value string Value public object Value Field Value object"
  },
  "api/Vintagestory.API.Common.WorldGenHookDelegate.html": {
    "href": "api/Vintagestory.API.Common.WorldGenHookDelegate.html",
    "title": "Delegate WorldGenHookDelegate | VintageStory API",
    "keywords": "Delegate WorldGenHookDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void WorldGenHookDelegate(IBlockAccessor blockAccessor, BlockPos pos, string param) Parameters blockAccessor IBlockAccessor pos BlockPos param string Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.WorldGenThreadDelegate.html": {
    "href": "api/Vintagestory.API.Common.WorldGenThreadDelegate.html",
    "title": "Delegate WorldGenThreadDelegate | VintageStory API",
    "keywords": "Delegate WorldGenThreadDelegate Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll public delegate void WorldGenThreadDelegate(IChunkProviderThread chunkProvider) Parameters chunkProvider IChunkProviderThread Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Common.WorldPosition2DArgParser.html": {
    "href": "api/Vintagestory.API.Common.WorldPosition2DArgParser.html",
    "title": "Class WorldPosition2DArgParser | VintageStory API",
    "keywords": "Class WorldPosition2DArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WorldPosition2DArgParser : PositionArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase PositionArgumentParserBase WorldPosition2DArgParser Implements ICommandArgumentParser Inherited Members PositionArgumentParserBase.tryGetPositionBySelector(char, TextCommandCallingArgs, ref Vec3d, ICoreAPI) ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetSyntaxExplanation(string) ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WorldPosition2DArgParser(string, ICoreAPI, bool) public WorldPosition2DArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.WorldPositionArgParser.html": {
    "href": "api/Vintagestory.API.Common.WorldPositionArgParser.html",
    "title": "Class WorldPositionArgParser | VintageStory API",
    "keywords": "Class WorldPositionArgParser Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub public class WorldPositionArgParser : PositionArgumentParserBase, ICommandArgumentParser Inheritance object ArgumentParserBase PositionArgumentParserBase WorldPositionArgParser Implements ICommandArgumentParser Inherited Members PositionArgumentParserBase.tryGetPositionBySelector(char, TextCommandCallingArgs, ref Vec3d, ICoreAPI) ArgumentParserBase.lastErrorMessage ArgumentParserBase.isMandatoryArg ArgumentParserBase.argCount ArgumentParserBase.argName ArgumentParserBase.LastErrorMessage ArgumentParserBase.ArgumentName ArgumentParserBase.IsMandatoryArg ArgumentParserBase.IsMissing ArgumentParserBase.ArgCount ArgumentParserBase.GetSyntax() ArgumentParserBase.GetSyntaxUnformatted() ArgumentParserBase.GetLastError() ArgumentParserBase.parseSubArgs(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WorldPositionArgParser(string, ICoreAPI, bool) public WorldPositionArgParser(string argName, ICoreAPI api, bool isMandatoryArg) Parameters argName string api ICoreAPI isMandatoryArg bool Methods GetSyntaxExplanation(string) public override string GetSyntaxExplanation(string indent) Parameters indent string Returns string GetValidRange(CmdArgs) public override string[] GetValidRange(CmdArgs args) Parameters args CmdArgs Returns string[] GetValue() public override object GetValue() Returns object PreProcess(TextCommandCallingArgs) public override void PreProcess(TextCommandCallingArgs args) Parameters args TextCommandCallingArgs SetValue(object) Used by the async system public override void SetValue(object data) Parameters data object TryProcess(TextCommandCallingArgs, Action<AsyncParseResults>) Parse the args. public override EnumParseResult TryProcess(TextCommandCallingArgs args, Action<AsyncParseResults> onReady = null) Parameters args TextCommandCallingArgs onReady Action<AsyncParseResults> Only needs to be called when returning Deferred as parseresult Returns EnumParseResult"
  },
  "api/Vintagestory.API.Common.WorldProperty-1.html": {
    "href": "api/Vintagestory.API.Common.WorldProperty-1.html",
    "title": "Class WorldProperty<T> | VintageStory API",
    "keywords": "Class WorldProperty<T> Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll [JsonObject(MemberSerialization.OptIn)] public class WorldProperty<T> Type Parameters T Inheritance object WorldProperty<T> Derived MetalProperty StandardWorldProperty Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code [JsonProperty] public AssetLocation Code Field Value AssetLocation Variants [JsonProperty] public T[] Variants Field Value T[]"
  },
  "api/Vintagestory.API.Common.WorldPropertyVariant.html": {
    "href": "api/Vintagestory.API.Common.WorldPropertyVariant.html",
    "title": "Class WorldPropertyVariant | VintageStory API",
    "keywords": "Class WorldPropertyVariant Namespace Vintagestory.API.Common Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class WorldPropertyVariant Inheritance object WorldPropertyVariant Derived MetalPropertyVariant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Code [JsonProperty] public AssetLocation Code Field Value AssetLocation"
  },
  "api/Vintagestory.API.Common.html": {
    "href": "api/Vintagestory.API.Common.html",
    "title": "Namespace Vintagestory.API.Common | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Common Classes ActiveSlotChangeEventArgs This contains data about an event that fires when a player changes which slot they're actively using. Such as the currently selected hotbar slot. Open in GitHub AdvancedParticleProperties Used to add a set of particle properties to a collectible. Open in GitHub AirBubbleParticles Open in GitHub AmbientModifier Open in GitHub AnimCacheEntry Open in GitHub AnimFrameCallback Open in GitHub AnimatableRenderer Open in GitHub Animation Represents a shape animation and can calculate the transformation matrices for each frame to be sent to the shader Process For each frame, for each root element, calculate the transformation matrix. Curent model matrix is identy mat. 1.1. Get previous and next key frame. Apply translation, rotation and scale to model matrix. 1.2. Store this matrix as animationmatrix in list 1.3. For each child element 1.3.1. Multiply local transformation matrix with the animation matrix. This matrix is now the curent model matrix. Go to 1 with child elements as root elems For each frame, for each joint 2.1. Calculate the inverse model matrix 2.2. Multiply stored animationmatrix with the inverse model matrix done Open in GitHub AnimationCache Open in GitHub AnimationFrame Open in GitHub AnimationJoint Open in GitHub AnimationKeyFrame Open in GitHub AnimationKeyFrameElement Open in GitHub AnimationManager Open in GitHub AnimationMetaData Animation Meta Data is a json type that controls how an animation should be played. Open in GitHub AnimationSound Open in GitHub AnimationTrigger Data about when an animation should be triggered. Open in GitHub AnimationUtil Open in GitHub AnimatorBase Syncs every frame with entity.ActiveAnimationsByAnimCode, starts, progresses and stops animations when necessary Open in GitHub ArgumentParserBase Open in GitHub AssetCategory Open in GitHub AssetLocation Defines a complete path to an assets, including it's domain. Open in GitHub AssetLocationAndSource Defines a complete path to an assets, including it's domain. Includes an extra Source field for debugging. Open in GitHub AssetLocationExtensions Open in GitHub AssetLocationJsonParser Open in GitHub AsyncParseResults Open in GitHub AttachmentPoint This is a spot on the shape that connects to another shape. Open in GitHub AttachmentPointAndPose Open in GitHub BagInventory The contents of one or more bags Open in GitHub BakedBitmap Open in GitHub BakingProperties Baking Properties are collectible attribute used for baking items in a clay oven. You will need to add these attributes if using Bake inside SmeltingType. Open in GitHub BitmapExternal Open in GitHub BitmapRef Open in GitHub Block Basic class for a placeable block Open in GitHub BlockBehavior Allows for definitions of behaviors of a block that can be applied to any block See the derived types for a list of all documented block behaviors. Open in GitHub BlockBreakingParticleProps Open in GitHub BlockBrokenParticleProps Open in GitHub BlockCropProperties Open in GitHub BlockCubeParticles Open in GitHub BlockDamage Open in GitHub BlockDropItemStack Represents an itemstack that is dropped when breaking a block, with a potentially random quantity. Open in GitHub BlockEntity Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents Open in GitHub BlockEntityBehavior Basic class for block entities - a data structures to hold custom information for blocks, e.g. for chests to hold it's contents Open in GitHub BlockEntityBehaviorType Allows adding behaviors for block entities. Remember, block entities are specific instances of blocks placed within the world. Open in GitHub BlockGeneric Open in GitHub BlockLayersAccess Constants used for GetBlock or GetBlockId calls throughout the engine, to guide whether the block should be read from the solid blocks layer, the fluids layer, or perhaps both. The game engine supports different block layers in 1.17+. Currently there is a solid blocks layer (e.g. terrain, loose stones, plants, reeds) and a fluid layer (e.g. still water, flowing water, lava, lake ice). Both layers can contain a block at the same position. Use the .Default value for getting blocks in the general case, use the .Solid/.Fluid value to read from the solid blocks or fluid layer specifically Open in GitHub BlockMaterialUtil Open in GitHub BlockOffsetAndNumber Open in GitHub BlockPatchAttributes Open in GitHub BlockSchematic Open in GitHub BlockSelection Contains all the information for a players block selection event Open in GitHub BlockSounds A set of sounds that are defined for a block. All fields use default or empty sounds if not set. Open in GitHub BlockUpdate Open in GitHub BoolArgParser Open in GitHub Caller Open in GitHub ChatCommand A base class for all chat commands. Open in GitHub ChatCommandComparer Open in GitHub ChatLine an internal control containing the properties of a chat message. Open in GitHub ClientAnimator Syncs every frame with entity.ActiveAnimationsByAnimCode, starts and stops animations when necessary and does recursive interpolation on the rotation, position and scale value for each frame, for each element and for each active element this produces always correctly blended animations but is significantly more costly for the cpu when compared to the technique used by the AnimatorBase. Open in GitHub ClientChatCommand A handle for creating client commands. Open in GitHub Climate Open in GitHub ClimateCondition Open in GitHub CmdArgs The arguments from a client or sever command Open in GitHub CollectibleArgParser Open in GitHub CollectibleBehavior A behavior object which can be added to any collectible. See the derived types for a list of documented collectible behaviors. Open in GitHub CollectibleObject Contains all properties shared by Blocks and Items Open in GitHub CollectibleParticleProperties Abstract class used for BlockVoxelParticles and ItemVoxelParticles Open in GitHub ColorArgParser Open in GitHub ColorMap Open in GitHub CombustibleProperties Marks an item as combustible, either by cooking, smelting or firing. This can either imply it is used as a fuel, or can be cooked into another object. Open in GitHub CommandArgumentParsers Open in GitHub CompositeShape Holds shape data to create 3D representations of objects. Also allows shapes to be overlayed on top of one another recursively. Open in GitHub CoralPlantConfig Open in GitHub CraftingRecipeIngredient A crafting recipe ingredient Open in GitHub CreativeInventoryTab Open in GitHub CreativeTabAndStackList Allows you to add a list of item stacks to put various into creative menu tabs. Open in GitHub CropBehavior Open in GitHub CrushingProperties Defines a set of properties that allow an object to be ground in a quern. Open in GitHub DamageSource Open in GitHub DatetimeArgParser Open in GitHub DecorFlags Open in GitHub DirectionArgParser<T> DoubleArgParser Open in GitHub DummyInventory A place holder inventory, useful, e.g., for when you want to render an itemstack and not have it spoil Open in GitHub DummyLoggerException Open in GitHub DummySlot A single slot not attached to a given inventory. Open in GitHub ElementPose The position of an element. Open in GitHub EntitiesArgParser Open in GitHub Entitlement Open in GitHub EntityAgent A goal-directed entity which observes and acts upon an environment Open in GitHub EntityBehaviorPassivePhysics Open in GitHub EntityChunky Open in GitHub EntityControls The available controls to move around a character in a game world Open in GitHub EntityCubeParticles Open in GitHub EntityFloatStats Open in GitHub EntityHeadController Open in GitHub EntityHumanoid Open in GitHub EntityItem Open in GitHub EntityItemSlot Open in GitHub EntityPlayer Open in GitHub EntitySelection Open in GitHub EntityStat<T> EntityStats Open in GitHub EntityTypeArgParser Open in GitHub EntityUpdate Open in GitHub EnumAppSideExtensions Open in GitHub EnumWindBitModeMask Windmode flags, which can be ORed with existing vertex data to add the specified wind mode (assuming it was 0 previously!) Open in GitHub ExplosionParticles A subclass of ExplosionSmokeParticles. Open in GitHub ExplosionSmokeParticles Handles the smoke particles of where the explosion was. Open in GitHub ExtraHandbookSection Open in GitHub FastParticlePool Open in GitHub FertilizerProps Open in GitHub FloatArgParser Open in GitHub FloatingSedimentParticles Open in GitHub FoodNutritionProperties Allows you to make collectibles edible, and adds data about their nutrition. Open in GitHub FrameProfilerUtil Open in GitHub GeneratedStructure Open in GitHub GridRecipe Represents a crafting recipe to be made on the crafting grid. Open in GitHub GridRecipeIngredient An ingredient for a grid recipe. Open in GitHub GrindingProperties Defines a set of properties that allow an object to be ground in a quern. Open in GitHub HeldSounds Defines a set of sounds for a collectible object. Open in GitHub HistoryState Open in GitHub IntArgParser Open in GitHub InventoryBase Basic class representing an item inventory Open in GitHub InventoryBasePlayer Abstract class used for all inventories that are \"on\" the player. Any inventory not inheriting from this class will not be stored to the savegame as part of the players inventory. Open in GitHub InventoryDisplayed A general purpose inventory which sends update packets to nearby players (used for rendering Display Case, Pulveriser, etc) Open in GitHub InventoryGeneric A general purpose inventory Open in GitHub InventoryPerPlayer Open in GitHub IsBlockArgParser Open in GitHub Item Represents an in game Item of Vintage Story Open in GitHub ItemClassMethods Open in GitHub ItemSlot The default item slot to item stacks Open in GitHub ItemSlotBackpack A slot that can hold mobile containers Open in GitHub ItemSlotBagContent Open in GitHub ItemSlotCharacter Open in GitHub ItemSlotCreative Open in GitHub ItemSlotOffhand A slot that only accepts collectibles designated for the off-hand slot Open in GitHub ItemSlotOutput A slot from which the player can only take stuff out of, but not place anything in it Open in GitHub ItemSlotPerPlayer Open in GitHub ItemSlotSkill Open in GitHub ItemSlotSurvival Standard survival mode slot that can hold everything except full backpacks Open in GitHub ItemSlotUniversal A universal item slot type that can hold anything. Open in GitHub ItemStack Open in GitHub ItemStackMergeOperation Open in GitHub ItemStackMoveOperation Open in GitHub JsonAttributesConverter Open in GitHub JsonItemStack This is a representation of an item stack in JSON. It resembles a standard in-game item stack but can be stored before the game is loaded. Open in GitHub JsonUtil Open in GitHub LandClaim Open in GitHub LayeredVoxelRecipe<T> Creates a recipe using a 3D voxel-based system. Used for recipes types such as clayforming, smithing, or stone-knapping. LoggerBase Base implementation for ILogger which implements all methods besides a new abstract method LogImpl(EnumLogType, string, params object[]). Open in GitHub LongArgParser Open in GitHub MetalProperty Open in GitHub MetalPropertyVariant Open in GitHub Mod Represents a mod in the mod manager. May contain zero to multiple ModSystem instances within it. Open in GitHub ModDependency Represents a mod dependency requirement of one mod for another. Open in GitHub ModDependencyAttribute Applied to a mod assembly multiple times for each required dependency. Superseded by this mod's \"modinfo.json\" file, if available. Open in GitHub ModInfo Meta data for a specific mod folder, archive, source file or assembly. Either loaded from a \"modinfo.json\" or from the assembly's ModInfoAttribute. Open in GitHub ModInfoAttribute Applied to a mod assembly to provide additional meta data information about a code mod. Superseded by \"modinfo.json\" file, if available. Open in GitHub ModSystem Base of a system, which is part of a code mod. Takes care of setting up, registering and handling all sorts of things. You may choose to split up a mod into multiple distinct systems if you so choose, but there may also be just one. Open in GitHub ModWorldConfiguration Open in GitHub ModelTransform Used for transformations applied to a block or item model. Uses values from ModelTransformNoDefaults but will assign defaults if not included. Open in GitHub ModelTransformKeyFrame A keyframe for model transformation. Open in GitHub ModelTransformNoDefaults Controls the transformations of 3D shapes. Note that defaults change depending on where this class is used. Open in GitHub MountableUtil Open in GitHub MouseButtonConverter Open in GitHub MultiblockStructure You can export one of these by making a selection with worldedit, looking at the center block (which should be your controller/master) then typing /we mgencode. Please note, air blocks are not exported Open in GitHub NoAnimationManager A No-Animation Manager built off of IAnimationManager. Open in GitHub NoAnimator A NoAnimator built off of IAnimator Open in GitHub OnlinePlayerArgParser Open in GitHub ParticleBase Represents a particle that has been spawned Open in GitHub ParticlesProviderBase A base class for all particle providers. Open in GitHub PermaFertilityBoost Open in GitHub PlayStyle Open in GitHub PlayerAnimationManager Open in GitHub PlayerGroupMembership Open in GitHub PlayerHeadController Open in GitHub PlayerRoleArgParser Open in GitHub PlayerSpawnPos Open in GitHub PlayerUidName Open in GitHub PlayersArgParser Open in GitHub PositionArgumentParserBase Open in GitHub PrivilegeArgParser Open in GitHub ProfileEntry Open in GitHub ProfileEntryRange Open in GitHub RecipeBase<T> Creates a new base recipe type. Almost all recipe types extend from this. RecipeRegistryBase Open in GitHub RecipeRegistryGeneric<T> RegistryObject A registerable object with variants, i.e. an item, a block or an entity Open in GitHub RunningAnimation Open in GitHub SQLiteDBConnection Open in GitHub SeatConfig Open in GitHub ServerAnimator Open in GitHub ServerChatCommand A handler for creating server commands. Open in GitHub Shape The base shape for all json objects. Open in GitHub ShapeElement A shape element built from JSON data within the model. Open in GitHub ShapeElementFace Open in GitHub ShapeElementWeights Open in GitHub SimpleParticleProperties A configurable implementation of IParticlePropertiesProvider Open in GitHub StackCubeParticles Open in GitHub StandardWorldProperty Open in GitHub StringArgParser Open in GitHub StrongBlockBehavior Same as block behavior but allows even more control over a block, such as the blocks collision boxes and world gen behavior. These are not part of default block behaviors for performance reasons. Requires the block to use the GenericBlock block class (or inherit from it) Open in GitHub SurfaceDrawImage Open in GitHub TextCommandCallingArgs Open in GitHub TextCommandResult Open in GitHub ThreadExtensions Open in GitHub TransitionState Open in GitHub TransitionableProperties This is a versatile way of allowing a collectible to change to another after a certain time in the inventory. Open in GitHub TyronThreadPool Open in GitHub UnparsedArg Open in GitHub Vec3iArgParser Open in GitHub VertexFlags Special class to handle the vertex flagging in a very nicely compressed space. Bit 0-7: Glow level Bit 8-10: Z-Offset Bit 11: Reflective bit Bit 12: Lod 0 Bit Bit 13-24: X/Y/Z Normals Bit 25, 26, 27, 28: Wind mode Bit 29, 30, 31: Wind data (also sometimes used for other data, e.g. reflection mode if Reflective bit is set, or additional water surface data if this is a water block) Open in GitHub VtmlParser Open in GitHub VtmlTagToken Open in GitHub VtmlTextToken Open in GitHub VtmlToken Open in GitHub VtmlUtil Open in GitHub VtmlUtilApiAdditions Open in GitHub WaterSplashParticles Open in GitHub WeightedSlot Open in GitHub WordArgParser Open in GitHub WordRangeArgParser Open in GitHub WorldConfigurationAttribute Open in GitHub WorldConfigurationValue Open in GitHub WorldPosition2DArgParser Open in GitHub WorldPositionArgParser Open in GitHub WorldPropertyVariant Open in GitHub WorldProperty<T> Structs DecorBits An actual instance of this struct is the 'faceAndSubposition' data. The struct also provides various static methods to convert elements to and from a PackedIndex used in WorldChunk storage DecorUpdate SolarSphericalCoords SourceStringComponents For performance, don't build and store new concatenated strings for every block variant, item and entity, when these will only be used (if ever) for error logging Interfaces IAmbientManager This is the system that manages the worlds ambient settings, such as fog color/density and clouds. The ambient manager basically blends ambientmodifiers on top of each other to generate the final ambient values. Blending is in order how the modifiers are held in CurrentModifiers in the likes of float weight = modifier.FogMin.Weight; BlendedFogMin = w * modifier.FogMin.Value + (1 - w) * BlendedFogMin; IAnimationManager Everything needed for allowing animations the Entity class holds a reference to an IAnimator. Currently implemented by ServerAnimator IAnimator IAsset Represents a loaded asset from the assets folder IAssetManager Takes care loading, reloading and managing all files inside the assets folder. All asset names and paths are always converted to lower case. IAssetOrigin IBitmap IBlockAccessor Provides read/write access to the blocks of a world IBlockAccessorPrefetch Useful for when you have to scan multiple times over the same set of blocks IBlockAccessorRevertable Provides read/write access to the blocks of a world. IBlockEntityContainer IBlockFlowing IBlockShapeSupplier Adds a tesselator to your block WARNING: please make sure whatever functions and fields you use with the OnTesselation event are THREAD SAFE! IBulkBlockAccessor Useful for setting many blocks at once efficiently IByteSerializable ICachingBlockAccessor IChatCommand IChatCommandApi IChunkBlocks IChunkLight IClaimTraverseable Implement this on a Block, BlockBehavior, BlockEntity or BlockEntityBehavior to allow it to be traversed for players with Traverse permissions to the land claim or if AllowUseEveryone or AllowTraverseEveryone is set. IClassRegistryAPI Interface for creating instances IClientChunk IClientGameCalendar ICollectibleDisplayable A collectible object that can be placed on the ground or on shelves or in display cases, but require custom code or rendering for it ICollectibleOnDisplayInteractable A collectible object that can be placed on the ground or on shelves or in display cases, but also can still accept interactions from the player ICombustible ICommandArgumentParser ICoreAPI Common API Components that are available on the server and the client. Cast to ICoreServerAPI or ICoreClientAPI to access side specific features. ICoreAPICommon API Methods common to the server and client IDrawYAdjustable Used for blocks (e.g. crops and dead crops) where the y-position might need to be adjusted at the time of tesselating an individual block IEntityPartitioning IEventAPI Events that are available on the server and the client IFarmlandBlockEntity IGameCalendar Main API for retrieving anything calender or astronomy related IGeometryTester Used for blocks (e.g. chiselled blocks) where the basic block geometry: AO shading, side opaque etc - depends on the individual block or blockEntity IHeldBag Bag is a non-placed block container, usually one that is attached to an entity IHeldHandAnimOverrider IInventory Basic interface representing an item inventory IInventoryNetworkUtil IItemStack Represents a stack of items or blocks ILandClaimAPI ILogger Interface to the client's and server's event, debug and error logging utilty. IMapChunk Holds 2 dimensional data for one chunk column IMapRegion 2D Map data for a 16x16 area of chunk columns. Holds a few maps for the chunk generation. IMaterialExchangeable IMiniDimension Provides read/write access to the blocks of a movable mini-dimension. IModLoader IMountable Represents something the player can mount. Usually a block or an entity. IMountableListener IMountableSeat Represents a seat of a mountable object. IMultiblockOffset Used to get the control / main block of a multiblock structure and to test for access right in land claims INetworkAPI IOwnedInventory IParticlePropertiesProvider Represents a provider of particle properties to be used when generating a particle IPlayer Represents a player IPlayerInventoryManager Let's you do various interesting things with the players inventory. IPlayerRole IRecipeBase<T> IRecipeIngredient IRecipeOutput IResolvableCollectible IRotatable Implement this interface if schematics containing this block entity needs to modify it's tree attribute data. Beware, this method is called without the block entity existing in the world (yet). The modified tree will then be used to actually create the block ISearchTextProvider IServerMapChunk ISkillItemRenderer ISlotProvider ITagRegistry On server side: blocks, items, entities tags and tags from preloaded-tags.json are registered after 'AssetsLoaded' and before 'AssetsFinalize' stages. On client side: all tags are received from server along side blocks, times, and entities, an available in 'AssetsFinalize' stage. Tags can be converted to tag array or tag id as soon as it is registered. Tags can be registered only on server side no later than 'AssetsFinalize' stage. ITextureLocationDictionary ITimedDespawn IVariableSeatsMountable IWearableShapeSupplier IWithDrawnHeight Used for blocks (e.g. tallgrass and flowers) where the drawnHeight is set in attributes IWorldAccessor Important interface to access the game world. IWorldChunk IWorldPlayerData Some world-specific information about a connected player. If you want modify any value, also broadcast the playerdata to all connected clients. This is the object that stored and loaded with the save game IXPlatformInterface The platform interface for various controls. Used by the game to handle various properties. Enums EntityAgent.EntityClientPacketId EntityAgent.EntityServerPacketId EnumAICreatureType Types of creatures used for pathfinding. Humanoids prefer taking paths. Open in GitHub EnumAnimationBlendMode Defines how multiple animations should be blended together. Open in GitHub EnumAppSide A server/client side used by for the Vintage Story app. Open in GitHub EnumBlastType Open in GitHub EnumBlockAccessFlags Open in GitHub EnumBlockMaterial Materials of which a block may be made of. Currently only used for mining speed for tools and blast resistance. Open in GitHub EnumCallerType Open in GitHub EnumCharacterDressType Open in GitHub EnumChatType A definition for the types of chat that could occur. Open in GitHub EnumChunkDirtyReason Open in GitHub EnumClaimError Open in GitHub EnumCommandStatus Open in GitHub EnumDamageOverTimeEffectType Open in GitHub EnumDamageSource Open in GitHub EnumDamageType Open in GitHub EnumDataType Open in GitHub EnumDeathCause Open in GitHub EnumDespawnReason Open in GitHub EnumEntityAction A players in-world action Open in GitHub EnumEntityActivityStoppedHandling Open in GitHub EnumEntityAnimationEndHandling Open in GitHub EnumEntityState Open in GitHub EnumFoodCategory Types of nutrition for foods. Open in GitHub EnumFreeMovAxisLock Open in GitHub EnumGameMode A players game mode Open in GitHub EnumGetClimateMode The type of climate values you wish to receive Open in GitHub EnumHabitat Habitats for entities. Controls some minor logic for entities. Open in GitHub EnumHand Open in GitHub EnumHandHandling How the engine should handle attacking with an item in hands Open in GitHub EnumHandInteract Open in GitHub EnumHandling Tells the engine how to handle default or subsequent similar behaviors Open in GitHub EnumHemisphere Open in GitHub EnumHighlightShape Open in GitHub EnumHighlightSlot Open in GitHub EnumInteractMode Open in GitHub EnumItemClass The type of collectible in an itemstack. Open in GitHub EnumItemDamageSource Types for how an item can damage it's durability. Open in GitHub EnumItemStorageFlags Determines the kinds of storage types the item can be put into Open in GitHub EnumItemUseCancelReason Open in GitHub EnumLightLevelType Used in blockAccessor.GetLightLevel() to determine what kind of light level you want Open in GitHub EnumLogType Open in GitHub EnumMatterState Various states of matter to use for collectibles. Open in GitHub EnumMergePriority Open in GitHub EnumModSourceType Represents the origin file type of the mod. Open in GitHub EnumModType Describes the type of a mod. Allows easy recognition and limiting of what any particular mod can do. Open in GitHub EnumModifierKey Open in GitHub EnumMonth Open in GitHub EnumMoonPhase Open in GitHub EnumMountAngleMode Open in GitHub EnumMouseButton A list of mouse buttons. Open in GitHub EnumOrigin Open in GitHub EnumOwnerType Open in GitHub EnumParseResult Open in GitHub EnumParseResultStatus Open in GitHub EnumParticleModel Types of model for a particle. Open in GitHub EnumPlayerAccessResult Open in GitHub EnumPlayerGroupMemberShip Open in GitHub EnumPlayerJoinBehavior Open in GitHub EnumRandomizeAxes When picking a random seed for this block, what axes should we base it on? Open in GitHub EnumReflectiveMode On the graphics card we have only one reflective bit, but we can store the mode in the wind data bits Open in GitHub EnumReplaceMode Open in GitHub EnumRetentionType Open in GitHub EnumSeason Open in GitHub EnumShapeFormat Types of shape that can be loaded by the game. Open in GitHub EnumSmeltType The type of smelting for the collectible. This effects how the object is smelted. Open in GitHub EnumSoilNutrient The three types of soil nutrient for farmland and crops. Open in GitHub EnumSpecialKey Open in GitHub EnumStatBlendType Open in GitHub EnumTokenType Open in GitHub EnumTool Types for each tool in the game. Some of these are unused. Open in GitHub EnumTransitionType Types of transition for items. Open in GitHub EnumWindBitMode Open in GitHub EnumWorldAccessResponse Open in GitHub VtmlParser.ParseState Delegates ActionBoolReturn Return true if the action/event was successfull ActionBoolReturn<T> Returns true if the action/event was successfull. ActionBoolReturn<T1, T2> Returns true if the action/event was successfull. ActionBoolReturn<T1, T2, T3> Returns true if the action/event was successfull. ActionBoolReturn<T1, T2, T3, T4> Returns true if the action/event was successfull. ActionConsumable Return true if the action/event should be \"consumed\" (e.g. mark a mouse click as handled) ActionConsumable<T> Return true if the action/event should be \"consumed\" (e.g. mark a mouse click as handled) ActionConsumable<T1, T2> Return true if the action/event should be \"consumed\" (e.g. mark a mouse click as handled) BlockBehaviorDelegate BlockBreakDelegate BlockBrokenDelegate BlockPlacedDelegate BlockUsedDelegate CanPlaceOrBreakDelegate Test if a player has the privilege to modify a block at given block selection CanSpawnNearbyDelegate CanUseDelegate ChunkColumnBeginLoadChunkThread Triggered immediately when the server loads a chunk column from disk or generates a new one, in the SupplyChunks thread (not the main thread) ChunkColumnGenerationDelegate ChunkColumnLoadedDelegate Triggered when the server loaded a chunk column from disk or generated a new one ChunkColumnUnloadDelegate Triggered just before a chunk column gets unloaded ChunkDirtyDelegate For handling dirty chunks ClientChatCommandDelegate CollectibleBehaviorDelegate CommandPreconditionDelegate CustomGetTransitionSpeedMulDelegate Custom transition speed handler DialogClickDelegate The delegate for a dialogue click. EntityDeathDelegate EntityDelegate EntityDespawnDelegate EntityMountDelegate EventBusListenerDelegate For handling events on the event bus FastParticlePool.CreateParticleDelegate Func<T1, TResult> Func<T1, T2, TResult> Func<T1, T2, T3, TResult> Func<T1, T2, T3, T4, TResult> Func<T1, T2, T3, T4, T5, T6, T7, TResult> GetAutoPullFromSlotDelegate GetAutoPushIntoSlotDelegate GetLatitudeDelegate GetMountableDelegate This method needs to find your mountable based on the tree attribute data, which you can write to in IMountable.MountableToTreeAttributes() For example if its an entity, you will want to store the entity id, then this method can simply contain return world.GetEntityById(tree.GetLong(\"entityId\")); GetSuitabilityDelegate HemisphereDelegate HitEntityDelegate LogEntryDelegate MapChunkGeneratorDelegate MapRegionGeneratorDelegate MapRegionLoadedDelegate Triggered when the server loaded a map region from disk or generated a new one MapRegionUnloadDelegate Triggered just before a map region gets unloaded MatchGridRecipeDelegate NewSlotDelegate OnCommandDelegate OnEntityAction OnGetClimateDelegate OnGetWindSpeedDelegate OnInteractDelegate OnInventoryClosedDelegate OnInventoryOpenedDelegate OnInventorySlot Return false to stop walking the inventory PlaceBlockDelegate PlayerChatDelegate When the player wrote a chat message. Set consumed.value to true to prevent further processing of this chat message PlayerCommonDelegate PlayerDeathDelegate When the player died, this delegate will fire. PlayerDelegate PositionMismatchDelegate PositionProviderDelegate ResumeServerDelegate SelectedHotbarSlotDelegate ServerChatCommandDelegate SolarSphericalCoordsDelegate Should return sin(solar altitude angle). i.e. -1 for 90 degrees far below horizon, 0 for horizon and 1 for vertical StartAnimationDelegate SuspendServerDelegate Tag2RichTextDelegate A tag parser TestBlockAccessClaimDelegate TestBlockAccessDelegate TrySpawnEntityDelegate UpdateEntityDelegate UseEntityDelegate WalkSpeedSupplierDelegate WorldGenHookDelegate WorldGenThreadDelegate"
  },
  "api/Vintagestory.API.Config.Dimensions.html": {
    "href": "api/Vintagestory.API.Config.Dimensions.html",
    "title": "Class Dimensions | VintageStory API",
    "keywords": "Class Dimensions Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Open in GitHub public class Dimensions Inheritance object Dimensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AltWorld The dimension dedicated for storage of blocks in an timeswitched alt-world, such as the Devastation public const int AltWorld = 2 Field Value int BlocksPreviewSubDimension_Client The subdimension Id, within the MiniDimensions system, for the World Edit Blocks Preview dimension. Accessed client-side only public static int BlocksPreviewSubDimension_Client Field Value int MiniDimensions The dimension dedicated for storage of 'mini-dimensions', i.e. many separate 16k cubes of block space used for WorldEdit preview, vehicles etc public const int MiniDimensions = 1 Field Value int NormalWorld Used to make explicit all places in the code where the default dimension, dimension 0, is assumed, in case we need to search and replace them later public const int NormalWorld = 0 Field Value int subDimensionIndexZMultiplier public const int subDimensionIndexZMultiplier = 4096 Field Value int subDimensionSize This represents the XZ size of mini-dimensions (individual BlockAccessorMovables) within an overall dimension - we can pack 16 million of these into one dimension, which should be enough! public const int subDimensionSize = 16384 Field Value int Methods ShouldNotTick(EntityPos, ICoreAPI) Indicates whether a given BlockPos should not be ticked due to being in an unusual dimension, such as the preview minidimension public static bool ShouldNotTick(EntityPos pos, ICoreAPI api) Parameters pos EntityPos api ICoreAPI Returns bool ShouldNotTick(BlockPos, ICoreAPI) Indicates whether a given BlockPos should not be ticked due to being in an unusual dimension, such as the preview minidimension public static bool ShouldNotTick(BlockPos pos, ICoreAPI api) Parameters pos BlockPos api ICoreAPI Returns bool SubDimensionIdForPos(int, int) public static int SubDimensionIdForPos(int posX, int posZ) Parameters posX int posZ int Returns int"
  },
  "api/Vintagestory.API.Config.EnumGameBranch.html": {
    "href": "api/Vintagestory.API.Config.EnumGameBranch.html",
    "title": "Enum EnumGameBranch | VintageStory API",
    "keywords": "Enum EnumGameBranch Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Current branch of the game Open in GitHub public enum EnumGameBranch Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Stable = 0 Unstable = 1"
  },
  "api/Vintagestory.API.Config.EnumReleaseType.html": {
    "href": "api/Vintagestory.API.Config.EnumReleaseType.html",
    "title": "Enum EnumReleaseType | VintageStory API",
    "keywords": "Enum EnumReleaseType Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Open in GitHub public enum EnumReleaseType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Candidate = 1 Development = 3 Preview = 2 Stable = 0"
  },
  "api/Vintagestory.API.Config.FoodSpoilageCalcDelegate.html": {
    "href": "api/Vintagestory.API.Config.FoodSpoilageCalcDelegate.html",
    "title": "Delegate FoodSpoilageCalcDelegate | VintageStory API",
    "keywords": "Delegate FoodSpoilageCalcDelegate Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll public delegate float FoodSpoilageCalcDelegate(float spoilState, ItemStack stack, EntityAgent byEntity) Parameters spoilState float stack ItemStack byEntity EntityAgent Returns float Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Config.GamePaths.html": {
    "href": "api/Vintagestory.API.Config.GamePaths.html",
    "title": "Class GamePaths | VintageStory API",
    "keywords": "Class GamePaths Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Open in GitHub public static class GamePaths Inheritance object GamePaths Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AllowedNameChars public static string AllowedNameChars Field Value string CustomLogPath public static string CustomLogPath Field Value string DataPath public static string DataPath Field Value string DefaultSaveFilenameWithoutExtension public static string DefaultSaveFilenameWithoutExtension Field Value string Properties AssetsPath public static string AssetsPath { get; } Property Value string BackupSaves public static string BackupSaves { get; } Property Value string Backups public static string Backups { get; } Property Value string Binaries public static string Binaries { get; } Property Value string BinariesMods public static string BinariesMods { get; } Property Value string Cache public static string Cache { get; } Property Value string Config public static string Config { get; } Property Value string DataPathMods public static string DataPathMods { get; } Property Value string DataPathServerMods public static string DataPathServerMods { get; } Property Value string Logs public static string Logs { get; } Property Value string Macros public static string Macros { get; } Property Value string ModConfig public static string ModConfig { get; } Property Value string OldSaves public static string OldSaves { get; } Property Value string PlayerData public static string PlayerData { get; } Property Value string Saves public static string Saves { get; } Property Value string Screenshots public static string Screenshots { get; } Property Value string Videos public static string Videos { get; } Property Value string Methods EnsurePathExists(string) public static void EnsurePathExists(string path) Parameters path string EnsurePathsExist() public static void EnsurePathsExist() IsValidName(string) public static bool IsValidName(string s) Parameters s string Returns bool ReplaceInvalidChars(string) public static string ReplaceInvalidChars(string filename) Parameters filename string Returns string"
  },
  "api/Vintagestory.API.Config.GameVersion.html": {
    "href": "api/Vintagestory.API.Config.GameVersion.html",
    "title": "Class GameVersion | VintageStory API",
    "keywords": "Class GameVersion Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll The games current version Open in GitHub public static class GameVersion Inheritance object GameVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields APIVersion Version of the Mod API public const string APIVersion = \"1.21.0\" Field Value string AssemblyVersion Assembly Info Version number in the format: major.minor.revision public const string AssemblyVersion = \"1.0.0.0\" Field Value string BlockItemMappingVersion \"Version\" of the block and item mapping. This number gets increased by 1 when remappings are needed public static int BlockItemMappingVersion Field Value int Branch Whether this is a stable or unstable version public const EnumGameBranch Branch = Unstable Field Value EnumGameBranch ChunkdataVersion Version of the chunkdata compression for individual WorldChunks (0 is Deflate; 1 is ZSTD and palettised) Also affects compression of network packets sent public const int ChunkdataVersion = 2 Field Value int CopyRight Copyright notice public const string CopyRight = \"Copyright © 2016-2024 Anego Studios\" Field Value string DatabaseVersion Version of the savegame database public static int DatabaseVersion Field Value int LongGameVersion Version number in the format: major.minor.revision [release title] public static string LongGameVersion Field Value string NetworkVersion Version of the Network Protocol public const string NetworkVersion = \"1.21.6\" Field Value string OverallVersion Assembly Info Version number in the format: major.minor.revision public const string OverallVersion = \"1.21.0\" Field Value string ShortGameVersion Version number in the format: major.minor.revision[appendix] public const string ShortGameVersion = \"1.21.0-rc.3\" Field Value string WorldGenVersion Version of the world generator - a change in version will insert a smoothed chunk between old and new version public const int WorldGenVersion = 3 Field Value int Properties ReleaseType public static EnumReleaseType ReleaseType { get; } Property Value EnumReleaseType Methods EnsureEqualVersionOrKillExecutable(ICoreAPI, string, string, string) public static void EnsureEqualVersionOrKillExecutable(ICoreAPI api, string version, string reference, string modName) Parameters api ICoreAPI version string reference string modName string GetReleaseType(string) public static EnumReleaseType GetReleaseType(string version) Parameters version string Returns EnumReleaseType IsAtLeastVersion(string) Returns true if supplied version is the same or higher as the current version public static bool IsAtLeastVersion(string version) Parameters version string Returns bool IsAtLeastVersion(string, string) Returns true if supplied version is the same or higher as the reference version public static bool IsAtLeastVersion(string version, string reference) Parameters version string reference string Returns bool IsCompatibleApiVersion(string) Returns true if given version has the same major and minor version. Ignores revision. public static bool IsCompatibleApiVersion(string version) Parameters version string Returns bool IsCompatibleNetworkVersion(string) Returns true if given version has the same major and minor version. Ignores revision. public static bool IsCompatibleNetworkVersion(string version) Parameters version string Returns bool IsLowerVersionThan(string, string) public static bool IsLowerVersionThan(string version, string reference) Parameters version string reference string Returns bool IsNewerVersionThan(string, string) Returns true if supplied version is the higher as the reference version public static bool IsNewerVersionThan(string version, string reference) Parameters version string reference string Returns bool SplitVersionString(string) public static int[] SplitVersionString(string version) Parameters version string Returns int[]"
  },
  "api/Vintagestory.API.Config.GlobalConstants.html": {
    "href": "api/Vintagestory.API.Config.GlobalConstants.html",
    "title": "Class GlobalConstants | VintageStory API",
    "keywords": "Class GlobalConstants Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Contains some global constants and static values Open in GitHub public class GlobalConstants Inheritance object GlobalConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AirDragAlways Multiplier applied to entity motion while on the ground or in air public static float AirDragAlways Field Value float AirDragFlying Multiplier applied to entity motion while flying (creative mode) public static float AirDragFlying Field Value float AllChatGroups Special channel key typically to reply a Command inside the same the channel the player sent it public static int AllChatGroups Field Value int AllowedChatGroupChars Allowed characters for a player group name public static string AllowedChatGroupChars Field Value string BaseJumpForce Multiplier applied to the players jump motion public static float BaseJumpForce Field Value float BaseMoveSpeed Multiplier applied to the players movement motion public static float BaseMoveSpeed Field Value float CaveArtColsPerRow public static int CaveArtColsPerRow Field Value int ChunkSize Now a hard-coded constant public const int ChunkSize = 32 Field Value int ConsoleGroup Special channel key for message sent via server console public static int ConsoleGroup Field Value int CreatureDamageModifier Global modifier to change the damage melee attacks from creatures inflict. Can be changed during run-time. The value is multiplied to the normal damage value (default: 1) public static float CreatureDamageModifier Field Value float CurrentChatGroup Special channel key typically to reply a Command inside the same the channel the player sent it public static int CurrentChatGroup Field Value int CurrentDistanceToRainfallClient Set by the SystemPlayerEnvAwarenessTracker System in the engine at the players position, once every second. 12 horizontal, 4 vertical search distance public static float CurrentDistanceToRainfallClient Field Value float CurrentNearbyRelLeavesCountClient Set by the game client at the players position public static float CurrentNearbyRelLeavesCountClient Field Value float CurrentSurfaceWindSpeedClient public static Vec3f CurrentSurfaceWindSpeedClient Field Value Vec3f CurrentWindSpeedClient Set by the WeatherSimulation System in the survival mod at the players position public static Vec3f CurrentWindSpeedClient Field Value Vec3f DamageLogChatGroup Channel name for the damage chat log public static int DamageLogChatGroup Field Value int DefaultAttackRange Attack range when using hands public static float DefaultAttackRange Field Value float DefaultChatGroups public static int[] DefaultChatGroups Field Value int[] DefaultCultureInfo public static CultureInfo DefaultCultureInfo Field Value CultureInfo DefaultDomain Prefix for all default asset locations public const string DefaultDomain = \"game\" Field Value string DefaultPickingRange Range in blocks a player can interact with blocks (break, use, place) public static float DefaultPickingRange Field Value float DefaultSimulationRange Range in blocks at where this entity is simulated on the server (MagicNum.cs sets this value) public static int DefaultSimulationRange Field Value int DimensionSizeInChunks Used in various places if the dimension of a chunk is combined into the chunk's y value. public const int DimensionSizeInChunks = 1024 Field Value int EntityBlockFallingTypeCode The entity class used when spawning falling blocks public static AssetLocation EntityBlockFallingTypeCode Field Value AssetLocation EntityItemTypeCode The entity class used when spawning items in the world public static AssetLocation EntityItemTypeCode Field Value AssetLocation EntityPlayerTypeCode The entity class used when spawning players public static AssetLocation EntityPlayerTypeCode Field Value AssetLocation GeneralChatGroup Channel name for the general chat public static int GeneralChatGroup Field Value int GravityPerSecond Amount of gravity per tick applied to all entities affected by gravity public static float GravityPerSecond Field Value float GravityStrengthParticle A multiplier applied to the y motion of all particles affected by gravity. public static float GravityStrengthParticle Field Value float GuiGearRotJitter public static float GuiGearRotJitter Field Value float HungerSpeedModifier Global modifier to change the rate of player hunger. Can be changed during run-time. The value is multiplied to the normal spoilage rate (default: 1) public static float HungerSpeedModifier Field Value float IgnoredStackAttributes Default Itemstack attributes that should always be ignored during a stack.Collectible.Equals() comparison public static string[] IgnoredStackAttributes Field Value string[] InfoLogChatGroup Channel name for the info chat log public static int InfoLogChatGroup Field Value int MaxAnimatedElements Max. amount of \"bones\" for animated model. Limited by max amount of shader uniforms of around 60, but depends on the gfx card This value is overriden by ClientSettings.cs public static int MaxAnimatedElements Field Value int MaxColorMaps Max. amount of \"bones\" for color maps. Limited by max amount of shader uniforms, but depends on the gfx card public const int MaxColorMaps = 40 Field Value int MaxPhysicsIntervalInSlowTicks Limits the amount of world time that can be simulated by the physics engine if the server is ticking slowly: if ticks are slower than this, entities will seem to slow down (viewed on client might even jump backwards) Recommended range 0.1f to 0.4f public static float MaxPhysicsIntervalInSlowTicks Field Value float MaxViewDistanceForLodBiases public const int MaxViewDistanceForLodBiases = 640 Field Value int MaxWorldSizeXZ Hard-enforced world size limit, above this the code may break public const int MaxWorldSizeXZ = 67108864 Field Value int MaxWorldSizeY Hard-enforced world height limit, above this the code may break. public const int MaxWorldSizeY = 16384 Field Value int MeltingFreezingEnabled Set by the weather simulation system to determine if snowed variants of blocks should melt. Used a static var to improve performance and reduce memory usage public static bool MeltingFreezingEnabled Field Value bool OverallSpeedMultiplier Multiplied to all motions and animation speeds public static float OverallSpeedMultiplier Field Value float PerishSpeedModifier Global modifier to change the spoil rate of foods. Can be changed during run-time. The value is multiplied to the normal spoilage rate (default: 1) public static float PerishSpeedModifier Field Value float PhysicsFrameTime Frame time for physics simulation public static float PhysicsFrameTime Field Value float ReservedCharacterSequences These reserved characters or sequences should not be used in texture filenames or asset locations, they can mess up the BakedTexture system public static string[] ReservedCharacterSequences Field Value string[] ServerInfoChatGroup Channel name for the general chat public static int ServerInfoChatGroup Field Value int SinglePlayerEntitlements Bit of a helper thing for single player servers to display the correct entitlements public static string SinglePlayerEntitlements Field Value string SneakSpeedMultiplier Multiplier applied to the players sneaking motion public static float SneakSpeedMultiplier Field Value float SprintSpeedMultiplier Multiplier applied to the players sprinting motion public static double SprintSpeedMultiplier Field Value double TimeToDespawnPlayerInventoryDrops Time in seconds for dropped items to remain when dropped after player death; overrides the despawn time set in item.json public static int TimeToDespawnPlayerInventoryDrops Field Value int ToolMiningSpeedModifier Global modifier to change the block breaking speed of all tools. Can be changed during run-time. The value is multiplied to the breaking speed (default: 1) public static float ToolMiningSpeedModifier Field Value float WaterDrag Multiplier applied to entity motion while walking in water public static float WaterDrag Field Value float WorldSaveExtension public const string WorldSaveExtension = \".vcdbs\" Field Value string backpackInvClassName public const string backpackInvClassName = \"backpack\" Field Value string characterInvClassName public const string characterInvClassName = \"character\" Field Value string craftingInvClassName public const string craftingInvClassName = \"craftinggrid\" Field Value string creativeInvClassName public const string creativeInvClassName = \"creative\" Field Value string groundInvClassName public const string groundInvClassName = \"ground\" Field Value string hotBarInvClassName public const string hotBarInvClassName = \"hotbar\" Field Value string mousecursorInvClassName public const string mousecursorInvClassName = \"mouse\" Field Value string playerColorByEntitlement public static Dictionary<string, double[]> playerColorByEntitlement Field Value Dictionary<string, double[]> playerTagBackgroundByEntitlement public static Dictionary<string, TextBackground> playerTagBackgroundByEntitlement Field Value Dictionary<string, TextBackground> Properties FoodSpoilHealthLossMulHandler public static FoodSpoilageCalcDelegate FoodSpoilHealthLossMulHandler { get; } Property Value FoodSpoilageCalcDelegate FoodSpoilSatLossMulHandler public static FoodSpoilageCalcDelegate FoodSpoilSatLossMulHandler { get; } Property Value FoodSpoilageCalcDelegate Methods FoodSpoilageHealthLossMul(float, ItemStack, EntityAgent) public static float FoodSpoilageHealthLossMul(float spoilState, ItemStack stack, EntityAgent byEntity) Parameters spoilState float stack ItemStack byEntity EntityAgent Returns float FoodSpoilageSatLossMul(float, ItemStack, EntityAgent) public static float FoodSpoilageSatLossMul(float spoilState, ItemStack stack, EntityAgent byEntity) Parameters spoilState float stack ItemStack byEntity EntityAgent Returns float OutsideWorld(double, double, double, IBlockAccessor) Returns true if the player fell out of the world (which is map boundaries + 30 blocks in every direction) public static bool OutsideWorld(double x, double y, double z, IBlockAccessor blockAccessor) Parameters x double y double z double blockAccessor IBlockAccessor Returns bool OutsideWorld(int, int, int, IBlockAccessor) Returns true if the player fell out of the world (which is map boundaries + 30 blocks in every direction) public static bool OutsideWorld(int x, int y, int z, IBlockAccessor blockAccessor) Parameters x int y int z int blockAccessor IBlockAccessor Returns bool"
  },
  "api/Vintagestory.API.Config.ITranslationService.html": {
    "href": "api/Vintagestory.API.Config.ITranslationService.html",
    "title": "Interface ITranslationService | VintageStory API",
    "keywords": "Interface ITranslationService Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Represents a service, which provides access to translated strings, based on key/value pairs read from JSON files. public interface ITranslationService Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties LanguageCode Gets the language code that this translation service caters for. string LanguageCode { get; } Property Value string A string, that contains the language code that this translation service caters for. LineBreakBehavior EnumLinebreakBehavior LineBreakBehavior { get; } Property Value EnumLinebreakBehavior Methods Get(string, params object[]) Gets a translation for a given key. string Get(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key if no results are found; otherwise returns the pre-formatted, translated value. GetAllEntries() Retrieves a list of all translation entries within the cache. IDictionary<string, string> GetAllEntries() Returns IDictionary<string, string> A dictionary of localisation entries. GetIfExists(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. string GetIfExists(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns null if no results are found; otherwise returns the pre-formatted, translated value. GetMatching(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. string GetMatching(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key if no results are found; otherwise returns the pre-formatted, translated value. GetMatchingIfExists(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. string GetMatchingIfExists(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns null if no results are found; otherwise returns the pre-formatted, translated value. GetUnformatted(string) Gets the raw, unformatted translated value for the key provided. string GetUnformatted(string key) Parameters key string The key. Returns string Returns the key if no results are found; otherwise returns the unformatted, translated value. HasTranslation(string, bool) Determines whether the specified key has a translation. bool HasTranslation(string key, bool findWildcarded = true) Parameters key string The key. findWildcarded bool if set to true, the scan will include any wildcarded values. Returns bool true if the specified key has a translation; otherwise, false. HasTranslation(string, bool, bool) Determines whether the specified key has a translation. bool HasTranslation(string key, bool findWildcarded, bool logErrors) Parameters key string The key. findWildcarded bool if set to true, the scan will include any wildcarded values. logErrors bool if set to true, will add \"Lang key not found\" logging Returns bool true if the specified key has a translation; otherwise, false. InitialiseSearch() Used to compile the regexes, to save time on the first 'actual' wildcard search - saves about 300ms void InitialiseSearch() Invalidate() Sets the loaded flag to false, so that the next lookup causes it to reload all translation entries void Invalidate() Load(bool) Loads translation key/value pairs from all relevant JSON files within the Asset Manager. void Load(bool lazyload = false) Parameters lazyload bool PreLoad(string, bool) Loads only the vanilla JSON files, without dealing with mods, or resource-packs. void PreLoad(string assetsPath, bool lazyLoad = false) Parameters assetsPath string The root assets path to load the vanilla files from. lazyLoad bool PreLoadModWorldConfig(string, string, bool) Loads the mod worldconfig language JSON files only. void PreLoadModWorldConfig(string modPath, string modDomain, bool lazyLoad = false) Parameters modPath string The assets path to load the mod files from. modDomain string The mod domain to use when loading the files. lazyLoad bool UseAssetManager(IAssetManager) Specifies an asset manager to use, when the service has been lazy-loaded. void UseAssetManager(IAssetManager assetManager) Parameters assetManager IAssetManager The IAssetManager instance used within the sided API."
  },
  "api/Vintagestory.API.Config.Lang.html": {
    "href": "api/Vintagestory.API.Config.Lang.html",
    "title": "Class Lang | VintageStory API",
    "keywords": "Class Lang Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Utility class for enabling i18n. Loads language entries from assets/[locale].json Open in GitHub public static class Lang Inheritance object Lang Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Kept legacy code structure and arguments for backwards compatibility. Properties AvailableLanguages public static Dictionary<string, ITranslationService> AvailableLanguages { get; } Property Value Dictionary<string, ITranslationService> CurrentLocale Gets the language code that this currently used to translate values. public static string CurrentLocale { get; } Property Value string A string, that contains he language code that this currently used to translate values. DefaultLocale public static string DefaultLocale { get; set; } Property Value string Methods ChangeLanguage(string) Changes the current language for the game. public static void ChangeLanguage(string languageCode) Parameters languageCode string The language code to set as the language for the game. Get(string, params object[]) Gets a translation entry for given key using the current locale public static string Get(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetAllEntries() Retrieves a list of all translation entries within the cache. public static IDictionary<string, string> GetAllEntries() Returns IDictionary<string, string> A dictionary of localisation entries. GetIfExists(string, params object[]) Gets a translation entry for given key, if any matching wildcarded keys are found within the cache. public static string GetIfExists(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetL(string, string, params object[]) Gets a translation entry for given key using given locale public static string GetL(string langcode, string key, params object[] args) Parameters langcode string key string args object[] Returns string GetMatching(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. public static string GetMatching(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetMatchingIfExists(string, params object[]) Gets a translation entry for given key, if any matching wildcarded keys are found within the cache. public static string GetMatchingIfExists(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns null as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetMatchingL(string, string, params object[]) public static string GetMatchingL(string langcode, string key, params object[] args) Parameters langcode string key string args object[] Returns string GetNamePlaceHolder(AssetLocation) public static string GetNamePlaceHolder(AssetLocation code) Parameters code AssetLocation Returns string GetUnformatted(string) Gets the raw, unformatted translated value for the key provided. public static string GetUnformatted(string key) Parameters key string The key. Returns string Returns the key as a default value, if no results are found; otherwise returns the unformatted, translated value. GetWithFallback(string, string, params object[]) Gets a translation entry for given key using the current locale. Also tries the fallback key - useful if we change a key but not all languages updated yet public static string GetWithFallback(string key, string fallbackKey, params object[] args) Parameters key string fallbackKey string args object[] Returns string HasTranslation(string, bool, bool) Determines whether the specified key has a translation. public static bool HasTranslation(string key, bool findWildcarded = true, bool logErrors = true) Parameters key string The key. findWildcarded bool if set to true, the scan will include any wildcarded values. logErrors bool Returns bool true if the specified key has a translation; otherwise, false. InitialiseSearch() public static void InitialiseSearch() Load(ILogger, IAssetManager, string) Loads all translations public static void Load(ILogger logger, IAssetManager assetManager, string language = \"en\") Parameters logger ILogger The ILogger instance used within the sided API. assetManager IAssetManager The IAssetManager instance used within the sided API. language string The desired language LoadLanguage(ILogger, IAssetManager, string, bool, EnumLinebreakBehavior) Loads translation key/value pairs from all relevant JSON files within the Asset Manager. public static void LoadLanguage(ILogger logger, IAssetManager assetManager, string languageCode = \"en\", bool lazyLoad = false, EnumLinebreakBehavior lbBehavior = EnumLinebreakBehavior.AfterWord) Parameters logger ILogger The ILogger instance used within the sided API. assetManager IAssetManager The IAssetManager instance used within the sided API. languageCode string The language code to use as the default language. lazyLoad bool lbBehavior EnumLinebreakBehavior PreLoad(ILogger, string, string) Loads only the vanilla JSON files, without dealing with mods, or resource-packs. public static void PreLoad(ILogger logger, string assetsPath, string defaultLanguage = \"en\") Parameters logger ILogger The ILogger instance used within the sided API. assetsPath string The root assets path to load the vanilla files from. defaultLanguage string The language code to use as the default language. PreLoadModWorldConfig(string, string, string) Loads the mod worldconfig language JSON files only. public static void PreLoadModWorldConfig(string modPath, string modDomain, string defaultLanguage = \"en\") Parameters modPath string The assets path to load the mod files from. modDomain string The mod domain to use when loading the files. defaultLanguage string The language code to use as the default language. UsesNonLatinCharacters(string) public static bool UsesNonLatinCharacters(string lang) Parameters lang string Returns bool"
  },
  "api/Vintagestory.API.Config.OS.html": {
    "href": "api/Vintagestory.API.Config.OS.html",
    "title": "Enum OS | VintageStory API",
    "keywords": "Enum OS Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Operating System Enum Open in GitHub public enum OS Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Linux = 2 Mac = 1 Windows = 0"
  },
  "api/Vintagestory.API.Config.RuntimeEnv.html": {
    "href": "api/Vintagestory.API.Config.RuntimeEnv.html",
    "title": "Class RuntimeEnv | VintageStory API",
    "keywords": "Class RuntimeEnv Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll Information about the runningtime environment Open in GitHub public static class RuntimeEnv Inheritance object RuntimeEnv Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DebugOutOfRangeBlockAccess If true, will print the stack trace on some of the blockaccessor if something attempts to get or set blocks outside of its available chunks public static bool DebugOutOfRangeBlockAccess Field Value bool DebugSoundDispose Debug sound memory leaks. No ENV var public static bool DebugSoundDispose Field Value bool DebugTextureDispose If TEXTURE_DEBUG_DISPOSE is set, the initial value set here will be overridden public static bool DebugTextureDispose Field Value bool DebugThreadPool If true, will print allocation trace whenever a new task was enqueued to the thread pool public static bool DebugThreadPool Field Value bool DebugVAODispose If VAO_DEBUG_DISPOSE is set, the initial value set here will be overridden public static bool DebugVAODispose Field Value bool EnvSearchPathName The Env variable which contains the OS specific search paths for libarires public static readonly string EnvSearchPathName Field Value string GUIScale public static float GUIScale Field Value float IsDevEnvironment Whether we are in a dev environment or not public static readonly bool IsDevEnvironment Field Value bool IsWaylandSession This will only be set to true on Linux when the session is a wayland session This is needed so we can skip adding a app Icon or setting the cursor postion since those are not supported on wayland public static readonly bool IsWaylandSession Field Value bool MainThreadId public static int MainThreadId Field Value int OS The current operating system public static readonly OS OS Field Value OS ServerMainThreadId public static int ServerMainThreadId Field Value int Methods GetLocalIpAddress() public static string GetLocalIpAddress() Returns string GetOsString() public static string GetOsString() Returns string"
  },
  "api/Vintagestory.API.Config.TranslationService.html": {
    "href": "api/Vintagestory.API.Config.TranslationService.html",
    "title": "Class TranslationService | VintageStory API",
    "keywords": "Class TranslationService Namespace Vintagestory.API.Config Assembly VintagestoryAPI.dll A service, which provides access to translated strings, based on key/value pairs read from JSON files. Open in GitHub public class TranslationService : ITranslationService Inheritance object TranslationService Implements ITranslationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TranslationService(string, ILogger, IAssetManager, EnumLinebreakBehavior) Initialises a new instance of the TranslationService class. public TranslationService(string languageCode, ILogger logger, IAssetManager assetManager = null, EnumLinebreakBehavior lbBehavior = EnumLinebreakBehavior.AfterWord) Parameters languageCode string The language code that this translation service caters for. logger ILogger The ILogger instance used within the sided API. assetManager IAssetManager The IAssetManager instance used within the sided API. lbBehavior EnumLinebreakBehavior Properties LanguageCode Gets the language code that this translation service caters for. public string LanguageCode { get; } Property Value string A string, that contains the language code that this translation service caters for. LineBreakBehavior public EnumLinebreakBehavior LineBreakBehavior { get; set; } Property Value EnumLinebreakBehavior Methods EnsureLoaded() protected void EnsureLoaded() Format(string, params object[]) protected string Format(string value, params object[] args) Parameters value string args object[] Returns string Get(string, params object[]) Gets a translation for a given key. public string Get(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetAllEntries() Retrieves a list of all translation entries within the cache. public IDictionary<string, string> GetAllEntries() Returns IDictionary<string, string> A dictionary of localisation entries. GetIfExists(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. public string GetIfExists(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetMatching(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. public string GetMatching(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns the key as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetMatchingIfExists(string, params object[]) Gets a translation for a given key, if any matching wildcarded keys are found within the cache. public string GetMatchingIfExists(string key, params object[] args) Parameters key string The key. args object[] The arguments to interpolate into the resulting string. Returns string Returns null as a default value, if no results are found; otherwise returns the pre-formatted, translated value. GetUnformatted(string) Gets the raw, unformatted translated value for the key provided. public string GetUnformatted(string key) Parameters key string The key. Returns string Returns the key as a default value, if no results are found; otherwise returns the unformatted, translated value. HasTranslation(string, bool) Determines whether the specified key has a translation. public bool HasTranslation(string key, bool findWildcarded = true) Parameters key string The key. findWildcarded bool if set to true, the scan will include any wildcarded values. Returns bool true if the specified key has a translation; otherwise, false. HasTranslation(string, bool, bool) Determines whether the specified key has a translation. public bool HasTranslation(string key, bool findWildcarded, bool logErrors) Parameters key string The key. findWildcarded bool if set to true, the scan will include any wildcarded values. logErrors bool if set to true, will add \"Lang key not found\" logging Returns bool true if the specified key has a translation; otherwise, false. InitialiseSearch() Used to compile the regexes, to save time on the first 'actual' wildcard search - saves about 300ms public void InitialiseSearch() Invalidate() Sets the loaded flag to false, so that the next lookup causes it to reload all translation entries public void Invalidate() Load(bool) Loads translation key/value pairs from all relevant JSON files within the Asset Manager. public void Load(bool lazyLoad = false) Parameters lazyLoad bool PreLoad(string, bool) Loads only the vanilla JSON files, without dealing with mods, or resource-packs. public void PreLoad(string assetsPath, bool lazyLoad = false) Parameters assetsPath string The root assets path to load the vanilla files from. lazyLoad bool PreLoadModWorldConfig(string, string, bool) Loads the mod worldconfig language JSON files only. public void PreLoadModWorldConfig(string modPath = null, string modDomain = null, bool lazyLoad = false) Parameters modPath string The assets path to load the mod files from. modDomain string The mod domain to use when loading the files. lazyLoad bool UseAssetManager(IAssetManager) Specifies an asset manager to use, when the service has been lazy-loaded. public void UseAssetManager(IAssetManager assetManager) Parameters assetManager IAssetManager The IAssetManager instance used within the sided API. See Also ITranslationService"
  },
  "api/Vintagestory.API.Config.html": {
    "href": "api/Vintagestory.API.Config.html",
    "title": "Namespace Vintagestory.API.Config | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Config Classes Dimensions Open in GitHub GamePaths Open in GitHub GameVersion The games current version Open in GitHub GlobalConstants Contains some global constants and static values Open in GitHub Lang Utility class for enabling i18n. Loads language entries from assets/[locale].json Open in GitHub RuntimeEnv Information about the runningtime environment Open in GitHub TranslationService A service, which provides access to translated strings, based on key/value pairs read from JSON files. Open in GitHub Interfaces ITranslationService Represents a service, which provides access to translated strings, based on key/value pairs read from JSON files. Enums EnumGameBranch Current branch of the game Open in GitHub EnumReleaseType Open in GitHub OS Operating System Enum Open in GitHub Delegates FoodSpoilageCalcDelegate"
  },
  "api/Vintagestory.API.Datastructures.ArrayAttribute-1.html": {
    "href": "api/Vintagestory.API.Datastructures.ArrayAttribute-1.html",
    "title": "Class ArrayAttribute<T> | VintageStory API",
    "keywords": "Class ArrayAttribute<T> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public abstract class ArrayAttribute<T> Type Parameters T Inheritance object ArrayAttribute<T> Derived BoolArrayAttribute ByteArrayAttribute DoubleArrayAttribute FloatArrayAttribute IntArrayAttribute LongArrayAttribute StreamedByteArrayAttribute StringArrayAttribute TreeArrayAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields value public T[] value Field Value T[] Methods Equals(IWorldAccessor, IAttribute) public virtual bool Equals(IWorldAccessor worldForResolve, IAttribute attr) Parameters worldForResolve IWorldAccessor attr IAttribute Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetValue() public virtual object GetValue() Returns object ToJsonToken() public virtual string ToJsonToken() Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Datastructures.BlockTagArray.html": {
    "href": "api/Vintagestory.API.Datastructures.BlockTagArray.html",
    "title": "Struct BlockTagArray | VintageStory API",
    "keywords": "Struct BlockTagArray Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll List of block tags meant to be used for fast comparisons. Restricts number of registered block tags to 256. public readonly struct BlockTagArray Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockTagArray() public BlockTagArray() BlockTagArray(IEnumerable<ushort>) public BlockTagArray(IEnumerable<ushort> tags) Parameters tags IEnumerable<ushort> BlockTagArray(ushort) public BlockTagArray(ushort tag) Parameters tag ushort BlockTagArray(ulong, ulong, ulong, ulong) public BlockTagArray(ulong bitMask1, ulong bitMask2, ulong bitMask3, ulong bitMask4) Parameters bitMask1 ulong bitMask2 ulong bitMask3 ulong bitMask4 ulong Fields BitMask1 public readonly ulong BitMask1 Field Value ulong BitMask2 public readonly ulong BitMask2 Field Value ulong BitMask3 public readonly ulong BitMask3 Field Value ulong BitMask4 public readonly ulong BitMask4 Field Value ulong Empty public static readonly BlockTagArray Empty Field Value BlockTagArray MasksNumber public const byte MasksNumber = 4 Field Value byte Size Maximum amount of different tags supported by tag array. Limited by total amount of bits in bit masks. public const int Size = 256 Field Value int Methods And(BlockTagArray, BlockTagArray) public static BlockTagArray And(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns BlockTagArray ContainsAll(BlockTagArray) Checks if this tag array contains all tags from other public bool ContainsAll(BlockTagArray other) Parameters other BlockTagArray Returns bool ContainsAllFromAtLeastOne(BlockTagArray[]) Checks if this tag array contains all tags from at least one element of tags public bool ContainsAllFromAtLeastOne(BlockTagArray[] tags) Parameters tags BlockTagArray[] Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FromBytes(BinaryReader) public static BlockTagArray FromBytes(BinaryReader reader) Parameters reader BinaryReader Returns BlockTagArray GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersect(BlockTagArray) Checks if this tag array has at least one common tag with other public bool Intersect(BlockTagArray other) Parameters other BlockTagArray Returns bool Intersect(BlockTagArray, BlockTagArray) Checks if two tag arrays have at least one common tag public static bool Intersect(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns bool IntersectsWithEach(BlockTagArray[]) Checks if this tag array contains at least on tag from each element of tags public bool IntersectsWithEach(BlockTagArray[] tags) Parameters tags BlockTagArray[] Returns bool Not(BlockTagArray) public static BlockTagArray Not(BlockTagArray value) Parameters value BlockTagArray Returns BlockTagArray Or(BlockTagArray, BlockTagArray) public static BlockTagArray Or(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns BlockTagArray ToArray() Converts tag array into list of tag ids sorted in ascending order public IEnumerable<ushort> ToArray() Returns IEnumerable<ushort> List of tag ids in ascending order ToArray(ICoreAPI) Converts tag array into list of tags. public IEnumerable<string> ToArray(ICoreAPI api) Parameters api ICoreAPI Returns IEnumerable<string> ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. isPresentIn(ref BlockTagArray) public bool isPresentIn(ref BlockTagArray other) Parameters other BlockTagArray Returns bool Operators operator &(BlockTagArray, BlockTagArray) public static BlockTagArray operator &(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns BlockTagArray operator |(BlockTagArray, BlockTagArray) public static BlockTagArray operator |(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns BlockTagArray operator ==(BlockTagArray, BlockTagArray) public static bool operator ==(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns bool operator !=(BlockTagArray, BlockTagArray) public static bool operator !=(BlockTagArray first, BlockTagArray second) Parameters first BlockTagArray second BlockTagArray Returns bool operator ~(BlockTagArray) public static BlockTagArray operator ~(BlockTagArray value) Parameters value BlockTagArray Returns BlockTagArray"
  },
  "api/Vintagestory.API.Datastructures.BlockTagRule.html": {
    "href": "api/Vintagestory.API.Datastructures.BlockTagRule.html",
    "title": "Struct BlockTagRule | VintageStory API",
    "keywords": "Struct BlockTagRule Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Pair of tag arrays that is used for implementation of tag inversion public readonly struct BlockTagRule Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockTagRule(ICoreAPI, IEnumerable<string>) public BlockTagRule(ICoreAPI api, IEnumerable<string> tags) Parameters api ICoreAPI tags IEnumerable<string> BlockTagRule(BlockTagArray, BlockTagArray) public BlockTagRule(BlockTagArray tagsThatShouldBePresent, BlockTagArray tagsThatShouldBeAbsent) Parameters tagsThatShouldBePresent BlockTagArray tagsThatShouldBeAbsent BlockTagArray Fields Empty public static readonly BlockTagRule Empty Field Value BlockTagRule NotPrefix public const string NotPrefix = \"not-\" Field Value string TagsThatShouldBeAbsent public readonly BlockTagArray TagsThatShouldBeAbsent Field Value BlockTagArray TagsThatShouldBePresent public readonly BlockTagArray TagsThatShouldBePresent Field Value BlockTagArray Methods ContainsAllFromAtLeastOne(BlockTagArray, BlockTagRule[]) Checks if blockTag contains all tags from at least one rule from rules. public static bool ContainsAllFromAtLeastOne(BlockTagArray blockTag, BlockTagRule[] rules) Parameters blockTag BlockTagArray rules BlockTagRule[] Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersects(BlockTagArray) public bool Intersects(BlockTagArray tags) Parameters tags BlockTagArray Returns bool IntersectsWithEach(BlockTagArray, BlockTagRule[]) Checks if blockTag contains at least on tag from each rule from rules. public static bool IntersectsWithEach(BlockTagArray blockTag, BlockTagRule[] rules) Parameters blockTag BlockTagArray rules BlockTagRule[] Returns bool ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(BlockTagRule, BlockTagRule) public static bool operator ==(BlockTagRule first, BlockTagRule second) Parameters first BlockTagRule second BlockTagRule Returns bool operator !=(BlockTagRule, BlockTagRule) public static bool operator !=(BlockTagRule first, BlockTagRule second) Parameters first BlockTagRule second BlockTagRule Returns bool"
  },
  "api/Vintagestory.API.Datastructures.BoolArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.BoolArrayAttribute.html",
    "title": "Class BoolArrayAttribute | VintageStory API",
    "keywords": "Class BoolArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class BoolArrayAttribute : ArrayAttribute<bool>, IAttribute Inheritance object ArrayAttribute<bool> BoolArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<bool>.value ArrayAttribute<bool>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<bool>.GetValue() ArrayAttribute<bool>.ToJsonToken() ArrayAttribute<bool>.ToString() ArrayAttribute<bool>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BoolArrayAttribute() public BoolArrayAttribute() BoolArrayAttribute(bool[]) public BoolArrayAttribute(bool[] value) Parameters value bool[] Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.BoolAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.BoolAttribute.html",
    "title": "Class BoolAttribute | VintageStory API",
    "keywords": "Class BoolAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class BoolAttribute : ScalarAttribute<bool>, IAttribute Inheritance object ScalarAttribute<bool> BoolAttribute Implements IAttribute Inherited Members ScalarAttribute<bool>.value ScalarAttribute<bool>.Equals(IWorldAccessor, IAttribute) ScalarAttribute<bool>.Equals(object) ScalarAttribute<bool>.GetValue() ScalarAttribute<bool>.SetValue(bool) ScalarAttribute<bool>.ToString() ScalarAttribute<bool>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BoolAttribute() public BoolAttribute() BoolAttribute(bool) public BoolAttribute(bool value) Parameters value bool Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.BoolRef.html": {
    "href": "api/Vintagestory.API.Datastructures.BoolRef.html",
    "title": "Class BoolRef | VintageStory API",
    "keywords": "Class BoolRef Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class BoolRef Inheritance object BoolRef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields value public bool value Field Value bool Methods GetValue() public bool GetValue() Returns bool SetValue(bool) public void SetValue(bool value_) Parameters value_ bool"
  },
  "api/Vintagestory.API.Datastructures.Bools.html": {
    "href": "api/Vintagestory.API.Datastructures.Bools.html",
    "title": "Class Bools | VintageStory API",
    "keywords": "Class Bools Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class Bools Inheritance object Bools Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Bools(bool, bool) public Bools(bool a, bool b) Parameters a bool b bool Properties this[int] public bool this[int i] { get; set; } Parameters i int Property Value bool"
  },
  "api/Vintagestory.API.Datastructures.ByteArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.ByteArrayAttribute.html",
    "title": "Class ByteArrayAttribute | VintageStory API",
    "keywords": "Class ByteArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class ByteArrayAttribute : ArrayAttribute<byte>, IAttribute Inheritance object ArrayAttribute<byte> ByteArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<byte>.value ArrayAttribute<byte>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<byte>.GetValue() ArrayAttribute<byte>.ToJsonToken() ArrayAttribute<byte>.ToString() ArrayAttribute<byte>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ByteArrayAttribute() public ByteArrayAttribute() ByteArrayAttribute(byte[]) public ByteArrayAttribute(byte[] value) Parameters value byte[] ByteArrayAttribute(FastMemoryStream) public ByteArrayAttribute(FastMemoryStream ms) Parameters ms FastMemoryStream Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.CachedCuboidList.html": {
    "href": "api/Vintagestory.API.Datastructures.CachedCuboidList.html",
    "title": "Class CachedCuboidList | VintageStory API",
    "keywords": "Class CachedCuboidList Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class CachedCuboidList : IEnumerable<Cuboidd>, IEnumerable Inheritance object CachedCuboidList Implements IEnumerable<Cuboidd> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CachedCuboidList() public CachedCuboidList() Fields Count public int Count Field Value int blocks public Block[] blocks Field Value Block[] cuboids public Cuboidd[] cuboids Field Value Cuboidd[] positions public BlockPos[] positions Field Value BlockPos[] Methods Add(Cuboidf, int, int, int, Block) public void Add(Cuboidf cuboid, int x, int y, int z, Block block = null) Parameters cuboid Cuboidf x int y int z int block Block Add(Cuboidf[], int, int, int, Block) public void Add(Cuboidf[] cuboids, int x, int y, int z, Block block = null) Parameters cuboids Cuboidf[] x int y int z int block Block Clear() public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Cuboidd> GetEnumerator() Returns IEnumerator<Cuboidd> An enumerator that can be used to iterate through the collection."
  },
  "api/Vintagestory.API.Datastructures.CachedCuboidListFaster.html": {
    "href": "api/Vintagestory.API.Datastructures.CachedCuboidListFaster.html",
    "title": "Class CachedCuboidListFaster | VintageStory API",
    "keywords": "Class CachedCuboidListFaster Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Just like CachedCuboidList except we use structs internally, for RAM access performance. We leave CachedCuboidList just as it is for mod backwards compatibility Open in GitHub public class CachedCuboidListFaster : IEnumerable<Cuboidd>, IEnumerable Inheritance object CachedCuboidListFaster Implements IEnumerable<Cuboidd> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CachedCuboidListFaster() public CachedCuboidListFaster() Fields Count public int Count Field Value int blocks public Block[] blocks Field Value Block[] cuboids public Cuboidd[] cuboids Field Value Cuboidd[] positions public FastVec3i[] positions Field Value FastVec3i[] Methods Add(Cuboidf, int, int, int, Block) public void Add(Cuboidf cuboid, int x, int y, int z, Block block = null) Parameters cuboid Cuboidf x int y int z int block Block Add(Cuboidf[], int, int, int, Block) public void Add(Cuboidf[] cuboids, int x, int y, int z, Block block = null) Parameters cuboids Cuboidf[] x int y int z int block Block Clear() public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<Cuboidd> GetEnumerator() Returns IEnumerator<Cuboidd> An enumerator that can be used to iterate through the collection."
  },
  "api/Vintagestory.API.Datastructures.CachingConcurrentDictionary-2.html": {
    "href": "api/Vintagestory.API.Datastructures.CachingConcurrentDictionary-2.html",
    "title": "Class CachingConcurrentDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Class CachingConcurrentDictionary<TKey, TValue> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Exactly like ConcurrentDictionary except that Values is cached for performance, instead of building a new List each time Values is accessed The cache is only guaranteed up to date if CachedConcurrentDictionary.TryAdd, .TryRemove or [] methods are used to modify the Dictionary otherwise the cache will be updated next time when one of those methods is used public class CachingConcurrentDictionary<TKey, TValue> : ConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable Type Parameters TKey TValue Inheritance object ConcurrentDictionary<TKey, TValue> CachingConcurrentDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IDictionary ICollection IEnumerable Inherited Members ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>) ConcurrentDictionary<TKey, TValue>.AddOrUpdate<TArg>(TKey, Func<TKey, TArg, TValue>, Func<TKey, TValue, TArg, TValue>, TArg) ConcurrentDictionary<TKey, TValue>.Clear() ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey) ConcurrentDictionary<TKey, TValue>.GetEnumerator() ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, Func<TKey, TValue>) ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue) ConcurrentDictionary<TKey, TValue>.GetOrAdd<TArg>(TKey, Func<TKey, TArg, TValue>, TArg) ConcurrentDictionary<TKey, TValue>.ToArray() ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue) ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) ConcurrentDictionary<TKey, TValue>.TryRemove(KeyValuePair<TKey, TValue>) ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue) ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue) ConcurrentDictionary<TKey, TValue>.Comparer ConcurrentDictionary<TKey, TValue>.Count ConcurrentDictionary<TKey, TValue>.IsEmpty ConcurrentDictionary<TKey, TValue>.this[TKey] ConcurrentDictionary<TKey, TValue>.Keys ConcurrentDictionary<TKey, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DictExtensions.Remove<K, V>(ConcurrentDictionary<K, V>, K) HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) DictExtensions.Remove<K, V>(CachingConcurrentDictionary<K, V>, K) Properties this[TKey] public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Values public ICollection<TValue> Values { get; } Property Value ICollection<TValue> Methods TryAdd(TKey, TValue) public bool TryAdd(TKey key, TValue value) Parameters key TKey value TValue Returns bool TryRemove(TKey, out TValue) public bool TryRemove(TKey key, out TValue value) Parameters key TKey value TValue Returns bool"
  },
  "api/Vintagestory.API.Datastructures.DictionaryExtensions.html": {
    "href": "api/Vintagestory.API.Datastructures.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | VintageStory API",
    "keywords": "Class DictionaryExtensions Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) public static TValue TryGetValue<TKey, TValue>(this IDictionary<TKey, TValue> source, TKey key) Parameters source IDictionary<TKey, TValue> key TKey Returns TValue Type Parameters TKey TValue"
  },
  "api/Vintagestory.API.Datastructures.DoubleArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.DoubleArrayAttribute.html",
    "title": "Class DoubleArrayAttribute | VintageStory API",
    "keywords": "Class DoubleArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class DoubleArrayAttribute : ArrayAttribute<double>, IAttribute Inheritance object ArrayAttribute<double> DoubleArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<double>.value ArrayAttribute<double>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<double>.GetValue() ArrayAttribute<double>.ToString() ArrayAttribute<double>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DoubleArrayAttribute() public DoubleArrayAttribute() DoubleArrayAttribute(double[]) public DoubleArrayAttribute(double[] value) Parameters value double[] Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.DoubleAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.DoubleAttribute.html",
    "title": "Class DoubleAttribute | VintageStory API",
    "keywords": "Class DoubleAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class DoubleAttribute : ScalarAttribute<double>, IAttribute Inheritance object ScalarAttribute<double> DoubleAttribute Implements IAttribute Inherited Members ScalarAttribute<double>.value ScalarAttribute<double>.Equals(IWorldAccessor, IAttribute) ScalarAttribute<double>.Equals(object) ScalarAttribute<double>.GetValue() ScalarAttribute<double>.SetValue(double) ScalarAttribute<double>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DoubleAttribute() public DoubleAttribute() DoubleAttribute(double) public DoubleAttribute(double value) Parameters value double Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Datastructures.EntityTagArray.html": {
    "href": "api/Vintagestory.API.Datastructures.EntityTagArray.html",
    "title": "Struct EntityTagArray | VintageStory API",
    "keywords": "Struct EntityTagArray Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll List of entity tags meant to be used for fast comparisons. Restricts number of registered entity tags to 128 public readonly struct EntityTagArray Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityTagArray() public EntityTagArray() EntityTagArray(IEnumerable<ushort>) public EntityTagArray(IEnumerable<ushort> tags) Parameters tags IEnumerable<ushort> EntityTagArray(ushort) public EntityTagArray(ushort tag) Parameters tag ushort EntityTagArray(ulong, ulong) public EntityTagArray(ulong bitMask1, ulong bitMask2) Parameters bitMask1 ulong bitMask2 ulong Fields BitMask1 public readonly ulong BitMask1 Field Value ulong BitMask2 public readonly ulong BitMask2 Field Value ulong Empty public static readonly EntityTagArray Empty Field Value EntityTagArray MasksNumber public const byte MasksNumber = 2 Field Value byte Size Maximum amount of different tags supported by tag array. Limited by total amount of bits in bit masks. public const int Size = 128 Field Value int Methods And(EntityTagArray, EntityTagArray) public static EntityTagArray And(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns EntityTagArray ContainsAll(EntityTagArray) Checks if this tag array contains all tags from other public bool ContainsAll(EntityTagArray other) Parameters other EntityTagArray Returns bool ContainsAllFromAtLeastOne(EntityTagArray[]) Checks if this tag array contains all tags from at least one element of tags public bool ContainsAllFromAtLeastOne(EntityTagArray[] tags) Parameters tags EntityTagArray[] Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FromBytes(BinaryReader) public static EntityTagArray FromBytes(BinaryReader reader) Parameters reader BinaryReader Returns EntityTagArray GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersect(EntityTagArray) Checks if this tag array has at least one common tag with other public bool Intersect(EntityTagArray other) Parameters other EntityTagArray Returns bool Intersect(EntityTagArray, EntityTagArray) Checks if two tag arrays have at least one common tag public static bool Intersect(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns bool IntersectsWithEach(EntityTagArray[]) Checks if this tag array contains at least on tag from each element of tags public bool IntersectsWithEach(EntityTagArray[] tags) Parameters tags EntityTagArray[] Returns bool Not(EntityTagArray) public static EntityTagArray Not(EntityTagArray value) Parameters value EntityTagArray Returns EntityTagArray Or(EntityTagArray, EntityTagArray) public static EntityTagArray Or(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns EntityTagArray Remove(EntityTagArray) public EntityTagArray Remove(EntityTagArray other) Parameters other EntityTagArray Returns EntityTagArray ToArray() Converts tag array into list of tag ids sorted in ascending order public IEnumerable<ushort> ToArray() Returns IEnumerable<ushort> List of tag ids in ascending order ToArray(ICoreAPI) Converts tag array into list of tags. public IEnumerable<string> ToArray(ICoreAPI api) Parameters api ICoreAPI Returns IEnumerable<string> ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator &(EntityTagArray, EntityTagArray) public static EntityTagArray operator &(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns EntityTagArray operator |(EntityTagArray, EntityTagArray) public static EntityTagArray operator |(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns EntityTagArray operator ==(EntityTagArray, EntityTagArray) public static bool operator ==(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns bool operator !=(EntityTagArray, EntityTagArray) public static bool operator !=(EntityTagArray first, EntityTagArray second) Parameters first EntityTagArray second EntityTagArray Returns bool operator ~(EntityTagArray) public static EntityTagArray operator ~(EntityTagArray value) Parameters value EntityTagArray Returns EntityTagArray"
  },
  "api/Vintagestory.API.Datastructures.EntityTagRule.html": {
    "href": "api/Vintagestory.API.Datastructures.EntityTagRule.html",
    "title": "Struct EntityTagRule | VintageStory API",
    "keywords": "Struct EntityTagRule Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Pair of tag arrays that is used for implementation of tag inversion for entity ai tasks public readonly struct EntityTagRule Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityTagRule(ICoreAPI, IEnumerable<string>) public EntityTagRule(ICoreAPI api, IEnumerable<string> tags) Parameters api ICoreAPI tags IEnumerable<string> EntityTagRule(EntityTagArray, EntityTagArray) public EntityTagRule(EntityTagArray tagsThatShouldBePresent, EntityTagArray tagsThatShouldBeAbsent) Parameters tagsThatShouldBePresent EntityTagArray tagsThatShouldBeAbsent EntityTagArray Fields Empty public static readonly EntityTagRule Empty Field Value EntityTagRule NotPrefix public const string NotPrefix = \"not-\" Field Value string TagsThatShouldBeAbsent public readonly EntityTagArray TagsThatShouldBeAbsent Field Value EntityTagArray TagsThatShouldBePresent public readonly EntityTagArray TagsThatShouldBePresent Field Value EntityTagArray Methods ContainsAllFromAtLeastOne(EntityTagArray, EntityTagRule[]) Checks if entityTag contains all tags from at least one rule from rules. public static bool ContainsAllFromAtLeastOne(EntityTagArray entityTag, EntityTagRule[] rules) Parameters entityTag EntityTagArray rules EntityTagRule[] Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersects(EntityTagArray) public bool Intersects(EntityTagArray tags) Parameters tags EntityTagArray Returns bool IntersectsWithEach(EntityTagArray, EntityTagRule[]) Checks if entityTag contains at least on tag from each rule from rules. public static bool IntersectsWithEach(EntityTagArray entityTag, EntityTagRule[] rules) Parameters entityTag EntityTagArray rules EntityTagRule[] Returns bool ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(EntityTagRule, EntityTagRule) public static bool operator ==(EntityTagRule first, EntityTagRule second) Parameters first EntityTagRule second EntityTagRule Returns bool operator !=(EntityTagRule, EntityTagRule) public static bool operator !=(EntityTagRule first, EntityTagRule second) Parameters first EntityTagRule second EntityTagRule Returns bool"
  },
  "api/Vintagestory.API.Datastructures.EnumAttributeType.html": {
    "href": "api/Vintagestory.API.Datastructures.EnumAttributeType.html",
    "title": "Enum EnumAttributeType | VintageStory API",
    "keywords": "Enum EnumAttributeType Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public enum EnumAttributeType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bool = 9 Double = 3 Float = 4 Int = 1 Itemstack = 7 Long = 2 String = 5 StringArray = 8 Tree = 6 Unknown = 0"
  },
  "api/Vintagestory.API.Datastructures.FastLargeSetOfLongs.html": {
    "href": "api/Vintagestory.API.Datastructures.FastLargeSetOfLongs.html",
    "title": "Class FastLargeSetOfLongs | VintageStory API",
    "keywords": "Class FastLargeSetOfLongs Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class FastLargeSetOfLongs : IEnumerable<long>, IEnumerable Inheritance object FastLargeSetOfLongs Implements IEnumerable<long> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastLargeSetOfLongs(int) public FastLargeSetOfLongs(int numbuckets) Parameters numbuckets int Properties Count public int Count { get; } Property Value int Methods Add(long) Return false if the set already contained this value; return true if the Add was successful public bool Add(long value) Parameters value long Returns bool Clear() public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<long> GetEnumerator() Returns IEnumerator<long> An enumerator that can be used to iterate through the collection."
  },
  "api/Vintagestory.API.Datastructures.FastList-1.html": {
    "href": "api/Vintagestory.API.Datastructures.FastList-1.html",
    "title": "Class FastList<TElem> | VintageStory API",
    "keywords": "Class FastList<TElem> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Does not clear elements in Clear(), but only sets the Count to 0 public class FastList<TElem> : IEnumerable Type Parameters TElem Inheritance object FastList<TElem> Implements IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastList() public FastList() Properties Count public int Count { get; } Property Value int this[int] public TElem this[int index] { get; set; } Parameters index int Property Value TElem Methods Add(TElem) public void Add(TElem elem) Parameters elem TElem Clear() public void Clear() Contains(TElem) public bool Contains(TElem needle) Parameters needle TElem Returns bool GetEnumerator() Returns an enumerator that iterates through a collection. public IEnumerator GetEnumerator() Returns IEnumerator An IEnumerator object that can be used to iterate through the collection. RemoveAt(int) public void RemoveAt(int index) Parameters index int"
  },
  "api/Vintagestory.API.Datastructures.FastListEnum-1.html": {
    "href": "api/Vintagestory.API.Datastructures.FastListEnum-1.html",
    "title": "Class FastListEnum<TElem> | VintageStory API",
    "keywords": "Class FastListEnum<TElem> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public class FastListEnum<TElem> : IEnumerator Type Parameters TElem Inheritance object FastListEnum<TElem> Implements IEnumerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastListEnum(FastList<TElem>) public FastListEnum(FastList<TElem> list) Parameters list FastList<TElem> Properties Current Gets the element in the collection at the current position of the enumerator. public object Current { get; } Property Value object The element in the collection at the current position of the enumerator. Methods MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions InvalidOperationException The collection was modified after the enumerator was created. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset() Exceptions InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset."
  },
  "api/Vintagestory.API.Datastructures.FastMemoryStream.html": {
    "href": "api/Vintagestory.API.Datastructures.FastMemoryStream.html",
    "title": "Class FastMemoryStream | VintageStory API",
    "keywords": "Class FastMemoryStream Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class FastMemoryStream : Stream, IAsyncDisposable, IDisposable Inheritance object MarshalByRefObject Stream FastMemoryStream Implements IAsyncDisposable IDisposable Inherited Members Stream.Null Stream.BeginRead(byte[], int, int, AsyncCallback, object) Stream.BeginWrite(byte[], int, int, AsyncCallback, object) Stream.Close() Stream.CopyTo(Stream) Stream.CopyTo(Stream, int) Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, int) Stream.CopyToAsync(Stream, int, CancellationToken) Stream.CopyToAsync(Stream, CancellationToken) Stream.CreateWaitHandle() Stream.Dispose() Stream.Dispose(bool) Stream.DisposeAsync() Stream.EndRead(IAsyncResult) Stream.EndWrite(IAsyncResult) Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.ObjectInvariant() Stream.Read(Span<byte>) Stream.ReadAsync(byte[], int, int) Stream.ReadAsync(byte[], int, int, CancellationToken) Stream.ReadAsync(Memory<byte>, CancellationToken) Stream.ReadAtLeast(Span<byte>, int, bool) Stream.ReadAtLeastAsync(Memory<byte>, int, bool, CancellationToken) Stream.ReadExactly(byte[], int, int) Stream.ReadExactly(Span<byte>) Stream.ReadExactlyAsync(byte[], int, int, CancellationToken) Stream.ReadExactlyAsync(Memory<byte>, CancellationToken) Stream.Synchronized(Stream) Stream.ValidateBufferArguments(byte[], int, int) Stream.ValidateCopyToArguments(Stream, int) Stream.WriteAsync(byte[], int, int) Stream.WriteAsync(byte[], int, int, CancellationToken) Stream.WriteAsync(ReadOnlyMemory<byte>, CancellationToken) Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastMemoryStream() public FastMemoryStream() FastMemoryStream(byte[], int) public FastMemoryStream(byte[] buffer, int length) Parameters buffer byte[] length int FastMemoryStream(int) public FastMemoryStream(int capacity) Parameters capacity int Properties CanRead When overridden in a derived class, gets a value indicating whether the current stream supports reading. public override bool CanRead { get; } Property Value bool true if the stream supports reading; otherwise, false. CanSeek When overridden in a derived class, gets a value indicating whether the current stream supports seeking. public override bool CanSeek { get; } Property Value bool true if the stream supports seeking; otherwise, false. CanWrite When overridden in a derived class, gets a value indicating whether the current stream supports writing. public override bool CanWrite { get; } Property Value bool true if the stream supports writing; otherwise, false. Length When deserializing from a buffer, this is the full buffer length public override long Length { get; } Property Value long Position When serializing to a buffer, indicates the count of bytes written so far public override long Position { get; set; } Property Value long Methods Flush() When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device. public override void Flush() Exceptions IOException An I/O error occurs. GetBuffer() public byte[] GetBuffer() Returns byte[] Read(byte[], int, int) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. public override int Read(byte[] destBuffer, int offset, int count) Parameters destBuffer byte[] offset int The zero-based byte offset in buffer at which to begin storing the data read from the current stream. count int The maximum number of bytes to be read from the current stream. Returns int The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if count is 0 or the end of the stream has been reached. Exceptions ArgumentException The sum of offset and count is larger than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurs. NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. ReadByte() Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. public override int ReadByte() Returns int The unsigned byte cast to an int, or -1 if at the end of the stream. Exceptions NotSupportedException The stream does not support reading. ObjectDisposedException Methods were called after the stream was closed. RemoveFromStart(int) public void RemoveFromStart(int newStart) Parameters newStart int Reset() public void Reset() Seek(long, SeekOrigin) When overridden in a derived class, sets the position within the current stream. public override long Seek(long offset, SeekOrigin origin) Parameters offset long A byte offset relative to the origin parameter. origin SeekOrigin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns long The new position within the current stream. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. SetLength(long) When overridden in a derived class, sets the length of the current stream. public override void SetLength(long value) Parameters value long The desired length of the current stream in bytes. Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. ObjectDisposedException Methods were called after the stream was closed. ToArray() public byte[] ToArray() Returns byte[] Write(byte[], int, int) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(byte[] srcBuffer, int srcOffset, int count) Parameters srcBuffer byte[] srcOffset int count int The number of bytes to be written to the current stream. Exceptions ArgumentException The sum of offset and count is greater than the buffer length. ArgumentNullException buffer is null. ArgumentOutOfRangeException offset or count is negative. IOException An I/O error occurred, such as the specified file cannot be found. NotSupportedException The stream does not support writing. ObjectDisposedException Write(byte[], int, int) was called after the stream was closed. Write(ReadOnlySpan<byte>) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. public override void Write(ReadOnlySpan<byte> inputBuffer) Parameters inputBuffer ReadOnlySpan<byte> Write(float) public void Write(float v) Parameters v float Write(FastMemoryStream) public void Write(FastMemoryStream src) Parameters src FastMemoryStream WriteAt(int, int, int) Used for Protobuf serialization if we need to go back and re-write a varInt value, for example the count of entities written public void WriteAt(int pos, int v, int size) Parameters pos int v int size int Exceptions Exception WriteByte(byte) Writes a byte to the current position in the stream and advances the position within the stream by one byte. public override void WriteByte(byte p) Parameters p byte Exceptions IOException An I/O error occurs. NotSupportedException The stream does not support writing, or the stream is already closed. ObjectDisposedException Methods were called after the stream was closed. WriteInt32(int) public void WriteInt32(int v) Parameters v int WriteThreeBytes(int) public void WriteThreeBytes(int v) Parameters v int WriteTwoBytes(int) public void WriteTwoBytes(int v) Parameters v int WriteUTF8String(string, int) public void WriteUTF8String(string s, int lengthInBytes) Parameters s string lengthInBytes int"
  },
  "api/Vintagestory.API.Datastructures.FastSetOfInts.html": {
    "href": "api/Vintagestory.API.Datastructures.FastSetOfInts.html",
    "title": "Class FastSetOfInts | VintageStory API",
    "keywords": "Class FastSetOfInts Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class FastSetOfInts : IEnumerable<int>, IEnumerable Inheritance object FastSetOfInts Implements IEnumerable<int> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastSetOfInts() public FastSetOfInts() Properties Count public int Count { get; } Property Value int Methods Add(int) Return false if the set already contained this value; return true if the Add was successful public bool Add(int value) Parameters value int Returns bool Add(int, int, int, int) Add four separate components, assumed to be signed int in the range -128 to +127 public bool Add(int a, int b, int c, int d) Parameters a int b int c int d int Returns bool Clear() public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<int> GetEnumerator() Returns IEnumerator<int> An enumerator that can be used to iterate through the collection. RemoveIfMatches(int, int, int, int) public void RemoveIfMatches(int a, int b, int c, int d) Parameters a int b int c int d int"
  },
  "api/Vintagestory.API.Datastructures.FastSetOfLongs.html": {
    "href": "api/Vintagestory.API.Datastructures.FastSetOfLongs.html",
    "title": "Class FastSetOfLongs | VintageStory API",
    "keywords": "Class FastSetOfLongs Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class FastSetOfLongs : IEnumerable<long>, IEnumerable Inheritance object FastSetOfLongs Implements IEnumerable<long> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastSetOfLongs() public FastSetOfLongs() Properties Count public int Count { get; } Property Value int Methods Add(long) Return false if the set already contained this value; return true if the Add was successful public bool Add(long value) Parameters value long Returns bool Clear() public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<long> GetEnumerator() Returns IEnumerator<long> An enumerator that can be used to iterate through the collection."
  },
  "api/Vintagestory.API.Datastructures.FastSmallDictionary-2.html": {
    "href": "api/Vintagestory.API.Datastructures.FastSmallDictionary-2.html",
    "title": "Class FastSmallDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Class FastSmallDictionary<TKey, TValue> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A fast implementation of IDictionary using arrays. Only suitable for small dictionaries, typically 1-20 entries. Note that Add is implemented differently from a standard Dictionary, it does not check that the key is not already present (and does not throw an ArgumentException) Additional methods AddIfNotPresent() and Clone() are provided for convenience. There are also additional convenient constructors public class FastSmallDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters TKey TValue Inheritance object FastSmallDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Derived TextureDictionary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastSmallDictionary(IDictionary<TKey, TValue>) public FastSmallDictionary(IDictionary<TKey, TValue> dict) Parameters dict IDictionary<TKey, TValue> FastSmallDictionary(int) public FastSmallDictionary(int size) Parameters size int FastSmallDictionary(TKey, TValue) public FastSmallDictionary(TKey key, TValue value) Parameters key TKey value TValue Properties Count public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] It is calling code's responsibility to ensure the key being searched for is not null public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Clone() public FastSmallDictionary<TKey, TValue> Clone() Returns FastSmallDictionary<TKey, TValue> Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, TValue>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> An enumerator that can be used to iterate through the collection. GetFirstKey() public TKey GetFirstKey() Returns TKey Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(string) public TValue TryGetValue(string key) Parameters key string Returns TValue TryGetValue(TKey, out TValue) It is the calling code's responsibility to make sure that key is not null public bool TryGetValue(TKey key, out TValue value) Parameters key TKey value TValue Returns bool"
  },
  "api/Vintagestory.API.Datastructures.FloatArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.FloatArrayAttribute.html",
    "title": "Class FloatArrayAttribute | VintageStory API",
    "keywords": "Class FloatArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class FloatArrayAttribute : ArrayAttribute<float>, IAttribute Inheritance object ArrayAttribute<float> FloatArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<float>.value ArrayAttribute<float>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<float>.GetValue() ArrayAttribute<float>.ToString() ArrayAttribute<float>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FloatArrayAttribute() public FloatArrayAttribute() FloatArrayAttribute(float[]) public FloatArrayAttribute(float[] value) Parameters value float[] Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.FloatAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.FloatAttribute.html",
    "title": "Class FloatAttribute | VintageStory API",
    "keywords": "Class FloatAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class FloatAttribute : ScalarAttribute<float>, IAttribute Inheritance object ScalarAttribute<float> FloatAttribute Implements IAttribute Inherited Members ScalarAttribute<float>.value ScalarAttribute<float>.Equals(IWorldAccessor, IAttribute) ScalarAttribute<float>.Equals(object) ScalarAttribute<float>.GetValue() ScalarAttribute<float>.SetValue(float) ScalarAttribute<float>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FloatAttribute() public FloatAttribute() FloatAttribute(float) public FloatAttribute(float value) Parameters value float Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Datastructures.FloatDataMap3D.html": {
    "href": "api/Vintagestory.API.Datastructures.FloatDataMap3D.html",
    "title": "Class FloatDataMap3D | VintageStory API",
    "keywords": "Class FloatDataMap3D Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A datastructure to hold 3 dimensional data in the form of floats Can be used to perfrom trilinear interpolation between individual values Open in GitHub [ProtoContract] public class FloatDataMap3D Inheritance object FloatDataMap3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FloatDataMap3D() public FloatDataMap3D() FloatDataMap3D(int, int, int) public FloatDataMap3D(int width, int height, int length) Parameters width int height int length int Fields Data [ProtoMember(1)] public float[] Data Field Value float[] Height [ProtoMember(4)] public int Height Field Value int Length [ProtoMember(3)] public int Length Field Value int Width [ProtoMember(2)] public int Width Field Value int Methods AddValue(int, int, int, float) public void AddValue(int x, int y, int z, float value) Parameters x int y int z int value float GetLerped(float, float, float) public float GetLerped(float x, float y, float z) Parameters x float y float z float Returns float GetLerpedCenterPixel(float, float, float) public float GetLerpedCenterPixel(float x, float y, float z) Parameters x float y float z float Returns float GetValue(int, int, int) public float GetValue(int x, int y, int z) Parameters x int y int z int Returns float SetValue(int, int, int, float) public void SetValue(int x, int y, int z, float value) Parameters x int y int z int value float"
  },
  "api/Vintagestory.API.Datastructures.IAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.IAttribute.html",
    "title": "Interface IAttribute | VintageStory API",
    "keywords": "Interface IAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll An attribute from an attribute tree public interface IAttribute Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Clone() IAttribute Clone() Returns IAttribute Equals(IWorldAccessor, IAttribute) bool Equals(IWorldAccessor worldForResolve, IAttribute attr) Parameters worldForResolve IWorldAccessor attr IAttribute Returns bool FromBytes(BinaryReader) void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() int GetAttributeId() Returns int GetType() Type GetType() Returns Type GetValue() object GetValue() Returns object ToBytes(BinaryWriter) void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.IMergeable-1.html": {
    "href": "api/Vintagestory.API.Datastructures.IMergeable-1.html",
    "title": "Interface IMergeable<T> | VintageStory API",
    "keywords": "Interface IMergeable<T> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public interface IMergeable<T> Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods MergeIfEqual(T) bool MergeIfEqual(T target) Parameters target T Returns bool"
  },
  "api/Vintagestory.API.Datastructures.IOrderedDictionary-2.html": {
    "href": "api/Vintagestory.API.Datastructures.IOrderedDictionary-2.html",
    "title": "Interface IOrderedDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Interface IOrderedDictionary<TKey, TValue> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Represents a generic collection of key/value pairs that are ordered independently of the key and value. public interface IOrderedDictionary<TKey, TValue> : IOrderedDictionary, IDictionary, ICollection, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters TKey The type of the keys in the dictionary TValue The type of the values in the dictionary Inherited Members IOrderedDictionary.GetEnumerator() IOrderedDictionary.Insert(int, object, object) IOrderedDictionary.RemoveAt(int) IOrderedDictionary.this[int] IDictionary.Add(object, object) IDictionary.Clear() IDictionary.Contains(object) IDictionary.Remove(object) IDictionary.IsFixedSize IDictionary.IsReadOnly IDictionary.this[object] IDictionary.Keys IDictionary.Values ICollection.CopyTo(Array, int) ICollection.Count ICollection.IsSynchronized ICollection.SyncRoot IDictionary<TKey, TValue>.Add(TKey, TValue) IDictionary<TKey, TValue>.ContainsKey(TKey) IDictionary<TKey, TValue>.Remove(TKey) IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) IDictionary<TKey, TValue>.this[TKey] IDictionary<TKey, TValue>.Keys IDictionary<TKey, TValue>.Values ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>) ICollection<KeyValuePair<TKey, TValue>>.Clear() ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>) ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], int) ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>) ICollection<KeyValuePair<TKey, TValue>>.Count ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Add(TKey, TValue) int Add(TKey key, TValue value) Parameters key TKey value TValue Returns int GetValueAtIndex(int) TValue GetValueAtIndex(int index) Parameters index int Returns TValue Insert(int, TKey, TValue) void Insert(int index, TKey key, TValue value) Parameters index int key TKey value TValue SetAtIndex(int, TValue) void SetAtIndex(int index, TValue value) Parameters index int value TValue"
  },
  "api/Vintagestory.API.Datastructures.ITreeAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.ITreeAttribute.html",
    "title": "Interface ITreeAttribute | VintageStory API",
    "keywords": "Interface ITreeAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Represents a List of nestable Attributes public interface ITreeAttribute : IAttribute, IEnumerable<KeyValuePair<string, IAttribute>>, IEnumerable Inherited Members IAttribute.ToBytes(BinaryWriter) IAttribute.FromBytes(BinaryReader) IAttribute.GetAttributeId() IAttribute.GetType() IAttribute.GetValue() IAttribute.ToJsonToken() IAttribute.Equals(IWorldAccessor, IAttribute) IEnumerable<KeyValuePair<string, IAttribute>>.GetEnumerator() IEnumerable.GetEnumerator() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) TreeAttributeUtil.GetBlockPos(ITreeAttribute, string, BlockPos) TreeAttributeUtil.GetVec3i(ITreeAttribute, string, Vec3i) TreeAttributeUtil.GetVec3is(ITreeAttribute, string, Vec3i[]) TreeAttributeUtil.SetBlockPos(ITreeAttribute, string, BlockPos) TreeAttributeUtil.SetVec3i(ITreeAttribute, string, Vec3i) TreeAttributeUtil.SetVec3is(ITreeAttribute, string, Vec3i[]) Properties Count Amount of elements in this Tree attribute int Count { get; } Property Value int this[string] Will return null if given attribute does not exist IAttribute this[string key] { get; set; } Parameters key string Property Value IAttribute Values Returns all values inside this tree attributes IAttribute[] Values { get; } Property Value IAttribute[] Methods Clone() Creates a deep copy of the attribute tree ITreeAttribute Clone() Returns ITreeAttribute Equals(IWorldAccessor, IAttribute, params string[]) bool Equals(IWorldAccessor worldForResolve, IAttribute attr, params string[] ignoreSubTrees) Parameters worldForResolve IWorldAccessor attr IAttribute ignoreSubTrees string[] Returns bool GetAsBool(string, bool) Returns true/false, for whatever type of attribute is found for given key bool GetAsBool(string key, bool defaultValue = false) Parameters key string defaultValue bool Returns bool GetAsInt(string, int) Same as (int)GetDecimal(string, double) int GetAsInt(string key, int defaultValue = 0) Parameters key string defaultValue int Returns int GetAsString(string, string) Retrieves the value of given attribute, independent of attribute type string GetAsString(string key, string defaultValue = null) Parameters key string defaultValue string Returns string GetBool(string, bool) Retrieves a bool or default value if key is not found bool GetBool(string key, bool defaultValue = false) Parameters key string defaultValue bool Returns bool GetBytes(string, byte[]) Retrieves a byte array or defaultValue if key is not found byte[] GetBytes(string key, byte[] defaultValue = null) Parameters key string defaultValue byte[] Returns byte[] GetDecimal(string, double) Retrieves an int, float, long or double value. Whatever attribute is found for given key double GetDecimal(string key, double defaultValue = 0) Parameters key string defaultValue double Returns double GetDouble(string, double) Retrieves a double or defaultValue if key is not found double GetDouble(string key, double defaultValue = 0) Parameters key string defaultValue double Returns double GetFloat(string, float) Retrieves a float or defaultvalue if key is not found float GetFloat(string key, float defaultValue = 0) Parameters key string defaultValue float Returns float GetHashCode(string[]) int GetHashCode(string[] ignoredAttributes) Parameters ignoredAttributes string[] Returns int GetInt(string, int) Retrieves an int or default value if key is not found int GetInt(string key, int defaultValue = 0) Parameters key string defaultValue int Returns int GetItemstack(string, ItemStack) Retrieves an itemstack or defaultValue if key is not found. Be sure to call stack.ResolveBlockOrItem() after retrieving it. ItemStack GetItemstack(string key, ItemStack defaultValue = null) Parameters key string defaultValue ItemStack Returns ItemStack GetLong(string, long) Retrieves a long or default value if key is not found long GetLong(string key, long defaultValue = 0) Parameters key string defaultValue long Returns long GetOrAddTreeAttribute(string) Retrieves an attribute tree or adds it if key is not found. Throws an exception if the key does exist but is not a tree. ITreeAttribute GetOrAddTreeAttribute(string key) Parameters key string Returns ITreeAttribute GetString(string, string) Retrieves a string or defaultValue if key is not found string GetString(string key, string defaultValue = null) Parameters key string defaultValue string Returns string GetTreeAttribute(string) Retrieves an attribute tree or null if key is not found ITreeAttribute GetTreeAttribute(string key) Parameters key string Returns ITreeAttribute HasAttribute(string) True if this attribute exists bool HasAttribute(string key) Parameters key string Returns bool IsSubSetOf(IWorldAccessor, IAttribute) bool IsSubSetOf(IWorldAccessor worldForResolve, IAttribute other) Parameters worldForResolve IWorldAccessor other IAttribute Returns bool MergeTree(ITreeAttribute) Merges trees (it will overwrite existing values) void MergeTree(ITreeAttribute tree) Parameters tree ITreeAttribute RemoveAttribute(string) Removes an attribute void RemoveAttribute(string key) Parameters key string SetBool(string, bool) Creates a bool attribute with given key and value void SetBool(string key, bool value) Parameters key string value bool SetBytes(string, byte[]) Creates a byte[] attribute with given key and value void SetBytes(string key, byte[] value) Parameters key string value byte[] SetDouble(string, double) Creates a double attribute with given key and value void SetDouble(string key, double value) Parameters key string value double SetFloat(string, float) Creates a float attribute with given key and value void SetFloat(string key, float value) Parameters key string value float SetInt(string, int) Creates an int attribute with given key and value void SetInt(string key, int value) Parameters key string value int SetItemstack(string, ItemStack) Sets given item stack with given key void SetItemstack(string key, ItemStack itemstack) Parameters key string itemstack ItemStack SetLong(string, long) Creates a long attribute with given key and value void SetLong(string key, long value) Parameters key string value long SetString(string, string) Creates a string attribute with given key and value void SetString(string key, string value) Parameters key string value string SortedCopy(bool) Returns a ITreeAttribute sorted alphabetically by key. Does not modify the existing ITreeAttribute OrderedDictionary<string, IAttribute> SortedCopy(bool recursive = false) Parameters recursive bool Returns OrderedDictionary<string, IAttribute> TryGetAttribute(string, out IAttribute) Similar to TryGetValue for a Dictionary bool TryGetAttribute(string key, out IAttribute value) Parameters key string value IAttribute Returns bool TryGetBool(string) Retrieves a bool or null if the key is not found bool? TryGetBool(string key) Parameters key string Returns bool? TryGetDouble(string) Retrieves a double or null if key is not found double? TryGetDouble(string key) Parameters key string Returns double? TryGetFloat(string) Retrieves a float or null if the key is not found float? TryGetFloat(string key) Parameters key string Returns float? TryGetInt(string) Retrieves an int or null if the key is not found int? TryGetInt(string key) Parameters key string Returns int? TryGetLong(string) Retrieves a long or null value if key is not found long? TryGetLong(string key) Parameters key string Returns long?"
  },
  "api/Vintagestory.API.Datastructures.IntArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.IntArrayAttribute.html",
    "title": "Class IntArrayAttribute | VintageStory API",
    "keywords": "Class IntArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class IntArrayAttribute : ArrayAttribute<int>, IAttribute Inheritance object ArrayAttribute<int> IntArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<int>.value ArrayAttribute<int>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<int>.GetValue() ArrayAttribute<int>.ToJsonToken() ArrayAttribute<int>.ToString() ArrayAttribute<int>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IntArrayAttribute() public IntArrayAttribute() IntArrayAttribute(int[]) public IntArrayAttribute(int[] value) Parameters value int[] IntArrayAttribute(ushort[]) public IntArrayAttribute(ushort[] value) Parameters value ushort[] IntArrayAttribute(uint[]) public IntArrayAttribute(uint[] value) Parameters value uint[] Properties AsUShort public ushort[] AsUShort { get; } Property Value ushort[] AsUint public uint[] AsUint { get; } Property Value uint[] Methods AddInt(params int[]) public void AddInt(params int[] val) Parameters val int[] Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int RemoveInt(int) public void RemoveInt(int val) Parameters val int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.IntAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.IntAttribute.html",
    "title": "Class IntAttribute | VintageStory API",
    "keywords": "Class IntAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class IntAttribute : ScalarAttribute<int>, IAttribute Inheritance object ScalarAttribute<int> IntAttribute Implements IAttribute Inherited Members ScalarAttribute<int>.value ScalarAttribute<int>.Equals(IWorldAccessor, IAttribute) ScalarAttribute<int>.Equals(object) ScalarAttribute<int>.GetValue() ScalarAttribute<int>.SetValue(int) ScalarAttribute<int>.ToString() ScalarAttribute<int>.ToJsonToken() ScalarAttribute<int>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IntAttribute() public IntAttribute() IntAttribute(int) public IntAttribute(int value) Parameters value int Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.IntDataMap2D.html": {
    "href": "api/Vintagestory.API.Datastructures.IntDataMap2D.html",
    "title": "Class IntDataMap2D | VintageStory API",
    "keywords": "Class IntDataMap2D Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A datastructure to hold 2 dimensional data in the form of ints. Can be used to perfrom bilinear interpolation between individual values Open in GitHub [ProtoContract] public class IntDataMap2D Inheritance object IntDataMap2D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BottomRightPadding Bottom and Right padding [ProtoMember(4)] public int BottomRightPadding Field Value int Data [ProtoMember(1, IsPacked = true)] public int[] Data Field Value int[] Size Full Width and Length of the map (square) [ProtoMember(2)] public int Size Field Value int TopLeftPadding Top and Left padding [ProtoMember(3)] public int TopLeftPadding Field Value int Properties InnerSize Width and Length of the map excluding any padding public int InnerSize { get; } Property Value int Methods CreateEmpty() public static IntDataMap2D CreateEmpty() Returns IntDataMap2D GetColorLerpedCorrectly(float, float) public int GetColorLerpedCorrectly(float x, float z) Parameters x float z float Returns int GetInt(int, int) public int GetInt(int x, int z) Parameters x int z int Returns int GetIntLerpedCorrectly(float, float) public float GetIntLerpedCorrectly(float x, float z) Parameters x float z float Returns float GetUnpaddedColorLerped(float, float) public int GetUnpaddedColorLerped(float x, float z) Parameters x float z float Returns int GetUnpaddedColorLerpedForNormalizedPos(float, float) The parameters should both be in the range 0..1. They represent the position within the MapRegion. Calling code may need to use the (float)((double)val % 1.0) technique to ensure enough bits of precision when taking the fractional part (% 1.0), if val is large (for example a BlockPos in a 8Mx8M world) public int GetUnpaddedColorLerpedForNormalizedPos(float x, float z) Parameters x float z float Returns int GetUnpaddedInt(int, int) public int GetUnpaddedInt(int x, int z) Parameters x int z int Returns int GetUnpaddedIntLerped(float, float) public float GetUnpaddedIntLerped(float x, float z) Parameters x float z float Returns float GetUnpaddedIntLerpedForBlockPos(int, int, int) public int GetUnpaddedIntLerpedForBlockPos(int x, int z, int regionSize) Parameters x int z int regionSize int Returns int SetInt(int, int, int) public void SetInt(int x, int z, int value) Parameters x int z int value int"
  },
  "api/Vintagestory.API.Datastructures.IntRef.html": {
    "href": "api/Vintagestory.API.Datastructures.IntRef.html",
    "title": "Class IntRef | VintageStory API",
    "keywords": "Class IntRef Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class IntRef Inheritance object IntRef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Create(int) public static IntRef Create(int value_) Parameters value_ int Returns IntRef GetValue() public int GetValue() Returns int SetValue(int) public void SetValue(int value_) Parameters value_ int"
  },
  "api/Vintagestory.API.Datastructures.ItemTagArray.html": {
    "href": "api/Vintagestory.API.Datastructures.ItemTagArray.html",
    "title": "Struct ItemTagArray | VintageStory API",
    "keywords": "Struct ItemTagArray Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll List of item tags meant to be used for fast comparisons. Restricts number of registered item tags to 256. public readonly struct ItemTagArray Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemTagArray() public ItemTagArray() ItemTagArray(IEnumerable<ushort>) public ItemTagArray(IEnumerable<ushort> tags) Parameters tags IEnumerable<ushort> ItemTagArray(ushort) public ItemTagArray(ushort tag) Parameters tag ushort ItemTagArray(ulong, ulong, ulong, ulong) public ItemTagArray(ulong bitMask1, ulong bitMask2, ulong bitMask3, ulong bitMask4) Parameters bitMask1 ulong bitMask2 ulong bitMask3 ulong bitMask4 ulong Fields BitMask1 public readonly ulong BitMask1 Field Value ulong BitMask2 public readonly ulong BitMask2 Field Value ulong BitMask3 public readonly ulong BitMask3 Field Value ulong BitMask4 public readonly ulong BitMask4 Field Value ulong Empty public static readonly ItemTagArray Empty Field Value ItemTagArray MasksNumber public const byte MasksNumber = 4 Field Value byte Size Maximum amount of different tags supported by tag array. Limited by total amount of bits in bit masks. public const int Size = 256 Field Value int Methods And(ItemTagArray, ItemTagArray) public static ItemTagArray And(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns ItemTagArray ContainsAll(ItemTagArray) Checks if this tag array contains all tags from other public bool ContainsAll(ItemTagArray other) Parameters other ItemTagArray Returns bool ContainsAllFromAtLeastOne(ItemTagArray[]) Checks if this tag array contains all tags from at least one element of tags public bool ContainsAllFromAtLeastOne(ItemTagArray[] tags) Parameters tags ItemTagArray[] Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FromBytes(BinaryReader) public static ItemTagArray FromBytes(BinaryReader reader) Parameters reader BinaryReader Returns ItemTagArray GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersect(ItemTagArray) Checks if this tag array has at least one common tag with other public bool Intersect(ItemTagArray other) Parameters other ItemTagArray Returns bool Intersect(ItemTagArray, ItemTagArray) Checks if two tag arrays have at least one common tag public static bool Intersect(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns bool IntersectsWithEach(ItemTagArray[]) Checks if this tag array contains at least on tag from each element of tags public bool IntersectsWithEach(ItemTagArray[] tags) Parameters tags ItemTagArray[] Returns bool Not(ItemTagArray) public static ItemTagArray Not(ItemTagArray value) Parameters value ItemTagArray Returns ItemTagArray Or(ItemTagArray, ItemTagArray) public static ItemTagArray Or(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns ItemTagArray ToArray() Converts tag array into list of tag ids sorted in ascending order public IEnumerable<ushort> ToArray() Returns IEnumerable<ushort> List of tag ids in ascending order ToArray(ICoreAPI) Converts tag array into list of tags. public IEnumerable<string> ToArray(ICoreAPI api) Parameters api ICoreAPI Returns IEnumerable<string> ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. isPresentIn(ref ItemTagArray) public bool isPresentIn(ref ItemTagArray other) Parameters other ItemTagArray Returns bool Operators operator &(ItemTagArray, ItemTagArray) public static ItemTagArray operator &(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns ItemTagArray operator |(ItemTagArray, ItemTagArray) public static ItemTagArray operator |(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns ItemTagArray operator ==(ItemTagArray, ItemTagArray) public static bool operator ==(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns bool operator !=(ItemTagArray, ItemTagArray) public static bool operator !=(ItemTagArray first, ItemTagArray second) Parameters first ItemTagArray second ItemTagArray Returns bool operator ~(ItemTagArray) public static ItemTagArray operator ~(ItemTagArray value) Parameters value ItemTagArray Returns ItemTagArray"
  },
  "api/Vintagestory.API.Datastructures.ItemTagRule.html": {
    "href": "api/Vintagestory.API.Datastructures.ItemTagRule.html",
    "title": "Struct ItemTagRule | VintageStory API",
    "keywords": "Struct ItemTagRule Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Pair of tag arrays that is used for implementation of tag inversion public readonly struct ItemTagRule Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemTagRule(ICoreAPI, IEnumerable<string>) public ItemTagRule(ICoreAPI api, IEnumerable<string> tags) Parameters api ICoreAPI tags IEnumerable<string> ItemTagRule(ItemTagArray, ItemTagArray) public ItemTagRule(ItemTagArray tagsThatShouldBePresent, ItemTagArray tagsThatShouldBeAbsent) Parameters tagsThatShouldBePresent ItemTagArray tagsThatShouldBeAbsent ItemTagArray Fields Empty public static readonly ItemTagRule Empty Field Value ItemTagRule NotPrefix public const string NotPrefix = \"not-\" Field Value string TagsThatShouldBeAbsent public readonly ItemTagArray TagsThatShouldBeAbsent Field Value ItemTagArray TagsThatShouldBePresent public readonly ItemTagArray TagsThatShouldBePresent Field Value ItemTagArray Methods ContainsAllFromAtLeastOne(ItemTagArray, ItemTagRule[]) Checks if itemTag contains all tags from at least one rule from rules. public static bool ContainsAllFromAtLeastOne(ItemTagArray itemTag, ItemTagRule[] rules) Parameters itemTag ItemTagArray rules ItemTagRule[] Returns bool Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Intersects(ItemTagArray) public bool Intersects(ItemTagArray tags) Parameters tags ItemTagArray Returns bool IntersectsWithEach(ItemTagArray, ItemTagRule[]) Checks if itemTag contains at least on tag from each rule from rules. public static bool IntersectsWithEach(ItemTagArray itemTag, ItemTagRule[] rules) Parameters itemTag ItemTagArray rules ItemTagRule[] Returns bool ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(ItemTagRule, ItemTagRule) public static bool operator ==(ItemTagRule first, ItemTagRule second) Parameters first ItemTagRule second ItemTagRule Returns bool operator !=(ItemTagRule, ItemTagRule) public static bool operator !=(ItemTagRule first, ItemTagRule second) Parameters first ItemTagRule second ItemTagRule Returns bool"
  },
  "api/Vintagestory.API.Datastructures.ItemstackAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.ItemstackAttribute.html",
    "title": "Class ItemstackAttribute | VintageStory API",
    "keywords": "Class ItemstackAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class ItemstackAttribute : IAttribute Inheritance object ItemstackAttribute Implements IAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ItemstackAttribute() public ItemstackAttribute() ItemstackAttribute(ItemStack) public ItemstackAttribute(ItemStack value) Parameters value ItemStack Fields value public ItemStack value Field Value ItemStack Methods Clone() public IAttribute Clone() Returns IAttribute Equals(IWorldAccessor, IAttribute) public bool Equals(IWorldAccessor worldForResolve, IAttribute attr) Parameters worldForResolve IWorldAccessor attr IAttribute Returns bool FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetValue() public object GetValue() Returns object SetValue(ItemStack) public void SetValue(ItemStack newval) Parameters newval ItemStack ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.JsonObject.html": {
    "href": "api/Vintagestory.API.Datastructures.JsonObject.html",
    "title": "Class JsonObject | VintageStory API",
    "keywords": "Class JsonObject Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Elegant, yet somewhat inefficently designed (because wasteful with heap objects) wrapper class to abstract away the type-casting nightmare of JToken O.O Open in GitHub public class JsonObject : IReadOnlyCollection<JsonObject>, IEnumerable<JsonObject>, IEnumerable Inheritance object JsonObject Implements IReadOnlyCollection<JsonObject> IEnumerable<JsonObject> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors JsonObject(JToken) Create a new instance of a JsonObject public JsonObject(JToken token) Parameters token JToken JsonObject(JsonObject, bool) Create a new instance of a JsonObject public JsonObject(JsonObject original, bool unused) Parameters original JsonObject unused bool Only present so that the Constructor with a sole null parameter has an unambiguous signature Properties Count Gets the number of elements in the collection. public int Count { get; } Property Value int The number of elements in the collection. Exists True if the token is not null public bool Exists { get; } Property Value bool this[string] Access a tokens element with given key public JsonObject this[string key] { get; } Parameters key string Property Value JsonObject Token public virtual JToken Token { get; set; } Property Value JToken Methods AsArray() Turn the token into an array of JsonObjects public JsonObject[] AsArray() Returns JsonObject[] AsArray<T>(T[], string) Turn the token into an array public T[] AsArray<T>(T[] defaultValue = null, string defaultDomain = null) Parameters defaultValue T[] If the conversion fails, this value is used instead defaultDomain string Returns T[] Type Parameters T AsBool(bool) Turn the token into a boolean public bool AsBool(bool defaultValue = false) Parameters defaultValue bool If the conversion fails, this value is used instead Returns bool AsDouble(double) Turn the token into a double public double AsDouble(double defaultValue = 0) Parameters defaultValue double If the conversion fails, this value is used instead Returns double AsFloat(float) Turn the token into a float public float AsFloat(float defaultValue = 0) Parameters defaultValue float If the conversion fails, this value is used instead Returns float AsFloatArray(float[]) [Obsolete(\"Use AsArray<float>() instead\")] public float[] AsFloatArray(float[] defaultValue = null) Parameters defaultValue float[] Returns float[] AsInt(int) Turn the token into an integer public int AsInt(int defaultValue = 0) Parameters defaultValue int If the conversion fails, this value is used instead Returns int AsObject<T>(JsonSerializerSettings, T, string) public T AsObject<T>(JsonSerializerSettings settings, T defaultValue, string domain = \"game\") Parameters settings JsonSerializerSettings defaultValue T domain string Returns T Type Parameters T AsObject<T>(T) Deserialize the token to an object of the specified type T public T AsObject<T>(T defaultValue = default) Parameters defaultValue T Returns T Type Parameters T AsObject<T>(T, string) Deserialize the token to an object of the specified type T, with the specified domain for any AssetLocation which needs to be parsed public T AsObject<T>(T defaultValue, string domain) Parameters defaultValue T domain string Returns T Type Parameters T AsString(string) Turn the token into a string public string AsString(string defaultValue = null) Parameters defaultValue string If the conversion fails, this value is used instead Returns string AsStringArray(string[], string) [Obsolete(\"Use AsArray<string>() instead\")] public string[] AsStringArray(string[] defaultValue = null, string defaultDomain = null) Parameters defaultValue string[] defaultDomain string Returns string[] Clone() Returns a deep clone public JsonObject Clone() Returns JsonObject FillPlaceHolder(string, string) public virtual void FillPlaceHolder(string key, string value) Parameters key string value string FromJson(string) public static JsonObject FromJson(string jsonCode) Parameters jsonCode string Returns JsonObject GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<JsonObject> GetEnumerator() Returns IEnumerator<JsonObject> An enumerator that can be used to iterate through the collection. IsArray() True if the token is a JArray public bool IsArray() Returns bool IsTrue(string) Returns true if this object has the named bool attribute, and it is true public bool IsTrue(string attrName) Parameters attrName string Returns bool KeyExists(string) True if the token has an element with given key public bool KeyExists(string key) Parameters key string Returns bool ToAttribute() Turns the token into an IAttribute with all its child elements, if it has any. Note: If you converting this to a tree attribute, a subsequent call to tree.GetInt() might not work because Newtonsoft.JSON seems to load integers as long, so use GetDecimal() or GetLong() instead. Similar things might happen with float<->double public IAttribute ToAttribute() Returns IAttribute ToPrimitiveArray<T>(JArray) Turn a JArray into a primitive array public static T[] ToPrimitiveArray<T>(JArray array) Parameters array JArray Returns T[] Type Parameters T ToString() Calls token.ToString() public override string ToString() Returns string"
  },
  "api/Vintagestory.API.Datastructures.JsonTreeAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.JsonTreeAttribute.html",
    "title": "Class JsonTreeAttribute | VintageStory API",
    "keywords": "Class JsonTreeAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class JsonTreeAttribute Inheritance object JsonTreeAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields elems public Dictionary<string, JsonTreeAttribute> elems Field Value Dictionary<string, JsonTreeAttribute> type public EnumAttributeType type Field Value EnumAttributeType value public string value Field Value string values public string[] values Field Value string[] Methods Clone() public JsonTreeAttribute Clone() Returns JsonTreeAttribute ToAttribute(IWorldAccessor) public IAttribute ToAttribute(IWorldAccessor resolver) Parameters resolver IWorldAccessor Returns IAttribute"
  },
  "api/Vintagestory.API.Datastructures.LimitedDictionary-2.html": {
    "href": "api/Vintagestory.API.Datastructures.LimitedDictionary-2.html",
    "title": "Class LimitedDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Class LimitedDictionary<TKey, TValue> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Can only hold a limited amount of elements, discards oldest elements once the capacity is reached. public class LimitedDictionary<TKey, TValue> Type Parameters TKey TValue Inheritance object LimitedDictionary<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LimitedDictionary(int) Create a new limited dictionary with given maximum capacity public LimitedDictionary(int maxCapacity) Parameters maxCapacity int Properties Count public int Count { get; } Property Value int this[TKey] public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods Add(TKey, TValue) public void Add(TKey key, TValue value) Parameters key TKey value TValue"
  },
  "api/Vintagestory.API.Datastructures.LimitedList-1.html": {
    "href": "api/Vintagestory.API.Datastructures.LimitedList-1.html",
    "title": "Class LimitedList<TElem> | VintageStory API",
    "keywords": "Class LimitedList<TElem> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Holds a limited amount of items, discards the lowest index item when an overflow happens public class LimitedList<TElem> : IEnumerable<TElem>, IEnumerable Type Parameters TElem Inheritance object LimitedList<TElem> Implements IEnumerable<TElem> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LimitedList(int) Create a new list with a given maximum capacity public LimitedList(int maxCapacity) Parameters maxCapacity int LimitedList(int, IEnumerable<TElem>) Create a new list with a given maximum capacity public LimitedList(int maxCapacity, IEnumerable<TElem> initialElements) Parameters maxCapacity int initialElements IEnumerable<TElem> Properties Count public int Count { get; } Property Value int this[int] public TElem this[int index] { get; } Parameters index int Property Value TElem Methods Add(TElem) public void Add(TElem key) Parameters key TElem Clear() public void Clear() GetEnumerator() Returns an enumerator that iterates through a collection. public IEnumerator GetEnumerator() Returns IEnumerator An IEnumerator object that can be used to iterate through the collection. IsFull() public bool IsFull() Returns bool LastElement() public TElem LastElement() Returns TElem RemoveAt(int) public void RemoveAt(int i) Parameters i int SetCapacity(int) public void SetCapacity(int maxCapacity) Parameters maxCapacity int ToArray() public TElem[] ToArray() Returns TElem[]"
  },
  "api/Vintagestory.API.Datastructures.ListDictionary-2.html": {
    "href": "api/Vintagestory.API.Datastructures.ListDictionary-2.html",
    "title": "Class ListDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Class ListDictionary<TKey, TValue> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public class ListDictionary<TKey, TValue> : Dictionary<TKey, List<TValue>>, IDictionary<TKey, List<TValue>>, ICollection<KeyValuePair<TKey, List<TValue>>>, IReadOnlyDictionary<TKey, List<TValue>>, IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>>, IEnumerable<KeyValuePair<TKey, List<TValue>>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Type Parameters TKey TValue Inheritance object Dictionary<TKey, List<TValue>> ListDictionary<TKey, TValue> Implements IDictionary<TKey, List<TValue>> ICollection<KeyValuePair<TKey, List<TValue>>> IReadOnlyDictionary<TKey, List<TValue>> IReadOnlyCollection<KeyValuePair<TKey, List<TValue>>> IEnumerable<KeyValuePair<TKey, List<TValue>>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members Dictionary<TKey, List<TValue>>.Add(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.Clear() Dictionary<TKey, List<TValue>>.ContainsKey(TKey) Dictionary<TKey, List<TValue>>.ContainsValue(List<TValue>) Dictionary<TKey, List<TValue>>.EnsureCapacity(int) Dictionary<TKey, List<TValue>>.GetEnumerator() Dictionary<TKey, List<TValue>>.OnDeserialization(object) Dictionary<TKey, List<TValue>>.Remove(TKey) Dictionary<TKey, List<TValue>>.Remove(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.TrimExcess() Dictionary<TKey, List<TValue>>.TrimExcess(int) Dictionary<TKey, List<TValue>>.TryAdd(TKey, List<TValue>) Dictionary<TKey, List<TValue>>.TryGetValue(TKey, out List<TValue>) Dictionary<TKey, List<TValue>>.Comparer Dictionary<TKey, List<TValue>>.Count Dictionary<TKey, List<TValue>>.this[TKey] Dictionary<TKey, List<TValue>>.Keys Dictionary<TKey, List<TValue>>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ListDictionary() public ListDictionary() ListDictionary(IDictionary<TKey, List<TValue>>) public ListDictionary(IDictionary<TKey, List<TValue>> dictionary) Parameters dictionary IDictionary<TKey, List<TValue>> ListDictionary(IDictionary<TKey, List<TValue>>, IEqualityComparer<TKey>) public ListDictionary(IDictionary<TKey, List<TValue>> dictionary, IEqualityComparer<TKey> comparer) Parameters dictionary IDictionary<TKey, List<TValue>> comparer IEqualityComparer<TKey> ListDictionary(IEqualityComparer<TKey>) public ListDictionary(IEqualityComparer<TKey> comparer) Parameters comparer IEqualityComparer<TKey> ListDictionary(int) public ListDictionary(int capacity) Parameters capacity int ListDictionary(int, IEqualityComparer<TKey>) public ListDictionary(int capacity, IEqualityComparer<TKey> comparer) Parameters capacity int comparer IEqualityComparer<TKey> Methods Add(TKey, TValue) public void Add(TKey key, TValue value) Parameters key TKey value TValue ClearKey(TKey) public void ClearKey(TKey key) Parameters key TKey ContainsValue(TKey, TValue) public bool ContainsValue(TKey key, TValue value) Parameters key TKey value TValue Returns bool ContainsValue(TValue) public bool ContainsValue(TValue value) Parameters value TValue Returns bool GetEquivalent(TKey, TValue) public TValue GetEquivalent(TKey key, TValue value) Parameters key TKey value TValue Returns TValue GetKeyOfValue(TValue) public TKey GetKeyOfValue(TValue value) Parameters value TValue Returns TKey Remove(TKey, TValue) public bool Remove(TKey key, TValue value) Parameters key TKey value TValue Returns bool Remove(TValue) public bool Remove(TValue value) Parameters value TValue Returns bool"
  },
  "api/Vintagestory.API.Datastructures.LongArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.LongArrayAttribute.html",
    "title": "Class LongArrayAttribute | VintageStory API",
    "keywords": "Class LongArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class LongArrayAttribute : ArrayAttribute<long>, IAttribute Inheritance object ArrayAttribute<long> LongArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<long>.value ArrayAttribute<long>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<long>.GetValue() ArrayAttribute<long>.ToJsonToken() ArrayAttribute<long>.ToString() ArrayAttribute<long>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LongArrayAttribute() public LongArrayAttribute() LongArrayAttribute(long[]) public LongArrayAttribute(long[] value) Parameters value long[] Properties AsUint public uint[] AsUint { get; } Property Value uint[] Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.LongAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.LongAttribute.html",
    "title": "Class LongAttribute | VintageStory API",
    "keywords": "Class LongAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class LongAttribute : ScalarAttribute<long>, IAttribute Inheritance object ScalarAttribute<long> LongAttribute Implements IAttribute Inherited Members ScalarAttribute<long>.value ScalarAttribute<long>.Equals(IWorldAccessor, IAttribute) ScalarAttribute<long>.Equals(object) ScalarAttribute<long>.GetValue() ScalarAttribute<long>.SetValue(long) ScalarAttribute<long>.ToString() ScalarAttribute<long>.ToJsonToken() ScalarAttribute<long>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LongAttribute() public LongAttribute() LongAttribute(long) public LongAttribute(long value) Parameters value long Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.OrderedDictionary-2.html": {
    "href": "api/Vintagestory.API.Datastructures.OrderedDictionary-2.html",
    "title": "Class OrderedDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Class OrderedDictionary<TKey, TValue> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Same as your normal C# Dictionary but ensures that the order in which the items are added is remembered. That way you can iterate over the dictionary with the insert order intact or set/get elements by index. Taken from http://www.codeproject.com/Articles/18615/OrderedDictionary-T-A-generic-implementation-of-IO Please be aware that this is not a very efficient implementation, recommed use only for small sets of data. [ProtoContract] public class OrderedDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters TKey TValue Inheritance object OrderedDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors OrderedDictionary() public OrderedDictionary() OrderedDictionary(Dictionary<TKey, TValue>) public OrderedDictionary(Dictionary<TKey, TValue> initialData) Parameters initialData Dictionary<TKey, TValue> OrderedDictionary(IEqualityComparer<TKey>) public OrderedDictionary(IEqualityComparer<TKey> comparer) Parameters comparer IEqualityComparer<TKey> OrderedDictionary(int) public OrderedDictionary(int capacity) Parameters capacity int OrderedDictionary(int, IEqualityComparer<TKey>) public OrderedDictionary(int capacity, IEqualityComparer<TKey> comparer) Parameters capacity int comparer IEqualityComparer<TKey> OrderedDictionary(OrderedDictionary<TKey, TValue>) public OrderedDictionary(OrderedDictionary<TKey, TValue> initialData) Parameters initialData OrderedDictionary<TKey, TValue> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. InternalDictionary public Dictionary<TKey, TValue> InternalDictionary { get; } Property Value Dictionary<TKey, TValue> IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Important: these are NOT ordered. The ordered values is obtained by .ValuesOrdered public ICollection<TValue> Values { get; } Property Value ICollection<TValue> ValuesOrdered public IEnumerable<TValue> ValuesOrdered { get; } Property Value IEnumerable<TValue> Methods Add(TKey, TValue) public int Add(TKey key, TValue value) Parameters key TKey value TValue Returns int BeforeSerialization() [ProtoBeforeSerialization] protected void BeforeSerialization() Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. ContainsValue(TValue) public bool ContainsValue(TValue value) Parameters value TValue Returns bool GetEnumerator() public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> GetKeyAtIndex(int) public TKey GetKeyAtIndex(int index) Parameters index int Returns TKey GetValueAtIndex(int) public TValue GetValueAtIndex(int index) Parameters index int Returns TValue IndexOfKey(TKey) Returns -1 if the key was not found public int IndexOfKey(TKey key) Parameters key TKey Returns int Insert(int, TKey, TValue) public void Insert(int index, TKey key, TValue value) Parameters index int key TKey value TValue InsertBefore(TKey, TKey, TValue) public void InsertBefore(TKey Atkey, TKey key, TValue value) Parameters Atkey TKey key TKey value TValue OnDeserializedMethod(StreamingContext) [OnDeserialized] protected void OnDeserializedMethod(StreamingContext context) Parameters context StreamingContext Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. RemoveAt(int) public void RemoveAt(int index) Parameters index int SetAtIndex(int, TValue) public void SetAtIndex(int index, TValue value) Parameters index int value TValue TryGetValue(TKey) public TValue TryGetValue(TKey key) Parameters key TKey Returns TValue TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null."
  },
  "api/Vintagestory.API.Datastructures.QueueOfInt.html": {
    "href": "api/Vintagestory.API.Datastructures.QueueOfInt.html",
    "title": "Class QueueOfInt | VintageStory API",
    "keywords": "Class QueueOfInt Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class QueueOfInt Inheritance object QueueOfInt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors QueueOfInt() public QueueOfInt() Fields Count public int Count Field Value int array protected int[] array Field Value int[] head protected int head Field Value int maxSize public int maxSize Field Value int tail protected int tail Field Value int Methods Clear() public void Clear() Dequeue() Will return invalid data if called when Count <= 0: it is the responsibility of the calling code to check Count > 0 public int Dequeue() Returns int DequeueLIFO() Will return invalid data if called when Count <= 0: it is the responsibility of the calling code to check Count > 0 public int DequeueLIFO() Returns int Enqueue(int) public void Enqueue(int v) Parameters v int Enqueue(int, int, int, int) Enqueue a single value with four separate components, assumed to be signed int in the range -128 to +127 public void Enqueue(int a, int b, int c, int d) Parameters a int b int c int d int EnqueueIfLarger(int) public void EnqueueIfLarger(int v) Parameters v int EnqueueIfLarger(int, int, int, int) Special method for ChunkIlluminator, if already present does not enqueue, but replaces only if value d (lowest 5 bits representing the spreadlight value) is larger public void EnqueueIfLarger(int a, int b, int c, int d) Parameters a int b int c int d int"
  },
  "api/Vintagestory.API.Datastructures.Rectangled.html": {
    "href": "api/Vintagestory.API.Datastructures.Rectangled.html",
    "title": "Class Rectangled | VintageStory API",
    "keywords": "Class Rectangled Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class Rectangled Inheritance object Rectangled Derived LineRectangled Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Rectangled() public Rectangled() Rectangled(double, double) public Rectangled(double width, double height) Parameters width double height double Rectangled(double, double, double, double) public Rectangled(double X, double Y, double width, double height) Parameters X double Y double width double height double Fields Height public double Height Field Value double Width public double Width Field Value double X public double X Field Value double Y public double Y Field Value double Methods Bottom() public double Bottom() Returns double PointInside(double, double) public bool PointInside(double x, double y) Parameters x double y double Returns bool"
  },
  "api/Vintagestory.API.Datastructures.Rectanglef.html": {
    "href": "api/Vintagestory.API.Datastructures.Rectanglef.html",
    "title": "Class Rectanglef | VintageStory API",
    "keywords": "Class Rectanglef Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class Rectanglef Inheritance object Rectanglef Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Rectanglef() public Rectanglef() Rectanglef(float, float, float, float) public Rectanglef(float x, float y, float width, float height) Parameters x float y float width float height float Fields Height public float Height Field Value float Width public float Width Field Value float X public float X Field Value float Y public float Y Field Value float Methods Bottom() public float Bottom() Returns float Create(float, float, float, float) public static Rectanglef Create(float x, float y, float width, float height) Parameters x float y float width float height float Returns Rectanglef"
  },
  "api/Vintagestory.API.Datastructures.RingArray-1.html": {
    "href": "api/Vintagestory.API.Datastructures.RingArray-1.html",
    "title": "Class RingArray<T> | VintageStory API",
    "keywords": "Class RingArray<T> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public class RingArray<T> : IEnumerable<T>, IEnumerable Type Parameters T Inheritance object RingArray<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors RingArray(int) public RingArray(int capacity) Parameters capacity int RingArray(int, T[]) public RingArray(int capacity, T[] initialvalues) Parameters capacity int initialvalues T[] Properties EndPosition public int EndPosition { get; set; } Property Value int this[int] public T this[int index] { get; set; } Parameters index int Property Value T Length Total size of the stack public int Length { get; } Property Value int Values public T[] Values { get; } Property Value T[] Methods Add(T) Pushes an element onto the end of the queue public void Add(T elem) Parameters elem T Clear() Wipes the buffer and resets the count public void Clear() GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. ResizeTo(int) If smaller than the old size, will discard oldest elements first public void ResizeTo(int size) Parameters size int"
  },
  "api/Vintagestory.API.Datastructures.RotatableCube.html": {
    "href": "api/Vintagestory.API.Datastructures.RotatableCube.html",
    "title": "Class RotatableCube | VintageStory API",
    "keywords": "Class RotatableCube Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A rotatable version of a cuboid. Open in GitHub [DocumentAsJson] public class RotatableCube : Cuboidf, IEquatable<Cuboidf> Inheritance object Cuboidf RotatableCube Implements IEquatable<Cuboidf> Inherited Members Cuboidf.X1 Cuboidf.Y1 Cuboidf.Z1 Cuboidf.X2 Cuboidf.Y2 Cuboidf.Z2 Cuboidf.XSize Cuboidf.YSize Cuboidf.ZSize Cuboidf.Width Cuboidf.Height Cuboidf.Length Cuboidf.MinX Cuboidf.MinY Cuboidf.MinZ Cuboidf.MaxX Cuboidf.MaxY Cuboidf.MaxZ Cuboidf.MidX Cuboidf.MidY Cuboidf.MidZ Cuboidf.this[int] Cuboidf.Empty Cuboidf.Start Cuboidf.End Cuboidf.Startd Cuboidf.Endd Cuboidf.Center Cuboidf.Set(float, float, float, float, float, float) Cuboidf.Set(IVec3, IVec3) Cuboidf.Set(Cuboidf) Cuboidf.Translate(float, float, float) Cuboidf.Translate(IVec3) Cuboidf.Sub(float, float, float) Cuboidf.Sub(IVec3) Cuboidf.Contains(double, double, double) Cuboidf.ContainsOrTouches(float, float, float) Cuboidf.ContainsOrTouches(IVec3) Cuboidf.OmniNotDownGrowBy(float) Cuboidf.OmniGrowBy(float) Cuboidf.ShrinkBy(float) Cuboidf.GrowToInclude(int, int, int) Cuboidf.ClampTo(Vec3f, Vec3f) Cuboidf.GrowToInclude(IVec3) Cuboidf.ShortestDistanceFrom(float, float, float) Cuboidf.ShortestDistanceFrom(IVec3) Cuboidf.pushOutX(Cuboidf, float, ref EnumPushDirection) Cuboidf.pushOutY(Cuboidf, float, ref EnumPushDirection) Cuboidf.pushOutZ(Cuboidf, float, ref EnumPushDirection) Cuboidf.RotatedCopy(float, float, float, Vec3d) Cuboidf.TransformedCopy(float[]) Cuboidf.RotatedCopy(IVec3, Vec3d) Cuboidf.OffsetCopy(float, float, float) Cuboidf.OffsetCopy(IVec3) Cuboidf.OffsetCopyDouble(double, double, double) Cuboidf.OffsetCopyDouble(IVec3) Cuboidf.Expand(BlockFacing, float) Cuboidf.ToDouble() Cuboidf.Default() Cuboidf.RoundToFracsOfOne10thousand() Cuboidf.Equals(Cuboidf) Cuboidf.ConvertToCuboidi() Cuboidf.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"selectionboxbytype\": { \"*-up\": { \"x1\": 0, \"y1\": 0, \"z1\": 0, \"x2\": 1, \"y2\": 0.4, \"z2\": 1 }, \"*-north\": { \"x1\": 0, \"y1\": 0, \"z1\": 0, \"x2\": 1, \"y2\": 0.4, \"z2\": 1, \"rotateZ\": 90, \"rotateY\": 270 }, ... }, Constructors RotatableCube() public RotatableCube() RotatableCube(float, float, float, float, float, float) public RotatableCube(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ) Parameters MinX float MinY float MinZ float MaxX float MaxY float MaxZ float Fields Origin The origin point for the object to rotate around. Measured in meters from zero, not percent. [DocumentAsJson] public Vec3d Origin Field Value Vec3d RotateX The cube's rotation around the X axis. [DocumentAsJson] public float RotateX Field Value float RotateY The cube's rotation around the Y axis. [DocumentAsJson] public float RotateY Field Value float RotateZ The cube's rotation around the Z axis. [DocumentAsJson] public float RotateZ Field Value float Methods Clone() public RotatableCube Clone() Returns RotatableCube RotatedCopy() public Cuboidf RotatedCopy() Returns Cuboidf ToHitboxCuboidi(float, Vec3d) public Cuboidi ToHitboxCuboidi(float rotateY, Vec3d origin = null) Parameters rotateY float origin Vec3d Returns Cuboidi"
  },
  "api/Vintagestory.API.Datastructures.ScalarAttribute-1.html": {
    "href": "api/Vintagestory.API.Datastructures.ScalarAttribute-1.html",
    "title": "Class ScalarAttribute<T> | VintageStory API",
    "keywords": "Class ScalarAttribute<T> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public abstract class ScalarAttribute<T> Type Parameters T Inheritance object ScalarAttribute<T> Derived BoolAttribute DoubleAttribute FloatAttribute IntAttribute LongAttribute StringAttribute Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields value public T value Field Value T Methods Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object b) Parameters b object Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(IWorldAccessor, IAttribute) public virtual bool Equals(IWorldAccessor worldForResolve, IAttribute attr) Parameters worldForResolve IWorldAccessor attr IAttribute Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetValue() public virtual object GetValue() Returns object SetValue(T) public virtual void SetValue(T newval) Parameters newval T ToJsonToken() public virtual string ToJsonToken() Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.Datastructures.SmallBoolArray.html": {
    "href": "api/Vintagestory.API.Datastructures.SmallBoolArray.html",
    "title": "Struct SmallBoolArray | VintageStory API",
    "keywords": "Struct SmallBoolArray Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Suitable for up to 32 bool values, though normally used only for 6. Offers most of the methods available for a bool[], so can be dropped in to existing code public struct SmallBoolArray : IEquatable<int> Implements IEquatable<int> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SmallBoolArray(bool[]) public SmallBoolArray(bool[] values) Parameters values bool[] SmallBoolArray(int) public SmallBoolArray(int values) Parameters values int SmallBoolArray(int[]) public SmallBoolArray(int[] values) Parameters values int[] Fields OnAllSides public const int OnAllSides = 63 Field Value int Properties All public bool All { get; set; } Property Value bool Any public bool Any { get; } Property Value bool Horizontals public bool Horizontals { get; } Property Value bool this[int] public bool this[int i] { get; set; } Parameters i int Property Value bool SidesAndBase public bool SidesAndBase { get; } Property Value bool Verticals public bool Verticals { get; } Property Value bool Methods Equals(int) Indicates whether the current object is equal to another object of the same type. public bool Equals(int other) Parameters other int An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object o) Parameters o object Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Fill(bool) public void Fill(bool b) Parameters b bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. OnSide(BlockFacing) public bool OnSide(BlockFacing face) Parameters face BlockFacing Returns bool Opposite(int) public bool Opposite(int i) Parameters i int Returns bool ToIntArray(int) public int[] ToIntArray(int size) Parameters size int Returns int[] Value() public int Value() Returns int Operators operator ==(SmallBoolArray, int) public static bool operator ==(SmallBoolArray left, int right) Parameters left SmallBoolArray right int Returns bool implicit operator int(SmallBoolArray) public static implicit operator int(SmallBoolArray a) Parameters a SmallBoolArray Returns int operator !=(SmallBoolArray, int) public static bool operator !=(SmallBoolArray left, int right) Parameters left SmallBoolArray right int Returns bool"
  },
  "api/Vintagestory.API.Datastructures.SortableQueue-1.html": {
    "href": "api/Vintagestory.API.Datastructures.SortableQueue-1.html",
    "title": "Class SortableQueue<T> | VintageStory API",
    "keywords": "Class SortableQueue<T> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll public class SortableQueue<T> where T : IComparable<T> Type Parameters T Inheritance object SortableQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SortableQueue() public SortableQueue() Fields Count public int Count Field Value int array protected T[] array Field Value T[] head protected int head Field Value int maxSize public int maxSize Field Value int tail protected int tail Field Value int Methods Clear() public void Clear() Dequeue() Will return invalid data if called when Count <= 0: it is the responsibility of the calling code to check Count > 0 public T Dequeue() Returns T DequeueLIFO() Will return invalid data if called when Count <= 0: it is the responsibility of the calling code to check Count > 0 public T DequeueLIFO() Returns T Enqueue(T) public void Enqueue(T v) Parameters v T EnqueueOrMerge(T) public void EnqueueOrMerge(T v) Parameters v T RunForEach(Action<T>) public void RunForEach(Action<T> action) Parameters action Action<T> Sort() public void Sort()"
  },
  "api/Vintagestory.API.Datastructures.StackMatrix4.html": {
    "href": "api/Vintagestory.API.Datastructures.StackMatrix4.html",
    "title": "Class StackMatrix4 | VintageStory API",
    "keywords": "Class StackMatrix4 Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class StackMatrix4 Inheritance object StackMatrix4 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StackMatrix4(int) public StackMatrix4(int max = 1024) Parameters max int Properties Count public int Count { get; } Property Value int Top public double[] Top { get; } Property Value double[] Methods Clear() public void Clear() Pop() public double[] Pop() Returns double[] Push() public void Push() Push(double[]) public void Push(double[] p) Parameters p double[] PushIdentity() public void PushIdentity() Rotate(double, double, double, double) public void Rotate(double rad, double x, double y, double z) Parameters rad double x double y double z double Scale(double, double, double) public void Scale(double x, double y, double z) Parameters x double y double z double Translate(double, double, double) public void Translate(double x, double y, double z) Parameters x double y double z double Translate(double[]) public void Translate(double[] rotationOrigin) Parameters rotationOrigin double[]"
  },
  "api/Vintagestory.API.Datastructures.StreamedByteArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.StreamedByteArrayAttribute.html",
    "title": "Class StreamedByteArrayAttribute | VintageStory API",
    "keywords": "Class StreamedByteArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll When serialized, produces identical byte output to a ByteArrayAttribute. The difference is, for performance, this writes directly to the provided BinaryWriter stream Intended to be deserialized to a ByteArrayAttribute Open in GitHub public class StreamedByteArrayAttribute : ArrayAttribute<byte>, IAttribute Inheritance object ArrayAttribute<byte> StreamedByteArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<byte>.value ArrayAttribute<byte>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<byte>.GetValue() ArrayAttribute<byte>.ToJsonToken() ArrayAttribute<byte>.ToString() ArrayAttribute<byte>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StreamedByteArrayAttribute(FastMemoryStream) public StreamedByteArrayAttribute(FastMemoryStream ms) Parameters ms FastMemoryStream Methods BeginDirectWrite(BinaryWriter, string) public void BeginDirectWrite(BinaryWriter stream, string key) Parameters stream BinaryWriter key string Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.StreamedTreeAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.StreamedTreeAttribute.html",
    "title": "Class StreamedTreeAttribute | VintageStory API",
    "keywords": "Class StreamedTreeAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class StreamedTreeAttribute Inheritance object StreamedTreeAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StreamedTreeAttribute(BinaryWriter) public StreamedTreeAttribute(BinaryWriter writer) Parameters writer BinaryWriter Properties this[string] public IAttribute this[string key] { get; set; } Parameters key string Property Value IAttribute"
  },
  "api/Vintagestory.API.Datastructures.StringArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.StringArrayAttribute.html",
    "title": "Class StringArrayAttribute | VintageStory API",
    "keywords": "Class StringArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class StringArrayAttribute : ArrayAttribute<string>, IAttribute Inheritance object ArrayAttribute<string> StringArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<string>.value ArrayAttribute<string>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<string>.GetValue() ArrayAttribute<string>.ToString() ArrayAttribute<string>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StringArrayAttribute() public StringArrayAttribute() StringArrayAttribute(string[]) public StringArrayAttribute(string[] value) Parameters value string[] Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.StringAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.StringAttribute.html",
    "title": "Class StringAttribute | VintageStory API",
    "keywords": "Class StringAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class StringAttribute : ScalarAttribute<string>, IAttribute Inheritance object ScalarAttribute<string> StringAttribute Implements IAttribute Inherited Members ScalarAttribute<string>.value ScalarAttribute<string>.Equals(IWorldAccessor, IAttribute) ScalarAttribute<string>.Equals(object) ScalarAttribute<string>.GetValue() ScalarAttribute<string>.SetValue(string) ScalarAttribute<string>.ToString() ScalarAttribute<string>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors StringAttribute() public StringAttribute() StringAttribute(string) public StringAttribute(string value) Parameters value string Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public override string ToJsonToken() Returns string"
  },
  "api/Vintagestory.API.Datastructures.SyncedTreeAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.SyncedTreeAttribute.html",
    "title": "Class SyncedTreeAttribute | VintageStory API",
    "keywords": "Class SyncedTreeAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class SyncedTreeAttribute : TreeAttribute, ITreeAttribute, IAttribute, IEnumerable<KeyValuePair<string, IAttribute>>, IEnumerable Inheritance object TreeAttribute SyncedTreeAttribute Implements ITreeAttribute IAttribute IEnumerable<KeyValuePair<string, IAttribute>> IEnumerable Inherited Members TreeAttribute.AttributeIdMapping TreeAttribute.depth TreeAttribute.this[string] TreeAttribute.Count TreeAttribute.Values TreeAttribute.Keys TreeAttribute.RegisterAttribute(int, Type) TreeAttribute.CreateFromBytes(byte[]) TreeAttribute.ToBytes() TreeAttribute.FromBytes(byte[]) TreeAttribute.ToBytes(BinaryWriter) TreeAttribute.GetAttributeId() TreeAttribute.IndexOf(string) TreeAttribute.GetEnumerator() TreeAttribute.Clear() TreeAttribute.Set(string, IAttribute) TreeAttribute.GetAttribute(string) TreeAttribute.HasAttribute(string) TreeAttribute.TryGetAttribute(string, out IAttribute) TreeAttribute.GetAttributeByPath(string) TreeAttribute.DeleteAttributeByPath(string) TreeAttribute.SetStringArray(string, string[]) TreeAttribute.SetItemstack(string, ItemStack) TreeAttribute.TryGetBool(string) TreeAttribute.TryGetInt(string) TreeAttribute.TryGetDouble(string) TreeAttribute.TryGetFloat(string) TreeAttribute.GetBool(string, bool) TreeAttribute.GetInt(string, int) TreeAttribute.GetAsInt(string, int) TreeAttribute.GetAsBool(string, bool) TreeAttribute.GetDecimal(string, double) TreeAttribute.GetDouble(string, double) TreeAttribute.GetFloat(string, float) TreeAttribute.GetString(string, string) TreeAttribute.GetAsString(string, string) TreeAttribute.GetStringArray(string, string[]) TreeAttribute.GetBytes(string, byte[]) TreeAttribute.GetTreeAttribute(string) TreeAttribute.GetOrAddTreeAttribute(string) TreeAttribute.GetItemstack(string, ItemStack) TreeAttribute.GetLong(string, long) TreeAttribute.TryGetLong(string) TreeAttribute.GetModelTransform(string) TreeAttribute.GetValue() TreeAttribute.IsSubSetOf(IWorldAccessor, IAttribute) TreeAttribute.Equals(IWorldAccessor, IAttribute) TreeAttribute.Equals(IWorldAccessor, IAttribute, params string[]) TreeAttribute.Equals(IWorldAccessor, IAttribute, string, params string[]) TreeAttribute.ToJsonToken() TreeAttribute.FromJson(string) TreeAttribute.ToJsonToken(IEnumerable<KeyValuePair<string, IAttribute>>) TreeAttribute.MergeTree(ITreeAttribute) TreeAttribute.MergeTree(TreeAttribute, TreeAttribute) TreeAttribute.MergeAttribute(TreeAttribute, string, IAttribute) TreeAttribute.SortedCopy(bool) TreeAttribute.GetHashCode() TreeAttribute.GetHashCode(string[]) TreeAttribute.BeginDirectWrite(BinaryWriter, string) TreeAttribute.TerminateWrite(BinaryWriter) object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) TreeAttributeUtil.GetBlockPos(ITreeAttribute, string, BlockPos) TreeAttributeUtil.GetVec3i(ITreeAttribute, string, Vec3i) TreeAttributeUtil.GetVec3is(ITreeAttribute, string, Vec3i[]) TreeAttributeUtil.SetBlockPos(ITreeAttribute, string, BlockPos) TreeAttributeUtil.SetVec3i(ITreeAttribute, string, Vec3i) TreeAttributeUtil.SetVec3is(ITreeAttribute, string, Vec3i[]) Fields OnModified public List<TreeModifiedListener> OnModified Field Value List<TreeModifiedListener> Properties AllDirty public bool AllDirty { get; } Property Value bool PartialDirty public bool PartialDirty { get; } Property Value bool Methods Clone() Creates a deep copy of the attribute tree public override SyncedTreeAttribute Clone() Returns SyncedTreeAttribute FromBytes(BinaryReader) public override void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetDirtyPathData(out string[], out byte[][]) public void GetDirtyPathData(out string[] paths, out byte[][] dirtydata) Parameters paths string[] dirtydata byte[][] GetDirtyPathData(FastMemoryStream, out string[], out byte[][]) public void GetDirtyPathData(FastMemoryStream ms, out string[] paths, out byte[][] dirtydata) Parameters ms FastMemoryStream paths string[] dirtydata byte[][] GetIntAndIncrement(string, int) Equivalent to i++ within the TreeAttribute, i.e. it increases the stored value but returns the current read value public virtual int GetIntAndIncrement(string key, int defaultValue = 0) Parameters key string defaultValue int Returns int MarkAllDirty() Marks the whole attribute tree as dirty, so that it will be resent to all connected clients. Does not trigger modified listeners (because it makes no sense and breaks things) public void MarkAllDirty() MarkClean() public void MarkClean() MarkPathDirty(string) Marks part of the attribute tree as dirty, allowing for a partial update of the attribute tree. Has no effect it the whole tree is already marked dirty. If more than 5 paths are marked dirty it will wipe the list of dirty paths and just marked the whole tree as dirty public void MarkPathDirty(string path) Parameters path string PartialUpdate(string, byte[]) public void PartialUpdate(string path, byte[] data) Parameters path string data byte[] RegisterModifiedListener(string, Action) public void RegisterModifiedListener(string path, Action listener) Parameters path string listener Action RemoveAttribute(string) Removes an attribute public override void RemoveAttribute(string key) Parameters key string SetAttribute(string, IAttribute) public override void SetAttribute(string key, IAttribute value) Parameters key string value IAttribute SetBool(string, bool) Creates a bool attribute with given key and value public override void SetBool(string key, bool value) Parameters key string value bool SetBytes(string, byte[]) Creates a byte[] attribute with given key and value public override void SetBytes(string key, byte[] value) Parameters key string value byte[] SetDouble(string, double) Creates a double attribute with given key and value public override void SetDouble(string key, double value) Parameters key string value double SetFloat(string, float) Creates a float attribute with given key and value Side note: If you need this attribute to be compatible with deserialized json - use SetDouble() public override void SetFloat(string key, float value) Parameters key string value float SetInt(string, int) Creates an int attribute with given key and value Side note: If you need this attribute to be compatible with deserialized json - use SetLong() public override void SetInt(string key, int value) Parameters key string value int SetLong(string, long) Creates a long attribute with given key and value public override void SetLong(string key, long value) Parameters key string value long SetString(string, string) Creates a string attribute with given key and value public override void SetString(string key, string value) Parameters key string value string UnregisterListener(Action) public void UnregisterListener(Action listener) Parameters listener Action"
  },
  "api/Vintagestory.API.Datastructures.TreeArrayAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.TreeArrayAttribute.html",
    "title": "Class TreeArrayAttribute | VintageStory API",
    "keywords": "Class TreeArrayAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class TreeArrayAttribute : ArrayAttribute<TreeAttribute>, IAttribute Inheritance object ArrayAttribute<TreeAttribute> TreeArrayAttribute Implements IAttribute Inherited Members ArrayAttribute<TreeAttribute>.value ArrayAttribute<TreeAttribute>.Equals(IWorldAccessor, IAttribute) ArrayAttribute<TreeAttribute>.GetValue() ArrayAttribute<TreeAttribute>.ToJsonToken() ArrayAttribute<TreeAttribute>.ToString() ArrayAttribute<TreeAttribute>.GetHashCode() object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors TreeArrayAttribute() public TreeArrayAttribute() TreeArrayAttribute(TreeAttribute[]) public TreeArrayAttribute(TreeAttribute[] value) Parameters value TreeAttribute[] Methods Clone() public IAttribute Clone() Returns IAttribute FromBytes(BinaryReader) public void FromBytes(BinaryReader stream) Parameters stream BinaryReader GetAttributeId() public int GetAttributeId() Returns int ToBytes(BinaryWriter) public void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter"
  },
  "api/Vintagestory.API.Datastructures.TreeAttribute.html": {
    "href": "api/Vintagestory.API.Datastructures.TreeAttribute.html",
    "title": "Class TreeAttribute | VintageStory API",
    "keywords": "Class TreeAttribute Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll A datastructure to hold generic data for most primitives (int, string, float, etc.). But can also hold generic data using the ByteArrayAttribute + class serialization Open in GitHub public class TreeAttribute : ITreeAttribute, IAttribute, IEnumerable<KeyValuePair<string, IAttribute>>, IEnumerable Inheritance object TreeAttribute Implements ITreeAttribute IAttribute IEnumerable<KeyValuePair<string, IAttribute>> IEnumerable Derived SyncedTreeAttribute Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) TreeAttributeUtil.GetBlockPos(ITreeAttribute, string, BlockPos) TreeAttributeUtil.GetVec3i(ITreeAttribute, string, Vec3i) TreeAttributeUtil.GetVec3is(ITreeAttribute, string, Vec3i[]) TreeAttributeUtil.SetBlockPos(ITreeAttribute, string, BlockPos) TreeAttributeUtil.SetVec3i(ITreeAttribute, string, Vec3i) TreeAttributeUtil.SetVec3is(ITreeAttribute, string, Vec3i[]) Constructors TreeAttribute() public TreeAttribute() Fields AttributeIdMapping public static Dictionary<int, Type> AttributeIdMapping Field Value Dictionary<int, Type> depth protected int depth Field Value int Properties Count Amount of elements in this Tree attribute public int Count { get; } Property Value int this[string] Will return null if given attribute does not exist public IAttribute this[string key] { get; set; } Parameters key string Property Value IAttribute Keys public string[] Keys { get; } Property Value string[] Values Returns all values inside this tree attributes public IAttribute[] Values { get; } Property Value IAttribute[] Methods BeginDirectWrite(BinaryWriter, string) public static void BeginDirectWrite(BinaryWriter writer, string key) Parameters writer BinaryWriter key string Clear() public void Clear() Clone() Creates a deep copy of the attribute tree public virtual ITreeAttribute Clone() Returns ITreeAttribute CreateFromBytes(byte[]) public static TreeAttribute CreateFromBytes(byte[] blockEntityData) Parameters blockEntityData byte[] Returns TreeAttribute DeleteAttributeByPath(string) public void DeleteAttributeByPath(string path) Parameters path string Equals(IWorldAccessor, IAttribute) Returns true if given tree exactly matches this one public bool Equals(IWorldAccessor worldForResolve, IAttribute other) Parameters worldForResolve IWorldAccessor other IAttribute Returns bool Equals(IWorldAccessor, IAttribute, string, params string[]) public bool Equals(IWorldAccessor worldForResolve, IAttribute other, string currentPath, params string[] ignorePaths) Parameters worldForResolve IWorldAccessor other IAttribute currentPath string ignorePaths string[] Returns bool Equals(IWorldAccessor, IAttribute, params string[]) public bool Equals(IWorldAccessor worldForResolve, IAttribute other, params string[] ignorePaths) Parameters worldForResolve IWorldAccessor other IAttribute ignorePaths string[] Returns bool FromBytes(byte[]) public virtual void FromBytes(byte[] data) Parameters data byte[] FromBytes(BinaryReader) public virtual void FromBytes(BinaryReader stream) Parameters stream BinaryReader FromJson(string) public static IAttribute FromJson(string json) Parameters json string Returns IAttribute GetAsBool(string, bool) Returns true/false, for whatever type of attribute is found for given key public virtual bool GetAsBool(string key, bool defaultValue = false) Parameters key string defaultValue bool Returns bool GetAsInt(string, int) Same as (int)GetDecimal(key, defValue); public virtual int GetAsInt(string key, int defaultValue = 0) Parameters key string defaultValue int Returns int GetAsString(string, string) Retrieves the value of given attribute, independent of attribute type public virtual string GetAsString(string key, string defaultValue = null) Parameters key string defaultValue string Returns string GetAttribute(string) public IAttribute GetAttribute(string key) Parameters key string Returns IAttribute GetAttributeByPath(string) public IAttribute GetAttributeByPath(string path) Parameters path string Returns IAttribute GetAttributeId() public int GetAttributeId() Returns int GetBool(string, bool) Retrieves a bool or default value if key is not found public virtual bool GetBool(string key, bool defaultValue = false) Parameters key string defaultValue bool Returns bool GetBytes(string, byte[]) Retrieves a byte array or defaultValue if key is not found public virtual byte[] GetBytes(string key, byte[] defaultValue = null) Parameters key string defaultValue byte[] Returns byte[] GetDecimal(string, double) Retrieves an int, float, long or double value. Whatever attribute is found for given key, in aformentioned order. If its a string its converted to double public virtual double GetDecimal(string key, double defaultValue = 0) Parameters key string defaultValue double Returns double GetDouble(string, double) Retrieves a double or defaultValue if key is not found public virtual double GetDouble(string key, double defaultValue = 0) Parameters key string defaultValue double Returns double GetEnumerator() public IEnumerator<KeyValuePair<string, IAttribute>> GetEnumerator() Returns IEnumerator<KeyValuePair<string, IAttribute>> GetFloat(string, float) Retrieves a float or defaultvalue if key is not found public virtual float GetFloat(string key, float defaultValue = 0) Parameters key string defaultValue float Returns float GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetHashCode(string[]) public int GetHashCode(string[] ignoredAttributes) Parameters ignoredAttributes string[] Returns int GetInt(string, int) Retrieves an int or default value if key is not found public virtual int GetInt(string key, int defaultValue = 0) Parameters key string defaultValue int Returns int GetItemstack(string, ItemStack) Retrieves an itemstack or defaultValue if key is not found. Be sure to call stack.ResolveBlockOrItem() after retrieving it. public ItemStack GetItemstack(string key, ItemStack defaultValue = null) Parameters key string defaultValue ItemStack Returns ItemStack GetLong(string, long) Retrieves a long or default value if key is not found public virtual long GetLong(string key, long defaultValue = 0) Parameters key string defaultValue long Returns long GetModelTransform(string) public virtual ModelTransform GetModelTransform(string key) Parameters key string Returns ModelTransform GetOrAddTreeAttribute(string) Retrieves an attribute tree or adds it if key is not found. Throws an exception if the key does exist but is not a tree. public virtual ITreeAttribute GetOrAddTreeAttribute(string key) Parameters key string Returns ITreeAttribute GetString(string, string) Retrieves a string attribute or defaultValue if key is not found public virtual string GetString(string key, string defaultValue = null) Parameters key string defaultValue string Returns string GetStringArray(string, string[]) Retrieves a string or defaultValue if key is not found public virtual string[] GetStringArray(string key, string[] defaultValue = null) Parameters key string defaultValue string[] Returns string[] GetTreeAttribute(string) Retrieves an attribute tree or null if key is not found public virtual ITreeAttribute GetTreeAttribute(string key) Parameters key string Returns ITreeAttribute GetValue() public object GetValue() Returns object HasAttribute(string) True if this attribute exists public bool HasAttribute(string key) Parameters key string Returns bool IndexOf(string) [Obsolete(\"May not return consistent results if the TreeAttribute changes between calls\")] public int IndexOf(string key) Parameters key string Returns int IsSubSetOf(IWorldAccessor, IAttribute) Returns true if given tree contains all of elements of this one, but given tree may contain also more elements. Individual node values are exactly matched. public bool IsSubSetOf(IWorldAccessor worldForResolve, IAttribute other) Parameters worldForResolve IWorldAccessor other IAttribute Returns bool MergeAttribute(TreeAttribute, string, IAttribute) protected static void MergeAttribute(TreeAttribute dstTree, string srcKey, IAttribute srcAttr) Parameters dstTree TreeAttribute srcKey string srcAttr IAttribute MergeTree(ITreeAttribute) Merges the sourceTree into the current one public virtual void MergeTree(ITreeAttribute sourceTree) Parameters sourceTree ITreeAttribute MergeTree(TreeAttribute, TreeAttribute) protected static void MergeTree(TreeAttribute dstTree, TreeAttribute srcTree) Parameters dstTree TreeAttribute srcTree TreeAttribute RegisterAttribute(int, Type) public static void RegisterAttribute(int attrId, Type type) Parameters attrId int type Type RemoveAttribute(string) Removes an attribute public virtual void RemoveAttribute(string key) Parameters key string Set(string, IAttribute) Set a value. Returns itself for method chaining public TreeAttribute Set(string key, IAttribute value) Parameters key string value IAttribute Returns TreeAttribute SetAttribute(string, IAttribute) public virtual void SetAttribute(string key, IAttribute value) Parameters key string value IAttribute SetBool(string, bool) Creates a bool attribute with given key and value public virtual void SetBool(string key, bool value) Parameters key string value bool SetBytes(string, byte[]) Creates a byte[] attribute with given key and value public virtual void SetBytes(string key, byte[] value) Parameters key string value byte[] SetDouble(string, double) Creates a double attribute with given key and value public virtual void SetDouble(string key, double value) Parameters key string value double SetFloat(string, float) Creates a float attribute with given key and value Side note: If you need this attribute to be compatible with deserialized json - use SetDouble() public virtual void SetFloat(string key, float value) Parameters key string value float SetInt(string, int) Creates an int attribute with given key and value Side note: If you need this attribute to be compatible with deserialized json - use SetLong() public virtual void SetInt(string key, int value) Parameters key string value int SetItemstack(string, ItemStack) Sets given item stack with given key public void SetItemstack(string key, ItemStack itemstack) Parameters key string itemstack ItemStack SetLong(string, long) Creates a long attribute with given key and value public virtual void SetLong(string key, long value) Parameters key string value long SetString(string, string) Creates a string attribute with given key and value public virtual void SetString(string key, string value) Parameters key string value string SetStringArray(string, string[]) public virtual void SetStringArray(string key, string[] values) Parameters key string values string[] SortedCopy(bool) Returns a ITreeAttribute sorted alphabetically by key. Does not modify the existing ITreeAttribute public OrderedDictionary<string, IAttribute> SortedCopy(bool recursive = false) Parameters recursive bool Returns OrderedDictionary<string, IAttribute> TerminateWrite(BinaryWriter) public static void TerminateWrite(BinaryWriter writer) Parameters writer BinaryWriter ToBytes() public virtual byte[] ToBytes() Returns byte[] ToBytes(BinaryWriter) public virtual void ToBytes(BinaryWriter stream) Parameters stream BinaryWriter ToJsonToken() public string ToJsonToken() Returns string ToJsonToken(IEnumerable<KeyValuePair<string, IAttribute>>) public static string ToJsonToken(IEnumerable<KeyValuePair<string, IAttribute>> attributes) Parameters attributes IEnumerable<KeyValuePair<string, IAttribute>> Returns string TryGetAttribute(string, out IAttribute) Similar to TryGetValue for a Dictionary public bool TryGetAttribute(string key, out IAttribute value) Parameters key string value IAttribute Returns bool TryGetBool(string) Retrieves a bool or null if the key is not found public virtual bool? TryGetBool(string key) Parameters key string Returns bool? TryGetDouble(string) Retrieves a double or null if key is not found public virtual double? TryGetDouble(string key) Parameters key string Returns double? TryGetFloat(string) Retrieves a float or null if the key is not found public virtual float? TryGetFloat(string key) Parameters key string Returns float? TryGetInt(string) Retrieves an int or null if the key is not found public virtual int? TryGetInt(string key) Parameters key string Returns int? TryGetLong(string) Retrieves a long or null value if key is not found public virtual long? TryGetLong(string key) Parameters key string Returns long?"
  },
  "api/Vintagestory.API.Datastructures.TreeAttributeUtil.html": {
    "href": "api/Vintagestory.API.Datastructures.TreeAttributeUtil.html",
    "title": "Class TreeAttributeUtil | VintageStory API",
    "keywords": "Class TreeAttributeUtil Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public static class TreeAttributeUtil Inheritance object TreeAttributeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBlockPos(ITreeAttribute, string, BlockPos) public static BlockPos GetBlockPos(this ITreeAttribute tree, string code, BlockPos defaultValue = null) Parameters tree ITreeAttribute code string defaultValue BlockPos Returns BlockPos GetVec3i(ITreeAttribute, string, Vec3i) public static Vec3i GetVec3i(this ITreeAttribute tree, string code, Vec3i defaultValue = null) Parameters tree ITreeAttribute code string defaultValue Vec3i Returns Vec3i GetVec3is(ITreeAttribute, string, Vec3i[]) public static Vec3i[] GetVec3is(this ITreeAttribute tree, string code, Vec3i[] defaultValue = null) Parameters tree ITreeAttribute code string defaultValue Vec3i[] Returns Vec3i[] SetBlockPos(ITreeAttribute, string, BlockPos) public static void SetBlockPos(this ITreeAttribute tree, string code, BlockPos value) Parameters tree ITreeAttribute code string value BlockPos SetVec3i(ITreeAttribute, string, Vec3i) public static void SetVec3i(this ITreeAttribute tree, string code, Vec3i value) Parameters tree ITreeAttribute code string value Vec3i SetVec3is(ITreeAttribute, string, Vec3i[]) public static void SetVec3is(this ITreeAttribute tree, string code, Vec3i[] value) Parameters tree ITreeAttribute code string value Vec3i[]"
  },
  "api/Vintagestory.API.Datastructures.TreeModifiedListener.html": {
    "href": "api/Vintagestory.API.Datastructures.TreeModifiedListener.html",
    "title": "Class TreeModifiedListener | VintageStory API",
    "keywords": "Class TreeModifiedListener Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class TreeModifiedListener Inheritance object TreeModifiedListener Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields listener public Action listener Field Value Action path public string path Field Value string"
  },
  "api/Vintagestory.API.Datastructures.UniqueQueue-1.html": {
    "href": "api/Vintagestory.API.Datastructures.UniqueQueue-1.html",
    "title": "Class UniqueQueue<T> | VintageStory API",
    "keywords": "Class UniqueQueue<T> Namespace Vintagestory.API.Datastructures Assembly VintagestoryAPI.dll Same as your normal c# queue but ensures that every element is contained only once using a Hashset. public class UniqueQueue<T> : IEnumerable<T>, IEnumerable Type Parameters T Inheritance object UniqueQueue<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors UniqueQueue() public UniqueQueue() Properties Count Amount of elements in the queue public int Count { get; } Property Value int Methods Clear() Emptys the queue and the hashset public void Clear() Contains(T) Check if given item is contained. Uses the hashset to find the item. public bool Contains(T item) Parameters item T Returns bool Dequeue() Removes an item from the queue public T Dequeue() Returns T Enqueue(T) Adds an item to the queue public void Enqueue(T item) Parameters item T GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. Peek() Returns the first item in the queue without removing it. public T Peek() Returns T"
  },
  "api/Vintagestory.API.Datastructures.html": {
    "href": "api/Vintagestory.API.Datastructures.html",
    "title": "Namespace Vintagestory.API.Datastructures | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Datastructures Classes ArrayAttribute<T> BoolArrayAttribute Open in GitHub BoolAttribute Open in GitHub BoolRef Open in GitHub Bools Open in GitHub ByteArrayAttribute Open in GitHub CachedCuboidList Open in GitHub CachedCuboidListFaster Just like CachedCuboidList except we use structs internally, for RAM access performance. We leave CachedCuboidList just as it is for mod backwards compatibility Open in GitHub CachingConcurrentDictionary<TKey, TValue> Exactly like ConcurrentDictionary except that Values is cached for performance, instead of building a new List each time Values is accessed The cache is only guaranteed up to date if CachedConcurrentDictionary.TryAdd, .TryRemove or [] methods are used to modify the Dictionary otherwise the cache will be updated next time when one of those methods is used DictionaryExtensions Open in GitHub DoubleArrayAttribute Open in GitHub DoubleAttribute Open in GitHub FastLargeSetOfLongs Open in GitHub FastListEnum<TElem> FastList<TElem> Does not clear elements in Clear(), but only sets the Count to 0 FastMemoryStream Open in GitHub FastSetOfInts Open in GitHub FastSetOfLongs Open in GitHub FastSmallDictionary<TKey, TValue> A fast implementation of IDictionary using arrays. Only suitable for small dictionaries, typically 1-20 entries. Note that Add is implemented differently from a standard Dictionary, it does not check that the key is not already present (and does not throw an ArgumentException) Additional methods AddIfNotPresent() and Clone() are provided for convenience. There are also additional convenient constructors FloatArrayAttribute Open in GitHub FloatAttribute Open in GitHub FloatDataMap3D A datastructure to hold 3 dimensional data in the form of floats Can be used to perfrom trilinear interpolation between individual values Open in GitHub IntArrayAttribute Open in GitHub IntAttribute Open in GitHub IntDataMap2D A datastructure to hold 2 dimensional data in the form of ints. Can be used to perfrom bilinear interpolation between individual values Open in GitHub IntRef Open in GitHub ItemstackAttribute Open in GitHub JsonObject Elegant, yet somewhat inefficently designed (because wasteful with heap objects) wrapper class to abstract away the type-casting nightmare of JToken O.O Open in GitHub JsonTreeAttribute Open in GitHub LimitedDictionary<TKey, TValue> Can only hold a limited amount of elements, discards oldest elements once the capacity is reached. LimitedList<TElem> Holds a limited amount of items, discards the lowest index item when an overflow happens ListDictionary<TKey, TValue> LongArrayAttribute Open in GitHub LongAttribute Open in GitHub OrderedDictionary<TKey, TValue> Same as your normal C# Dictionary but ensures that the order in which the items are added is remembered. That way you can iterate over the dictionary with the insert order intact or set/get elements by index. Taken from http://www.codeproject.com/Articles/18615/OrderedDictionary-T-A-generic-implementation-of-IO Please be aware that this is not a very efficient implementation, recommed use only for small sets of data. QueueOfInt Open in GitHub Rectangled Open in GitHub Rectanglef Open in GitHub RingArray<T> RotatableCube A rotatable version of a cuboid. Open in GitHub ScalarAttribute<T> SortableQueue<T> StackMatrix4 Open in GitHub StreamedByteArrayAttribute When serialized, produces identical byte output to a ByteArrayAttribute. The difference is, for performance, this writes directly to the provided BinaryWriter stream Intended to be deserialized to a ByteArrayAttribute Open in GitHub StreamedTreeAttribute Open in GitHub StringArrayAttribute Open in GitHub StringAttribute Open in GitHub SyncedTreeAttribute Open in GitHub TreeArrayAttribute Open in GitHub TreeAttribute A datastructure to hold generic data for most primitives (int, string, float, etc.). But can also hold generic data using the ByteArrayAttribute + class serialization Open in GitHub TreeAttributeUtil Open in GitHub TreeModifiedListener Open in GitHub UniqueQueue<T> Same as your normal c# queue but ensures that every element is contained only once using a Hashset. Structs BlockTagArray List of block tags meant to be used for fast comparisons. Restricts number of registered block tags to 256. BlockTagRule Pair of tag arrays that is used for implementation of tag inversion EntityTagArray List of entity tags meant to be used for fast comparisons. Restricts number of registered entity tags to 128 EntityTagRule Pair of tag arrays that is used for implementation of tag inversion for entity ai tasks ItemTagArray List of item tags meant to be used for fast comparisons. Restricts number of registered item tags to 256. ItemTagRule Pair of tag arrays that is used for implementation of tag inversion SmallBoolArray Suitable for up to 32 bool values, though normally used only for 6. Offers most of the methods available for a bool[], so can be dropped in to existing code Interfaces IAttribute An attribute from an attribute tree IMergeable<T> IOrderedDictionary<TKey, TValue> Represents a generic collection of key/value pairs that are ordered independently of the key and value. ITreeAttribute Represents a List of nestable Attributes Enums EnumAttributeType Open in GitHub"
  },
  "api/Vintagestory.API.DocumentAsJsonAttribute.html": {
    "href": "api/Vintagestory.API.DocumentAsJsonAttribute.html",
    "title": "Class DocumentAsJsonAttribute | VintageStory API",
    "keywords": "Class DocumentAsJsonAttribute Namespace Vintagestory.API Assembly VintagestoryAPI.dll Specifies that this class or property should be inlcuded in the JSON-only documentation. Has no functional use and can be ommited if the property is marked with [JsonProperty]. When using with enum types, only specify this attribute on the type itself, not each value. Note that most fields will also contain the following inside their summary tag: <jsonoptional>Optional</jsonoptional><jsondefault>None</jsondefault> The attribute now has the ability to add in required, default, and attribute parameters. These will be analysed by the docFx plugin. Open in GitHub public class DocumentAsJsonAttribute : Attribute Inheritance object Attribute DocumentAsJsonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DocumentAsJsonAttribute() public DocumentAsJsonAttribute() DocumentAsJsonAttribute(string, string, bool) public DocumentAsJsonAttribute(string requiredStatus, string defaultValue = \"\", bool isAttribute = false) Parameters requiredStatus string defaultValue string isAttribute bool"
  },
  "api/Vintagestory.API.MathTools.AABBIntersectionTest.html": {
    "href": "api/Vintagestory.API.MathTools.AABBIntersectionTest.html",
    "title": "Class AABBIntersectionTest | VintageStory API",
    "keywords": "Class AABBIntersectionTest Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class AABBIntersectionTest Inheritance object AABBIntersectionTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AABBIntersectionTest(IWorldIntersectionSupplier) public AABBIntersectionTest(IWorldIntersectionSupplier blockSelectionTester) Parameters blockSelectionTester IWorldIntersectionSupplier Fields bsTester public IWorldIntersectionSupplier bsTester Field Value IWorldIntersectionSupplier hitOnBlockFace public BlockFacing hitOnBlockFace Field Value BlockFacing hitOnSelectionBox public int hitOnSelectionBox Field Value int hitPosition public Vec3d hitPosition Field Value Vec3d pos public BlockPos pos Field Value BlockPos ray public Ray ray Field Value Ray Methods GetSelectedBlock(float, BlockFilter, bool) public BlockSelection GetSelectedBlock(float maxDistance, BlockFilter filter = null, bool testCollide = false) Parameters maxDistance float filter BlockFilter testCollide bool Returns BlockSelection GetSelectedBlock(Vec3d, Vec3d, BlockFilter) public BlockSelection GetSelectedBlock(Vec3d from, Vec3d to, BlockFilter filter = null) Parameters from Vec3d to Vec3d filter BlockFilter Returns BlockSelection LoadRayAndPos(Line3D) public void LoadRayAndPos(Line3D line3d) Parameters line3d Line3D LoadRayAndPos(Ray) public void LoadRayAndPos(Ray ray) Parameters ray Ray RayInteresectWithCuboidSlabMethod(Cuboidd, Ray) public static bool RayInteresectWithCuboidSlabMethod(Cuboidd b, Ray r) Parameters b Cuboidd r Ray Returns bool RayIntersectsBlockSelectionBox(BlockPos, BlockFilter, bool) public bool RayIntersectsBlockSelectionBox(BlockPos pos, BlockFilter filter, bool testCollide = false) Parameters pos BlockPos filter BlockFilter testCollide bool Returns bool RayIntersectsWithCuboid(Cuboidd) public bool RayIntersectsWithCuboid(Cuboidd selectionBox) Parameters selectionBox Cuboidd Returns bool RayIntersectsWithCuboid(Cuboidd, ref BlockFacing, ref Vec3d) public bool RayIntersectsWithCuboid(Cuboidd selectionBox, ref BlockFacing hitOnBlockFace, ref Vec3d hitPosition) Parameters selectionBox Cuboidd hitOnBlockFace BlockFacing hitPosition Vec3d Returns bool RayIntersectsWithCuboid(Cuboidf, double, double, double) public bool RayIntersectsWithCuboid(Cuboidf selectionBox, double posX, double posY, double posZ) Parameters selectionBox Cuboidf posX double posY double posZ double Returns bool"
  },
  "api/Vintagestory.API.MathTools.AngleConstraint.html": {
    "href": "api/Vintagestory.API.MathTools.AngleConstraint.html",
    "title": "Class AngleConstraint | VintageStory API",
    "keywords": "Class AngleConstraint Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class AngleConstraint : Vec2f Inheritance object Vec2f AngleConstraint Inherited Members Vec2f.Zero Vec2f.X Vec2f.Y Vec2f.A Vec2f.B Vec2f.ToString() Vec2f.Length() Vec2f.DistanceTo(float, float) Vec2f.Distance(float, float, float, float) Vec2f.Clone() Vec2f.Equals(object) Vec2f.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors AngleConstraint(float, float) public AngleConstraint(float centerRad, float rangeRad) Parameters centerRad float rangeRad float Properties CenterRad Center point in radians public float CenterRad { get; } Property Value float RangeRad Allowed range from that center in radians public float RangeRad { get; } Property Value float"
  },
  "api/Vintagestory.API.MathTools.Ascii85.html": {
    "href": "api/Vintagestory.API.MathTools.Ascii85.html",
    "title": "Class Ascii85 | VintageStory API",
    "keywords": "Class Ascii85 Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Converts between binary data and an Ascii85-encoded string. Open in GitHub public static class Ascii85 Inheritance object Ascii85 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Ascii85 at Wikipedia. Methods Decode(string) Decodes the specified Ascii85 string into the corresponding byte array. public static byte[] Decode(string encoded) Parameters encoded string The Ascii85 string. Returns byte[] The decoded byte array. Encode(byte[]) Encodes the specified byte array in Ascii85. public static string Encode(byte[] bytes) Parameters bytes byte[] The bytes to encode. Returns string An Ascii85-encoded string representing the input byte array."
  },
  "api/Vintagestory.API.MathTools.BlockFacing.html": {
    "href": "api/Vintagestory.API.MathTools.BlockFacing.html",
    "title": "Class BlockFacing | VintageStory API",
    "keywords": "Class BlockFacing Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents one of the 6 faces of a cube and all it's properties. Uses a right Handed Coordinate System. See also http://www.matrix44.net/cms/notes/opengl-3d-graphics/coordinate-systems-in-opengl In short: North: Negative Z East: Positive X South: Positive Z West: Negative X Up: Positive Y Down: Negative Y Open in GitHub public class BlockFacing Inheritance object BlockFacing Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ALLFACES All block faces in the order of N, E, S, W, U, D public static readonly BlockFacing[] ALLFACES Field Value BlockFacing[] ALLNORMALI All block faces in the order of N, E, S, W, U, D public static readonly Vec3i[] ALLNORMALI Field Value Vec3i[] AllVertexFlagsNormals Packed ints representing the normal flags, left-shifted by 15 for easy inclusion in VertexFlags public static readonly int[] AllVertexFlagsNormals Field Value int[] DOWN Faces towards negative Y public static readonly BlockFacing DOWN Field Value BlockFacing EAST Faces towards positive X public static readonly BlockFacing EAST Field Value BlockFacing HORIZONTALS Array of horizontal faces (N, E, S, W) public static readonly BlockFacing[] HORIZONTALS Field Value BlockFacing[] HORIZONTALS_ANGLEORDER Array of horizontal faces in angle order (0°, 90°, 180°, 270°) => (E, N, W, S) public static readonly BlockFacing[] HORIZONTALS_ANGLEORDER Field Value BlockFacing[] HORIZONTAL_NORMALI Array of the normals to the horizontal faces (N, E, S, W) public static readonly Vec3i[] HORIZONTAL_NORMALI Field Value Vec3i[] HorizontalFlags All horizontal blockfacing flags combined public static readonly byte HorizontalFlags Field Value byte NORTH Faces towards negative Z public static readonly BlockFacing NORTH Field Value BlockFacing NumberOfFaces public const int NumberOfFaces = 6 Field Value int SOUTH Faces towards positive Z public static readonly BlockFacing SOUTH Field Value BlockFacing UP Faces towards positive Y public static readonly BlockFacing UP Field Value BlockFacing VERTICALS Array of vertical faces (U, D) public static readonly BlockFacing[] VERTICALS Field Value BlockFacing[] VerticalFlags All vertical blockfacing flags combined public static readonly byte VerticalFlags Field Value byte WEST Faces towards negative X public static readonly BlockFacing WEST Field Value BlockFacing indexDOWN public const int indexDOWN = 5 Field Value int indexEAST public const int indexEAST = 1 Field Value int indexNORTH public const int indexNORTH = 0 Field Value int indexSOUTH public const int indexSOUTH = 2 Field Value int indexUP public const int indexUP = 4 Field Value int indexWEST public const int indexWEST = 3 Field Value int Properties Axis The normal axis of this vector. public EnumAxis Axis { get; } Property Value EnumAxis Code Returns the string north, east, south, west, up or down public string Code { get; } Property Value string Flag The faces byte flag public byte Flag { get; } Property Value byte HorizontalAngleIndex The angle index of the face (E = 0, N = 1, W = 2, S = 3) public int HorizontalAngleIndex { get; } Property Value int Index The index of the face (N=0, E=1, S=2, W=3, U=4, D=5) public int Index { get; } Property Value int IsAxisNS True if this face is N or S public bool IsAxisNS { get; } Property Value bool IsAxisWE True if this face is N or S public bool IsAxisWE { get; } Property Value bool IsHorizontal True if this face is N,E,S or W public bool IsHorizontal { get; } Property Value bool IsVertical True if this face is U or D public bool IsVertical { get; } Property Value bool MeshDataIndex Index + 1 public byte MeshDataIndex { get; } Property Value byte Negative public bool Negative { get; } Property Value bool NormalByte Returns a normal vector of this face encoded in 6 bits/ bit 0: 1 if south or west bit 1: sign bit bit 2: 1 if up or down bit 3: sign bit bit 4: 1 if north or south bit 5: sign bit public byte NormalByte { get; } Property Value byte NormalPacked Normalized normal vector in format GL_INT_2_10_10_10_REV public int NormalPacked { get; } Property Value int NormalPackedFlags Normalized normal vector packed into 3x4=12 bytes total and bit shifted by 15 bits, for use in meshdata flags data public int NormalPackedFlags { get; } Property Value int Normald public Vec3d Normald { get; } Property Value Vec3d Normalf Returns a normal vector of this face public Vec3f Normalf { get; } Property Value Vec3f Normali Returns a normal vector of this face. Classic iterating through these at a position x,y,z is unlikely to be dimension-aware, use BlockFacing.IterateThruFacingOffsets(pos) instead. public Vec3i Normali { get; } Property Value Vec3i Opposite Returns the opposing face public BlockFacing Opposite { get; } Property Value BlockFacing Plane Returns a cuboid where either the width, height or length is zero which represents the min/max of the block 2D plane in 3D space public Cuboidf Plane { get; } Property Value Cuboidf PlaneCenter Returns the center position of this face public Vec3f PlaneCenter { get; } Property Value Vec3f Methods FaceWhenRotatedBy(float, float, float) Applies a 3d rotation on the face and returns the face thats closest to the rotated face public BlockFacing FaceWhenRotatedBy(float radX, float radY, float radZ) Parameters radX float radY float radZ float Returns BlockFacing FinishIteratingAllFaces(BlockPos) Restores the original value of pos, if we are certain we looped through ALLFACES using IterateThruFacingOffsets Note: if for any reason control might have exited the loop early, this cannot sensibly be used public static void FinishIteratingAllFaces(BlockPos pos) Parameters pos BlockPos FlagContains(byte, BlockFacing) Returns true if given byte flags contain given face public static bool FlagContains(byte flag, BlockFacing facing) Parameters flag byte facing BlockFacing Returns bool FlagContainsHorizontals(byte) Returns true if given byte flags contains a horizontal face public static bool FlagContainsHorizontals(byte flag) Parameters flag byte Returns bool FromCode(string) Returns the face if code is 'north', 'east', 'south', 'west', 'north', 'up' or 'down'. Otherwise null. public static BlockFacing FromCode(string code) Parameters code string Returns BlockFacing FromFirstLetter(char) public static BlockFacing FromFirstLetter(char code) Parameters code char Returns BlockFacing FromFirstLetter(string) Returns the face if code is 'n', 'e', 's', 'w', 'n', 'u' or 'd'. Otherwise null. public static BlockFacing FromFirstLetter(string code) Parameters code string Returns BlockFacing FromFlag(int) public static BlockFacing FromFlag(int flag) Parameters flag int Returns BlockFacing FromNormal(Vec3f) public static BlockFacing FromNormal(Vec3f vec) Parameters vec Vec3f Returns BlockFacing FromNormal(Vec3i) public static BlockFacing FromNormal(Vec3i vec) Parameters vec Vec3i Returns BlockFacing FromVector(double, double, double) public static BlockFacing FromVector(double x, double y, double z) Parameters x double y double z double Returns BlockFacing FromVector(Vec3d) public static BlockFacing FromVector(Vec3d vec) Parameters vec Vec3d Returns BlockFacing FromVector(Vec3f) public static BlockFacing FromVector(Vec3f vec) Parameters vec Vec3f Returns BlockFacing GetCCW() Returns the face if current face would be horizontally counter-clockwise rotated, only works for horizontal faces public BlockFacing GetCCW() Returns BlockFacing GetCW() Returns the face if current face would be horizontally clockwise rotated, only works for horizontal faces public BlockFacing GetCW() Returns BlockFacing GetFaceBrightness(double[], float[]) Rotates the face by given angle and returns the interpolated brightness of this face. public float GetFaceBrightness(double[] matrix, float[] BlockSideBrightnessByFacing) Parameters matrix double[] BlockSideBrightnessByFacing float[] Array of brightness values between 0 and 1 per face. In index order (N, E, S, W, U, D) Returns float GetFaceBrightness(float, float, float, float[]) Rotates the face by given angle and returns the interpolated brightness of this face. public float GetFaceBrightness(float radX, float radY, float radZ, float[] BlockSideBrightnessByFacing) Parameters radX float radY float radZ float BlockSideBrightnessByFacing float[] Array of brightness values between 0 and 1 per face. In index order (N, E, S, W, U, D) Returns float GetHorizontalRotated(int) Gets the Horizontal BlockFacing by applying the given angel If used on a UP or DOWN BlockFacing it will return it's current BlockFacing public BlockFacing GetHorizontalRotated(int angle) Parameters angle int Returns BlockFacing GetOpposite() [Obsolete(\"Use Opposite property instead\")] public BlockFacing GetOpposite() Returns BlockFacing HorizontalFromAngle(float) Returns the closest horizontal face from given angle (0 degree = east). Uses HORIZONTALS_ANGLEORDER public static BlockFacing HorizontalFromAngle(float radians) Parameters radians float Returns BlockFacing HorizontalFromYaw(float) Returns the closest horizontal face from given angle (0 degree = north for yaw!). Uses HORIZONTALS_ANGLEORDER public static BlockFacing HorizontalFromYaw(float radians) Parameters radians float Returns BlockFacing IsAdjacent(BlockFacing) public bool IsAdjacent(BlockFacing facing) Parameters facing BlockFacing Returns bool IterateThruFacingOffsets(BlockPos) In 1.20+ this is the recommended technique for examining blocks on all sides of a BlockPos position, as it is dimension-aware Successive calls to this when looping through the standard six BlockFacings will set pos to the relevant facing offset from the original position NOTE: this modifies the fields of the pos parameter, which is better for heap usage than creating a new BlockPos object for each iteration If necessary to restore the original blockPos value, call FinishIteratingAllFaces(pos) public void IterateThruFacingOffsets(BlockPos pos) Parameters pos BlockPos ToAB(Vec3f) Project pos onto the block face public Vec2f ToAB(Vec3f pos) Parameters pos Vec3f Returns Vec2f ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Vintagestory.API.MathTools.BlockFilter.html": {
    "href": "api/Vintagestory.API.MathTools.BlockFilter.html",
    "title": "Delegate BlockFilter | VintageStory API",
    "keywords": "Delegate BlockFilter Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate bool BlockFilter(BlockPos pos, Block block) Parameters pos BlockPos block Block Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.BlockPos.html": {
    "href": "api/Vintagestory.API.MathTools.BlockPos.html",
    "title": "Class BlockPos | VintageStory API",
    "keywords": "Class BlockPos Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A useful data structure when operating with block postions. Valuable Hint: Make use of Copy() or the XXXCopy() variants where needed. A common pitfall is writing code like: BlockPos abovePos = pos.Up(); - with this code abovePos and pos will reference to the same object! Open in GitHub [ProtoContract] [JsonObject(MemberSerialization.OptIn)] public class BlockPos : IEquatable<BlockPos>, IVec3 Inheritance object BlockPos Implements IEquatable<BlockPos> IVec3 Derived FluidBlockPos Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.SetOrCreate(BlockPos, BlockPos) Constructors BlockPos() [Obsolete(\"Not dimension-aware. Use new BlockPos(dimensionId) where possible\")] public BlockPos() BlockPos(int) public BlockPos(int dim) Parameters dim int BlockPos(int, int, int) The new BlockPos takes its dimension from the supplied y value, if the y value is higher than the DimensionBoundary (32768 blocks). This constructor is therefore dimension-aware, so long as the y parameter was originally based on .InternalY, including for example a Vec3d created originally from .InternalY public BlockPos(int x, int y, int z) Parameters x int y int z int BlockPos(int, int, int, int) public BlockPos(int x, int y, int z, int dim) Parameters x int y int z int dim int BlockPos(Vec3i) [Obsolete(\"Not dimension-aware. Use overload with a dimension parameter instead\")] public BlockPos(Vec3i vec) Parameters vec Vec3i BlockPos(Vec3i, int) public BlockPos(Vec3i vec, int dim) Parameters vec Vec3i dim int BlockPos(Vec4i) Note - for backwards compatibility, this is not dimension-aware; explicitly set the dimension in the resulting BlockPos if you need to public BlockPos(Vec4i vec) Parameters vec Vec4i Fields DimensionBoundary public const int DimensionBoundary = 32768 Field Value int X [ProtoMember(1)] [JsonProperty] public int X Field Value int Y public int Y Field Value int Z [ProtoMember(3)] [JsonProperty] public int Z Field Value int dimension public int dimension Field Value int Properties AsVec3i [JsonIgnore] public Vec3i AsVec3i { get; } Property Value Vec3i InternalY [ProtoMember(2)] [JsonProperty] public int InternalY { get; set; } Property Value int this[int] 0 = x, 1 = y, 2 = z public int this[int i] { get; set; } Parameters i int Property Value int Methods Add(int, int, int) Offsets the position by given xyz public BlockPos Add(int dx, int dy, int dz) Parameters dx int dy int dz int Returns BlockPos Add(float, float, float) Offsets the position by given xyz public BlockPos Add(float dx, float dy, float dz) Parameters dx float dy float dz float Returns BlockPos Add(BlockFacing, int) Offsets the position into the direction of given block face public BlockPos Add(BlockFacing facing, int length = 1) Parameters facing BlockFacing length int Returns BlockPos Add(BlockPos) Offsets the position by given xyz vector public BlockPos Add(BlockPos pos) Parameters pos BlockPos Returns BlockPos Add(FastVec3i) Offsets the position by given xyz vector public BlockPos Add(FastVec3i vector) Parameters vector FastVec3i Returns BlockPos Add(Vec3i) Offsets the position by given xyz vector public BlockPos Add(Vec3i vector) Parameters vector Vec3i Returns BlockPos AddCopy(int) Creates a copy of this blocks position and offsets it by given xyz public BlockPos AddCopy(int xyz) Parameters xyz int Returns BlockPos AddCopy(int, int, int) Creates a copy of this blocks position and offsets it by given xyz public BlockPos AddCopy(int dx, int dy, int dz) Parameters dx int dy int dz int Returns BlockPos AddCopy(float, float, float) Creates a copy of this blocks position and offsets it by given xyz public BlockPos AddCopy(float dx, float dy, float dz) Parameters dx float dy float dz float Returns BlockPos AddCopy(BlockFacing) Creates a copy of this blocks position and offsets it in the direction of given block face public BlockPos AddCopy(BlockFacing facing) Parameters facing BlockFacing Returns BlockPos AddCopy(BlockFacing, int) Creates a copy of this blocks position and offsets it in the direction of given block face public BlockPos AddCopy(BlockFacing facing, int length) Parameters facing BlockFacing length int Returns BlockPos AddCopy(Vec3i) Creates a copy of this blocks position and offsets it by given xyz public BlockPos AddCopy(Vec3i vector) Parameters vector Vec3i Returns BlockPos Copy() Creates a copy of this blocks position public virtual BlockPos Copy() Returns BlockPos CopyAndCorrectDimension() Creates a copy of this blocks position, obtaining the correct dimension value from the Y value public virtual BlockPos CopyAndCorrectDimension() Returns BlockPos CreateFromBytes(BinaryReader) public static BlockPos CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns BlockPos DistanceSqTo(double, double, double) Returns the squared Euclidean distance to between this and given position. Dimension aware public float DistanceSqTo(double x, double y, double z) Parameters x double y double z double Returns float DistanceSqToNearerEdge(double, double, double) Returns the squared Euclidean distance between the nearer edge of this blockpos (assumed 1 x 0.75 x 1 cube) and given position The 0.75 offset is because the \"heat source\" is likely to be above the base position of this block: it's approximate Note this is dimension unaware public double DistanceSqToNearerEdge(double x, double y, double z) Parameters x double y double z double Returns double DistanceTo(double, double, double) Returns the Euclidean distance to between this and given position. Note this is dimension unaware public float DistanceTo(double x, double y, double z) Parameters x double y double z double Returns float DistanceTo(BlockPos) Returns the Euclidean distance to between this and given position. Note if dimensions are different returns maximum value (i.e. infinite) public float DistanceTo(BlockPos pos) Parameters pos BlockPos Returns float DivCopy(int) Creates a copy of this blocks position and divides it by given factor public BlockPos DivCopy(int factor) Parameters factor int Returns BlockPos Down(int) Move the position vertically down public BlockPos Down(int dy = 1) Parameters dy int Returns BlockPos DownCopy(int) Creates a copy of this blocks position with the y-position adjusted by -length public BlockPos DownCopy(int length = 1) Parameters length int Returns BlockPos East() public BlockPos East() Returns BlockPos EastCopy(int) Creates a copy of this blocks position with the x-position adjusted by +length public BlockPos EastCopy(int length = 1) Parameters length int Returns BlockPos Equals(int, int, int) public bool Equals(int x, int y, int z) Parameters x int y int z int Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(BlockPos) Indicates whether the current object is equal to another object of the same type. public bool Equals(BlockPos other) Parameters other BlockPos An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. FacingFrom(BlockPos) Returns the direction moved from the other blockPos, to get to this BlockPos public BlockFacing FacingFrom(BlockPos other) Parameters other BlockPos Returns BlockFacing GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. HorDistanceSqTo(double, double) Returns the squared Euclidean horizontal distance to between this and given position Note this is dimension unaware public float HorDistanceSqTo(double x, double z) Parameters x double z double Returns float HorizontalManhattenDistance(BlockPos) Returns the manhatten distance to given position public int HorizontalManhattenDistance(BlockPos pos) Parameters pos BlockPos Returns int InRangeHorizontally(int, int, int) Returns true if the specified x,z is within a box the specified range around this position Note this is dimension unaware public bool InRangeHorizontally(int x, int z, int range) Parameters x int z int range int Returns bool IterateHorizontalOffsets(int) Iterate through NESW offsets from the starting position. See also BlockFacing.IterateThruFacingOffset public void IterateHorizontalOffsets(int i) Parameters i int ManhattenDistance(int, int, int) Returns the manhatten distance to given position Note this is dimension unaware public int ManhattenDistance(int x, int y, int z) Parameters x int y int z int Returns int ManhattenDistance(BlockPos) Returns the manhatten distance to given position public int ManhattenDistance(BlockPos pos) Parameters pos BlockPos Returns int North() public BlockPos North() Returns BlockPos NorthCopy(int) Creates a copy of this blocks position with the z-position adjusted by -length public BlockPos NorthCopy(int length = 1) Parameters length int Returns BlockPos Offset(BlockFacing) Offsets the position into the direction of given block face public BlockPos Offset(BlockFacing facing) Parameters facing BlockFacing Returns BlockPos Set(int, int, int) Sets XYZ to new values - not dimension aware (but existing dimension will be preserved) - use SetAndCorrectDimension() for dimension awareness public BlockPos Set(int x, int y, int z) Parameters x int y int z int Returns BlockPos Set(float, float, float) public BlockPos Set(float x, float y, float z) Parameters x float y float z float Returns BlockPos Set(BlockPos) public BlockPos Set(BlockPos blockPos) Parameters blockPos BlockPos Returns BlockPos Set(BlockPos, int) public BlockPos Set(BlockPos blockPos, int dim) Parameters blockPos BlockPos dim int Returns BlockPos Set(FastVec3i) public BlockPos Set(FastVec3i pos) Parameters pos FastVec3i Returns BlockPos Set(Vec3d) Not dimension aware (but existing dimension in this BlockPos will be preserved) - use SetAndCorrectDimension() for dimension awareness public BlockPos Set(Vec3d origin) Parameters origin Vec3d Returns BlockPos Set(Vec3i) public BlockPos Set(Vec3i pos) Parameters pos Vec3i Returns BlockPos SetAndCorrectDimension(int, int, int) Dimension aware version of Set() - use this if there is a dimension embedded in the y coordinate (e.g. y == 65536+ for dimension 2) public BlockPos SetAndCorrectDimension(int x, int y, int z) Parameters x int y int z int Returns BlockPos SetAndCorrectDimension(Vec3d) Dimension aware version of Set() - use this if the Vec3d has the dimension embedded in the Y coordinate (e.g. Y == 65536+ for dimension 2) public BlockPos SetAndCorrectDimension(Vec3d origin) Parameters origin Vec3d Returns BlockPos SetAndEquals(int, int, int) Sets this BlockPos to the x,y,z values given, and returns a boolean stating if the existing values were already equal to x,y,z public bool SetAndEquals(int x, int y, int z) Parameters x int y int z int Returns bool Returns true if the BlockPos already held these exact x, y, z values (the .Set operation has not changed anything) Returns false if the .Set operation caused a change to the BlockPos SetDimension(int) public BlockPos SetDimension(int dim) Parameters dim int Returns BlockPos SetFromColumnIndex3d(int, int, int) public void SetFromColumnIndex3d(int index3d, int cx, int cz) Parameters index3d int cx int cz int SetFromSchematicIndex(int) public void SetFromSchematicIndex(int index3d) Parameters index3d int South() public BlockPos South() Returns BlockPos SouthCopy(int) Creates a copy of this blocks position with the z-position adjusted by +length public BlockPos SouthCopy(int length = 1) Parameters length int Returns BlockPos Sub(int, int, int) Substract a position => you'll have the manhatten distance public BlockPos Sub(int x, int y, int z) Parameters x int y int z int Returns BlockPos Sub(BlockPos) Substract a position => you'll have the manhatten distance public BlockPos Sub(BlockPos pos) Parameters pos BlockPos Returns BlockPos SubCopy(int, int, int) public BlockPos SubCopy(int x, int y, int z) Parameters x int y int z int Returns BlockPos SubCopy(BlockPos) Substract a position => you'll have the manhatten distance. If used within a non-zero dimension the resulting BlockPos will be dimensionless as it's a distance or offset between two positions public BlockPos SubCopy(BlockPos pos) Parameters pos BlockPos Returns BlockPos ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToColumnIndex3d() Like index3d used inside chunks, but the y value can have any value from 0 to worldheight, inside a chunk column public int ToColumnIndex3d() Returns int ToLocalPosition(ICoreAPI) Convert a block position to coordinates relative to the world spawn position. Note this is dimension unaware public Vec3i ToLocalPosition(ICoreAPI api) Parameters api ICoreAPI Returns Vec3i ToSchematicIndex() public int ToSchematicIndex() Returns int ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. ToVec3d() Creates a new instance of a Vec3d initialized with this position Note this is dimension unaware public Vec3d ToVec3d() Returns Vec3d ToVec3f() public Vec3f ToVec3f() Returns Vec3f ToVec3i() Creates a new instance of a Vec3i initialized with this position Note this is dimension unaware public Vec3i ToVec3i() Returns Vec3i Up(int) Move the position vertically up public BlockPos Up(int dy = 1) Parameters dy int Returns BlockPos UpCopy(int) Creates a copy of this blocks position with the y-position adjusted by +length public BlockPos UpCopy(int length = 1) Parameters length int Returns BlockPos Walk(BlockPos, BlockPos, Vec3i, Action<int, int, int>) public static void Walk(BlockPos startPos, BlockPos untilPos, Vec3i mapSizeForClamp, Action<int, int, int> onpos) Parameters startPos BlockPos untilPos BlockPos mapSizeForClamp Vec3i onpos Action<int, int, int> West() public BlockPos West() Returns BlockPos WestCopy(int) Creates a copy of this blocks position with the x-position adjusted by -length public BlockPos WestCopy(int length = 1) Parameters length int Returns BlockPos Operators operator +(BlockPos, int) public static BlockPos operator +(BlockPos left, int right) Parameters left BlockPos right int Returns BlockPos operator +(BlockPos, BlockPos) public static BlockPos operator +(BlockPos left, BlockPos right) Parameters left BlockPos right BlockPos Returns BlockPos operator /(BlockPos, int) public static BlockPos operator /(BlockPos left, int right) Parameters left BlockPos right int Returns BlockPos operator ==(BlockPos, BlockPos) public static bool operator ==(BlockPos left, BlockPos right) Parameters left BlockPos right BlockPos Returns bool operator !=(BlockPos, BlockPos) public static bool operator !=(BlockPos left, BlockPos right) Parameters left BlockPos right BlockPos Returns bool operator *(int, BlockPos) public static BlockPos operator *(int left, BlockPos right) Parameters left int right BlockPos Returns BlockPos operator *(BlockPos, int) public static BlockPos operator *(BlockPos left, int right) Parameters left BlockPos right int Returns BlockPos operator -(BlockPos, int) public static BlockPos operator -(BlockPos left, int right) Parameters left BlockPos right int Returns BlockPos operator -(BlockPos, BlockPos) public static BlockPos operator -(BlockPos left, BlockPos right) Parameters left BlockPos right BlockPos Returns BlockPos"
  },
  "api/Vintagestory.API.MathTools.CachingCollisionTester.html": {
    "href": "api/Vintagestory.API.MathTools.CachingCollisionTester.html",
    "title": "Class CachingCollisionTester | VintageStory API",
    "keywords": "Class CachingCollisionTester Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Originally intended to be a special version of CollisionTester for BehaviorControlledPhysics, which does not re-do the WalkBlocks() call and re-generate the CollisionBoxList more than once in the same entity tick Currently in 1.20 the caching is not very useful when we loop through all entities sequentially - but empirical testing shows it is actually faster not to cache Open in GitHub public class CachingCollisionTester : CollisionTester Inheritance object CollisionTester CachingCollisionTester Inherited Members CollisionTester.CollisionBoxList CollisionTester.entityBox CollisionTester.tmpPos CollisionTester.tmpPosDelta CollisionTester.minPos CollisionTester.maxPos CollisionTester.pos CollisionTester.ApplyTerrainCollision(Entity, EntityPos, float, ref Vec3d, float, float) CollisionTester.IsColliding(IBlockAccessor, Cuboidf, Vec3d, bool) CollisionTester.GetCollidingBlock(IBlockAccessor, Cuboidf, Vec3d, bool) CollisionTester.GetCollidingCollisionBox(IBlockAccessor, Cuboidf, Vec3d, bool) CollisionTester.GetCollidingCollisionBox(IBlockAccessor, Cuboidf, Vec3d, ref Cuboidd, bool, int) CollisionTester.AabbIntersect(Cuboidf, double, double, double, Cuboidf, Vec3d) CollisionTester.AabbIntersect(Cuboidd, Cuboidd, Vec3d) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AssignToEntity(PhysicsBehaviorBase, int) public void AssignToEntity(PhysicsBehaviorBase entityPhysics, int dimension) Parameters entityPhysics PhysicsBehaviorBase dimension int GenerateCollisionBoxList(IBlockAccessor, double, double, double, float, float, int) protected override void GenerateCollisionBoxList(IBlockAccessor blockAccessor, double motionX, double motionY, double motionZ, float stepHeight, float yExtra, int dimension) Parameters blockAccessor IBlockAccessor motionX double motionY double motionZ double stepHeight float yExtra float dimension int NewTick(EntityPos) public void NewTick(EntityPos entityPos) Parameters entityPos EntityPos PushOutFromBlocks(IBlockAccessor, Entity, Vec3d, float) public void PushOutFromBlocks(IBlockAccessor blockAccessor, Entity entity, Vec3d tmpVec, float clippingLimit) Parameters blockAccessor IBlockAccessor entity Entity tmpVec Vec3d clippingLimit float"
  },
  "api/Vintagestory.API.MathTools.Cardinal.html": {
    "href": "api/Vintagestory.API.MathTools.Cardinal.html",
    "title": "Class Cardinal | VintageStory API",
    "keywords": "Class Cardinal Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Cardinal Inheritance object Cardinal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Cardinal(string, string, Vec3i, int, int, bool) public Cardinal(string code, string initial, Vec3i normali, int index, int oppositeIndex, bool isDiagonal) Parameters code string initial string normali Vec3i index int oppositeIndex int isDiagonal bool Fields ALL public static readonly Cardinal[] ALL Field Value Cardinal[] East Positive X public static readonly Cardinal East Field Value Cardinal North Negative Z public static readonly Cardinal North Field Value Cardinal NorthEast Positive X, negative Z public static readonly Cardinal NorthEast Field Value Cardinal NorthWest Negative X, negative Z public static readonly Cardinal NorthWest Field Value Cardinal South Positive Z public static readonly Cardinal South Field Value Cardinal SouthEast Positive X, positive Z public static readonly Cardinal SouthEast Field Value Cardinal SouthWest Negative X, positive Z public static readonly Cardinal SouthWest Field Value Cardinal West Negative X public static readonly Cardinal West Field Value Cardinal Properties Code public string Code { get; } Property Value string Index public int Index { get; } Property Value int Initial public string Initial { get; } Property Value string IsDiagnoal public bool IsDiagnoal { get; } Property Value bool Normalf public Vec3f Normalf { get; } Property Value Vec3f Normali public Vec3i Normali { get; } Property Value Vec3i Opposite public Cardinal Opposite { get; } Property Value Cardinal OppositeIndex public int OppositeIndex { get; } Property Value int Methods FromInitial(string) public static Cardinal FromInitial(string initials) Parameters initials string Returns Cardinal FromNormali(Vec3i) public static Cardinal FromNormali(Vec3i normali) Parameters normali Vec3i Returns Cardinal FromVector(double, double, double) public static Cardinal FromVector(double x, double y, double z) Parameters x double y double z double Returns Cardinal Operators implicit operator int(Cardinal) public static implicit operator int(Cardinal card) Parameters card Cardinal Returns int"
  },
  "api/Vintagestory.API.MathTools.ClampedSimplexNoise.html": {
    "href": "api/Vintagestory.API.MathTools.ClampedSimplexNoise.html",
    "title": "Class ClampedSimplexNoise | VintageStory API",
    "keywords": "Class ClampedSimplexNoise Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Perlin noise of supplied amplitude and frequency. The resulting value is clamped to 0...1 Open in GitHub public class ClampedSimplexNoise Inheritance object ClampedSimplexNoise Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ClampedSimplexNoise(double[], double[], long) public ClampedSimplexNoise(double[] amplitudes, double[] frequencies, long seed) Parameters amplitudes double[] frequencies double[] seed long Fields amplitudes public double[] amplitudes Field Value double[] frequencies public double[] frequencies Field Value double[] octaves public SimplexNoiseOctave[] octaves Field Value SimplexNoiseOctave[] Methods Clone() public ClampedSimplexNoise Clone() Returns ClampedSimplexNoise Noise(double, double, double) public virtual double Noise(double x, double y, double offset = 0) Parameters x double y double offset double Returns double"
  },
  "api/Vintagestory.API.MathTools.CollisionTester.html": {
    "href": "api/Vintagestory.API.MathTools.CollisionTester.html",
    "title": "Class CollisionTester | VintageStory API",
    "keywords": "Class CollisionTester Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class CollisionTester Inheritance object CollisionTester Derived CachingCollisionTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CollisionBoxList public CachedCuboidListFaster CollisionBoxList Field Value CachedCuboidListFaster entityBox public Cuboidd entityBox Field Value Cuboidd maxPos public BlockPos maxPos Field Value BlockPos minPos public BlockPos minPos Field Value BlockPos pos public Vec3d pos Field Value Vec3d tmpPos public BlockPos tmpPos Field Value BlockPos tmpPosDelta public Vec3d tmpPosDelta Field Value Vec3d Methods AabbIntersect(Cuboidd, Cuboidd, Vec3d) public static EnumIntersect AabbIntersect(Cuboidd aabb, Cuboidd aabb2, Vec3d motion) Parameters aabb Cuboidd aabb2 Cuboidd motion Vec3d Returns EnumIntersect AabbIntersect(Cuboidf, double, double, double, Cuboidf, Vec3d) public static bool AabbIntersect(Cuboidf aabb, double x, double y, double z, Cuboidf aabb2, Vec3d pos) Parameters aabb Cuboidf x double y double z double aabb2 Cuboidf pos Vec3d Returns bool ApplyTerrainCollision(Entity, EntityPos, float, ref Vec3d, float, float) Takes the entity positiona and motion and adds them, respecting any colliding blocks. The resulting new position is put into outposition public void ApplyTerrainCollision(Entity entity, EntityPos entityPos, float dtFactor, ref Vec3d newPosition, float stepHeight = 1, float yExtra = 1) Parameters entity Entity entityPos EntityPos dtFactor float newPosition Vec3d stepHeight float yExtra float Default 1 for the extra high collision boxes of fences GenerateCollisionBoxList(IBlockAccessor, double, double, double, float, float, int) protected virtual void GenerateCollisionBoxList(IBlockAccessor blockAccessor, double motionX, double motionY, double motionZ, float stepHeight, float yExtra, int dimension) Parameters blockAccessor IBlockAccessor motionX double motionY double motionZ double stepHeight float yExtra float dimension int GetCollidingBlock(IBlockAccessor, Cuboidf, Vec3d, bool) public Block GetCollidingBlock(IBlockAccessor blockAccessor, Cuboidf entityBoxRel, Vec3d pos, bool alsoCheckTouch = true) Parameters blockAccessor IBlockAccessor entityBoxRel Cuboidf pos Vec3d alsoCheckTouch bool Returns Block GetCollidingCollisionBox(IBlockAccessor, Cuboidf, Vec3d, bool) If given cuboidf collides with the terrain, returns the collision box it collides with. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that. public Cuboidd GetCollidingCollisionBox(IBlockAccessor blockAccessor, Cuboidf entityBoxRel, Vec3d pos, bool alsoCheckTouch = true) Parameters blockAccessor IBlockAccessor entityBoxRel Cuboidf pos Vec3d alsoCheckTouch bool Returns Cuboidd GetCollidingCollisionBox(IBlockAccessor, Cuboidf, Vec3d, ref Cuboidd, bool, int) Tests given cuboidf collides with the terrain. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that. NOTE: currently not dimension-aware unless the supplied Vec3d pos is dimension-aware public bool GetCollidingCollisionBox(IBlockAccessor blockAccessor, Cuboidf entityBoxRel, Vec3d pos, ref Cuboidd intoCuboid, bool alsoCheckTouch = true, int dimension = 0) Parameters blockAccessor IBlockAccessor entityBoxRel Cuboidf pos Vec3d intoCuboid Cuboidd alsoCheckTouch bool dimension int Returns bool IsColliding(IBlockAccessor, Cuboidf, Vec3d, bool) Tests given cuboidf collides with the terrain. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that. public bool IsColliding(IBlockAccessor blockAccessor, Cuboidf entityBoxRel, Vec3d pos, bool alsoCheckTouch = true) Parameters blockAccessor IBlockAccessor entityBoxRel Cuboidf pos Vec3d alsoCheckTouch bool Returns bool"
  },
  "api/Vintagestory.API.MathTools.ColorBlend.ColorBlendDelegate.html": {
    "href": "api/Vintagestory.API.MathTools.ColorBlend.ColorBlendDelegate.html",
    "title": "Delegate ColorBlend.ColorBlendDelegate | VintageStory API",
    "keywords": "Delegate ColorBlend.ColorBlendDelegate Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate int ColorBlend.ColorBlendDelegate(int col1, int col2) Parameters col1 int col2 int Returns int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.ColorBlend.html": {
    "href": "api/Vintagestory.API.MathTools.ColorBlend.html",
    "title": "Class ColorBlend | VintageStory API",
    "keywords": "Class ColorBlend Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public static class ColorBlend Inheritance object ColorBlend Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Blend(EnumColorBlendMode, int, int) public static int Blend(EnumColorBlendMode blendMode, int colorBase, int colorOver) Parameters blendMode EnumColorBlendMode colorBase int colorOver int Returns int ColorBurn(int, int) public static int ColorBurn(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int ColorDodge(int, int) public static int ColorDodge(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int Darken(int, int) public static int Darken(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int Lighten(int, int) public static int Lighten(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int Multiply(int, int) public static int Multiply(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int Normal(int, int) public static int Normal(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int Overlay(int, int) public static int Overlay(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int OverlayCutout(int, int) public static int OverlayCutout(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int Screen(int, int) public static int Screen(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int"
  },
  "api/Vintagestory.API.MathTools.ColorUtil.LightUtil.html": {
    "href": "api/Vintagestory.API.MathTools.ColorUtil.LightUtil.html",
    "title": "Class ColorUtil.LightUtil | VintageStory API",
    "keywords": "Class ColorUtil.LightUtil Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Converts HSV (extracted from light and lightSat) to RGBA public class ColorUtil.LightUtil Inheritance object ColorUtil.LightUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LightUtil(float[], float[], byte[], byte[]) public LightUtil(float[] blockLights, float[] sunLights, byte[] hues, byte[] sats) Parameters blockLights float[] sunLights float[] hues byte[] sats byte[] Methods ToRgba(uint, int) public int ToRgba(uint light, int lightSat) Parameters light uint lightSat int Returns int"
  },
  "api/Vintagestory.API.MathTools.ColorUtil.html": {
    "href": "api/Vintagestory.API.MathTools.ColorUtil.html",
    "title": "Class ColorUtil | VintageStory API",
    "keywords": "Class ColorUtil Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Many utility methods and fields for working with colors Open in GitHub public class ColorUtil Inheritance object ColorUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields BlackArgb Black opaque rgb color public static readonly int BlackArgb Field Value int BlackArgbDouble White opaque color as normalized float values (0..1) public static readonly double[] BlackArgbDouble Field Value double[] BlackArgbVec Black opaque rgb color public static readonly Vec4f BlackArgbVec Field Value Vec4f BlackRgbVec Black opaque rgb color public static readonly Vec3f BlackRgbVec Field Value Vec3f BrightBits Amount of bits per block that are available to store the brightness value public const int BrightBits = 5 Field Value int BrightMul public const int BrightMul = 8 Field Value int BrightQuantities public static int BrightQuantities Field Value int ClearAlpha ~(255 << 24) public const int ClearAlpha = 16777215 Field Value int HueBits Amount of bits per block that are available to store the hue value public const int HueBits = 6 Field Value int HueMul public const int HueMul = 4 Field Value int HueQuantities public static int HueQuantities Field Value int OpaqueAlpha 255 << 24 public const int OpaqueAlpha = -16777216 Field Value int SatBits Amount of bits per block that are available to store the saturation value public const int SatBits = 3 Field Value int SatMul public const int SatMul = 32 Field Value int SatQuantities public static int SatQuantities Field Value int WhiteAhsl White opaque AHSV color public static readonly int WhiteAhsl Field Value int WhiteAhsvBytes White opaque ahsv color as bytes (0..255) public static readonly byte[] WhiteAhsvBytes Field Value byte[] WhiteArgb White opaque argb color public const int WhiteArgb = -1 Field Value int WhiteArgbBytes White opaque argb color as bytes (0..255) public static readonly byte[] WhiteArgbBytes Field Value byte[] WhiteArgbDouble White opaque color as normalized float values (0..1) public static readonly double[] WhiteArgbDouble Field Value double[] WhiteArgbFloat White opaque color as normalized float values (0..1) public static readonly float[] WhiteArgbFloat Field Value float[] WhiteArgbVec White opaque color as normalized float values (0..1) public static readonly Vec4f WhiteArgbVec Field Value Vec4f WhiteRgbVec White opaque color as normalized float values (0..1) public static readonly Vec3f WhiteRgbVec Field Value Vec3f Methods ColorA(int) Returns alpha value of given color public static byte ColorA(int color) Parameters color int Returns byte ColorAverage(int[], float[]) Averages several colors together in RGB space public static int ColorAverage(int[] colors, float[] weights) Parameters colors int[] weights float[] Returns int ColorB(int) Returns blue value of given color public static byte ColorB(int color) Parameters color int Returns byte ColorCombineHSV(int, int, int, int, int, int) Combines two HSV colors by converting them to rgb then back to hsv. Uses the brightness as a weighting factor. Also leaves the brightness at the max of both hsv colors. public static int[] ColorCombineHSV(int h1, int s1, int v1, int h2, int s2, int v2) Parameters h1 int s1 int v1 int h2 int s2 int v2 int Returns int[] Combined HSV Color ColorFromRgba(byte[]) public static int ColorFromRgba(byte[] channels) Parameters channels byte[] Returns int ColorFromRgba(double[]) public static int ColorFromRgba(double[] col) Parameters col double[] Returns int ColorFromRgba(int, int, int, int) Care: the returned value is in true RGBA order, not BGRA as used for example by VS particle system. Therefore, depending on use, calling code may need to exchange the r and b parameters to see correct colors rendered in-game. public static int ColorFromRgba(int r, int g, int b, int a) Parameters r int g int b int a int Returns int ColorFromRgba(Vec4f) public static int ColorFromRgba(Vec4f colorRel) Parameters colorRel Vec4f Returns int ColorG(int) Returns green value of given color public static byte ColorG(int color) Parameters color int Returns byte ColorMultiply(byte[], byte[]) Multiplies two colors together: c=(a*b)/255 public static byte[] ColorMultiply(byte[] color1, byte[] color2) Parameters color1 byte[] color2 byte[] Returns byte[] ColorMultiply3(int, float) Multiplies a float value to the rgb color channels, leaves alpha channel unchanged public static int ColorMultiply3(int color, float multiplier) Parameters color int multiplier float Returns int ColorMultiply3Clamped(int, float) Multiplies a float value to the rgb color channels, leaves alpha channel unchanged. Makes sure the multiplied value stays within the 0..255 range public static int ColorMultiply3Clamped(int color, float multiplier) Parameters color int multiplier float Returns int ColorMultiply4(int, float) Multiplies a float value to every color channel including the alpha component. public static int ColorMultiply4(int color, float multiplier) Parameters color int multiplier float Returns int ColorMultiply4(int, float, float, float, float) Multiplies a float value to the rgb color channels public static int ColorMultiply4(int color, float redMul, float greenMul, float blueMul, float alphaMul) Parameters color int redMul float greenMul float blueMul float alphaMul float Returns int ColorMultiplyEach(int, int) Multiplies two colors together c=(a*b)/255 public static int ColorMultiplyEach(int color, int color2) Parameters color int color2 int Returns int ColorOver(int, int) Overlays rgb1 on top of rgb2, based on their alpha values public static int ColorOver(int rgb1, int rgb2) Parameters rgb1 int rgb2 int Returns int ColorOverlay(int, int, float) Overlays rgb2 over rgb1 When c2weight = 0 resulting color is color1, when c2weight = 1 then resulting color is color2 Resulting color alpha value is 100% color1 alpha public static int ColorOverlay(int rgb1, int rgb2, float c2weight) Parameters rgb1 int rgb2 int c2weight float Returns int ColorR(int) Returns red value of given color public static byte ColorR(int color) Parameters color int Returns byte ColorSubstractHSV(int, int, int, int, int, int) Removes HSV2 from HSV1 by converting them to rgb then back to hsv. Uses the brightness as a weighting factor. Leaves brightness unchanged. public static int[] ColorSubstractHSV(int h1, int s1, int v1, int h2, int s2, int v2) Parameters h1 int s1 int v1 int h2 int s2 int v2 int Returns int[] ColorToString(int) Returns human a readable string of given color public static string ColorToString(int color) Parameters color int Returns string Doubles2Hex(double[]) public static string Doubles2Hex(double[] color) Parameters color double[] Returns string FromRGBADoubles(double[]) public static int FromRGBADoubles(double[] rgba) Parameters rgba double[] Returns int GetIncandescenceColorAsColor4f(int) public static float[] GetIncandescenceColorAsColor4f(int temperature) Parameters temperature int Returns float[] GrayscaleColor(byte) Returns a fully opaque gray color with given brightness public static int GrayscaleColor(byte brightness) Parameters brightness byte Returns int HSVa2RGBaBytes(byte[]) Converts given HSVA values into its respective RGBA Representation (all values in range of 0-255) R is the first byte in the resulting array public static byte[] HSVa2RGBaBytes(byte[] hsva) Parameters hsva byte[] Returns byte[] Hex2Doubles(string) Parses a hex string as an rgb(a) color and returns an array of colors normalized fom 0..1 for use with Cairo. E.g. turns #FF0000 into double[1, 0, 0, 1] and #00FF00CC into double[0, 1, 0, 0.8] public static double[] Hex2Doubles(string hex) Parameters hex string Returns double[] Hex2Doubles(string, double) public static double[] Hex2Doubles(string hex, double opacityRel) Parameters hex string opacityRel double Returns double[] Hex2Int(string) Turn a string hex color (with #) into a single int public static int Hex2Int(string hex) Parameters hex string Returns int Hsv2Rgb(int) Converts given HSV value into it's respective RGB Representation (all values in range of 0-255) R is the most significant byte i.e. this is RGB public static int Hsv2Rgb(int hsv) Parameters hsv int Returns int Hsv2RgbInts(int, int, int) Converts given HSV values into its respective RGB representation (all values in range of 0-255) R is the first byte in the resulting array public static int[] Hsv2RgbInts(int h, int s, int v) Parameters h int s int v int Returns int[] HsvToRgb(int, int, int) Converts given HSV values into it's respective RGB Representation (all values in range of 0-255) R is the most significant byte i.e. this is RGB public static int HsvToRgb(int h, int s, int v) Parameters h int s int v int Returns int HsvToRgba(int, int, int) Converts given HSB values into it's respective ARGB Representation (all values in range of 0-255, alpha always 255) R is the LEAST significant byte i.e. the result is BGR public static int HsvToRgba(int h, int s, int v) Parameters h int s int v int Returns int HsvToRgba(int, int, int, int) Converts given HSV values into its respective ARGB Representation (all values in range of 0-255) R is the LEAST significant byte i.e. the result is BGR public static int HsvToRgba(int h, int s, int v, int a) Parameters h int s int v int a int Returns int Int2Hex(int) Turn a color int into its string hex version, including preceeding # public static string Int2Hex(int color) Parameters color int Returns string Int2HexBGR(int) public static string Int2HexBGR(int color) Parameters color int Returns string Int2HexRgba(int) Turn a color int into its string hex version, including preceeding #, including alpha channel public static string Int2HexRgba(int color) Parameters color int Returns string ReverseColorBytes(byte[]) Reverses the RGB channels, but leaves alpha untouched. Basically turns RGBA into BGRA and vice versa public static byte[] ReverseColorBytes(byte[] color) Parameters color byte[] Returns byte[] ReverseColorBytes(int) Reverses the RGB channels, but leaves alpha untouched. Basically turns RGBA into BGRA and vice versa public static int ReverseColorBytes(int color) Parameters color int Returns int Rgb2HSv(int) Converts given RGB value into it's respective HSV Representation (all values in range of 0-255) In the parameter, R is the most significant byte i.e. this is for RGB In the result, V is the LEAST significant byte public static int Rgb2HSv(int rgb) Parameters rgb int Returns int Rgb2Hsv(float, float, float) Converts given RGB values into it's respective HSV Representation (all values in range of 0-255) In the result, V is the MOST significant byte public static int Rgb2Hsv(float r, float g, float b) Parameters r float g float b float Returns int RgbToHsvInts(int, int, int) Converts given RGB values into it's respective HSV Representation (all values in range of 0-255) public static int[] RgbToHsvInts(int r, int g, int b) Parameters r int g int b int Returns int[] ToBGRABytes(int) Splits up a 32bit int color into 4 1 byte components, in BGRA order (Alpha channel at the highest 8 bits) public static byte[] ToBGRABytes(int color) Parameters color int Returns byte[] ToRGBABytes(int) Splits up a 32bit int color into 4 1 byte components, in RGBA order public static byte[] ToRGBABytes(int color) Parameters color int Returns byte[] ToRGBADoubles(int) Returns a 4 element rgb double with values between 0..1 public static double[] ToRGBADoubles(int color) Parameters color int Returns double[] ToRGBAFloats(int) Returns a 4 element rgb float with values between 0..1 public static float[] ToRGBAFloats(int color) Parameters color int Returns float[] ToRGBAVec4f(int) public static Vec4f ToRGBAVec4f(int color) Parameters color int Returns Vec4f ToRGBAVec4f(int, ref Vec4f) public static Vec4f ToRGBAVec4f(int color, ref Vec4f outVal) Parameters color int outVal Vec4f Returns Vec4f ToRGBVec3f(int, ref Vec3f) Returns a 4 element rgb float with values between 0..1 public static Vec3f ToRGBVec3f(int color, ref Vec3f outVal) Parameters color int outVal Vec3f Returns Vec3f ToRgba(int, int, int, int) Pack the 4 color components into a single ARGB 32bit int public static int ToRgba(int a, int r, int g, int b) Parameters a int r int g int b int Returns int getIncandescenceColor(int) public static int[] getIncandescenceColor(int temperature) Parameters temperature int Returns int[]"
  },
  "api/Vintagestory.API.MathTools.Crc32Algorithm.html": {
    "href": "api/Vintagestory.API.MathTools.Crc32Algorithm.html",
    "title": "Class Crc32Algorithm | VintageStory API",
    "keywords": "Class Crc32Algorithm Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Implementation of CRC-32. This class supports several convenient static methods returning the CRC as UInt32. From https://github.com/force-net/Crc32.NET Open in GitHub public class Crc32Algorithm : HashAlgorithm, ICryptoTransform, IDisposable Inheritance object HashAlgorithm Crc32Algorithm Implements ICryptoTransform IDisposable Inherited Members HashAlgorithm.HashSizeValue HashAlgorithm.HashValue HashAlgorithm.State HashAlgorithm.Clear() HashAlgorithm.ComputeHash(byte[]) HashAlgorithm.ComputeHash(byte[], int, int) HashAlgorithm.ComputeHash(Stream) HashAlgorithm.ComputeHashAsync(Stream, CancellationToken) HashAlgorithm.Create() HashAlgorithm.Create(string) HashAlgorithm.Dispose() HashAlgorithm.Dispose(bool) HashAlgorithm.HashCore(ReadOnlySpan<byte>) HashAlgorithm.TransformBlock(byte[], int, int, byte[], int) HashAlgorithm.TransformFinalBlock(byte[], int, int) HashAlgorithm.TryComputeHash(ReadOnlySpan<byte>, Span<byte>, out int) HashAlgorithm.TryHashFinal(Span<byte>, out int) HashAlgorithm.CanReuseTransform HashAlgorithm.CanTransformMultipleBlocks HashAlgorithm.Hash HashAlgorithm.HashSize HashAlgorithm.InputBlockSize HashAlgorithm.OutputBlockSize object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Crc32Algorithm() Initializes a new instance of the Crc32Algorithm class. public Crc32Algorithm() Methods Append(uint, byte[]) Computes CRC-3C from multiple buffers. Call this method multiple times to chain multiple buffers. public static uint Append(uint initial, byte[] input) Parameters initial uint Initial CRC value for the algorithm. It is zero for the first buffer. Subsequent buffers should have their initial value set to CRC value returned by previous call to this method. input byte[] Input buffer containing data to be checksummed. Returns uint Accumulated CRC-32 of all buffers processed so far. Append(uint, byte[], int, int) Computes CRC-32 from multiple buffers. Call this method multiple times to chain multiple buffers. public static uint Append(uint initial, byte[] input, int offset, int length) Parameters initial uint Initial CRC value for the algorithm. It is zero for the first buffer. Subsequent buffers should have their initial value set to CRC value returned by previous call to this method. input byte[] Input buffer with data to be checksummed. offset int Offset of the input data within the buffer. length int Length of the input data in the buffer. Returns uint Accumulated CRC-32 of all buffers processed so far. Compute(byte[]) Computes CRC-32 from input buffer. public static uint Compute(byte[] input) Parameters input byte[] Input buffer containing data to be checksummed. Returns uint CRC-32 of the buffer. Compute(byte[], int, int) Computes CRC-32 from input buffer. public static uint Compute(byte[] input, int offset, int length) Parameters input byte[] Input buffer with data to be checksummed. offset int Offset of the input data within the buffer. length int Length of the input data in the buffer. Returns uint CRC-32 of the data in the buffer. HashCore(byte[], int, int) Appends CRC-32 from given buffer protected override void HashCore(byte[] input, int offset, int length) Parameters input byte[] offset int length int HashFinal() Computes CRC-32 from HashCore(byte[], int, int) protected override byte[] HashFinal() Returns byte[] Initialize() Resets internal state of the algorithm. Used internally. public override void Initialize()"
  },
  "api/Vintagestory.API.MathTools.Cuboidd.html": {
    "href": "api/Vintagestory.API.MathTools.Cuboidd.html",
    "title": "Class Cuboidd | VintageStory API",
    "keywords": "Class Cuboidd Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a three dimensional axis-aligned cuboid using two 3d coordinates. Used for collision and selection withes. Open in GitHub public class Cuboidd : IEquatable<Cuboidd> Inheritance object Cuboidd Implements IEquatable<Cuboidd> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Cuboidd() public Cuboidd() Cuboidd(double, double, double, double, double, double) public Cuboidd(double x1, double y1, double z1, double x2, double y2, double z2) Parameters x1 double y1 double z1 double x2 double y2 double z2 double Cuboidd(Vec3d, Vec3d) public Cuboidd(Vec3d start, Vec3d end) Parameters start Vec3d end Vec3d Fields X1 public double X1 Field Value double X2 public double X2 Field Value double Y1 public double Y1 Field Value double Y2 public double Y2 Field Value double Z1 public double Z1 Field Value double Z2 public double Z2 Field Value double Properties End public Vec3d End { get; } Property Value Vec3d Height MaxY-MinY public double Height { get; } Property Value double Length MaxZ-MinZ public double Length { get; } Property Value double MaxX public double MaxX { get; } Property Value double MaxY public double MaxY { get; } Property Value double MaxZ public double MaxZ { get; } Property Value double MinX public double MinX { get; } Property Value double MinY public double MinY { get; } Property Value double MinZ public double MinZ { get; } Property Value double Start public Vec3d Start { get; } Property Value Vec3d Width MaxX-MinX public double Width { get; } Property Value double Methods Clone() Creates a copy of the cuboid public Cuboidd Clone() Returns Cuboidd Contains(double, double, double) Returns if the given point is inside the cuboid public bool Contains(double x, double y, double z) Parameters x double y double z double Returns bool ContainsOrTouches(double, double, double) Returns if the given point is inside the cuboid public bool ContainsOrTouches(double x, double y, double z) Parameters x double y double z double Returns bool ContainsOrTouches(IVec3) Returns if the given point is inside the cuboid public bool ContainsOrTouches(IVec3 vec) Parameters vec IVec3 Returns bool Equals(Cuboidd) Indicates whether the current object is equal to another object of the same type. public bool Equals(Cuboidd other) Parameters other Cuboidd An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GrowBy(double, double, double) public Cuboidd GrowBy(double dx, double dy, double dz) Parameters dx double dy double dz double Returns Cuboidd GrowToInclude(int, int, int) Grows the cuboid so that it includes the given block public Cuboidd GrowToInclude(int x, int y, int z) Parameters x int y int z int Returns Cuboidd GrowToInclude(IVec3) Grows the cuboid so that it includes the given block public Cuboidd GrowToInclude(IVec3 vec) Parameters vec IVec3 Returns Cuboidd Intersects(Cuboidd) If the given cuboid intersects with this cuboid public bool Intersects(Cuboidd other) Parameters other Cuboidd Returns bool Intersects(Cuboidf) If the given cuboid intersects with this cuboid public bool Intersects(Cuboidf other) Parameters other Cuboidf Returns bool Intersects(Cuboidf, double, double, double) public bool Intersects(Cuboidf other, double offsetx, double offsety, double offsetz) Parameters other Cuboidf offsetx double offsety double offsetz double Returns bool Intersects(Cuboidf, Vec3d) If the given cuboid intersects with this cuboid public bool Intersects(Cuboidf other, Vec3d offset) Parameters other Cuboidf offset Vec3d Returns bool IntersectsOrTouches(Cuboidd) If the given cuboid intersects with this cuboid public bool IntersectsOrTouches(Cuboidd other) Parameters other Cuboidd Returns bool IntersectsOrTouches(Cuboidf, double, double, double) If the given cuboid intersects with this cuboid public bool IntersectsOrTouches(Cuboidf other, double offsetX, double offsetY, double offsetZ) Parameters other Cuboidf offsetX double offsetY double offsetZ double Returns bool IntersectsOrTouches(Cuboidf, Vec3d) If the given cuboid intersects with this cuboid public bool IntersectsOrTouches(Cuboidf other, Vec3d offset) Parameters other Cuboidf offset Vec3d Returns bool Offset(double, double, double) public Cuboidd Offset(double dx, double dy, double dz) Parameters dx double dy double dz double Returns Cuboidd OffsetCopy(double, double, double) Returns a new cuboid offseted by given position public Cuboidd OffsetCopy(double x, double y, double z) Parameters x double y double z double Returns Cuboidd OffsetCopy(IVec3) Returns a new cuboid offseted by given position public Cuboidd OffsetCopy(IVec3 vec) Parameters vec IVec3 Returns Cuboidd RemoveRoundingErrors() public void RemoveRoundingErrors() RotatedCopy(double, double, double, Vec3d) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidd RotatedCopy(double degX, double degY, double degZ, Vec3d origin) Parameters degX double degY double degZ double origin Vec3d Returns Cuboidd RotatedCopy(IVec3, Vec3d) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidd RotatedCopy(IVec3 vec, Vec3d origin) Parameters vec IVec3 origin Vec3d Returns Cuboidd Set(double, double, double, double, double, double) Sets the minimum and maximum values of the cuboid public Cuboidd Set(double x1, double y1, double z1, double x2, double y2, double z2) Parameters x1 double y1 double z1 double x2 double y2 double z2 double Returns Cuboidd Set(Cuboidd) public void Set(Cuboidd other) Parameters other Cuboidd Set(Cuboidf) Sets the minimum and maximum values of the cuboid public Cuboidd Set(Cuboidf selectionBox) Parameters selectionBox Cuboidf Returns Cuboidd Set(IVec3, IVec3) Sets the minimum and maximum values of the cuboid public Cuboidd Set(IVec3 min, IVec3 max) Parameters min IVec3 max IVec3 Returns Cuboidd SetAndTranslate(Cuboidf, double, double, double) Sets the cuboid to the selectionBox, translated by (dX, dY, dZ) public Cuboidd SetAndTranslate(Cuboidf selectionBox, double dX, double dY, double dZ) Parameters selectionBox Cuboidf dX double dY double dZ double Returns Cuboidd SetAndTranslate(Cuboidf, Vec3d) Sets the cuboid to the selectionBox, translated by vec public Cuboidd SetAndTranslate(Cuboidf selectionBox, Vec3d vec) Parameters selectionBox Cuboidf vec Vec3d Returns Cuboidd ShortestDistanceFrom(double, double, double) Returns the shortest distance between given point and any point inside the cuboid public double ShortestDistanceFrom(double x, double y, double z) Parameters x double y double z double Returns double ShortestDistanceFrom(Cuboidd) Returns the shortest distance to any point between this and given cuboid public double ShortestDistanceFrom(Cuboidd cuboid) Parameters cuboid Cuboidd Returns double ShortestDistanceFrom(Cuboidf, BlockPos) Returns the shortest distance to any point between this and given cuboid public double ShortestDistanceFrom(Cuboidf cuboid, BlockPos offset) Parameters cuboid Cuboidf offset BlockPos Returns double ShortestDistanceFrom(IVec3) Returns the shortest distance between given point and any point inside the cuboid public double ShortestDistanceFrom(IVec3 vec) Parameters vec IVec3 Returns double ShortestHorizontalDistanceFrom(double, double) Returns the shortest horizontal distance to any point between this and given coordinate public double ShortestHorizontalDistanceFrom(double x, double z) Parameters x double z double Returns double ShortestHorizontalDistanceFrom(Cuboidf, BlockPos) Returns the shortest horizontal distance to any point between this and given cuboid public double ShortestHorizontalDistanceFrom(Cuboidf cuboid, BlockPos offset) Parameters cuboid Cuboidf offset BlockPos Returns double ShortestVerticalDistanceFrom(double) Returns the shortest distance between given point and any point inside the cuboid public double ShortestVerticalDistanceFrom(double y) Parameters y double Returns double ShortestVerticalDistanceFrom(Cuboidd) Returns the shortest vertical distance to any point between this and given cuboid public double ShortestVerticalDistanceFrom(Cuboidd cuboid) Parameters cuboid Cuboidd Returns double ShortestVerticalDistanceFrom(Cuboidf, EntityPos) Returns the shortest distance to any point between this and given cuboid public double ShortestVerticalDistanceFrom(Cuboidf cuboid, EntityPos offset) Parameters cuboid Cuboidf offset EntityPos Returns double ToCuboidi() public Cuboidi ToCuboidi() Returns Cuboidi ToFloat() public Cuboidf ToFloat() Returns Cuboidf Translate(double, double, double) Adds the given offset to the cuboid public Cuboidd Translate(double posX, double posY, double posZ) Parameters posX double posY double posZ double Returns Cuboidd Translate(IVec3) Adds the given offset to the cuboid public Cuboidd Translate(IVec3 vec) Parameters vec IVec3 Returns Cuboidd pushOutX(Cuboidd, double, ref EnumPushDirection) Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutX(Cuboidd from, double motx, ref EnumPushDirection direction) Parameters from Cuboidd motx double direction EnumPushDirection Returns double pushOutY(Cuboidd, double, ref EnumPushDirection) Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutY(Cuboidd from, double moty, ref EnumPushDirection direction) Parameters from Cuboidd moty double direction EnumPushDirection Returns double pushOutZ(Cuboidd, double, ref EnumPushDirection) Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutZ(Cuboidd from, double motz, ref EnumPushDirection direction) Parameters from Cuboidd motz double direction EnumPushDirection Returns double"
  },
  "api/Vintagestory.API.MathTools.Cuboidf.html": {
    "href": "api/Vintagestory.API.MathTools.Cuboidf.html",
    "title": "Class Cuboidf | VintageStory API",
    "keywords": "Class Cuboidf Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a three dimensional axis-aligned cuboid using two 3D coordinates. Used for collision and selection boxes. Open in GitHub [DocumentAsJson] public class Cuboidf : IEquatable<Cuboidf> Inheritance object Cuboidf Implements IEquatable<Cuboidf> Derived RotatableCube Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Cuboidf() public Cuboidf() Cuboidf(double, double, double, double, double, double) public Cuboidf(double x1, double x2, double y1, double y2, double z1, double z2) Parameters x1 double x2 double y1 double y2 double z1 double z2 double Cuboidf(float) public Cuboidf(float size) Parameters size float Cuboidf(float, float, float, float, float, float) public Cuboidf(float x1, float y1, float z1, float x2, float y2, float z2) Parameters x1 float y1 float z1 float x2 float y2 float z2 float Cuboidf(Vec3f, Vec3f) public Cuboidf(Vec3f start, Vec3f end) Parameters start Vec3f end Vec3f Fields X1 Start X Pos [DocumentAsJson] public float X1 Field Value float X2 End X Pos [DocumentAsJson] public float X2 Field Value float Y1 Start Y Pos [DocumentAsJson] public float Y1 Field Value float Y2 End Y Pos [DocumentAsJson] public float Y2 Field Value float Z1 Start Z Pos [DocumentAsJson] public float Z1 Field Value float Z2 End Z Pos [DocumentAsJson] public float Z2 Field Value float Properties Center public Vec3d Center { get; } Property Value Vec3d Empty True when all values are 0 public bool Empty { get; } Property Value bool End public Vec3f End { get; } Property Value Vec3f Endd public Vec3d Endd { get; } Property Value Vec3d Height public float Height { get; } Property Value float this[int] public float this[int index] { get; set; } Parameters index int Property Value float Length public float Length { get; } Property Value float MaxX public float MaxX { get; } Property Value float MaxY public float MaxY { get; } Property Value float MaxZ public float MaxZ { get; } Property Value float MidX public float MidX { get; } Property Value float MidY public float MidY { get; } Property Value float MidZ public float MidZ { get; } Property Value float MinX public float MinX { get; } Property Value float MinY public float MinY { get; } Property Value float MinZ public float MinZ { get; } Property Value float Start public Vec3f Start { get; } Property Value Vec3f Startd public Vec3d Startd { get; } Property Value Vec3d Width public float Width { get; } Property Value float XSize This is equivalent to width so long as X2 > X1, but could in theory be a negative number if the box has its corners the wrong way around public float XSize { get; } Property Value float YSize This is equivalent to height so long as Y2 > Y1, but could in theory be a negative number if the box has its corners the wrong way around public float YSize { get; } Property Value float ZSize This is equivalent to length so long as Z2 > Z1, but could in theory be a negative number if the box has its corners the wrong way around public float ZSize { get; } Property Value float Methods ClampTo(Vec3f, Vec3f) public Cuboidf ClampTo(Vec3f min, Vec3f max) Parameters min Vec3f max Vec3f Returns Cuboidf Clone() Creates a copy of the cuboid public Cuboidf Clone() Returns Cuboidf Contains(double, double, double) Returns if the given point is inside the cuboid public bool Contains(double x, double y, double z) Parameters x double y double z double Returns bool ContainsOrTouches(float, float, float) Returns if the given point is inside the cuboid public bool ContainsOrTouches(float x, float y, float z) Parameters x float y float z float Returns bool ContainsOrTouches(IVec3) Returns if the given point is inside the cuboid public bool ContainsOrTouches(IVec3 vec) Parameters vec IVec3 Returns bool ConvertToCuboidi() public Cuboidi ConvertToCuboidi() Returns Cuboidi Default() Returns a new cuboid with default size 1 width/height/length public static Cuboidf Default() Returns Cuboidf Equals(Cuboidf) Indicates whether the current object is equal to another object of the same type. public bool Equals(Cuboidf other) Parameters other Cuboidf An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Expand(BlockFacing, float) Expands this in the given direction by amount d public void Expand(BlockFacing face, float d) Parameters face BlockFacing d float GrowToInclude(int, int, int) Grows the cuboid so that it includes the given block public Cuboidf GrowToInclude(int x, int y, int z) Parameters x int y int z int Returns Cuboidf GrowToInclude(IVec3) Grows the cuboid so that it includes the given block public Cuboidf GrowToInclude(IVec3 vec) Parameters vec IVec3 Returns Cuboidf OffsetCopy(float, float, float) Returns a new double precision cuboid offseted by given position public Cuboidf OffsetCopy(float x, float y, float z) Parameters x float y float z float Returns Cuboidf OffsetCopy(IVec3) Returns a new cuboid offseted by given position public Cuboidf OffsetCopy(IVec3 vec) Parameters vec IVec3 Returns Cuboidf OffsetCopyDouble(double, double, double) Returns a new cuboid offseted by given position public Cuboidd OffsetCopyDouble(double x, double y, double z) Parameters x double y double z double Returns Cuboidd OffsetCopyDouble(IVec3) Returns a new cuboid offseted by given position public Cuboidd OffsetCopyDouble(IVec3 vec) Parameters vec IVec3 Returns Cuboidd OmniGrowBy(float) public Cuboidf OmniGrowBy(float size) Parameters size float Returns Cuboidf OmniNotDownGrowBy(float) public Cuboidf OmniNotDownGrowBy(float size) Parameters size float Returns Cuboidf RotatedCopy(float, float, float, Vec3d) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidf RotatedCopy(float degX, float degY, float degZ, Vec3d origin) Parameters degX float degY float degZ float origin Vec3d Returns Cuboidf RotatedCopy(IVec3, Vec3d) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidf RotatedCopy(IVec3 vec, Vec3d origin) Parameters vec IVec3 origin Vec3d Returns Cuboidf RoundToFracsOfOne10thousand() Makes sure the collisionbox coords are multiples of 0.0001 public void RoundToFracsOfOne10thousand() Set(float, float, float, float, float, float) Sets the minimum and maximum values of the cuboid public Cuboidf Set(float x1, float y1, float z1, float x2, float y2, float z2) Parameters x1 float y1 float z1 float x2 float y2 float z2 float Returns Cuboidf Set(Cuboidf) public void Set(Cuboidf collisionBox) Parameters collisionBox Cuboidf Set(IVec3, IVec3) Sets the minimum and maximum values of the cuboid public Cuboidf Set(IVec3 min, IVec3 max) Parameters min IVec3 max IVec3 Returns Cuboidf ShortestDistanceFrom(float, float, float) Returns the shortest distance between given point and any point inside the cuboid public double ShortestDistanceFrom(float x, float y, float z) Parameters x float y float z float Returns double ShortestDistanceFrom(IVec3) Returns the shortest distance between given point and any point inside the cuboid public double ShortestDistanceFrom(IVec3 vec) Parameters vec IVec3 Returns double ShrinkBy(float) public Cuboidf ShrinkBy(float size) Parameters size float Returns Cuboidf Sub(float, float, float) Substractes the given offset to the cuboid public Cuboidf Sub(float posX, float posY, float posZ) Parameters posX float posY float posZ float Returns Cuboidf Sub(IVec3) Substractes the given offset to the cuboid public Cuboidf Sub(IVec3 vec) Parameters vec IVec3 Returns Cuboidf ToDouble() public Cuboidd ToDouble() Returns Cuboidd ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TransformedCopy(float[]) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidf TransformedCopy(float[] matrix) Parameters matrix float[] Returns Cuboidf Translate(float, float, float) Adds the given offset to the cuboid public Cuboidf Translate(float posX, float posY, float posZ) Parameters posX float posY float posZ float Returns Cuboidf Translate(IVec3) Adds the given offset to the cuboid public Cuboidf Translate(IVec3 vec) Parameters vec IVec3 Returns Cuboidf pushOutX(Cuboidf, float, ref EnumPushDirection) Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutX(Cuboidf from, float x, ref EnumPushDirection direction) Parameters from Cuboidf x float direction EnumPushDirection Returns double pushOutY(Cuboidf, float, ref EnumPushDirection) Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutY(Cuboidf from, float y, ref EnumPushDirection direction) Parameters from Cuboidf y float direction EnumPushDirection Returns double pushOutZ(Cuboidf, float, ref EnumPushDirection) Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutZ(Cuboidf from, float z, ref EnumPushDirection direction) Parameters from Cuboidf z float direction EnumPushDirection Returns double"
  },
  "api/Vintagestory.API.MathTools.Cuboidi.html": {
    "href": "api/Vintagestory.API.MathTools.Cuboidi.html",
    "title": "Class Cuboidi | VintageStory API",
    "keywords": "Class Cuboidi Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A 3D cuboid, created out of integers. Open in GitHub [DocumentAsJson] [ProtoContract] public class Cuboidi : IEquatable<Cuboidi> Inheritance object Cuboidi Implements IEquatable<Cuboidi> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Cuboidi() public Cuboidi() Cuboidi(int, int, int, int, int, int) public Cuboidi(int x1, int y1, int z1, int x2, int y2, int z2) Parameters x1 int y1 int z1 int x2 int y2 int z2 int Cuboidi(int[]) public Cuboidi(int[] coordinates) Parameters coordinates int[] Cuboidi(BlockPos, int) public Cuboidi(BlockPos startPos, int size) Parameters startPos BlockPos size int Cuboidi(BlockPos, BlockPos) public Cuboidi(BlockPos startPos, BlockPos endPos) Parameters startPos BlockPos endPos BlockPos Cuboidi(Vec3i, Vec3i) public Cuboidi(Vec3i startPos, Vec3i endPos) Parameters startPos Vec3i endPos Vec3i Fields X1 [ProtoMember(1)] [DocumentAsJson] public int X1 Field Value int X2 [ProtoMember(4)] [DocumentAsJson] public int X2 Field Value int Y1 [ProtoMember(2)] [DocumentAsJson] public int Y1 Field Value int Y2 [ProtoMember(5)] [DocumentAsJson] public int Y2 Field Value int Z1 [ProtoMember(3)] [DocumentAsJson] public int Z1 Field Value int Z2 [ProtoMember(6)] [DocumentAsJson] public int Z2 Field Value int Properties Center public Vec3i Center { get; } Property Value Vec3i CenterX public int CenterX { get; } Property Value int CenterY public int CenterY { get; } Property Value int CenterZ public int CenterZ { get; } Property Value int Coordinates public int[] Coordinates { get; } Property Value int[] End public Vec3i End { get; } Property Value Vec3i MaxX public int MaxX { get; } Property Value int MaxY public int MaxY { get; } Property Value int MaxZ public int MaxZ { get; } Property Value int MinX public int MinX { get; } Property Value int MinY public int MinY { get; } Property Value int MinZ public int MinZ { get; } Property Value int SizeX public int SizeX { get; } Property Value int SizeXYZ public int SizeXYZ { get; } Property Value int SizeXZ public int SizeXZ { get; } Property Value int SizeY public int SizeY { get; } Property Value int SizeZ public int SizeZ { get; } Property Value int Start public Vec3i Start { get; } Property Value Vec3i Volume public int Volume { get; } Property Value int Methods Clone() Creates a copy of the cuboid public Cuboidi Clone() Returns Cuboidi Contains(int, int) Returns if the given point is inside the cuboid public bool Contains(int x, int z) Parameters x int z int Returns bool Contains(int, int, int) Returns if the given point is inside the cuboid public bool Contains(int x, int y, int z) Parameters x int y int z int Returns bool Contains(BlockPos) Returns if the given point is inside the cuboid public bool Contains(BlockPos pos) Parameters pos BlockPos Returns bool Contains(IVec3) public bool Contains(IVec3 pos) Parameters pos IVec3 Returns bool Contains(Vec3d) public bool Contains(Vec3d pos) Parameters pos Vec3d Returns bool ContainsOrTouches(int, int, int) Returns if the given point is inside the cuboid public bool ContainsOrTouches(int x, int y, int z) Parameters x int y int z int Returns bool ContainsOrTouches(EntityPos) Returns if the given entityPos is inside the cuboid public bool ContainsOrTouches(EntityPos pos) Parameters pos EntityPos Returns bool ContainsOrTouches(BlockPos) Returns if the given point is inside the cuboid public bool ContainsOrTouches(BlockPos pos) Parameters pos BlockPos Returns bool ContainsOrTouches(Cuboidi) public bool ContainsOrTouches(Cuboidi cuboid) Parameters cuboid Cuboidi Returns bool ContainsOrTouches(IVec3) Returns if the given point is inside the cuboid public bool ContainsOrTouches(IVec3 vec) Parameters vec IVec3 Returns bool Div(int) Divides the given value to the cuboid public Cuboidi Div(int value) Parameters value int Returns Cuboidi Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Cuboidi) Indicates whether the current object is equal to another object of the same type. public bool Equals(Cuboidi other) Parameters other Cuboidi An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GrowBy(int, int, int) public Cuboidi GrowBy(int dx, int dy, int dz) Parameters dx int dy int dz int Returns Cuboidi GrowToInclude(int, int, int) Grows the cuboid so that it includes the given block public Cuboidi GrowToInclude(int x, int y, int z) Parameters x int y int z int Returns Cuboidi GrowToInclude(IVec3) Grows the cuboid so that it includes the given block public Cuboidi GrowToInclude(IVec3 vec) Parameters vec IVec3 Returns Cuboidi Intersects(Cuboidi) If the given cuboid intersects with this cubiod public bool Intersects(Cuboidi with) Parameters with Cuboidi Returns bool Intersects(HorRectanglei) Ignores the y-axis public bool Intersects(HorRectanglei with) Parameters with HorRectanglei Returns bool IntersectsOrTouches(Cuboidi) If the given cuboid intersects with or is adjacent to this cubiod public bool IntersectsOrTouches(Cuboidi with) Parameters with Cuboidi Returns bool OffsetCopy(int, int, int) Returns a new cuboid offseted by given position public Cuboidi OffsetCopy(int x, int y, int z) Parameters x int y int z int Returns Cuboidi OffsetCopy(IVec3) Returns a new cuboid offseted by given position public Cuboidi OffsetCopy(IVec3 vec) Parameters vec IVec3 Returns Cuboidi RotatedCopy(int, int, int, Vec3d) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidi RotatedCopy(int degX, int degY, int degZ, Vec3d origin) Parameters degX int degY int degZ int origin Vec3d Returns Cuboidi RotatedCopy(IVec3, Vec3d) Performs a 3-dimensional rotation on the cuboid and returns a new axis-aligned cuboid resulting from this rotation. Not sure it it makes any sense to use this for other rotations than 90 degree intervals. public Cuboidi RotatedCopy(IVec3 vec, Vec3d origin) Parameters vec IVec3 origin Vec3d Returns Cuboidi Set(int, int, int, int, int, int) Sets the minimum and maximum values of the cuboid public Cuboidi Set(int x1, int y1, int z1, int x2, int y2, int z2) Parameters x1 int y1 int z1 int x2 int y2 int z2 int Returns Cuboidi Set(IVec3, IVec3) Sets the minimum and maximum values of the cuboid public Cuboidi Set(IVec3 min, IVec3 max) Parameters min IVec3 max IVec3 Returns Cuboidi ShortestDistanceFrom(int, int, int) Returns the shortest distance between given point and any point inside the cuboid public double ShortestDistanceFrom(int x, int y, int z) Parameters x int y int z int Returns double ShortestDistanceFrom(Cuboidi) Returns the shortest distance to any point between this and given cuboid public double ShortestDistanceFrom(Cuboidi cuboid) Parameters cuboid Cuboidi Returns double ShortestDistanceFrom(IVec3) Returns the shortest distance between given point and any point inside the cuboid public double ShortestDistanceFrom(IVec3 vec) Parameters vec IVec3 Returns double Sub(int, int, int) Substractes the given offset to the cuboid public Cuboidi Sub(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns Cuboidi Sub(IVec3) Substractes the given offset to the cuboid public Cuboidi Sub(IVec3 vec) Parameters vec IVec3 Returns Cuboidi ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Translate(int, int, int) Adds the given offset to the cuboid public Cuboidi Translate(int posX, int posY, int posZ) Parameters posX int posY int posZ int Returns Cuboidi Translate(IVec3) Adds the given offset to the cuboid public Cuboidi Translate(IVec3 vec) Parameters vec IVec3 Returns Cuboidi pushOutX(Cuboidi, int, ref EnumPushDirection) Returns a new x coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutX(Cuboidi from, int x, ref EnumPushDirection direction) Parameters from Cuboidi x int direction EnumPushDirection Returns double pushOutY(Cuboidi, int, ref EnumPushDirection) Returns a new y coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutY(Cuboidi from, int y, ref EnumPushDirection direction) Parameters from Cuboidi y int direction EnumPushDirection Returns double pushOutZ(Cuboidi, int, ref EnumPushDirection) Returns a new z coordinate that's ensured to be outside this cuboid. Used for collision detection. public double pushOutZ(Cuboidi from, int z, ref EnumPushDirection direction) Parameters from Cuboidi z int direction EnumPushDirection Returns double"
  },
  "api/Vintagestory.API.MathTools.Easings.html": {
    "href": "api/Vintagestory.API.MathTools.Easings.html",
    "title": "Class Easings | VintageStory API",
    "keywords": "Class Easings Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public static class Easings Inheritance object Easings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EaseOutBack(double) public static double EaseOutBack(double x) Parameters x double Returns double"
  },
  "api/Vintagestory.API.MathTools.EntityFilter.html": {
    "href": "api/Vintagestory.API.MathTools.EntityFilter.html",
    "title": "Delegate EntityFilter | VintageStory API",
    "keywords": "Delegate EntityFilter Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate bool EntityFilter(Entity entity) Parameters entity Entity Returns bool Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.EnumAxis.html": {
    "href": "api/Vintagestory.API.MathTools.EnumAxis.html",
    "title": "Enum EnumAxis | VintageStory API",
    "keywords": "Enum EnumAxis Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents an axis in the cartesian coordinate system Open in GitHub public enum EnumAxis Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields X = 0 West or East Y = 1 Up or down Z = 2 North or South"
  },
  "api/Vintagestory.API.MathTools.EnumColorBlendMode.html": {
    "href": "api/Vintagestory.API.MathTools.EnumColorBlendMode.html",
    "title": "Enum EnumColorBlendMode | VintageStory API",
    "keywords": "Enum EnumColorBlendMode Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Specifies types of per-pixel color blending. Open in GitHub [DocumentAsJson] public enum EnumColorBlendMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ColorBurn = 6 ColorDodge = 5 Darken = 1 Lighten = 2 Multiply = 3 Normal = 0 Overlay = 7 OverlayCutout = 8 Screen = 4"
  },
  "api/Vintagestory.API.MathTools.EnumCombination.html": {
    "href": "api/Vintagestory.API.MathTools.EnumCombination.html",
    "title": "Enum EnumCombination | VintageStory API",
    "keywords": "Enum EnumCombination Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Used to define how variant types interact with each other to create unique objects. Open in GitHub [DocumentAsJson] public enum EnumCombination Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Add = 0 This variant type will ignore all other variant types. Each state is appended onto the object's code, without any other variant types. Multiply = 1 Default behavior - This variant's states will be enumerated with all other variant states that have this combination. SelectiveMultiply = 2 This variant's states will be enumerated only with the selected variant group. You must select another variant code using the 'onVariant' property."
  },
  "api/Vintagestory.API.MathTools.EnumDistribution.html": {
    "href": "api/Vintagestory.API.MathTools.EnumDistribution.html",
    "title": "Enum EnumDistribution | VintageStory API",
    "keywords": "Enum EnumDistribution Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll The distribution of the random numbers Open in GitHub [DocumentAsJson] public enum EnumDistribution Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields DIRAC = 9 Select completely random numbers within avg-var until avg+var only ONCE and then always 0 GAUSSIAN = 2 Select random numbers with numbers near avg being the more commonly selected ones, following a gaussian curve INVERSEGAUSSIAN = 4 Select random numbers with numbers near avg being the less commonly selected ones, following an upside down gaussian curve INVEXP = 6 Select random numbers in the form of avg + var, with numbers near avg being preferred NARROWGAUSSIAN = 3 Select random numbers with numbers near avg being the much more commonly selected ones, following a narrow gaussian curve NARROWINVERSEGAUSSIAN = 5 Select random numbers with numbers near avg being the much less commonly selected ones, following an upside down gaussian curve STRONGERINVEXP = 8 Select random numbers in the form of avg + var, with numbers near avg being very strongly preferred STRONGINVEXP = 7 Select random numbers in the form of avg + var, with numbers near avg being strongly preferred TRIANGLE = 1 Select random numbers with numbers near avg being the most commonly selected ones, following a triangle curve UNIFORM = 0 Select completely random numbers within avg-var until avg+var VERYNARROWGAUSSIAN = 10 Select random numbers with numbers near avg being the much much more commonly selected ones, following an even narrower gaussian curve"
  },
  "api/Vintagestory.API.MathTools.EnumIntersect.html": {
    "href": "api/Vintagestory.API.MathTools.EnumIntersect.html",
    "title": "Enum EnumIntersect | VintageStory API",
    "keywords": "Enum EnumIntersect Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public enum EnumIntersect Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields IntersectX = 1 IntersectY = 2 IntersectZ = 3 NoIntersect = 0 Stuck = 4"
  },
  "api/Vintagestory.API.MathTools.EnumPushDirection.html": {
    "href": "api/Vintagestory.API.MathTools.EnumPushDirection.html",
    "title": "Enum EnumPushDirection | VintageStory API",
    "keywords": "Enum EnumPushDirection Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public enum EnumPushDirection Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Negative = 2 None = 0 Positive = 1"
  },
  "api/Vintagestory.API.MathTools.EnumTransformFunction.html": {
    "href": "api/Vintagestory.API.MathTools.EnumTransformFunction.html",
    "title": "Enum EnumTransformFunction | VintageStory API",
    "keywords": "Enum EnumTransformFunction Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Used for EvolvingNatFloat value transforms Open in GitHub [DocumentAsJson] public enum EnumTransformFunction Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CLAMPEDPOSITIVESINUS = 9 firstval * GameMath.Min(5 * Math.Abs(GameMath.FastSin(factor * seq)), 1) COSINUS = 10 firstval + GameMath.FastCos(factor * seq) IDENTICAL = 0 y = firstval INVERSELINEAR = 6 firstval + 1f / (1f + factor * seq) LINEAR = 1 y = firstval + factor * seq LINEARINCREASE = 4 firstval + firstval / Math.Abs(firstval) * factor * seq LINEARNULLIFY = 2 y = factor > 0 ? Math.Min(0, firstval + factor * seq) : Math.Max(0, firstval + factor * seq) LINEARREDUCE = 3 firstval - firstval / Math.Abs(firstval) * factor * seq QUADRATIC = 5 firstval + Math.Sign(factor) * (factor * seq) * (factor * seq) ROOT = 7 firstval + (float)Math.Sqrt(factor * seq) SINUS = 8 firstval + GameMath.FastSin(factor * seq) SMOOTHSTEP = 11 firstval + GameMath.SmoothStep(factor * seq)"
  },
  "api/Vintagestory.API.MathTools.EvolvingNatFloat.html": {
    "href": "api/Vintagestory.API.MathTools.EvolvingNatFloat.html",
    "title": "Class EvolvingNatFloat | VintageStory API",
    "keywords": "Class EvolvingNatFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A number generator whose return value changes over time, parametrized by a transform function and some constants Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] public class EvolvingNatFloat Inheritance object EvolvingNatFloat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EvolvingNatFloat() public EvolvingNatFloat() EvolvingNatFloat(EnumTransformFunction, float) public EvolvingNatFloat(EnumTransformFunction transform, float factor) Parameters transform EnumTransformFunction factor float Properties Factor public float Factor { get; } Property Value float MaxValue public float? MaxValue { get; } Property Value float? Transform public EnumTransformFunction Transform { get; } Property Value EnumTransformFunction Methods Clone() public EvolvingNatFloat Clone() Returns EvolvingNatFloat CreateFromBytes(BinaryReader) public static EvolvingNatFloat CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns EvolvingNatFloat FromBytes(BinaryReader) public void FromBytes(BinaryReader reader) Parameters reader BinaryReader ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter create(EnumTransformFunction, float) public static EvolvingNatFloat create(EnumTransformFunction function, float factor) Parameters function EnumTransformFunction factor float Returns EvolvingNatFloat createIdentical(float) public static EvolvingNatFloat createIdentical(float factor) Parameters factor float Returns EvolvingNatFloat nextFloat(float, float) The sequence should always run from 0 to n public float nextFloat(float firstvalue, float sequence) Parameters firstvalue float sequence float Returns float"
  },
  "api/Vintagestory.API.MathTools.FastVec2i.html": {
    "href": "api/Vintagestory.API.MathTools.FastVec2i.html",
    "title": "Struct FastVec2i | VintageStory API",
    "keywords": "Struct FastVec2i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 ints. Go bug Tyron if you need more utility methods in this class. [ProtoContract] public struct FastVec2i : IEquatable<FastVec2i> Implements IEquatable<FastVec2i> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastVec2i() public FastVec2i() FastVec2i(int, int) public FastVec2i(int x, int y) Parameters x int y int FastVec2i(Vec3d) public FastVec2i(Vec3d pos) Parameters pos Vec3d Fields val [ProtoMember(1)] public ulong val Field Value ulong Properties this[int] public int this[int index] { get; set; } Parameters index int Property Value int X public int X { get; set; } Property Value int Y public int Y { get; set; } Property Value int Zero public static FastVec2i Zero { get; } Property Value FastVec2i Methods Add(int, int) public FastVec2i Add(int dx, int dy) Parameters dx int dy int Returns FastVec2i Copy() public FastVec2i Copy() Returns FastVec2i Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(FastVec2i) Indicates whether the current object is equal to another object of the same type. public bool Equals(FastVec2i other) Parameters other FastVec2i An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ManhattenDistance(int, int) public int ManhattenDistance(int x, int y) Parameters x int y int Returns int ManhattenDistance(Vec2i) public int ManhattenDistance(Vec2i point) Parameters point Vec2i Returns int Set(int, int) public FastVec2i Set(int x, int y) Parameters x int y int Returns FastVec2i Set(Vec2i) public FastVec2i Set(Vec2i vec) Parameters vec Vec2i Returns FastVec2i ToChunkIndex() 27 lowest bits for X Coordinate, then 27 bits for Z coordinate public ulong ToChunkIndex() Returns ulong ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(FastVec2i, int) public static FastVec2i operator +(FastVec2i left, int right) Parameters left FastVec2i right int Returns FastVec2i operator +(FastVec2i, FastVec2i) public static FastVec2i operator +(FastVec2i left, FastVec2i right) Parameters left FastVec2i right FastVec2i Returns FastVec2i operator /(FastVec2i, int) public static FastVec2i operator /(FastVec2i left, int right) Parameters left FastVec2i right int Returns FastVec2i operator /(FastVec2i, float) public static FastVec2i operator /(FastVec2i left, float right) Parameters left FastVec2i right float Returns FastVec2i operator ==(FastVec2i, FastVec2i) public static bool operator ==(FastVec2i left, FastVec2i right) Parameters left FastVec2i right FastVec2i Returns bool operator !=(FastVec2i, FastVec2i) public static bool operator !=(FastVec2i left, FastVec2i right) Parameters left FastVec2i right FastVec2i Returns bool operator *(double, FastVec2i) public static FastVec2i operator *(double left, FastVec2i right) Parameters left double right FastVec2i Returns FastVec2i operator *(int, FastVec2i) public static FastVec2i operator *(int left, FastVec2i right) Parameters left int right FastVec2i Returns FastVec2i operator *(FastVec2i, double) public static FastVec2i operator *(FastVec2i left, double right) Parameters left FastVec2i right double Returns FastVec2i operator *(FastVec2i, int) public static FastVec2i operator *(FastVec2i left, int right) Parameters left FastVec2i right int Returns FastVec2i operator *(FastVec2i, FastVec2i) public static double operator *(FastVec2i left, FastVec2i right) Parameters left FastVec2i right FastVec2i Returns double operator -(int, FastVec2i) public static FastVec2i operator -(int left, FastVec2i right) Parameters left int right FastVec2i Returns FastVec2i operator -(FastVec2i, int) public static FastVec2i operator -(FastVec2i left, int right) Parameters left FastVec2i right int Returns FastVec2i operator -(FastVec2i, FastVec2i) public static FastVec2i operator -(FastVec2i left, FastVec2i right) Parameters left FastVec2i right FastVec2i Returns FastVec2i"
  },
  "api/Vintagestory.API.MathTools.FastVec3d.html": {
    "href": "api/Vintagestory.API.MathTools.FastVec3d.html",
    "title": "Struct FastVec3d | VintageStory API",
    "keywords": "Struct FastVec3d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 doubles public struct FastVec3d Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastVec3d(double, double, double) Create a new vector with given coordinates public FastVec3d(double x, double y, double z) Parameters x double y double z double FastVec3d(double[]) Create a new vector with given coordinates public FastVec3d(double[] values) Parameters values double[] FastVec3d(BlockPos) public FastVec3d(BlockPos pos) Parameters pos BlockPos FastVec3d(Vec3i) public FastVec3d(Vec3i vec3i) Parameters vec3i Vec3i FastVec3d(Vec4d) Create a new vector with given coordinates public FastVec3d(Vec4d vec) Parameters vec Vec4d Fields X The X-Component of the vector public double X Field Value double Y The Y-Component of the vector public double Y Field Value double Z The Z-Component of the vector public double Z Field Value double Properties this[int] Returns the n-th coordinate public double this[int index] { get; set; } Parameters index int Property Value double Methods Add(double) public FastVec3d Add(double d) Parameters d double Returns FastVec3d Add(double, double, double) Adds given x/y/z coordinates to the vector public FastVec3d Add(double x, double y, double z) Parameters x double y double z double Returns FastVec3d Add(BlockPos) Adds given BlockPos's x/y/z coordinates to the vector public FastVec3d Add(BlockPos pos) Parameters pos BlockPos Returns FastVec3d Add(Vec3i) Adds given vector's x/y/z coordinates to the vector public FastVec3d Add(Vec3i vec) Parameters vec Vec3i Returns FastVec3d AddCopy(double, double, double) Adds given coordinates to a new vectors and returns it. The original calling vector remains unchanged public FastVec3d AddCopy(double x, double y, double z) Parameters x double y double z double Returns FastVec3d AddCopy(FastVec3d) Adds both vectors into a new vector. Both source vectors remain unchanged. public FastVec3d AddCopy(FastVec3d vec) Parameters vec FastVec3d Returns FastVec3d Clone() Creates a copy of the vetor public FastVec3d Clone() Returns FastVec3d CreateFromBytes(BinaryReader) public static FastVec3d CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns FastVec3d Distance(FastVec3d) Calculates the distance the two endpoints public double Distance(FastVec3d vec) Parameters vec FastVec3d Returns double Distance(Vec3d) Calculates the distance the two endpoints public double Distance(Vec3d vec) Parameters vec Vec3d Returns double DistanceSq(double, double, double) Calculates the square distance the two endpoints public double DistanceSq(double x, double y, double z) Parameters x double y double z double Returns double Dot(double[]) Returns the dot product with given vector public double Dot(double[] pos) Parameters pos double[] Returns double Dot(float[]) Returns the dot product with given vector public double Dot(float[] pos) Parameters pos float[] Returns double Dot(Vec3d) Returns the dot product with given vector public double Dot(Vec3d a) Parameters a Vec3d Returns double Dot(Vec3f) Returns the dot product with given vector public double Dot(Vec3f a) Parameters a Vec3f Returns double Length() Returns the length of this vector public double Length() Returns double Mul(double) Multiplies each coordinate with given multiplier public FastVec3d Mul(double multiplier) Parameters multiplier double Returns FastVec3d Negate() public void Negate() Normalize() Turns the vector into a unit vector with length 1, but only if length is non-zero public FastVec3d Normalize() Returns FastVec3d NormalizedCopy() Creates a new vectors that is the normalized version of this vector. public FastVec3d NormalizedCopy() Returns FastVec3d ReduceBy(double) Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number public void ReduceBy(double val) Parameters val double Set(double, double, double) Sets the vector to this coordinates public FastVec3d Set(double x, double y, double z) Parameters x double y double z double Returns FastVec3d Set(double[]) public FastVec3d Set(double[] vec) Parameters vec double[] Returns FastVec3d Set(FastVec3d) Sets the vector to the coordinates of given vector public void Set(FastVec3d vec) Parameters vec FastVec3d Set(Vec3d) Sets the vector to the coordinates of given vector public FastVec3d Set(Vec3d vec) Parameters vec Vec3d Returns FastVec3d ToDoubleArray() public double[] ToDoubleArray() Returns double[] ToString() Simple string represenation of the x/y/z components public override string ToString() Returns string ToVec3d() Creates a new double precision vector with the same coordinates public Vec3d ToVec3d() Returns Vec3d Write(BinaryWriter) public void Write(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.MathTools.FastVec3f.html": {
    "href": "api/Vintagestory.API.MathTools.FastVec3f.html",
    "title": "Struct FastVec3f | VintageStory API",
    "keywords": "Struct FastVec3f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. public struct FastVec3f Inherited Members ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastVec3f(float, float, float) Create a new vector with given coordinates public FastVec3f(float x, float y, float z) Parameters x float y float z float FastVec3f(float[]) Create a new vector with given coordinates public FastVec3f(float[] values) Parameters values float[] FastVec3f(Vec3f) public FastVec3f(Vec3f vec) Parameters vec Vec3f FastVec3f(Vec3i) public FastVec3f(Vec3i vec3i) Parameters vec3i Vec3i FastVec3f(Vec4f) Create a new vector with given coordinates public FastVec3f(Vec4f vec) Parameters vec Vec4f Fields X The X-Component of the vector public float X Field Value float Y The Y-Component of the vector public float Y Field Value float Z The Z-Component of the vector public float Z Field Value float Properties B Synonum for Z public float B { get; set; } Property Value float G Synonum for Y public float G { get; set; } Property Value float this[int] Returns the n-th coordinate public float this[int index] { get; set; } Parameters index int Property Value float R Synonum for X public float R { get; set; } Property Value float Methods Add(float, float, float) Adds given x/y/z coordinates to the vector public FastVec3f Add(float x, float y, float z) Parameters x float y float z float Returns FastVec3f AddCopy(float, float, float) Adds given coordinates to a new vectors and returns it. The original calling vector remains unchanged public FastVec3f AddCopy(float x, float y, float z) Parameters x float y float z float Returns FastVec3f AddCopy(FastVec3f) Adds both vectors into a new vector. Both source vectors remain unchanged. public FastVec3f AddCopy(FastVec3f vec) Parameters vec FastVec3f Returns FastVec3f Clone() Creates a copy of the vetor public FastVec3f Clone() Returns FastVec3f CreateFromBytes(BinaryReader) public static FastVec3f CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns FastVec3f Distance(FastVec3f) Calculates the distance the two endpoints public float Distance(FastVec3f vec) Parameters vec FastVec3f Returns float Distance(Vec3d) Calculates the distance the two endpoints public float Distance(Vec3d vec) Parameters vec Vec3d Returns float DistanceSq(double, double, double) Calculates the square distance the two endpoints public double DistanceSq(double x, double y, double z) Parameters x double y double z double Returns double Dot(double[]) Returns the dot product with given vector public double Dot(double[] pos) Parameters pos double[] Returns double Dot(float[]) Returns the dot product with given vector public double Dot(float[] pos) Parameters pos float[] Returns double Dot(Vec3d) Returns the dot product with given vector public float Dot(Vec3d a) Parameters a Vec3d Returns float Dot(Vec3f) Returns the dot product with given vector public float Dot(Vec3f a) Parameters a Vec3f Returns float Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Length() Returns the length of this vector public float Length() Returns float Mul(float) Multiplies each coordinate with given multiplier public FastVec3f Mul(float multiplier) Parameters multiplier float Returns FastVec3f Negate() public void Negate() Normalize() Turns the vector into a unit vector with length 1, but only if length is non-zero public FastVec3f Normalize() Returns FastVec3f NormalizedCopy() Creates a new vectors that is the normalized version of this vector. public FastVec3f NormalizedCopy() Returns FastVec3f ReduceBy(float) Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number public void ReduceBy(float val) Parameters val float Set(float, float, float) Sets the vector to this coordinates public FastVec3f Set(float x, float y, float z) Parameters x float y float z float Returns FastVec3f Set(float[]) public FastVec3f Set(float[] vec) Parameters vec float[] Returns FastVec3f Set(FastVec3f) Sets the vector to the coordinates of given vector public void Set(FastVec3f vec) Parameters vec FastVec3f Set(Vec3d) Sets the vector to the coordinates of given vector public FastVec3f Set(Vec3d vec) Parameters vec Vec3d Returns FastVec3f ToDoubleArray() public double[] ToDoubleArray() Returns double[] ToString() Simple string represenation of the x/y/z components public override string ToString() Returns string ToVec3d() Creates a new double precision vector with the same coordinates public Vec3d ToVec3d() Returns Vec3d Write(BinaryWriter) public void Write(BinaryWriter writer) Parameters writer BinaryWriter Operators operator +(FastVec3f, float) public static FastVec3f operator +(FastVec3f left, float right) Parameters left FastVec3f right float Returns FastVec3f operator *(FastVec3f, float) public static FastVec3f operator *(FastVec3f left, float right) Parameters left FastVec3f right float Returns FastVec3f operator -(FastVec3f, float) public static FastVec3f operator -(FastVec3f left, float right) Parameters left FastVec3f right float Returns FastVec3f"
  },
  "api/Vintagestory.API.MathTools.FastVec3i.html": {
    "href": "api/Vintagestory.API.MathTools.FastVec3i.html",
    "title": "Struct FastVec3i | VintageStory API",
    "keywords": "Struct FastVec3i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 ints, similar to a Vec3i or a BlockPos but this is a struct public struct FastVec3i Inherited Members ValueType.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors FastVec3i(int, int, int) Create a new vector with given coordinates public FastVec3i(int x, int y, int z) Parameters x int y int z int FastVec3i(int[]) Create a new vector with given coordinates public FastVec3i(int[] values) Parameters values int[] FastVec3i(BlockPos) Create a new vector with given coordinates public FastVec3i(BlockPos pos) Parameters pos BlockPos FastVec3i(Vec3i) public FastVec3i(Vec3i vec3i) Parameters vec3i Vec3i Fields X The X-Component of the vector public int X Field Value int Y The Y-Component of the vector public int Y Field Value int Z The Z-Component of the vector public int Z Field Value int Properties B Synonum for Z public int B { get; set; } Property Value int G Synonum for Y public int G { get; set; } Property Value int this[int] Returns the n-th coordinate public int this[int index] { get; set; } Parameters index int Property Value int R Synonum for X public int R { get; set; } Property Value int Methods Add(int, int, int) Adds given x/y/z coordinates to the vector public FastVec3i Add(int x, int y, int z) Parameters x int y int z int Returns FastVec3i AddCopy(FastVec3i) Adds both vectors into a new vector. Both source vectors remain unchanged. public FastVec3i AddCopy(FastVec3i vec) Parameters vec FastVec3i Returns FastVec3i Clone() Creates a copy of the vetor public FastVec3i Clone() Returns FastVec3i CreateFromBytes(BinaryReader) public static FastVec3i CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns FastVec3i Distance(FastVec3i) Calculates the distance the two endpoints public float Distance(FastVec3i vec) Parameters vec FastVec3i Returns float Distance(Vec3d) Calculates the distance the two endpoints public float Distance(Vec3d vec) Parameters vec Vec3d Returns float DistanceSq(double, double, double) Calculates the square distance the two endpoints public double DistanceSq(double x, double y, double z) Parameters x double y double z double Returns double Equals(BlockPos) public bool Equals(BlockPos other) Parameters other BlockPos Returns bool Equals(FastVec3i) public bool Equals(FastVec3i other) Parameters other FastVec3i Returns bool Equals(Vec3i) public bool Equals(Vec3i other) Parameters other Vec3i Returns bool GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Length() Returns the length of this vector public float Length() Returns float Mul(int) Multiplies each coordinate with given multiplier public FastVec3i Mul(int multiplier) Parameters multiplier int Returns FastVec3i Negate() public void Negate() Set(int, int, int) Sets the vector to this coordinates public FastVec3i Set(int x, int y, int z) Parameters x int y int z int Returns FastVec3i Set(int[]) public FastVec3i Set(int[] vec) Parameters vec int[] Returns FastVec3i Set(BlockPos) public FastVec3i Set(BlockPos pos) Parameters pos BlockPos Returns FastVec3i Set(FastVec3i) Sets the vector to the coordinates of given vector public void Set(FastVec3i vec) Parameters vec FastVec3i Set(Vec3d) Sets the vector to the coordinates of given vector public FastVec3i Set(Vec3d vec) Parameters vec Vec3d Returns FastVec3i ToString() Simple string represenation of the x/y/z components public override string ToString() Returns string ToVec3d() Creates a new double precision vector with the same coordinates public Vec3d ToVec3d() Returns Vec3d Write(BinaryWriter) public void Write(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.MathTools.FastVec3iComparer.html": {
    "href": "api/Vintagestory.API.MathTools.FastVec3iComparer.html",
    "title": "Class FastVec3iComparer | VintageStory API",
    "keywords": "Class FastVec3iComparer Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class FastVec3iComparer : IComparer<FastVec3i> Inheritance object FastVec3iComparer Implements IComparer<FastVec3i> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.FluidBlockPos.html": {
    "href": "api/Vintagestory.API.MathTools.FluidBlockPos.html",
    "title": "Class FluidBlockPos | VintageStory API",
    "keywords": "Class FluidBlockPos Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class FluidBlockPos : BlockPos, IEquatable<BlockPos>, IVec3 Inheritance object BlockPos FluidBlockPos Implements IEquatable<BlockPos> IVec3 Inherited Members BlockPos.X BlockPos.InternalY BlockPos.Z BlockPos.Y BlockPos.dimension BlockPos.DimensionBoundary BlockPos.this[int] BlockPos.Up(int) BlockPos.Down(int) BlockPos.Set(Vec3d) BlockPos.Set(Vec3i) BlockPos.Set(FastVec3i) BlockPos.SetAndCorrectDimension(Vec3d) BlockPos.SetAndCorrectDimension(int, int, int) BlockPos.Set(int, int, int) BlockPos.Set(float, float, float) BlockPos.Set(BlockPos) BlockPos.Set(BlockPos, int) BlockPos.SetDimension(int) BlockPos.SetAndEquals(int, int, int) BlockPos.ToBytes(BinaryWriter) BlockPos.ToLocalPosition(ICoreAPI) BlockPos.West() BlockPos.CreateFromBytes(BinaryReader) BlockPos.North() BlockPos.East() BlockPos.South() BlockPos.FacingFrom(BlockPos) BlockPos.WestCopy(int) BlockPos.SouthCopy(int) BlockPos.EastCopy(int) BlockPos.NorthCopy(int) BlockPos.DownCopy(int) BlockPos.UpCopy(int) BlockPos.CopyAndCorrectDimension() BlockPos.Add(float, float, float) BlockPos.Add(int, int, int) BlockPos.Add(Vec3i) BlockPos.Add(FastVec3i) BlockPos.Add(BlockPos) BlockPos.Add(BlockFacing, int) BlockPos.Offset(BlockFacing) BlockPos.AddCopy(float, float, float) BlockPos.AddCopy(int, int, int) BlockPos.AddCopy(int) BlockPos.AddCopy(Vec3i) BlockPos.AddCopy(BlockFacing) BlockPos.AddCopy(BlockFacing, int) BlockPos.Sub(BlockPos) BlockPos.Sub(int, int, int) BlockPos.SubCopy(BlockPos) BlockPos.SubCopy(int, int, int) BlockPos.DivCopy(int) BlockPos.IterateHorizontalOffsets(int) BlockPos.DistanceTo(BlockPos) BlockPos.DistanceTo(double, double, double) BlockPos.DistanceSqTo(double, double, double) BlockPos.DistanceSqToNearerEdge(double, double, double) BlockPos.HorDistanceSqTo(double, double) BlockPos.HorizontalManhattenDistance(BlockPos) BlockPos.ManhattenDistance(BlockPos) BlockPos.ManhattenDistance(int, int, int) BlockPos.InRangeHorizontally(int, int, int) BlockPos.ToVec3d() BlockPos.ToVec3i() BlockPos.ToVec3f() BlockPos.ToString() BlockPos.Equals(object) BlockPos.GetHashCode() BlockPos.Equals(BlockPos) BlockPos.Equals(int, int, int) BlockPos.AsVec3i BlockPos.Walk(BlockPos, BlockPos, Vec3i, Action<int, int, int>) BlockPos.ToColumnIndex3d() BlockPos.SetFromColumnIndex3d(int, int, int) BlockPos.ToSchematicIndex() BlockPos.SetFromSchematicIndex(int) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.SetOrCreate(BlockPos, BlockPos) Constructors FluidBlockPos() public FluidBlockPos() FluidBlockPos(int, int, int, int) public FluidBlockPos(int x, int y, int z, int dim) Parameters x int y int z int dim int Methods Copy() Creates a copy of this blocks position public override BlockPos Copy() Returns BlockPos"
  },
  "api/Vintagestory.API.MathTools.GameMath.html": {
    "href": "api/Vintagestory.API.MathTools.GameMath.html",
    "title": "Class GameMath | VintageStory API",
    "keywords": "Class GameMath Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A large set of useful game mathematics functions Open in GitHub public static class GameMath Inheritance object GameMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DEG2RAD public const float DEG2RAD = 0.017453292 Field Value float DEG2RAD_DOUBLE public const double DEG2RAD_DOUBLE = 0.017453292519943295 Field Value double PI 180° public const float PI = 3.1415927 Field Value float PIHALF 90° public const float PIHALF = 1.5707964 Field Value float RAD2DEG public const float RAD2DEG = 57.295776 Field Value float TWOPI 360° public const float TWOPI = 6.2831855 Field Value float Methods Acos(double) public static double Acos(double value) Parameters value double Returns double Acos(float) public static float Acos(float value) Parameters value float Returns float AngleDegDistance(float, float) Returns the shortest distance between 2 angles See also https://stackoverflow.com/a/14498790/1873041 public static float AngleDegDistance(float start, float end) Parameters start float end float Returns float AngleRadDistance(float, float) Returns the shortest distance between 2 angles See also https://stackoverflow.com/a/14498790/1873041 public static float AngleRadDistance(float start, float end) Parameters start float end float Returns float Asin(double) public static double Asin(double value) Parameters value double Returns double Asin(float) public static float Asin(float value) Parameters value float Returns float BiLerp(double, double, double, double, double, double) Basic Bilinear Lerp public static double BiLerp(double topleft, double topright, double botleft, double botright, double x, double z) Parameters topleft double topright double botleft double botright double x double z double Returns double BiLerp(float, float, float, float, float, float) Basic Bilinear Lerp public static float BiLerp(float topleft, float topright, float botleft, float botright, float x, float z) Parameters topleft float topright float botleft float botright float x float z float Returns float BiLerpByte(float, float, int, int, int, int, int) Linear Interpolates one selected bytes of the 4 ints public static byte BiLerpByte(float lx, float ly, int byteIndex, int leftTop, int rightTop, int leftBottom, int rightBottom) Parameters lx float ly float byteIndex int 0, 1, 2 or 3 leftTop int rightTop int leftBottom int rightBottom int Returns byte BiLerpColorMap(IntDataMap2D, int) Does linear interpolation on a 2d map for each of the 4 bytes individually (e.g. RGBA color). It's basically a bilinear zoom of an image like you know it from common image editing software. Only intended for square images. The resulting map will be without any paddding (also requires at least 1 padding at bottom and left side) public static int[] BiLerpColorMap(IntDataMap2D map, int zoom) Parameters map IntDataMap2D zoom int Returns int[] BiLerpRgbColor(float, float, int, int, int, int) Linear Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually) public static int BiLerpRgbColor(float lx, float ly, int leftTop, int rightTop, int leftBottom, int rightBottom) Parameters lx float ly float leftTop int rightTop int leftBottom int rightBottom int Returns int BiLerpRgbaColor(float, float, int, int, int, int) Linear Interpolates the bytes of the int individually (i.e. interpolates RGB values individually) public static int BiLerpRgbaColor(float lx, float ly, int leftTop, int rightTop, int leftBottom, int rightBottom) Parameters lx float ly float leftTop int rightTop int leftBottom int rightBottom int Returns int BiSerpByte(float, float, int, int, int, int, int) Linear Interpolates one selected bytes of the 4 ints public static byte BiSerpByte(float lx, float ly, int byteIndex, int leftTop, int rightTop, int leftBottom, int rightBottom) Parameters lx float ly float byteIndex int 0, 1, 2 or 3 leftTop int rightTop int leftBottom int rightBottom int Returns byte BiSerpRgbColor(float, float, int, int, int, int) Smoothstep Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually) public static int BiSerpRgbColor(float lx, float ly, int leftTop, int rightTop, int leftBottom, int rightBottom) Parameters lx float ly float leftTop int rightTop int leftBottom int rightBottom int Returns int BoolsFromInt(bool[], int) public static void BoolsFromInt(bool[] bools, int v) Parameters bools bool[] v int BresenHamPlotLine2d(int, int, int, int, PlotDelegate2D) Plot a 2d line, see also http://members.chello.at/~easyfilter/bresenham.html public static void BresenHamPlotLine2d(int x0, int y0, int x1, int y1, PlotDelegate2D onPlot) Parameters x0 int y0 int x1 int y1 int onPlot PlotDelegate2D BresenHamPlotLine3d(int, int, int, int, int, int, PlotDelegate3D) Plot a 3d line, see also http://members.chello.at/~easyfilter/bresenham.html public static void BresenHamPlotLine3d(int x0, int y0, int z0, int x1, int y1, int z1, PlotDelegate3D onPlot) Parameters x0 int y0 int z0 int x1 int y1 int z1 int onPlot PlotDelegate3D BresenHamPlotLine3d(int, int, int, int, int, int, PlotDelegate3DBlockPos) Plot a 3d line, see also http://members.chello.at/~easyfilter/bresenham.html public static void BresenHamPlotLine3d(int x0, int y0, int z0, int x1, int y1, int z1, PlotDelegate3DBlockPos onPlot) Parameters x0 int y0 int z0 int x1 int y1 int z1 int onPlot PlotDelegate3DBlockPos CPCatmullRomSplineLerp(double, double[], double[]) Unlike the other implementation here, which uses the default \"uniform\" treatment of t, this computation is used to calculate the same values but introduces the ability to \"parameterize\" the t values used in the calculation. This is based on Figure 3 from http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf public static double CPCatmullRomSplineLerp(double t, double[] p, double[] time) Parameters t double the actual interpolation ratio from 0 to 1 representing the position between p1 and p2 to interpolate the value. p double[] An array of double values of length 4, where interpolation occurs from p1 to p2. time double[] An array of time measures of length 4, corresponding to each p value. Returns double Clamp(byte, byte, byte) Force val to be inside a certain range public static byte Clamp(byte val, byte min, byte max) Parameters val byte min byte max byte Returns byte Clamp(double, double, double) Force val to be inside a certain range public static double Clamp(double val, double min, double max) Parameters val double min double max double Returns double Clamp(int, int, int) Force val to be inside a certain range public static int Clamp(int val, int min, int max) Parameters val int min int max int Returns int Clamp(float, float, float) Force val to be inside a certain range public static float Clamp(float val, float min, float max) Parameters val float min float max float Returns float Cos(double) public static double Cos(double value) Parameters value double Returns double Cos(float) The cosine of the angle, expressed as a float. The angle is in radians public static float Cos(float value) Parameters value float Returns float Crc32(byte[]) public static uint Crc32(byte[] input) Parameters input byte[] Returns uint Crc32(string) public static uint Crc32(string input) Parameters input string Returns uint CyclicValueDistance(double, double, double) Returns the shortest distance between 2 values that are cyclical (e.g. angles, daytime hours, etc.) See also https://stackoverflow.com/a/14498790/1873041 public static double CyclicValueDistance(double start, double end, double period) Parameters start double end double period double Returns double CyclicValueDistance(float, float, float) Returns the shortest distance between 2 values that are cyclical (e.g. angles, daytime hours, etc.) See also https://stackoverflow.com/a/14498790/1873041 public static float CyclicValueDistance(float start, float end, float period) Parameters start float end float period float Returns float DotNetStringHash(string) Pretty much taken directly from the string.GetHashCode() implementation, but on these methods the documentation states: \"You should never persist or use a hash code outside the application domain in which it was created, [...].\" Hence, this is one basic 32bit bit implementation that can be used in a platform independent, persistent way. public static int DotNetStringHash(string text) Parameters text string Returns int FastCos(float) Faster Cos at the cost of lower accuracy public static float FastCos(float rad) Parameters rad float Returns float FastCosDeg(float) Faster Cos at the cost of lower accuracy public static float FastCosDeg(float deg) Parameters deg float Returns float FastSin(float) Faster Sin at the cost of lower accuracy public static float FastSin(float rad) Parameters rad float Returns float FastSinDeg(float) Faster Sin at the cost of lower accuracy public static float FastSinDeg(float deg) Parameters deg float Returns float FlipVal(ref double, ref double) Assigns the value of x1 to x2 and vice versa public static void FlipVal(ref double x1, ref double x2) Parameters x1 double x2 double FlipVal(ref int, ref int) Assigns the value of x1 to x2 and vice versa public static void FlipVal(ref int x1, ref int x2) Parameters x1 int x2 int GenGaussKernel(double, int) Generates a gaussian blur kernel to be used when blurring something public static double[,] GenGaussKernel(double sigma = 1, int size = 5) Parameters sigma double size int Returns double[,] IntFromBools(bool[]) public static int IntFromBools(bool[] bools) Parameters bools bool[] Returns int IntFromBools(int[]) public static int IntFromBools(int[] intBools) Parameters intBools int[] Returns int InverseClamp(int, int, int) Force val to be outside a certain range public static int InverseClamp(int val, int atLeastNeg, int atLeastPos) Parameters val int atLeastNeg int atLeastPos int Returns int Largest(double, double) Returns the smallest number, ignoring the sign of either value public static double Largest(double a, double b) Parameters a double b double Returns double Lerp(double, double, double) Basic Lerp public static double Lerp(double v0, double v1, double t) Parameters v0 double v1 double t double Returns double Lerp(float, float, float) Basic Lerp public static float Lerp(float v0, float v1, float t) Parameters v0 float v1 float t float Returns float LerpByte(float, byte, byte) Linear Interpolates a single byte public static byte LerpByte(float lx, byte left, byte right) Parameters lx float left byte right byte Returns byte LerpRgbColor(float, int, int) Linear Interpolates the lower 3 bytes of the int individually (i.e. interpolates RGB values individually) public static int LerpRgbColor(float lx, int left, int right) Parameters lx float left int right int Returns int LerpRgbaColor(float, int, int) Linear Interpolates the 4 bytes of the int individually (i.e. interpolates RGB values individually) public static int LerpRgbaColor(float lx, int left, int right) Parameters lx float left int right int Returns int Map<T>(T, T, T, T, T) Map a value from one range to another public static T Map<T>(T value, T fromMin, T fromMax, T toMin, T toMax) where T : INumber<T> Parameters value T fromMin T fromMax T toMin T toMax T Returns T Type Parameters T Max(double, double) public static double Max(double a, double b) Parameters a double b double Returns double Max(params double[]) public static double Max(params double[] values) Parameters values double[] Returns double Max(int, int) public static int Max(int a, int b) Parameters a int b int Returns int Max(params int[]) public static int Max(params int[] values) Parameters values int[] Returns int Max(float, float) public static float Max(float a, float b) Parameters a float b float Returns float Max(params float[]) public static float Max(params float[] values) Parameters values float[] Returns float Md5Hash(string) See also https://msdn.microsoft.com/en-us/library/system.security.cryptography.md5%28v=vs.110%29.aspx public static string Md5Hash(string input) Parameters input string Returns string Min(int, int) public static int Min(int a, int b) Parameters a int b int Returns int Min(params int[]) public static int Min(params int[] values) Parameters values int[] Returns int Min(float, float) public static float Min(float a, float b) Parameters a float b float Returns float Min(params float[]) public static float Min(params float[] values) Parameters values float[] Returns float Mix(int, int, float) Same as Lerp(float, float, float) public static int Mix(int v0, int v1, float t) Parameters v0 int v1 int t float Returns int Mix(float, float, float) Same as Lerp(float, float, float) public static float Mix(float v0, float v1, float t) Parameters v0 float v1 float t float Returns float Mod(double, double) C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value public static double Mod(double k, double n) Parameters k double n double Returns double Mod(int, int) C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value public static int Mod(int k, int n) Parameters k int n int Returns int Mod(float, float) C#'s %-Operation is actually not modulo but remainder, so this is the actual modulo function that ensures positive numbers as return value public static float Mod(float k, float n) Parameters k float n float Returns float Mod(uint, uint) public static uint Mod(uint k, uint n) Parameters k uint n uint Returns uint MurmurHash3(int, int, int) A not so fast, but higher quality than oaatHash(). See also https://en.wikipedia.org/wiki/MurmurHash public static int MurmurHash3(int x, int y, int z) Parameters x int y int z int Returns int MurmurHash3Mod(int, int, int, int) A not so fast, but higher quality than oaatHash(). See also https://en.wikipedia.org/wiki/MurmurHash. Includes a modulo operation. public static int MurmurHash3Mod(int x, int y, int z, int mod) Parameters x int y int z int mod int Returns int NormaliseAngleRad(float) For angles in radians, normalise to the range 0 to 2 * PI and also, if barely close to a right angle, set it to a right angle (fixes loss of precision after multiple rotation operations etc.) public static float NormaliseAngleRad(float angleRad) Parameters angleRad float Returns float PrettyBadHash(int, int) A really bad, but very fast hashing method. public static float PrettyBadHash(int x, int y) Parameters x int y int Returns float R2Sequence1D(int) Quasirandom sequence by Martin Roberts (http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/) public static double R2Sequence1D(int n) Parameters n int Returns double R2Sequence2D(int) Quasirandom sequence by Martin Roberts (http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/) public static Vec2d R2Sequence2D(int n) Parameters n int Returns Vec2d R2Sequence3D(int) Quasirandom sequence by Martin Roberts (http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/) public static Vec3d R2Sequence3D(int n) Parameters n int Returns Vec3d RootSumOfSquares(float, float, float) public static float RootSumOfSquares(float a, float b, float c) Parameters a float b float c float Returns float RoundRandom(Random, float) Treats given value as a statistical average. Example: 2.1 will turn into 2 90% of the times and into 3 10% of times. public static int RoundRandom(Random rand, float value) Parameters rand Random value float Returns int RoundRandom(IRandom, float) Treats given value as a statistical average. Example: 2.1 will turn into 2 90% of the times and into 3 10% of times. public static int RoundRandom(IRandom rand, float value) Parameters rand IRandom value float Returns int Serp(float, float, float) Smooth Interpolation using inlined Smoothstep public static float Serp(float v0, float v1, float t) Parameters v0 float v1 float t float Returns float Shuffle<T>(Random, List<T>) Performs a Fisher-Yates shuffle in linear time or O(n) public static void Shuffle<T>(Random rand, List<T> array) Parameters rand Random array List<T> Type Parameters T Shuffle<T>(Random, T[]) Performs a Fisher-Yates shuffle in linear time or O(n) public static void Shuffle<T>(Random rand, T[] array) Parameters rand Random array T[] Type Parameters T Shuffle<T>(LCGRandom, List<T>) Performs a Fisher-Yates shuffle in linear time or O(n) public static void Shuffle<T>(LCGRandom rand, List<T> array) Parameters rand LCGRandom array List<T> Type Parameters T Sin(double) public static double Sin(double value) Parameters value double Returns double Sin(float) The sine of the angle, expressed as a float. The angle is in radians public static float Sin(float value) Parameters value float Returns float Smallest(double, double) Returns the smallest number, ignoring the sign of either value. Examples: Smallest(1, 3) returns 1 Smallest(-20, 3) returns 3 public static double Smallest(double a, double b) Parameters a double b double Returns double SmoothMax(double, double, double) public static double SmoothMax(double a, double b, double smoothingFactor) Parameters a double b double smoothingFactor double Returns double SmoothMax(float, float, float) public static float SmoothMax(float a, float b, float smoothingFactor) Parameters a float b float smoothingFactor float Returns float SmoothMin(double, double, double) public static double SmoothMin(double a, double b, double smoothingFactor) Parameters a double b double smoothingFactor double Returns double SmoothMin(float, float, float) public static float SmoothMin(float a, float b, float smoothingFactor) Parameters a float b float smoothingFactor float Returns float SmoothStep(double) Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep public static double SmoothStep(double x) Parameters x double Returns double SmoothStep(float) Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep public static float SmoothStep(float x) Parameters x float Returns float Smootherstep(double) Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep. x must be in range of 0..1 public static double Smootherstep(double x) Parameters x double Returns double Smootherstep(double, double, double) Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep public static double Smootherstep(double edge0, double edge1, double x) Parameters edge0 double edge1 double x double Returns double Smootherstep(float, float, float) Better Lerp but more CPU intensive, see also https://en.wikipedia.org/wiki/Smoothstep public static float Smootherstep(float edge0, float edge1, float x) Parameters edge0 float edge1 float x float Returns float Sqrt(double) public static float Sqrt(double value) Parameters value double Returns float Sqrt(float) public static float Sqrt(float value) Parameters value float Returns float Square(double) public static double Square(double a) Parameters a double Returns double SumOfSquares(double, double, double) public static double SumOfSquares(double a, double b, double c) Parameters a double b double c double Returns double Tan(double) public static double Tan(double value) Parameters value double Returns double Tan(float) public static float Tan(float value) Parameters value float Returns float ToEulerAngles(Vec4d) public static Vec3d ToEulerAngles(Vec4d q) Parameters q Vec4d Returns Vec3d ToEulerAngles(Vec4f) public static Vec3f ToEulerAngles(Vec4f q) Parameters q Vec4f Returns Vec3f TriangleStep(int, int, int) Returns a value between 0..1. Returns 0 if val is smaller than left or greater than right. For val == (left+right)/2 the return value is 1. Every other value is a linear interpolation based on the distance to the middle value. Ascii art representation: 1 | / | / 0.5| / | / | / 0 /______________ left right public static float TriangleStep(int val, int left, int right) Parameters val int left int right int Returns float TriangleStep(float, float, float) Returns a value between 0..1. Returns 0 if val is smaller than left or greater than right. For val == (left+right)/2 the return value is 1. Every other value is a linear interpolation based on the distance to the middle value. Ascii art representation: 1 | / | / 0.5| / | / | / 0 /______________ left right public static float TriangleStep(float val, float left, float right) Parameters val float left float right float Returns float TriangleStepFast(int, int, int) Same as TriangleStep but skipping the step to calc mid and range. public static float TriangleStepFast(int val, int mid, int range) Parameters val int mid int range int Returns float oaatHash(int, int) Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random. public static int oaatHash(int x, int y) Parameters x int y int Returns int oaatHash(int, int, int) Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random. public static int oaatHash(int x, int y, int z) Parameters x int y int z int Returns int oaatHash(Vec2i) Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random. public static int oaatHash(Vec2i v) Parameters v Vec2i Returns int oaatHash(Vec3i) Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random. public static int oaatHash(Vec3i v) Parameters v Vec3i Returns int oaatHash(Vec4i) Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random. public static int oaatHash(Vec4i v) Parameters v Vec4i Returns int oaatHashMany(int, int) A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm. public static int oaatHashMany(int x, int count) Parameters x int count int Returns int oaatHashU(int, int, int) Bob Jenkins' One-At-A-Time hashing algorithm. Fast, but not very random. public static uint oaatHashU(int x, int y, int z) Parameters x int y int z int Returns uint oaatHashUMany(uint) Bob Jenkins' One-At-A-Time hashing algorithm public static uint oaatHashUMany(uint x) Parameters x uint Returns uint"
  },
  "api/Vintagestory.API.MathTools.HorRectanglei.html": {
    "href": "api/Vintagestory.API.MathTools.HorRectanglei.html",
    "title": "Class HorRectanglei | VintageStory API",
    "keywords": "Class HorRectanglei Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class HorRectanglei Inheritance object HorRectanglei Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors HorRectanglei() public HorRectanglei() HorRectanglei(int, int, int, int) public HorRectanglei(int x1, int z1, int x2, int z2) Parameters x1 int z1 int x2 int z2 int Fields X1 public int X1 Field Value int X2 public int X2 Field Value int Z1 public int Z1 Field Value int Z2 public int Z2 Field Value int Properties MaxX public int MaxX { get; } Property Value int MaxZ public int MaxZ { get; } Property Value int MinX public int MinX { get; } Property Value int MinZ public int MinZ { get; } Property Value int"
  },
  "api/Vintagestory.API.MathTools.IRandom.html": {
    "href": "api/Vintagestory.API.MathTools.IRandom.html",
    "title": "Interface IRandom | VintageStory API",
    "keywords": "Interface IRandom Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public interface IRandom Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods NextDouble() double NextDouble() Returns double NextFloat() float NextFloat() Returns float NextInt() int NextInt() Returns int NextInt(int) Returns 0..max-1 int NextInt(int max) Parameters max int Returns int"
  },
  "api/Vintagestory.API.MathTools.IVec3.html": {
    "href": "api/Vintagestory.API.MathTools.IVec3.html",
    "title": "Interface IVec3 | VintageStory API",
    "keywords": "Interface IVec3 Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public interface IVec3 Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AsVec3i Vec3i AsVec3i { get; } Property Value Vec3i XAsDouble double XAsDouble { get; } Property Value double XAsFloat float XAsFloat { get; } Property Value float XAsInt int XAsInt { get; } Property Value int YAsDouble double YAsDouble { get; } Property Value double YAsFloat float YAsFloat { get; } Property Value float YAsInt int YAsInt { get; } Property Value int ZAsDouble double ZAsDouble { get; } Property Value double ZAsFloat float ZAsFloat { get; } Property Value float ZAsInt int ZAsInt { get; } Property Value int"
  },
  "api/Vintagestory.API.MathTools.IWorldIntersectionSupplier.html": {
    "href": "api/Vintagestory.API.MathTools.IWorldIntersectionSupplier.html",
    "title": "Interface IWorldIntersectionSupplier | VintageStory API",
    "keywords": "Interface IWorldIntersectionSupplier Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public interface IWorldIntersectionSupplier Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties MapSize Vec3i MapSize { get; } Property Value Vec3i blockAccessor IBlockAccessor blockAccessor { get; } Property Value IBlockAccessor Methods GetBlock(BlockPos) Block GetBlock(BlockPos pos) Parameters pos BlockPos Returns Block GetBlockIntersectionBoxes(BlockPos) Cuboidf[] GetBlockIntersectionBoxes(BlockPos pos) Parameters pos BlockPos Returns Cuboidf[] GetEntitiesAround(Vec3d, float, float, ActionConsumable<Entity>) Entity[] GetEntitiesAround(Vec3d position, float horRange, float vertRange, ActionConsumable<Entity> matches = null) Parameters position Vec3d horRange float vertRange float matches ActionConsumable<Entity> Returns Entity[] IsValidPos(BlockPos) bool IsValidPos(BlockPos pos) Parameters pos BlockPos Returns bool"
  },
  "api/Vintagestory.API.MathTools.LCGRandom.html": {
    "href": "api/Vintagestory.API.MathTools.LCGRandom.html",
    "title": "Class LCGRandom | VintageStory API",
    "keywords": "Class LCGRandom Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll An lcg random generator, particularly suitable for worldgen See also https://en.wikipedia.org/wiki/Linear_congruential_generator Open in GitHub public class LCGRandom : IRandom Inheritance object LCGRandom Implements IRandom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors LCGRandom() Initialize random with no seed. Use SetWorldSeed() to initialize public LCGRandom() LCGRandom(long) Initialize random with given seed public LCGRandom(long worldSeed) Parameters worldSeed long Fields currentSeed public long currentSeed Field Value long mapGenSeed public long mapGenSeed Field Value long worldSeed public long worldSeed Field Value long Methods InitPositionSeed(int, int) Initializes a position dependent seed, if required public void InitPositionSeed(int xPos, int zPos) Parameters xPos int zPos int InitPositionSeed(int, int, int) Initializes a position dependent seed, if required public void InitPositionSeed(int xPos, int yPos, int zPos) Parameters xPos int yPos int zPos int NextDouble() Returns a random number from 0.0 - 1.0 (inclusive) public double NextDouble() Returns double NextFloat() Returns a random number from 0.0F - 1.0F (inclusive) public float NextFloat() Returns float NextFloatMinusToPlusOne() Returns a random number from -1.0F - 1.0F (inclusive) with a bias towards the zero value (triangle graph, similar to how rolling two 6-sided dice and adding the result is most likely to yield 7) Precise to better than 15 binary digits / better than 4 significant figures in decimal public float NextFloatMinusToPlusOne() Returns float NextInt() Returns a random number from 0 - int.MaxValue (inclusive) public int NextInt() Returns int NextInt(int) Returns a pseudo random number from 0 - max (excluding max) public int NextInt(int max) Parameters max int Returns int SetWorldSeed(long) Sets given seed public void SetWorldSeed(long worldSeed) Parameters worldSeed long"
  },
  "api/Vintagestory.API.MathTools.Line3D.html": {
    "href": "api/Vintagestory.API.MathTools.Line3D.html",
    "title": "Class Line3D | VintageStory API",
    "keywords": "Class Line3D Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Line3D Inheritance object Line3D Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields End public double[] End Field Value double[] Start public double[] Start Field Value double[]"
  },
  "api/Vintagestory.API.MathTools.MapUtil.html": {
    "href": "api/Vintagestory.API.MathTools.MapUtil.html",
    "title": "Class MapUtil | VintageStory API",
    "keywords": "Class MapUtil Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class MapUtil Inheritance object MapUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Index2d(int, int, int) public static int Index2d(int x, int y, int sizex) Parameters x int y int sizex int Returns int Index2dL(int, int, int) public static long Index2dL(int x, int y, int sizex) Parameters x int y int sizex int Returns long Index3d(int, int, int, int, int) public static int Index3d(int x, int y, int z, int sizex, int sizez) Parameters x int y int z int sizex int sizez int Returns int Index3d(int, int, int, long, long) public static int Index3d(int x, int y, int z, long sizex, long sizez) Parameters x int y int z int sizex long sizez long Returns int Index3dL(int, int, int, long, long) public static long Index3dL(int x, int y, int z, long sizex, long sizez) Parameters x int y int z int sizex long sizez long Returns long PosInt2d(long, long, Vec2i) public static void PosInt2d(long index, long sizex, Vec2i ret) Parameters index long sizex long ret Vec2i PosInt3d(int, long, long, Vec3i) public static void PosInt3d(int index, long sizex, long sizez, Vec3i ret) Parameters index int sizex long sizez long ret Vec3i PosInt3d(long, long, long, Vec3i) public static void PosInt3d(long index, long sizex, long sizez, Vec3i ret) Parameters index long sizex long sizez long ret Vec3i PosX(int, int, int) public static int PosX(int index, int sizex, int sizey) Parameters index int sizex int sizey int Returns int PosY(int, int, int) public static int PosY(int index, int sizex, int sizey) Parameters index int sizex int sizey int Returns int PosZ(int, int, int) public static int PosZ(int index, int sizex, int sizey) Parameters index int sizex int sizey int Returns int"
  },
  "api/Vintagestory.API.MathTools.Mat22.html": {
    "href": "api/Vintagestory.API.MathTools.Mat22.html",
    "title": "Class Mat22 | VintageStory API",
    "keywords": "Class Mat22 Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll 2x2 Matrix Open in GitHub public class Mat22 Inheritance object Mat22 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Adjoint(float[], float[]) Calculates the adjugate of a mat2 Returns output public static float[] Adjoint(float[] output, float[] a) Parameters output float[] the receiving matrix a float[] the source matrix Returns float[] CloneIt(float[]) Creates a new mat2 initialized with values from an existing matrix Returns a new 2x2 matrix public static float[] CloneIt(float[] a) Parameters a float[] matrix to clone Returns float[] Copy(float[], float[]) Copy the values from one mat2 to another Returns output public static float[] Copy(float[] output, float[] a) Parameters output float[] the receiving matrix a float[] the source matrix Returns float[] Create() Creates a new identity mat2 Returns a new 2x2 matrix public static float[] Create() Returns float[] Determinant(float[]) Calculates the determinant of a mat2 Returns determinant of a public static float Determinant(float[] a) Parameters a float[] the source matrix Returns float Identity_(float[]) Set a mat2 to the identity matrix Returns output public static float[] Identity_(float[] output) Parameters output float[] the receiving matrix Returns float[] Invert(float[], float[]) Inverts a mat2 Returns output public static float[] Invert(float[] output, float[] a) Parameters output float[] the receiving matrix a float[] the source matrix Returns float[] Mul(float[], float[], float[]) Alias for {@link mat2.multiply} public static float[] Mul(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Multiply(float[], float[], float[]) Multiplies two mat2's Returns output public static float[] Multiply(float[] output, float[] a, float[] b) Parameters output float[] the receiving matrix a float[] the first operand b float[] the second operand Returns float[] Rotate(float[], float[], float) Rotates a mat2 by the given angle Returns output public static float[] Rotate(float[] output, float[] a, float rad) Parameters output float[] the receiving matrix a float[] the matrix to rotate rad float the angle to rotate the matrix by Returns float[] Scale(float[], float[], float[]) Scales the mat2 by the dimensions in the given vec2 Returns output public static float[] Scale(float[] output, float[] a, float[] v) Parameters output float[] the receiving matrix a float[] the matrix to rotate v float[] the vec2 to scale the matrix by Returns float[] Transpose(float[], float[]) Transpose the values of a mat2 Returns output public static float[] Transpose(float[] output, float[] a) Parameters output float[] the receiving matrix a float[] the source matrix Returns float[]"
  },
  "api/Vintagestory.API.MathTools.Mat23.html": {
    "href": "api/Vintagestory.API.MathTools.Mat23.html",
    "title": "Class Mat23 | VintageStory API",
    "keywords": "Class Mat23 Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll 2x3 Matrix A mat2d contains six elements defined as: [a, b, c, d, tx,ty] This is a short form for the 3x3 matrix: [a, b, 0 c, d, 0 tx,ty,1] The last column is ignored so the array is shorter and operations are faster. Open in GitHub public class Mat23 Inheritance object Mat23 Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods CloneIt(float[]) Creates a new mat2d initialized with values from an existing matrix Returns a new 2x3 matrix public static float[] CloneIt(float[] a) Parameters a float[] matrix to clone Returns float[] Copy(float[], float[]) Copy the values from one mat2d to another Returns output public static float[] Copy(float[] output, float[] a) Parameters output float[] the receiving matrix a float[] the source matrix Returns float[] Create() Creates a new identity mat2d Returns a new 2x3 matrix public static float[] Create() Returns float[] Determinant(float[]) Calculates the determinant of a mat2d Returns determinant of a public static float Determinant(float[] a) Parameters a float[] the source matrix Returns float Identity_(float[]) Set a mat2d to the identity matrix Returns output public static float[] Identity_(float[] output) Parameters output float[] the receiving matrix Returns float[] Invert(float[], float[]) Inverts a mat2d Returns output public static float[] Invert(float[] output, float[] a) Parameters output float[] the receiving matrix a float[] the source matrix Returns float[] Mul(float[], float[], float[]) Alias for {@link mat2d.multiply} @function public static float[] Mul(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Multiply(float[], float[], float[]) Multiplies two mat2d's Returns output public static float[] Multiply(float[] output, float[] a, float[] b) Parameters output float[] the receiving matrix a float[] the first operand b float[] the second operand Returns float[] Rotate(float[], float[], float) Rotates a mat2d by the given angle Returns output public static float[] Rotate(float[] output, float[] a, float rad) Parameters output float[] the receiving matrix a float[] the matrix to rotate rad float the angle to rotate the matrix by Returns float[] Scale(float[], float[], float[]) Scales the mat2d by the dimensions in the given vec2 Returns output public static float[] Scale(float[] output, float[] a, float[] v) Parameters output float[] the receiving matrix a float[] the matrix to translate v float[] the vec2 to scale the matrix by Returns float[] Translate(float[], float[], float[]) Translates the mat2d by the dimensions in the given vec2 Returns output public static float[] Translate(float[] output, float[] a, float[] v) Parameters output float[] the receiving matrix a float[] the matrix to translate v float[] the vec2 to translate the matrix by Returns float[]"
  },
  "api/Vintagestory.API.MathTools.Mat3d.html": {
    "href": "api/Vintagestory.API.MathTools.Mat3d.html",
    "title": "Class Mat3d | VintageStory API",
    "keywords": "Class Mat3d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Mat3d Inheritance object Mat3d Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Adjoint(double[], double[]) public static double[] Adjoint(double[] output, double[] a) Parameters output double[] a double[] Returns double[] CloneIt(double[]) public static double[] CloneIt(double[] a) Parameters a double[] Returns double[] Copy(double[], double[]) public static double[] Copy(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Create() public static double[] Create() Returns double[] Determinant(double[]) public static double Determinant(double[] a) Parameters a double[] Returns double FromMat2d(double[], double[]) public static double[] FromMat2d(double[] output, double[] a) Parameters output double[] a double[] Returns double[] FromMat4(double[], double[]) public static double[] FromMat4(double[] output, double[] a) Parameters output double[] a double[] Returns double[] FromQuat(double[], double[]) public static double[] FromQuat(double[] output, double[] q) Parameters output double[] q double[] Returns double[] Identity_(double[]) public static double[] Identity_(double[] output) Parameters output double[] Returns double[] Invert(double[], double[]) public static double[] Invert(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Mul(double[], double[], double[]) public static double[] Mul(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Multiply(double[], double[], double[]) public static double[] Multiply(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] NormalFromMat4(double[], double[]) public static double[] NormalFromMat4(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Rotate(double[], double[], double) public static double[] Rotate(double[] output, double[] a, double rad) Parameters output double[] a double[] rad double Returns double[] Scale(double[], double[], double[]) public static double[] Scale(double[] output, double[] a, double[] v) Parameters output double[] a double[] v double[] Returns double[] Translate(double[], double[], double[]) public static double[] Translate(double[] output, double[] a, double[] v) Parameters output double[] a double[] v double[] Returns double[] Transpose(double[], double[]) public static double[] Transpose(double[] output, double[] a) Parameters output double[] a double[] Returns double[]"
  },
  "api/Vintagestory.API.MathTools.Mat3f.html": {
    "href": "api/Vintagestory.API.MathTools.Mat3f.html",
    "title": "Class Mat3f | VintageStory API",
    "keywords": "Class Mat3f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Mat3f Inheritance object Mat3f Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Adjoint(float[], float[]) public static float[] Adjoint(float[] output, float[] a) Parameters output float[] a float[] Returns float[] CloneIt(float[]) public static float[] CloneIt(float[] a) Parameters a float[] Returns float[] Copy(float[], float[]) public static float[] Copy(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Create() public static float[] Create() Returns float[] Determinant(float[]) public static float Determinant(float[] a) Parameters a float[] Returns float FromMat2d(float[], float[]) public static float[] FromMat2d(float[] output, float[] a) Parameters output float[] a float[] Returns float[] FromMat4(float[], float[]) public static float[] FromMat4(float[] output, float[] a) Parameters output float[] a float[] Returns float[] FromQuat(float[], float[]) public static float[] FromQuat(float[] output, float[] q) Parameters output float[] q float[] Returns float[] Identity_(float[]) public static float[] Identity_(float[] output) Parameters output float[] Returns float[] Invert(float[], float[]) public static float[] Invert(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Mul(float[], float[], float[]) public static float[] Mul(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Multiply(float[], float[], float[]) public static float[] Multiply(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] NormalFromMat4(float[], float[]) public static float[] NormalFromMat4(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Rotate(float[], float[], float) public static float[] Rotate(float[] output, float[] a, float rad) Parameters output float[] a float[] rad float Returns float[] Scale(float[], float[], float[]) public static float[] Scale(float[] output, float[] a, float[] v) Parameters output float[] a float[] v float[] Returns float[] Translate(float[], float[], float[]) public static float[] Translate(float[] output, float[] a, float[] v) Parameters output float[] a float[] v float[] Returns float[] Transpose(float[], float[]) public static float[] Transpose(float[] output, float[] a) Parameters output float[] a float[] Returns float[]"
  },
  "api/Vintagestory.API.MathTools.Mat4d.html": {
    "href": "api/Vintagestory.API.MathTools.Mat4d.html",
    "title": "Class Mat4d | VintageStory API",
    "keywords": "Class Mat4d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll 4x4 Matrix Math Open in GitHub public class Mat4d Inheritance object Mat4d Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Adjoint(double[], double[]) Calculates the adjugate of a mat4 public static double[] Adjoint(double[] output, double[] a) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the source matrix Returns double[] {mat4} out CloneIt(double[]) Creates a new mat4 initialized with values from an existing matrix public static double[] CloneIt(double[] a) Parameters a double[] a matrix to clone Returns double[] {mat4} a new 4x4 matrix Copy(double[], double[]) Copy the values from one mat4 to another public static double[] Copy(double[] output, double[] a) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the source matrix Returns double[] {mat4} out Create() Creates a new identity mat4 0 4 8 12 1 5 9 13 2 6 10 14 3 7 11 15 public static double[] Create() Returns double[] {mat4} a new 4x4 matrix Determinant(double[]) Calculates the determinant of a mat4 public static double Determinant(double[] a) Parameters a double[] {mat4} a the source matrix Returns double {Number} determinant of a FromQuat(double[], double[]) Calculates a 4x4 matrix from the given quaternion public static double[] FromQuat(double[] output, double[] q) Parameters output double[] {mat4} out mat4 receiving operation result q double[] {quat} q Quaternion to create matrix from Returns double[] {mat4} out FromRotationTranslation(double[], double[], double[]) Creates a matrix from a quaternion rotation and vector translation This is equivalent to (but much faster than): mat4.identity(dest); mat4.translate(dest, vec); var quatMat = mat4.create(); quat4.toMat4(quat, quatMat); mat4.multiply(dest, quatMat); public static double[] FromRotationTranslation(double[] output, double[] q, double[] v) Parameters output double[] {mat4} out mat4 receiving operation result q double[] {quat4} q Rotation quaternion v double[] {vec3} v Translation vector Returns double[] {mat4} out Frustum(double[], double, double, double, double, double, double) Generates a frustum matrix with the given bounds public static double[] Frustum(double[] output, double left, double right, double bottom, double top, double near, double far) Parameters output double[] {mat4} out mat4 frustum matrix will be written into left double {Number} left Left bound of the frustum right double {Number} right Right bound of the frustum bottom double {Number} bottom Bottom bound of the frustum top double {Number} top Top bound of the frustum near double {Number} near Near bound of the frustum far double {Number} far Far bound of the frustum Returns double[] {mat4} out Identity(double[]) Set a mat4 to the identity matrix public static double[] Identity(double[] output) Parameters output double[] {mat4} out the receiving matrix Returns double[] {mat4} out Invert(double[], double[]) Inverts a mat4 public static double[] Invert(double[] output, double[] a) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the source matrix Returns double[] {mat4} out IsTranslationOnly(double[]) If we have a translation-only matrix - one with no rotation or scaling - return true. If the matrix includes some scaling or rotation components, return false. The identity matrix returns true here because there is no scaling or rotation, even though the translation is zero in that special case. public static bool IsTranslationOnly(double[] matrix) Parameters matrix double[] Returns bool true if a simple translation matrix was found, otherwise false LookAt(double[], double[], double[], double[]) Generates a look-at matrix with the given eye position, focal point, and up axis public static double[] LookAt(double[] output, double[] eye, double[] center, double[] up) Parameters output double[] {mat4} out mat4 frustum matrix will be written into eye double[] {vec3} eye Position of the viewer center double[] {vec3} center Point the viewer is looking at up double[] {vec3} up vec3 pointing up Returns double[] {mat4} out Mul(double[], double[], double[]) mat4.multiply public static double[] Mul(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Mul(double[], float[], double[]) mat4.multiply public static double[] Mul(double[] output, float[] a, double[] b) Parameters output double[] a float[] b double[] Returns double[] MulWithVec4(double[], double[]) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication Returns a new vec4 vector public static double[] MulWithVec4(double[] matrix, double[] vec4) Parameters matrix double[] vec4 double[] Returns double[] MulWithVec4(double[], double[], Vec4d) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication public static void MulWithVec4(double[] matrix, double[] vec4, Vec4d outVal) Parameters matrix double[] vec4 double[] outVal Vec4d MulWithVec4(double[], Vec4d, Vec4d) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication public static void MulWithVec4(double[] matrix, Vec4d inVal, Vec4d outVal) Parameters matrix double[] inVal Vec4d outVal Vec4d Multiply(double[], double[], double[]) Multiplies two mat4's public static double[] Multiply(double[] output, double[] a, double[] b) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the first operand b double[] {mat4} b the second operand Returns double[] {mat4} out Multiply(double[], float[], double[]) Multiplies two mat4's public static double[] Multiply(double[] output, float[] a, double[] b) Parameters output double[] {mat4} out the receiving matrix a float[] {mat4} a the first operand b double[] {mat4} b the second operand Returns double[] {mat4} out Ortho(double[], double, double, double, double, double, double) Generates a orthogonal projection matrix with the given bounds public static double[] Ortho(double[] output, double left, double right, double bottom, double top, double near, double far) Parameters output double[] {mat4} out mat4 frustum matrix will be written into left double {number} left Left bound of the frustum right double {number} right Right bound of the frustum bottom double {number} bottom Bottom bound of the frustum top double {number} top Top bound of the frustum near double {number} near Near bound of the frustum far double {number} far Far bound of the frustum Returns double[] {mat4} out Perspective(double[], double, double, double, double) Generates a perspective projection matrix with the given bounds public static double[] Perspective(double[] output, double fovy, double aspect, double near, double far) Parameters output double[] {mat4} out mat4 frustum matrix will be written into fovy double {number} fovy Vertical field of view in radians aspect double {number} aspect Aspect ratio. typically viewport width/height near double {number} near Near bound of the frustum far double {number} far Far bound of the frustum Returns double[] {mat4} out Rotate(double[], double[], double, double, double, double) Rotates a mat4 by the given angle public static double[] Rotate(double[] output, double[] a, double rad, double x, double y, double z) Parameters output double[] a double[] rad double x double y double z double Returns double[] Rotate(double[], double[], double, double[]) Rotates a mat4 by the given angle public static double[] Rotate(double[] output, double[] a, double rad, double[] axis) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the matrix to rotate rad double {Number} rad the angle to rotate the matrix by axis double[] {vec3} axis the axis to rotate around Returns double[] {mat4} out RotateX(double[], double[], double) Rotates a matrix by the given angle around the X axis public static double[] RotateX(double[] output, double[] a, double rad) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the matrix to rotate rad double {Number} rad the angle to rotate the matrix by Returns double[] {mat4} out RotateY(double[], double[], double) Rotates a matrix by the given angle around the Y axis public static double[] RotateY(double[] output, double[] a, double rad) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the matrix to rotate rad double {Number} rad the angle to rotate the matrix by Returns double[] {mat4} out RotateZ(double[], double[], double) Rotates a matrix by the given angle around the Z axis public static double[] RotateZ(double[] output, double[] a, double rad) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the matrix to rotate rad double {Number} rad the angle to rotate the matrix by Returns double[] {mat4} out Scale(double[], double, double, double) public static void Scale(double[] matrix, double x, double y, double z) Parameters matrix double[] x double y double z double Scale(double[], double[], double[]) Scales the mat4 by the dimensions in the given vec3 public static double[] Scale(double[] output, double[] a, double[] v) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the matrix to scale v double[] {vec3} v the vec3 to scale the matrix by Returns double[] {mat4} out ToMat4f(float[], double[]) public static float[] ToMat4f(float[] output, double[] input) Parameters output float[] input double[] Returns float[] Translate(double[], double[], double, double, double) Translate a mat4 by the given vector public static double[] Translate(double[] output, double[] input, double x, double y, double z) Parameters output double[] {mat4} out the receiving matrix input double[] {mat4} a the matrix to translate x double {vec3} v vector to translate by y double z double Returns double[] {mat4} out Translate(double[], double[], double[]) Translate a mat4 by the given vector public static double[] Translate(double[] output, double[] input, double[] translate) Parameters output double[] {mat4} out the receiving matrix input double[] {mat4} a the matrix to translate translate double[] {vec3} v vector to translate by Returns double[] {mat4} out Transpose(double[], double[]) Transpose the values of a mat4 public static double[] Transpose(double[] output, double[] a) Parameters output double[] {mat4} out the receiving matrix a double[] {mat4} a the source matrix Returns double[] {mat4} out"
  },
  "api/Vintagestory.API.MathTools.Mat4f.html": {
    "href": "api/Vintagestory.API.MathTools.Mat4f.html",
    "title": "Class Mat4f | VintageStory API",
    "keywords": "Class Mat4f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll 4x4 Matrix Math Open in GitHub public class Mat4f Inheritance object Mat4f Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Adjoint(float[], float[]) Calculates the adjugate of a mat4 public static float[] Adjoint(float[] output, float[] a) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the source matrix Returns float[] {mat4} out CloneIt(float[]) Creates a new mat4 initialized with values from an existing matrix public static float[] CloneIt(float[] a) Parameters a float[] a matrix to clone Returns float[] {mat4} a new 4x4 matrix Copy(float[], float[]) Copy the values from one mat4 to another public static float[] Copy(float[] output, float[] a) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the source matrix Returns float[] {mat4} out Create() Creates a new identity mat4 0 4 8 12 1 5 9 13 2 6 10 14 3 7 11 15 public static float[] Create() Returns float[] {mat4} a new 4x4 matrix Determinant(float[]) Calculates the determinant of a mat4 public static float Determinant(float[] a) Parameters a float[] {mat4} a the source matrix Returns float {Number} determinant of a ExtractEulerAngles(float[], ref float, ref float, ref float) public static void ExtractEulerAngles(float[] m, ref float thetaX, ref float thetaY, ref float thetaZ) Parameters m float[] thetaX float thetaY float thetaZ float FromQuat(float[], float[]) Calculates a 4x4 matrix from the given quaternion public static float[] FromQuat(float[] output, float[] q) Parameters output float[] {mat4} out mat4 receiving operation result q float[] {quat} q Quaternion to create matrix from Returns float[] {mat4} out FromRotationTranslation(float[], float[], float[]) Creates a matrix from a quaternion rotation and vector translation This is equivalent to (but much faster than): mat4.identity(dest); mat4.translate(dest, vec); var quatMat = mat4.create(); quat4.toMat4(quat, quatMat); mat4.multiply(dest, quatMat); public static float[] FromRotationTranslation(float[] output, float[] q, float[] v) Parameters output float[] {mat4} out mat4 receiving operation result q float[] {quat4} q Rotation quaternion v float[] {vec3} v Translation vector Returns float[] {mat4} out Frustum(float[], float, float, float, float, float, float) Generates a frustum matrix with the given bounds public static float[] Frustum(float[] output, float left, float right, float bottom, float top, float near, float far) Parameters output float[] {mat4} out mat4 frustum matrix will be written into left float {Number} left Left bound of the frustum right float {Number} right Right bound of the frustum bottom float {Number} bottom Bottom bound of the frustum top float {Number} top Top bound of the frustum near float {Number} near Near bound of the frustum far float {Number} far Far bound of the frustum Returns float[] {mat4} out Identity(float[]) Set a mat4 to the identity matrix public static float[] Identity(float[] output) Parameters output float[] {mat4} out the receiving matrix Returns float[] {mat4} out Identity_Scaled(float[], float) Set a mat4 to the identity matrix with a scale applied public static float[] Identity_Scaled(float[] output, float scale) Parameters output float[] {mat4} out the receiving matrix scale float Returns float[] {mat4} out Invert(float[], float[]) Inverts a mat4 public static float[] Invert(float[] output, float[] a) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the source matrix Returns float[] {mat4} out LookAt(float[], float[], float[], float[]) Generates a look-at matrix with the given eye position, focal point, and up axis public static float[] LookAt(float[] output, float[] eye, float[] center, float[] up) Parameters output float[] {mat4} out mat4 frustum matrix will be written into eye float[] {vec3} eye Position of the viewer center float[] {vec3} center Point the viewer is looking at up float[] {vec3} up vec3 pointing up Returns float[] {mat4} out Mul(float[], float[], float[]) mat4.multiply public static float[] Mul(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] MulWithVec3(float[], float, float, float) Used for x,y,z representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have no effect public static FastVec3f MulWithVec3(float[] matrix, float x, float y, float z) Parameters matrix float[] x float y float z float Returns FastVec3f MulWithVec3(float[], float[], float[]) Used for vec3 representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have no effect public static void MulWithVec3(float[] matrix, float[] vec, float[] output) Parameters matrix float[] vec float[] output float[] MulWithVec3(float[], Vec3f, Vec3f) Used for Vec3f representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have no effect public static void MulWithVec3(float[] matrix, Vec3f vec, Vec3f output) Parameters matrix float[] vec Vec3f output Vec3f MulWithVec3(Span<float>, float[], float[]) Used for vec3 representing a direction or normal - as a vec4 this would have the 4th element set to 0, so that applying a matrix transform with a translation would have no effect public static void MulWithVec3(Span<float> matrix, float[] vec, float[] output) Parameters matrix Span<float> vec float[] output float[] MulWithVec3_BlockFacing(float[], Vec3f) public static BlockFacing MulWithVec3_BlockFacing(float[] matrix, Vec3f vec) Parameters matrix float[] vec Vec3f Returns BlockFacing MulWithVec3_BlockFacing(Span<float>, Vec3f) public static BlockFacing MulWithVec3_BlockFacing(Span<float> matrix, Vec3f vec) Parameters matrix Span<float> vec Vec3f Returns BlockFacing MulWithVec3_Position(float[], float, float, float, Vec3f) Used for vec3 representing an x,y,z position - as a vec4 this would have the 4th element set to 1, so that applying a matrix transform with a translation would have an effect public static void MulWithVec3_Position(float[] matrix, float x, float y, float z, Vec3f output) Parameters matrix float[] x float y float z float output Vec3f MulWithVec3_Position(float[], float[], float[], int) Used for vec3 representing an x,y,z position - as a vec4 this would have the 4th element set to 1, so that applying a matrix transform with a translation would have an effect The offset is used to index within the original and output arrays - e.g. in MeshData.xyz public static void MulWithVec3_Position(float[] matrix, float[] vec, float[] output, int offset) Parameters matrix float[] vec float[] output float[] offset int MulWithVec3_Position(Span<float>, float[], float[], int) public static void MulWithVec3_Position(Span<float> matrix, float[] vec, float[] output, int offset) Parameters matrix Span<float> vec float[] output float[] offset int MulWithVec3_Position_AndScale(float[], float[], float[], int, float) public static void MulWithVec3_Position_AndScale(float[] matrix, float[] vec, float[] output, int offset, float scaleFactor) Parameters matrix float[] vec float[] output float[] offset int scaleFactor float MulWithVec3_Position_AndScaleXY(float[], float[], float[], int, float) public static void MulWithVec3_Position_AndScaleXY(float[] matrix, float[] vec, float[] output, int offset, float scaleFactor) Parameters matrix float[] vec float[] output float[] offset int scaleFactor float MulWithVec3_Position_WithOrigin(float[], float[], float[], int, Vec3f) Used for vec3 representing an x,y,z position - as a vec4 this would have the 4th element set to 1, so that applying a matrix transform with a translation would have an effect The offset is used to index within the original and output arrays - e.g. in MeshData.xyz The origin is the origin for the rotation public static void MulWithVec3_Position_WithOrigin(float[] matrix, float[] vec, float[] output, int offset, Vec3f origin) Parameters matrix float[] vec float[] output float[] offset int origin Vec3f MulWithVec3_Position_WithOrigin(Span<float>, float[], float[], int, Vec3f) public static void MulWithVec3_Position_WithOrigin(Span<float> matrix, float[] vec, float[] output, int offset, Vec3f origin) Parameters matrix Span<float> vec float[] output float[] offset int origin Vec3f MulWithVec4(float[], double[]) public static double[] MulWithVec4(float[] matrix, double[] vec4) Parameters matrix float[] vec4 double[] Returns double[] MulWithVec4(float[], float, float, float, float) public static float[] MulWithVec4(float[] matrix, float v1, float v2, float v3, float v4) Parameters matrix float[] v1 float v2 float v3 float v4 float Returns float[] MulWithVec4(float[], float[]) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication Returns a new vec4 vector public static float[] MulWithVec4(float[] matrix, float[] vec4) Parameters matrix float[] vec4 float[] Returns float[] MulWithVec4(float[], float[], float[]) public static void MulWithVec4(float[] matrix, float[] vec, float[] output) Parameters matrix float[] vec float[] output float[] MulWithVec4(float[], float[], Vec4f) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication public static void MulWithVec4(float[] matrix, float[] vec4, Vec4f outVal) Parameters matrix float[] vec4 float[] outVal Vec4f MulWithVec4(float[], Vec4d, Vec4d) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication public static void MulWithVec4(float[] matrix, Vec4d inVal, Vec4d outVal) Parameters matrix float[] inVal Vec4d outVal Vec4d MulWithVec4(float[], Vec4f, Vec4f) Multiply the matrix with a vec4. Reference: http://mathinsight.org/matrix_vector_multiplication public static void MulWithVec4(float[] matrix, Vec4f inVal, Vec4f outVal) Parameters matrix float[] inVal Vec4f outVal Vec4f MulWithVec4(Span<float>, float[], float[]) public static void MulWithVec4(Span<float> matrix, float[] vec, float[] output) Parameters matrix Span<float> vec float[] output float[] Multiply(float[], float[], float[]) Multiplies two mat4's public static float[] Multiply(float[] output, float[] a, float[] b) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the first operand b float[] {mat4} b the second operand Returns float[] {mat4} out Ortho(float[], float, float, float, float, float, float) Generates a orthogonal projection matrix with the given bounds public static float[] Ortho(float[] output, float left, float right, float bottom, float top, float near, float far) Parameters output float[] {mat4} out mat4 frustum matrix will be written into left float {number} left Left bound of the frustum right float {number} right Right bound of the frustum bottom float {number} bottom Bottom bound of the frustum top float {number} top Top bound of the frustum near float {number} near Near bound of the frustum far float {number} far Far bound of the frustum Returns float[] {mat4} out Perspective(float[], float, float, float, float) Generates a perspective projection matrix with the given bounds public static float[] Perspective(float[] output, float fovy, float aspect, float near, float far) Parameters output float[] {mat4} out mat4 frustum matrix will be written into fovy float {number} fovy Vertical field of view in radians aspect float {number} aspect Aspect ratio. typically viewport width/height near float {number} near Near bound of the frustum far float {number} far Far bound of the frustum Returns float[] {mat4} out Rotate(float[], float[], float, float[]) Rotates a mat4 by the given angle public static float[] Rotate(float[] output, float[] a, float rad, float[] axis) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the matrix to rotate rad float {Number} rad the angle to rotate the matrix by axis float[] {vec3} axis the axis to rotate around Returns float[] {mat4} out RotateX(float[], float[], float) Rotates a matrix by the given angle around the X axis public static float[] RotateX(float[] output, float[] a, float rad) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the matrix to rotate rad float {Number} rad the angle to rotate the matrix by Returns float[] {mat4} out RotateXYZ(Span<float>, float, float, float) Provides a composite rotation matrix, equivalent to RotateX followed by RotateY followed by RotateZ Here we work on a Span (which may be on the stack) for higher performance public static void RotateXYZ(Span<float> matrix, float radX, float radY, float radZ) Parameters matrix Span<float> radX float radY float radZ float RotateY(float[], float[], float) Rotates a matrix by the given angle around the Y axis public static float[] RotateY(float[] output, float[] a, float rad) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the matrix to rotate rad float {Number} rad the angle to rotate the matrix by Returns float[] {mat4} out RotateZ(float[], float[], float) Rotates a matrix by the given angle around the Z axis public static float[] RotateZ(float[] output, float[] a, float rad) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the matrix to rotate rad float {Number} rad the angle to rotate the matrix by Returns float[] {mat4} out Scale(float[], float[], float, float, float) Scales the mat4 by the dimensions in the given vec3 public static float[] Scale(float[] output, float[] a, float xScale, float yScale, float zScale) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the matrix to scale xScale float yScale float zScale float Returns float[] {mat4} out Scale(float[], float[], float[]) Scales the mat4 by the dimensions in the given vec3 public static float[] Scale(float[] output, float[] a, float[] v) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the matrix to scale v float[] {vec3} v the vec3 to scale the matrix by Returns float[] {mat4} out SimpleScaleMatrix(Span<float>, float, float, float) public static void SimpleScaleMatrix(Span<float> matrix, float x, float y, float z) Parameters matrix Span<float> x float y float z float Translate(float[], float[], float, float, float) Translate a mat4 by the given vector public static float[] Translate(float[] output, float[] input, float x, float y, float z) Parameters output float[] {mat4} out the receiving matrix input float[] {mat4} a the matrix to translate x float {vec3} v vector to translate by y float z float Returns float[] {mat4} out Translate(float[], float[], float[]) Translate a mat4 by the given vector public static float[] Translate(float[] output, float[] input, float[] translate) Parameters output float[] {mat4} out the receiving matrix input float[] {mat4} a the matrix to translate translate float[] {vec3} v vector to translate by Returns float[] {mat4} out Transpose(float[], float[]) Transpose the values of a mat4 public static float[] Transpose(float[] output, float[] a) Parameters output float[] {mat4} out the receiving matrix a float[] {mat4} a the source matrix Returns float[] {mat4} out"
  },
  "api/Vintagestory.API.MathTools.MultiCollisionTester.html": {
    "href": "api/Vintagestory.API.MathTools.MultiCollisionTester.html",
    "title": "Class MultiCollisionTester | VintageStory API",
    "keywords": "Class MultiCollisionTester Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class MultiCollisionTester Inheritance object MultiCollisionTester Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields CollisionBoxList public CachedCuboidList CollisionBoxList Field Value CachedCuboidList count protected int count Field Value int entityBox public Cuboidd[] entityBox Field Value Cuboidd[] maxPos public BlockPos maxPos Field Value BlockPos minPos public BlockPos minPos Field Value BlockPos pos public Vec3d pos Field Value Vec3d tmpPos public BlockPos tmpPos Field Value BlockPos tmpPosDelta public Vec3d tmpPosDelta Field Value Vec3d Methods ApplyTerrainCollision(Cuboidf[], int, Entity, EntityPos, float, ref Vec3d, float, float) public void ApplyTerrainCollision(Cuboidf[] collisionBoxes, int collBoxCount, Entity entity, EntityPos entityPos, float dtFactor, ref Vec3d newPosition, float stepHeight = 1, float yExtra = 1) Parameters collisionBoxes Cuboidf[] collBoxCount int entity Entity entityPos EntityPos dtFactor float newPosition Vec3d stepHeight float yExtra float GenerateCollisionBoxList(IBlockAccessor, double, double, double, float, float) protected virtual void GenerateCollisionBoxList(IBlockAccessor blockAccessor, double motionX, double motionY, double motionZ, float stepHeight, float yExtra) Parameters blockAccessor IBlockAccessor motionX double motionY double motionZ double stepHeight float yExtra float GetCollidingCollisionBox(IBlockAccessor, Cuboidf[], int, Vec3d, bool) If given cuboidf collides with the terrain, returns the collision box it collides with. By default also checks if the cuboid is merely touching the terrain, set alsoCheckTouch to disable that. public Cuboidd GetCollidingCollisionBox(IBlockAccessor blockAccessor, Cuboidf[] ecollisionBoxes, int collBoxCount, Vec3d pos, bool alsoCheckTouch = true) Parameters blockAccessor IBlockAccessor ecollisionBoxes Cuboidf[] collBoxCount int pos Vec3d alsoCheckTouch bool Returns Cuboidd"
  },
  "api/Vintagestory.API.MathTools.NatFloat.html": {
    "href": "api/Vintagestory.API.MathTools.NatFloat.html",
    "title": "Class NatFloat | VintageStory API",
    "keywords": "Class NatFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly) Open in GitHub [DocumentAsJson] public class NatFloat Inheritance object NatFloat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Examples \"quantity\": { \"dist\": \"strongerinvexp\", \"avg\": 6, \"var\": 4 } \"quantity\": { \"avg\": 4, \"var\": 2 } Constructors NatFloat(float, float, EnumDistribution) public NatFloat(float averagevalue, float variance, EnumDistribution distribution) Parameters averagevalue float variance float distribution EnumDistribution Fields avg The average value for the random float. [DocumentAsJson] public float avg Field Value float dist The type of distribution to use that determines the commodity of values. [DocumentAsJson] public EnumDistribution dist Field Value EnumDistribution offset A full offset to apply to any values returned. [DocumentAsJson] public float offset Field Value float var The variation for the random float. [DocumentAsJson] public float var Field Value float Properties One Always 1 public static NatFloat One { get; } Property Value NatFloat Zero Always 0 public static NatFloat Zero { get; } Property Value NatFloat Methods ClampToRange(float) Clamps supplied value to avg-var and avg+var public float ClampToRange(float value) Parameters value float Returns float Clone() public NatFloat Clone() Returns NatFloat FromBytes(BinaryReader) public void FromBytes(BinaryReader reader) Parameters reader BinaryReader ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter addOffset(float) public NatFloat addOffset(float value) Parameters value float Returns NatFloat copyWithOffset(float) public NatFloat copyWithOffset(float value) Parameters value float Returns NatFloat create(EnumDistribution, float, float) public static NatFloat create(EnumDistribution distribution, float averagevalue, float variance) Parameters distribution EnumDistribution averagevalue float variance float Returns NatFloat createDirac(float, float) public static NatFloat createDirac(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createFromBytes(BinaryReader) public static NatFloat createFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns NatFloat createGauss(float, float) public static NatFloat createGauss(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createInvGauss(float, float) public static NatFloat createInvGauss(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createInvexp(float, float) public static NatFloat createInvexp(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createNarrowGauss(float, float) public static NatFloat createNarrowGauss(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createStrongInvexp(float, float) public static NatFloat createStrongInvexp(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createStrongerInvexp(float, float) public static NatFloat createStrongerInvexp(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createTri(float, float) public static NatFloat createTri(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat createUniform(float, float) public static NatFloat createUniform(float averagevalue, float variance) Parameters averagevalue float variance float Returns NatFloat nextFloat() public float nextFloat() Returns float nextFloat(float) public float nextFloat(float multiplier) Parameters multiplier float Returns float nextFloat(float, Random) public float nextFloat(float multiplier, Random rand) Parameters multiplier float rand Random Returns float nextFloat(float, IRandom) public float nextFloat(float multiplier, IRandom rand) Parameters multiplier float rand IRandom Returns float setOffset(float) public NatFloat setOffset(float offset) Parameters offset float Returns NatFloat"
  },
  "api/Vintagestory.API.MathTools.NewNormalizedSimplexFractalNoise.ColumnNoise.html": {
    "href": "api/Vintagestory.API.MathTools.NewNormalizedSimplexFractalNoise.ColumnNoise.html",
    "title": "Struct NewNormalizedSimplexFractalNoise.ColumnNoise | VintageStory API",
    "keywords": "Struct NewNormalizedSimplexFractalNoise.ColumnNoise Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public struct NewNormalizedSimplexFractalNoise.ColumnNoise Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ColumnNoise(NewNormalizedSimplexFractalNoise, double, double[], double[], double, double) public ColumnNoise(NewNormalizedSimplexFractalNoise terrainNoise, double relativeYFrequency, double[] amplitudes, double[] thresholds, double noiseX, double noiseZ) Parameters terrainNoise NewNormalizedSimplexFractalNoise relativeYFrequency double amplitudes double[] thresholds double[] noiseX double noiseZ double Properties BoundMax public readonly double BoundMax { get; } Property Value double BoundMin public readonly double BoundMin { get; } Property Value double UncurvedBound public readonly double UncurvedBound { get; } Property Value double Methods Noise(double) public double Noise(double y) Parameters y double Returns double NoiseSign(double, double) public double NoiseSign(double y, double inverseCurvedThresholder) Parameters y double inverseCurvedThresholder double Returns double"
  },
  "api/Vintagestory.API.MathTools.NewNormalizedSimplexFractalNoise.html": {
    "href": "api/Vintagestory.API.MathTools.NewNormalizedSimplexFractalNoise.html",
    "title": "Class NewNormalizedSimplexFractalNoise | VintageStory API",
    "keywords": "Class NewNormalizedSimplexFractalNoise Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class NewNormalizedSimplexFractalNoise Inheritance object NewNormalizedSimplexFractalNoise Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors NewNormalizedSimplexFractalNoise(double[], double[], long) public NewNormalizedSimplexFractalNoise(double[] inputAmplitudes, double[] frequencies, long seed) Parameters inputAmplitudes double[] frequencies double[] seed long Fields frequencies public double[] frequencies Field Value double[] inputAmplitudes public double[] inputAmplitudes Field Value double[] octaveSeeds public long[] octaveSeeds Field Value long[] scaledAmplitudes2D public double[] scaledAmplitudes2D Field Value double[] scaledAmplitudes3D public double[] scaledAmplitudes3D Field Value double[] Methods ForColumn(double, double[], double[], double, double) public NewNormalizedSimplexFractalNoise.ColumnNoise ForColumn(double relativeYFrequency, double[] amplitudes, double[] thresholds, double noiseX, double noiseZ) Parameters relativeYFrequency double amplitudes double[] thresholds double[] noiseX double noiseZ double Returns NewNormalizedSimplexFractalNoise.ColumnNoise FromDefaultOctaves(int, double, double, long) Generates the octaves and frequencies using following formulas freq[i] = baseFrequency * 2^i amp[i] = persistence^i public static NewNormalizedSimplexFractalNoise FromDefaultOctaves(int quantityOctaves, double baseFrequency, double persistence, long seed) Parameters quantityOctaves int baseFrequency double persistence double seed long Returns NewNormalizedSimplexFractalNoise Noise(double, double, double, double[], double[]) public double Noise(double x, double y, double z, double[] amplitudes, double[] thresholds) Parameters x double y double z double amplitudes double[] thresholds double[] Returns double NoiseValueCurve(double) public static double NoiseValueCurve(double value) Parameters value double Returns double NoiseValueCurveInverse(double) public static double NoiseValueCurveInverse(double value) Parameters value double Returns double"
  },
  "api/Vintagestory.API.MathTools.NewSimplexNoiseLayer.html": {
    "href": "api/Vintagestory.API.MathTools.NewSimplexNoiseLayer.html",
    "title": "Class NewSimplexNoiseLayer | VintageStory API",
    "keywords": "Class NewSimplexNoiseLayer Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public static class NewSimplexNoiseLayer Inheritance object NewSimplexNoiseLayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxYSlope_ImprovedXZ public const double MaxYSlope_ImprovedXZ = 5 Field Value double OldToNewFrequency public const double OldToNewFrequency = 0.6123724356957945 Field Value double Methods Evaluate_FallbackOrientation(long, double, double, double) public static float Evaluate_FallbackOrientation(long seed, double x, double y, double z) Parameters seed long x double y double z double Returns float Evaluate_ImprovedXZ(long, double, double, double) public static float Evaluate_ImprovedXZ(long seed, double x, double y, double z) Parameters seed long x double y double z double Returns float"
  },
  "api/Vintagestory.API.MathTools.NormalRandom.html": {
    "href": "api/Vintagestory.API.MathTools.NormalRandom.html",
    "title": "Class NormalRandom | VintageStory API",
    "keywords": "Class NormalRandom Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class NormalRandom : Random, IRandom Inheritance object Random NormalRandom Implements IRandom Inherited Members Random.GetItems<T>(ReadOnlySpan<T>, int) Random.GetItems<T>(ReadOnlySpan<T>, Span<T>) Random.GetItems<T>(T[], int) Random.Next() Random.Next(int) Random.Next(int, int) Random.NextBytes(byte[]) Random.NextBytes(Span<byte>) Random.NextDouble() Random.NextInt64() Random.NextInt64(long) Random.NextInt64(long, long) Random.NextSingle() Random.Sample() Random.Shuffle<T>(Span<T>) Random.Shuffle<T>(T[]) Random.Shared object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors NormalRandom() public NormalRandom() NormalRandom(int) public NormalRandom(int Seed) Parameters Seed int Methods NextFloat() public float NextFloat() Returns float NextInt() public int NextInt() Returns int NextInt(int) Returns 0..max-1 public int NextInt(int max) Parameters max int Returns int"
  },
  "api/Vintagestory.API.MathTools.NormalizedSimplexNoise.ColumnNoise.html": {
    "href": "api/Vintagestory.API.MathTools.NormalizedSimplexNoise.ColumnNoise.html",
    "title": "Struct NormalizedSimplexNoise.ColumnNoise | VintageStory API",
    "keywords": "Struct NormalizedSimplexNoise.ColumnNoise Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public struct NormalizedSimplexNoise.ColumnNoise Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ColumnNoise(NormalizedSimplexNoise, double, double[], double[], double, double) public ColumnNoise(NormalizedSimplexNoise terrainNoise, double relativeYFrequency, double[] amplitudes, double[] thresholds, double noiseX, double noiseZ) Parameters terrainNoise NormalizedSimplexNoise relativeYFrequency double amplitudes double[] thresholds double[] noiseX double noiseZ double Properties BoundMax public readonly double BoundMax { get; } Property Value double BoundMin public readonly double BoundMin { get; } Property Value double UncurvedBound public readonly double UncurvedBound { get; } Property Value double Methods Noise(double) public double Noise(double y) Parameters y double Returns double NoiseSign(double, double) public double NoiseSign(double y, double inverseCurvedThresholder) Parameters y double inverseCurvedThresholder double Returns double"
  },
  "api/Vintagestory.API.MathTools.NormalizedSimplexNoise.html": {
    "href": "api/Vintagestory.API.MathTools.NormalizedSimplexNoise.html",
    "title": "Class NormalizedSimplexNoise | VintageStory API",
    "keywords": "Class NormalizedSimplexNoise Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll It's generally pretty hard to get a neatly normalized coherent noise function due to the way perlin/open simplex works (gauss curve) and how random numbers are generated. So instead of trying to find the perfect normalization factor and instead try to perform some approximate normalization this class allows a small overflow and brings it down very close to the [0, 1] range using tanh(). Returns values in a range of [0..1] Open in GitHub public class NormalizedSimplexNoise Inheritance object NormalizedSimplexNoise Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors NormalizedSimplexNoise(double[], double[], long) public NormalizedSimplexNoise(double[] inputAmplitudes, double[] frequencies, long seed) Parameters inputAmplitudes double[] frequencies double[] seed long Fields frequencies public double[] frequencies Field Value double[] inputAmplitudes public double[] inputAmplitudes Field Value double[] octaves public SimplexNoiseOctave[] octaves Field Value SimplexNoiseOctave[] scaledAmplitudes2D public double[] scaledAmplitudes2D Field Value double[] scaledAmplitudes3D public double[] scaledAmplitudes3D Field Value double[] Methods ForColumn(double, double[], double[], double, double) public NormalizedSimplexNoise.ColumnNoise ForColumn(double relativeYFrequency, double[] amplitudes, double[] thresholds, double noiseX, double noiseZ) Parameters relativeYFrequency double amplitudes double[] thresholds double[] noiseX double noiseZ double Returns NormalizedSimplexNoise.ColumnNoise FromDefaultOctaves(int, double, double, long) Generates the octaves and frequencies using following formulas freq[i] = baseFrequency * 2^i amp[i] = persistence^i public static NormalizedSimplexNoise FromDefaultOctaves(int quantityOctaves, double baseFrequency, double persistence, long seed) Parameters quantityOctaves int baseFrequency double persistence double seed long Returns NormalizedSimplexNoise Noise(double, double) 2d noise public virtual double Noise(double x, double y) Parameters x double y double Returns double Noise(double, double, double) 3d noise public virtual double Noise(double x, double y, double z) Parameters x double y double z double Returns double Noise(double, double, double, double[]) 3d Noise using custom amplitudes public virtual double Noise(double x, double y, double z, double[] amplitudes) Parameters x double y double z double amplitudes double[] Returns double Noise(double, double, double, double[], double[]) public double Noise(double x, double y, double z, double[] amplitudes, double[] thresholds) Parameters x double y double z double amplitudes double[] thresholds double[] Returns double Noise(double, double, double[]) public double Noise(double x, double y, double[] thresholds) Parameters x double y double thresholds double[] Returns double NoiseValueCurve(double) public static double NoiseValueCurve(double value) Parameters value double Returns double NoiseValueCurveInverse(double) public static double NoiseValueCurveInverse(double value) Parameters value double Returns double"
  },
  "api/Vintagestory.API.MathTools.PlotDelegate2D.html": {
    "href": "api/Vintagestory.API.MathTools.PlotDelegate2D.html",
    "title": "Delegate PlotDelegate2D | VintageStory API",
    "keywords": "Delegate PlotDelegate2D Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate void PlotDelegate2D(int x, int z) Parameters x int z int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.PlotDelegate3D.html": {
    "href": "api/Vintagestory.API.MathTools.PlotDelegate3D.html",
    "title": "Delegate PlotDelegate3D | VintageStory API",
    "keywords": "Delegate PlotDelegate3D Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate void PlotDelegate3D(int x, int y, int z) Parameters x int y int z int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.PlotDelegate3DBlockPos.html": {
    "href": "api/Vintagestory.API.MathTools.PlotDelegate3DBlockPos.html",
    "title": "Delegate PlotDelegate3DBlockPos | VintageStory API",
    "keywords": "Delegate PlotDelegate3DBlockPos Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate void PlotDelegate3DBlockPos(BlockPos pos) Parameters pos BlockPos Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.Quaterniond.html": {
    "href": "api/Vintagestory.API.MathTools.Quaterniond.html",
    "title": "Class Quaterniond | VintageStory API",
    "keywords": "Class Quaterniond Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Quaterniond Inheritance object Quaterniond Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Add(double[], double[], double[]) public static double[] Add(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] CalculateW(double[], double[]) public static double[] CalculateW(double[] output, double[] a) Parameters output double[] a double[] Returns double[] CloneIt(double[]) public static double[] CloneIt(double[] a) Parameters a double[] Returns double[] Conjugate(double[], double[]) public double[] Conjugate(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Copy(double[], double[]) public static double[] Copy(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Create() public static double[] Create() Returns double[] Dot(double[], double[]) public static double Dot(double[] a, double[] b) Parameters a double[] b double[] Returns double FromMat3(double[], double[]) public static double[] FromMat3(double[] output, double[] m) Parameters output double[] m double[] Returns double[] FromValues(double, double, double, double) public static double[] FromValues(double x, double y, double z, double w) Parameters x double y double z double w double Returns double[] Identity_(double[]) public static double[] Identity_(double[] output) Parameters output double[] Returns double[] Invert(double[], double[]) public double[] Invert(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Length_(double[]) public static double Length_(double[] a) Parameters a double[] Returns double Lerp(double[], double[], double[], double) public static double[] Lerp(double[] output, double[] a, double[] b, double t) Parameters output double[] a double[] b double[] t double Returns double[] Multiply(double[], double[], double[]) public static double[] Multiply(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Normalize(double[], double[]) public static double[] Normalize(double[] output, double[] a) Parameters output double[] a double[] Returns double[] RotateX(double[], double[], double) public static double[] RotateX(double[] output, double[] a, double rad) Parameters output double[] a double[] rad double Returns double[] RotateY(double[], double[], double) public static double[] RotateY(double[] output, double[] a, double rad) Parameters output double[] a double[] rad double Returns double[] RotateZ(double[], double[], double) public static double[] RotateZ(double[] output, double[] a, double rad) Parameters output double[] a double[] rad double Returns double[] RotationTo(double[], double[], double[]) public static double[] RotationTo(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Scale(double[], double[], double) public static double[] Scale(double[] output, double[] a, double b) Parameters output double[] a double[] b double Returns double[] Set(double[], double, double, double, double) public static double[] Set(double[] output, double x, double y, double z, double w) Parameters output double[] x double y double z double w double Returns double[] SetAxes(double[], double[], double[], double[]) public static double[] SetAxes(double[] output, double[] view, double[] right, double[] up) Parameters output double[] view double[] right double[] up double[] Returns double[] SetAxisAngle(double[], double[], double) public static double[] SetAxisAngle(double[] output, double[] axis, double rad) Parameters output double[] axis double[] rad double Returns double[] Slerp(double[], double[], double[], double) public static double[] Slerp(double[] output, double[] a, double[] b, double t) Parameters output double[] a double[] b double[] t double Returns double[] SquaredLength(double[]) public static double SquaredLength(double[] a) Parameters a double[] Returns double ToEulerAngles(double[]) public static float[] ToEulerAngles(double[] quat) Parameters quat double[] Returns float[]"
  },
  "api/Vintagestory.API.MathTools.Quaternionf.html": {
    "href": "api/Vintagestory.API.MathTools.Quaternionf.html",
    "title": "Class Quaternionf | VintageStory API",
    "keywords": "Class Quaternionf Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Quaternionf Inheritance object Quaternionf Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Add(float[], float[], float[]) public static float[] Add(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] CalculateW(float[], float[]) public static float[] CalculateW(float[] output, float[] a) Parameters output float[] a float[] Returns float[] CloneIt(float[]) public static float[] CloneIt(float[] a) Parameters a float[] Returns float[] Conjugate(float[], float[]) public float[] Conjugate(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Copy(float[], float[]) public static float[] Copy(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Create() public static float[] Create() Returns float[] Dot(float[], float[]) public static float Dot(float[] a, float[] b) Parameters a float[] b float[] Returns float FromMat3(float[], float[]) public static float[] FromMat3(float[] output, float[] m) Parameters output float[] m float[] Returns float[] FromValues(float, float, float, float) public static float[] FromValues(float x, float y, float z, float w) Parameters x float y float z float w float Returns float[] Identity_(float[]) public static float[] Identity_(float[] output) Parameters output float[] Returns float[] Invert(float[], float[]) public float[] Invert(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Len(float[]) public static float Len(float[] a) Parameters a float[] Returns float Length_(float[]) public static float Length_(float[] a) Parameters a float[] Returns float Lerp(float[], float[], float[], float) public static float[] Lerp(float[] output, float[] a, float[] b, float t) Parameters output float[] a float[] b float[] t float Returns float[] Mul(float[], float[], float[]) public static float[] Mul(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Multiply(float[], float[], float[]) public static float[] Multiply(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Normalize(float[], float[]) public static float[] Normalize(float[] output, float[] a) Parameters output float[] a float[] Returns float[] RotateX(float[], float[], float) public static float[] RotateX(float[] output, float[] a, float rad) Parameters output float[] a float[] rad float Returns float[] RotateY(float[], float[], float) public static float[] RotateY(float[] output, float[] a, float rad) Parameters output float[] a float[] rad float Returns float[] RotateZ(float[], float[], float) public static float[] RotateZ(float[] output, float[] a, float rad) Parameters output float[] a float[] rad float Returns float[] RotationTo(float[], float[], float[]) public static float[] RotationTo(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Scale(float[], float[], float) public static float[] Scale(float[] output, float[] a, float b) Parameters output float[] a float[] b float Returns float[] Set(float[], float, float, float, float) public static float[] Set(float[] output, float x, float y, float z, float w) Parameters output float[] x float y float z float w float Returns float[] SetAxes(float[], float[], float[], float[]) public static float[] SetAxes(float[] output, float[] view, float[] right, float[] up) Parameters output float[] view float[] right float[] up float[] Returns float[] SetAxisAngle(float[], float[], float) public static float[] SetAxisAngle(float[] output, float[] axis, float rad) Parameters output float[] axis float[] rad float Returns float[] Slerp(float[], float[], float[], float) public static float[] Slerp(float[] output, float[] a, float[] b, float t) Parameters output float[] a float[] b float[] t float Returns float[] SqrLen(float[]) public static float SqrLen(float[] a) Parameters a float[] Returns float SquaredLength(float[]) public static float SquaredLength(float[] a) Parameters a float[] Returns float ToEulerAngles(float[]) public static float[] ToEulerAngles(float[] quat) Parameters quat float[] Returns float[]"
  },
  "api/Vintagestory.API.MathTools.Ray.html": {
    "href": "api/Vintagestory.API.MathTools.Ray.html",
    "title": "Class Ray | VintageStory API",
    "keywords": "Class Ray Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Ray Inheritance object Ray Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Ray() public Ray() Ray(Vec3d, Vec3d) public Ray(Vec3d o, Vec3d d) Parameters o Vec3d d Vec3d Fields dir public Vec3d dir Field Value Vec3d origin public Vec3d origin Field Value Vec3d Properties Length public double Length { get; } Property Value double Methods FromAngles(Vec3d, float, float, float) public static Ray FromAngles(Vec3d pos, float pitch, float yaw, float pickingRange) Parameters pos Vec3d pitch float yaw float pickingRange float Returns Ray FromPositions(Vec3d, Vec3d) public static Ray FromPositions(Vec3d fromPos, Vec3d toPos) Parameters fromPos Vec3d toPos Vec3d Returns Ray LimitToWalls(int, int, int, int, int, int) public void LimitToWalls(int minx, int miny, int minz, int maxx, int maxy, int maxz) Parameters minx int miny int minz int maxx int maxy int maxz int"
  },
  "api/Vintagestory.API.MathTools.Rectanglei.html": {
    "href": "api/Vintagestory.API.MathTools.Rectanglei.html",
    "title": "Struct Rectanglei | VintageStory API",
    "keywords": "Struct Rectanglei Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public struct Rectanglei Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Rectanglei(int, int, int, int) public Rectanglei(int X, int Y, int width, int height) Parameters X int Y int width int height int Properties X1 Same as X public int X1 { get; } Property Value int X2 Same as X + Width public int X2 { get; } Property Value int Y1 Same as Y public int Y1 { get; } Property Value int Y2 Same as Y + Height public int Y2 { get; } Property Value int Methods Bottom() public int Bottom() Returns int Clone() [Obsolete(\"Rectanglei is a struct and there is no point cloning a struct\")] public Rectanglei Clone() Returns Rectanglei Contains(int, int) Returns if the given point is inside the cuboid public bool Contains(int x, int y) Parameters x int y int Returns bool Contains(Vec2i) Returns if the given point is inside the cuboid public bool Contains(Vec2i pos) Parameters pos Vec2i Returns bool GrowBy(int) public Rectanglei GrowBy(int size) Parameters size int Returns Rectanglei Intersects(Rectanglei) If the given cuboid intersects with this cubiod public bool Intersects(Rectanglei with) Parameters with Rectanglei Returns bool IntersectsOrTouches(int, int, int, int) public bool IntersectsOrTouches(int withX1, int withY1, int withX2, int withY2) Parameters withX1 int withY1 int withX2 int withY2 int Returns bool IntersectsOrTouches(Rectanglei) If the given cuboid intersects with or is adjacent to this cubiod public bool IntersectsOrTouches(Rectanglei with) Parameters with Rectanglei Returns bool PointInside(int, int) public bool PointInside(int x, int y) Parameters x int y int Returns bool PointInside(Vec2i) public bool PointInside(Vec2i pos) Parameters pos Vec2i Returns bool"
  },
  "api/Vintagestory.API.MathTools.ShapeUtil.html": {
    "href": "api/Vintagestory.API.MathTools.ShapeUtil.html",
    "title": "Class ShapeUtil | VintageStory API",
    "keywords": "Class ShapeUtil Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public static class ShapeUtil Inheritance object ShapeUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields MaxShells public static int MaxShells Field Value int Methods GenCubicShellVectors(int) public static Vec3i[] GenCubicShellVectors(int r) Parameters r int Returns Vec3i[] GetCachedCubicShellNormalizedVectors(int) public static Vec3f[] GetCachedCubicShellNormalizedVectors(int radius) Parameters radius int Returns Vec3f[] GetHollowSquarePoints(int) Returns a square outline of given radius (only for odd lengths) public static Vec2i[] GetHollowSquarePoints(int halflength) Parameters halflength int Returns Vec2i[] GetOctagonPoints(int, int, int) public static Vec2i[] GetOctagonPoints(int x, int y, int r) Parameters x int y int r int Returns Vec2i[] GetPointsOfCircle(int, int, int) public static Vec2i[] GetPointsOfCircle(int xm, int ym, int r) Parameters xm int ym int r int Returns Vec2i[] GetSquarePointsSortedByMDist(int) Returns an array of vectors for each point in a square, sorted by manhatten distance to center, exluding the center point public static Vec2i[] GetSquarePointsSortedByMDist(int halflength) Parameters halflength int Returns Vec2i[] LoadOctagonIndices(ICollection<long>, int, int, int, int) public static void LoadOctagonIndices(ICollection<long> list, int x, int y, int r, int mapSizeX) Parameters list ICollection<long> x int y int r int mapSizeX int"
  },
  "api/Vintagestory.API.MathTools.SimplexNoise.html": {
    "href": "api/Vintagestory.API.MathTools.SimplexNoise.html",
    "title": "Class SimplexNoise | VintageStory API",
    "keywords": "Class SimplexNoise Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll OpenSimplex noise of supplied amplitude and frequency. Open in GitHub public class SimplexNoise Inheritance object SimplexNoise Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SimplexNoise(double[], double[], long) public SimplexNoise(double[] amplitudes, double[] frequencies, long seed) Parameters amplitudes double[] frequencies double[] seed long Fields amplitudes public double[] amplitudes Field Value double[] frequencies public double[] frequencies Field Value double[] octaves public SimplexNoiseOctave[] octaves Field Value SimplexNoiseOctave[] Methods AbsNoise(double, double, double) public virtual double AbsNoise(double x, double y, double z) Parameters x double y double z double Returns double Clone() public SimplexNoise Clone() Returns SimplexNoise FromDefaultOctaves(int, double, double, long) Generates the octaves and frequencies using following formulas freq[i] = baseFrequency * 2^i amp[i] = persistence^i public static SimplexNoise FromDefaultOctaves(int quantityOctaves, double baseFrequency, double persistence, long seed) Parameters quantityOctaves int baseFrequency double persistence double seed long Returns SimplexNoise Noise(double, double) public virtual double Noise(double x, double y) Parameters x double y double Returns double Noise(double, double, double) public virtual double Noise(double x, double y, double z) Parameters x double y double z double Returns double Noise(double, double, double[]) public double Noise(double x, double y, double[] thresholds) Parameters x double y double thresholds double[] Returns double NoiseFairWarpVector(SimplexNoise, SimplexNoise, double, double, out double, out double) public static void NoiseFairWarpVector(SimplexNoise originalWarpX, SimplexNoise originalWarpY, double x, double y, out double distX, out double distY) Parameters originalWarpX SimplexNoise originalWarpY SimplexNoise x double y double distX double distY double NoiseWithThreshold(double, double, double) public double NoiseWithThreshold(double x, double y, double threshold) Parameters x double y double threshold double Returns double"
  },
  "api/Vintagestory.API.MathTools.SimplexNoiseOctave.html": {
    "href": "api/Vintagestory.API.MathTools.SimplexNoiseOctave.html",
    "title": "Class SimplexNoiseOctave | VintageStory API",
    "keywords": "Class SimplexNoiseOctave Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll OpenSimplex Noise in C# Ported from https://gist.github.com/KdotJPG/b1270127455a94ac5d19 by KdotJPG and heavily refactored to improve performance. Open in GitHub public class SimplexNoiseOctave Inheritance object SimplexNoiseOctave Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors SimplexNoiseOctave() public SimplexNoiseOctave() SimplexNoiseOctave(long) public SimplexNoiseOctave(long seed) Parameters seed long Fields MAX_VALUE_2D public const double MAX_VALUE_2D = 0.8659203889141831 Field Value double MAX_VALUE_2D_WARP public const double MAX_VALUE_2D_WARP = 1.4142135623730951 Field Value double MAX_VALUE_3D public const double MAX_VALUE_3D = 0.9871465422297019 Field Value double MAX_VALUE_4D public const double MAX_VALUE_4D = 1.0342209323751448 Field Value double Methods Evaluate(double, double) public double Evaluate(double x, double y) Parameters x double y double Returns double Evaluate(double, double, double) public double Evaluate(double x, double y, double z) Parameters x double y double z double Returns double Evaluate(double, double, double, double) public double Evaluate(double x, double y, double z, double w) Parameters x double y double z double w double Returns double EvaluateFairWarpVector(SimplexNoiseOctave, SimplexNoiseOctave, double, double, out double, out double) public static void EvaluateFairWarpVector(SimplexNoiseOctave originalWarpX, SimplexNoiseOctave originalWarpZ, double x, double y, out double distX, out double distY) Parameters originalWarpX SimplexNoiseOctave originalWarpZ SimplexNoiseOctave x double y double distX double distY double"
  },
  "api/Vintagestory.API.MathTools.Size2d.html": {
    "href": "api/Vintagestory.API.MathTools.Size2d.html",
    "title": "Class Size2d | VintageStory API",
    "keywords": "Class Size2d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub public class Size2d Inheritance object Size2d Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Size2d() public Size2d() Size2d(double, double) public Size2d(double width, double height) Parameters width double height double Fields Height public double Height Field Value double Width public double Width Field Value double Methods Clone() public Size2d Clone() Returns Size2d"
  },
  "api/Vintagestory.API.MathTools.Size2f.html": {
    "href": "api/Vintagestory.API.MathTools.Size2f.html",
    "title": "Class Size2f | VintageStory API",
    "keywords": "Class Size2f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub public class Size2f Inheritance object Size2f Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Size2f() public Size2f() Size2f(float, float) public Size2f(float width, float height) Parameters width float height float Fields Height public float Height Field Value float Width public float Width Field Value float Methods Clone() public Size2f Clone() Returns Size2f"
  },
  "api/Vintagestory.API.MathTools.Size2i.html": {
    "href": "api/Vintagestory.API.MathTools.Size2i.html",
    "title": "Class Size2i | VintageStory API",
    "keywords": "Class Size2i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub public class Size2i Inheritance object Size2i Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Size2i() public Size2i() Size2i(int, int) public Size2i(int width, int height) Parameters width int height int Fields Height public int Height Field Value int Width public int Width Field Value int Methods Clone() public Size2i Clone() Returns Size2i"
  },
  "api/Vintagestory.API.MathTools.Size3d.html": {
    "href": "api/Vintagestory.API.MathTools.Size3d.html",
    "title": "Class Size3d | VintageStory API",
    "keywords": "Class Size3d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub public class Size3d Inheritance object Size3d Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Size3d() public Size3d() Size3d(double, double, double) public Size3d(double width, double height, double length) Parameters width double height double length double Fields Height public double Height Field Value double Length public double Length Field Value double Width public double Width Field Value double Methods CanContain(Size3d) public bool CanContain(Size3d obj) Parameters obj Size3d Returns bool Clone() public Size3d Clone() Returns Size3d"
  },
  "api/Vintagestory.API.MathTools.Size3f.html": {
    "href": "api/Vintagestory.API.MathTools.Size3f.html",
    "title": "Class Size3f | VintageStory API",
    "keywords": "Class Size3f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub [DocumentAsJson] public class Size3f Inheritance object Size3f Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Size3f() public Size3f() Size3f(float, float, float) public Size3f(float width, float height, float length) Parameters width float height float length float Fields Height The Y-dimension for this size. [DocumentAsJson] public float Height Field Value float Length The Z-dimension for this size. [DocumentAsJson] public float Length Field Value float Width The X-dimension of this size. [DocumentAsJson] public float Width Field Value float Methods CanContain(Size3f) public bool CanContain(Size3f obj) Parameters obj Size3f Returns bool Clone() public Size3f Clone() Returns Size3f"
  },
  "api/Vintagestory.API.MathTools.Size3i.html": {
    "href": "api/Vintagestory.API.MathTools.Size3i.html",
    "title": "Class Size3i | VintageStory API",
    "keywords": "Class Size3i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 integers. Go bug Tyron of you need more utility methods in this class. Open in GitHub public class Size3i Inheritance object Size3i Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Size3i() public Size3i() Size3i(int, int, int) public Size3i(int width, int height, int length) Parameters width int height int length int Fields Height public int Height Field Value int Length public int Length Field Value int Width public int Width Field Value int Methods CanContain(Size3i) public bool CanContain(Size3i obj) Parameters obj Size3i Returns bool Clone() public Size3i Clone() Returns Size3i"
  },
  "api/Vintagestory.API.MathTools.SkColorFix.html": {
    "href": "api/Vintagestory.API.MathTools.SkColorFix.html",
    "title": "Class SkColorFix | VintageStory API",
    "keywords": "Class SkColorFix Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public static class SkColorFix Inheritance object SkColorFix Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToInt(SKColor) public static int ToInt(this SKColor skcolor) Parameters skcolor SKColor Returns int"
  },
  "api/Vintagestory.API.MathTools.Sphere.html": {
    "href": "api/Vintagestory.API.MathTools.Sphere.html",
    "title": "Struct Sphere | VintageStory API",
    "keywords": "Struct Sphere Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Not really a sphere, actually now an AABB centred on x,y,z, but we keep the name for API consistency public struct Sphere Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Sphere(float, float, float, float, float, float) public Sphere(float x1, float y1, float z1, float dx, float dy, float dz) Parameters x1 float y1 float z1 float dx float dy float dz float Fields radius public float radius Field Value float radiusY public float radiusY Field Value float radiusZ public float radiusZ Field Value float sqrt3half public const float sqrt3half = 0.8660254 Field Value float x public float x Field Value float y public float y Field Value float z public float z Field Value float Methods BoundingSphereForCube(float, float, float, float) public static Sphere BoundingSphereForCube(float x, float y, float z, float size) Parameters x float y float z float size float Returns Sphere"
  },
  "api/Vintagestory.API.MathTools.ThreeBytes.html": {
    "href": "api/Vintagestory.API.MathTools.ThreeBytes.html",
    "title": "Struct ThreeBytes | VintageStory API",
    "keywords": "Struct ThreeBytes Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll For performance, intended to compile equivalently to a byte[3], but more RAM efficient and more GC efficient public struct ThreeBytes Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ThreeBytes(byte[]) public ThreeBytes(byte[] a) Parameters a byte[] ThreeBytes(int) public ThreeBytes(int a) Parameters a int Properties this[int] public byte this[int i] { get; set; } Parameters i int Property Value byte Methods Clone() public ThreeBytes Clone() Returns ThreeBytes Operators implicit operator ThreeBytes(byte[]) public static implicit operator ThreeBytes(byte[] a) Parameters a byte[] Returns ThreeBytes implicit operator byte[](ThreeBytes) public static implicit operator byte[](ThreeBytes a) Parameters a ThreeBytes Returns byte[]"
  },
  "api/Vintagestory.API.MathTools.TransformFunction.html": {
    "href": "api/Vintagestory.API.MathTools.TransformFunction.html",
    "title": "Delegate TransformFunction | VintageStory API",
    "keywords": "Delegate TransformFunction Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public delegate float TransformFunction(float firstvalue, float factor, float sequence) Parameters firstvalue float factor float sequence float Returns float Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.MathTools.VSColor.html": {
    "href": "api/Vintagestory.API.MathTools.VSColor.html",
    "title": "Struct VSColor | VintageStory API",
    "keywords": "Struct VSColor Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public struct VSColor Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors VSColor(byte, byte, byte, byte) public VSColor(byte r, byte g, byte b, byte a) Parameters r byte g byte b byte a byte VSColor(int) public VSColor(int color) Parameters color int Fields A public byte A Field Value byte AsInt public int AsInt Field Value int B public byte B Field Value byte G public byte G Field Value byte R public byte R Field Value byte Properties An public float An { get; set; } Property Value float Bn public float Bn { get; set; } Property Value float Gn public float Gn { get; set; } Property Value float Rn public float Rn { get; set; } Property Value float"
  },
  "api/Vintagestory.API.MathTools.Vec2d.html": {
    "href": "api/Vintagestory.API.MathTools.Vec2d.html",
    "title": "Class Vec2d | VintageStory API",
    "keywords": "Class Vec2d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub public class Vec2d Inheritance object Vec2d Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec2d() public Vec2d() Vec2d(double, double) public Vec2d(double x, double y) Parameters x double y double Fields X public double X Field Value double Y public double Y Field Value double Methods DistanceTo(double, double) public double DistanceTo(double targetX, double targetY) Parameters targetX double targetY double Returns double DistanceTo(Vec2d) public double DistanceTo(Vec2d pos) Parameters pos Vec2d Returns double Dot(double, double) public double Dot(double x, double y) Parameters x double y double Returns double Dot(Vec2d) public double Dot(Vec2d a) Parameters a Vec2d Returns double Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Length() public double Length() Returns double LengthSq() public double LengthSq() Returns double Normalize() public Vec2d Normalize() Returns Vec2d Set(double, double) public Vec2d Set(double x, double z) Parameters x double z double Returns Vec2d Operators operator +(Vec2d, float) public static Vec2d operator +(Vec2d left, float right) Parameters left Vec2d right float Returns Vec2d operator +(Vec2d, Vec2d) public static Vec2d operator +(Vec2d left, Vec2d right) Parameters left Vec2d right Vec2d Returns Vec2d operator +(Vec2d, Vec2i) public static Vec2d operator +(Vec2d left, Vec2i right) Parameters left Vec2d right Vec2i Returns Vec2d operator /(Vec2d, float) public static Vec2d operator /(Vec2d left, float right) Parameters left Vec2d right float Returns Vec2d operator ==(Vec2d, Vec2d) public static bool operator ==(Vec2d left, Vec2d right) Parameters left Vec2d right Vec2d Returns bool operator !=(Vec2d, Vec2d) public static bool operator !=(Vec2d left, Vec2d right) Parameters left Vec2d right Vec2d Returns bool operator *(double, Vec2d) public static Vec2d operator *(double left, Vec2d right) Parameters left double right Vec2d Returns Vec2d operator *(float, Vec2d) public static Vec2d operator *(float left, Vec2d right) Parameters left float right Vec2d Returns Vec2d operator *(Vec2d, double) public static Vec2d operator *(Vec2d left, double right) Parameters left Vec2d right double Returns Vec2d operator *(Vec2d, float) public static Vec2d operator *(Vec2d left, float right) Parameters left Vec2d right float Returns Vec2d operator *(Vec2d, Vec2d) public static double operator *(Vec2d left, Vec2d right) Parameters left Vec2d right Vec2d Returns double operator -(float, Vec2d) public static Vec2d operator -(float left, Vec2d right) Parameters left float right Vec2d Returns Vec2d operator -(Vec2d, float) public static Vec2d operator -(Vec2d left, float right) Parameters left Vec2d right float Returns Vec2d operator -(Vec2d, Vec2d) public static Vec2d operator -(Vec2d left, Vec2d right) Parameters left Vec2d right Vec2d Returns Vec2d"
  },
  "api/Vintagestory.API.MathTools.Vec2f.html": {
    "href": "api/Vintagestory.API.MathTools.Vec2f.html",
    "title": "Class Vec2f | VintageStory API",
    "keywords": "Class Vec2f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub [DocumentAsJson] [JsonObject(MemberSerialization.OptIn)] [ProtoContract] public class Vec2f Inheritance object Vec2f Derived AngleConstraint Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec2f() public Vec2f() Vec2f(float, float) public Vec2f(float x, float y) Parameters x float y float Vec2f(Size2i) public Vec2f(Size2i size) Parameters size Size2i Fields X The X element of the vector. [DocumentAsJson] [JsonProperty] [ProtoMember(1)] public float X Field Value float Y The Y element of the vector. [DocumentAsJson] [JsonProperty] [ProtoMember(2)] public float Y Field Value float Zero public static readonly Vec2f Zero Field Value Vec2f Properties A public float A { get; } Property Value float B public float B { get; } Property Value float Methods Clone() public Vec2f Clone() Returns Vec2f Distance(float, float, float, float) public static float Distance(float x1, float y1, float x2, float y2) Parameters x1 float y1 float x2 float y2 float Returns float DistanceTo(float, float) public float DistanceTo(float x, float y) Parameters x float y float Returns float Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Length() public float Length() Returns float ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator +(Vec2f, float) public static Vec2f operator +(Vec2f left, float right) Parameters left Vec2f right float Returns Vec2f operator +(Vec2f, Vec2f) public static Vec2f operator +(Vec2f left, Vec2f right) Parameters left Vec2f right Vec2f Returns Vec2f operator +(Vec2f, Vec2i) public static Vec2f operator +(Vec2f left, Vec2i right) Parameters left Vec2f right Vec2i Returns Vec2f operator /(Vec2f, float) public static Vec2f operator /(Vec2f left, float right) Parameters left Vec2f right float Returns Vec2f operator ==(Vec2f, Vec2f) public static bool operator ==(Vec2f left, Vec2f right) Parameters left Vec2f right Vec2f Returns bool operator !=(Vec2f, Vec2f) public static bool operator !=(Vec2f left, Vec2f right) Parameters left Vec2f right Vec2f Returns bool operator *(double, Vec2f) public static Vec2f operator *(double left, Vec2f right) Parameters left double right Vec2f Returns Vec2f operator *(float, Vec2f) public static Vec2f operator *(float left, Vec2f right) Parameters left float right Vec2f Returns Vec2f operator *(Vec2f, double) public static Vec2f operator *(Vec2f left, double right) Parameters left Vec2f right double Returns Vec2f operator *(Vec2f, float) public static Vec2f operator *(Vec2f left, float right) Parameters left Vec2f right float Returns Vec2f operator *(Vec2f, Vec2f) public static double operator *(Vec2f left, Vec2f right) Parameters left Vec2f right Vec2f Returns double operator -(float, Vec2f) public static Vec2f operator -(float left, Vec2f right) Parameters left float right Vec2f Returns Vec2f operator -(Vec2f, float) public static Vec2f operator -(Vec2f left, float right) Parameters left Vec2f right float Returns Vec2f operator -(Vec2f, Vec2f) public static Vec2f operator -(Vec2f left, Vec2f right) Parameters left Vec2f right Vec2f Returns Vec2f"
  },
  "api/Vintagestory.API.MathTools.Vec2i.html": {
    "href": "api/Vintagestory.API.MathTools.Vec2i.html",
    "title": "Class Vec2i | VintageStory API",
    "keywords": "Class Vec2i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 2 ints. Go bug Tyron if you need more utility methods in this class. Open in GitHub [ProtoContract] public class Vec2i : IEquatable<Vec2i> Inheritance object Vec2i Implements IEquatable<Vec2i> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec2i() public Vec2i() Vec2i(int, int) public Vec2i(int x, int y) Parameters x int y int Vec2i(Vec3d) public Vec2i(Vec3d pos) Parameters pos Vec3d Fields X [ProtoMember(1)] public int X Field Value int Y [ProtoMember(2)] public int Y Field Value int Properties this[int] public int this[int index] { get; set; } Parameters index int Property Value int Zero public static Vec2i Zero { get; } Property Value Vec2i Methods Add(int, int) public Vec2i Add(int dx, int dy) Parameters dx int dy int Returns Vec2i Copy() public Vec2i Copy() Returns Vec2i Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Vec2i) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec2i other) Parameters other Vec2i An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ManhattenDistance(int, int) public int ManhattenDistance(int x, int y) Parameters x int y int Returns int ManhattenDistance(Vec2i) public int ManhattenDistance(Vec2i point) Parameters point Vec2i Returns int Set(int, int) public Vec2i Set(int x, int y) Parameters x int y int Returns Vec2i Set(Vec2i) public Vec2i Set(Vec2i vec) Parameters vec Vec2i Returns Vec2i ToChunkIndex() 27 lowest bits for X Coordinate, then 27 bits for Z coordinate public ulong ToChunkIndex() Returns ulong ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator +(Vec2i, int) public static Vec2i operator +(Vec2i left, int right) Parameters left Vec2i right int Returns Vec2i operator +(Vec2i, Vec2i) public static Vec2i operator +(Vec2i left, Vec2i right) Parameters left Vec2i right Vec2i Returns Vec2i operator /(Vec2i, int) public static Vec2i operator /(Vec2i left, int right) Parameters left Vec2i right int Returns Vec2i operator /(Vec2i, float) public static Vec2i operator /(Vec2i left, float right) Parameters left Vec2i right float Returns Vec2i operator ==(Vec2i, Vec2i) public static bool operator ==(Vec2i left, Vec2i right) Parameters left Vec2i right Vec2i Returns bool operator !=(Vec2i, Vec2i) public static bool operator !=(Vec2i left, Vec2i right) Parameters left Vec2i right Vec2i Returns bool operator *(double, Vec2i) public static Vec2i operator *(double left, Vec2i right) Parameters left double right Vec2i Returns Vec2i operator *(int, Vec2i) public static Vec2i operator *(int left, Vec2i right) Parameters left int right Vec2i Returns Vec2i operator *(Vec2i, double) public static Vec2i operator *(Vec2i left, double right) Parameters left Vec2i right double Returns Vec2i operator *(Vec2i, int) public static Vec2i operator *(Vec2i left, int right) Parameters left Vec2i right int Returns Vec2i operator *(Vec2i, Vec2i) public static double operator *(Vec2i left, Vec2i right) Parameters left Vec2i right Vec2i Returns double operator -(int, Vec2i) public static Vec2i operator -(int left, Vec2i right) Parameters left int right Vec2i Returns Vec2i operator -(Vec2i, int) public static Vec2i operator -(Vec2i left, int right) Parameters left Vec2i right int Returns Vec2i operator -(Vec2i, Vec2i) public static Vec2i operator -(Vec2i left, Vec2i right) Parameters left Vec2i right Vec2i Returns Vec2i"
  },
  "api/Vintagestory.API.MathTools.Vec3Utilsd.html": {
    "href": "api/Vintagestory.API.MathTools.Vec3Utilsd.html",
    "title": "Class Vec3Utilsd | VintageStory API",
    "keywords": "Class Vec3Utilsd Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Don't use this class unless you need it to interoperate with Mat4d Open in GitHub public class Vec3Utilsd Inheritance object Vec3Utilsd Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Add(double[], double[], double[]) Adds two vec3's. returns {vec3} out public static double[] Add(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] CloneIt(double[]) Creates a new vec3 initialized with values from an existing vector. Returns {vec3} a new 3D vector public static double[] CloneIt(double[] a) Parameters a double[] vector to clone Returns double[] Copy(double[], double[]) Copy the values from one vec3 to another. Returns {vec3} out public static double[] Copy(double[] output, double[] a) Parameters output double[] the receiving vector a double[] the source vector Returns double[] Create() public static double[] Create() Returns double[] Cross(double[], double[], double[]) Computes the cross product of two vec3's public static double[] Cross(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Distance(double[], double[]) Calculates the euclidian distance between two vec3's. Returns {Number} distance between a and b public static double Distance(double[] a, double[] b) Parameters a double[] b double[] Returns double Divide(double[], double[], double[]) Divides two vec3's public static double[] Divide(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Dot(double[], double[]) Calculates the dot product of two vec3's. Returns {Number} dot product of a and b public static double Dot(double[] a, double[] b) Parameters a double[] b double[] Returns double FromValues(double, double, double) Creates a new vec3 initialized with the given values. Returns {vec3} a new 3D vector public static double[] FromValues(double x, double y, double z) Parameters x double y double z double Returns double[] Length_(double[]) Calculates the length of a vec3 public static double Length_(double[] a) Parameters a double[] Returns double Lerp(double[], double[], double[], double) Performs a linear interpolation between two vec3's public static double[] Lerp(double[] output, double[] a, double[] b, double t) Parameters output double[] a double[] b double[] t double Returns double[] Max(double[], double[], double[]) Returns the maximum of two vec3's public static double[] Max(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Min(double[], double[], double[]) Returns the minimum of two vec3's public static double[] Min(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Multiply(double[], double[], double[]) Multiplies two vec3's public static double[] Multiply(double[] output, double[] a, double[] b) Parameters output double[] a double[] b double[] Returns double[] Negate(double[], double[]) Negates the components of a vec3 public static double[] Negate(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Normalize(double[], double[]) Normalize a vec3 public static double[] Normalize(double[] output, double[] a) Parameters output double[] a double[] Returns double[] Scale(double[], double[], double) Scales a vec3 by a scalar number public static double[] Scale(double[] output, double[] a, double b) Parameters output double[] a double[] b double Returns double[] ScaleAndAdd(double[], double[], double[], double) Adds two vec3's after scaling the second operand by a scalar value public static double[] ScaleAndAdd(double[] output, double[] a, double[] b, double scale) Parameters output double[] a double[] b double[] scale double Returns double[] Set(double[], double, double, double) Set the components of a vec3 to the given values. Returns {vec3} out public static double[] Set(double[] output, double x, double y, double z) Parameters output double[] the receiving vector x double y double z double Returns double[] SqrLen(double[]) SquaredLength() public static double SqrLen(double[] a) Parameters a double[] Returns double SquaredDistance(double[], double[]) Calculates the squared euclidian distance between two vec3's. Returns {Number} squared distance between a and b public static double SquaredDistance(double[] a, double[] b) Parameters a double[] b double[] Returns double SquaredLength(double[]) Calculates the squared length of a vec3. Returns {Number} squared length of a public static double SquaredLength(double[] a) Parameters a double[] Returns double Substract(double[], double[], double[]) Subtracts vector b from vector a. Returns {vec3} out public static double[] Substract(double[] output, double[] a, double[] b) Parameters output double[] a double[] the first operand b double[] the second operand Returns double[] TransformMat3(double[], double[], double[]) Transforms the vec3 with a mat3. public static double[] TransformMat3(double[] output, double[] a, double[] m) Parameters output double[] a double[] the vector to transform m double[] the 3x3 matrix to transform with Returns double[] TransformMat4(double[], double[], double[]) Transforms the vec3 with a mat4. 4th vector component is implicitly '1' public static double[] TransformMat4(double[] output, double[] a, double[] m) Parameters output double[] a double[] m double[] Returns double[] TransformQuat(double[], double[], double[]) Transforms the vec3 with a quat public static double[] TransformQuat(double[] output, double[] a, double[] q) Parameters output double[] a double[] q double[] Returns double[]"
  },
  "api/Vintagestory.API.MathTools.Vec3Utilsf.html": {
    "href": "api/Vintagestory.API.MathTools.Vec3Utilsf.html",
    "title": "Class Vec3Utilsf | VintageStory API",
    "keywords": "Class Vec3Utilsf Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Don't use this class unless you need it to interoperate with Mat4d Open in GitHub public class Vec3Utilsf Inheritance object Vec3Utilsf Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Add(float[], float[], float[]) Adds two vec3's public static float[] Add(float[] output, float[] a, float[] b) Parameters output float[] the receiving vector a float[] the first operand b float[] the second operand Returns float[] CloneIt(float[]) Creates a new vec3 initialized with values from an existing vector. Returns {vec3} a new 3D vector public static float[] CloneIt(float[] a) Parameters a float[] Returns float[] Copy(float[], float[]) Copy the values from one vec3 to another. Returns {vec3} out public static float[] Copy(float[] output, float[] a) Parameters output float[] the receiving vector a float[] the source vector Returns float[] Create() public static float[] Create() Returns float[] Cross(float[], float[], float[]) Computes the cross product of two vec3's. Returns {vec3} out public static float[] Cross(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Distance(float[], float[]) Calculates the euclidian distance between two vec3's. Returns {Number} distance between a and b public static float Distance(float[] a, float[] b) Parameters a float[] b float[] Returns float Divide(float[], float[], float[]) Divides two vec3's public static float[] Divide(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Dot(float[], float[]) Calculates the dot product of two vec3's. Returns {Number} dot product of a and b public static float Dot(float[] a, float[] b) Parameters a float[] b float[] Returns float FromValues(float, float, float) Creates a new vec3 initialized with the given values. Returns {vec3} a new 3D vector public static float[] FromValues(float x, float y, float z) Parameters x float y float z float Returns float[] Length_(float[]) Calculates the length of a vec3 public static float Length_(float[] a) Parameters a float[] Returns float Lerp(float[], float[], float[], float) Performs a linear interpolation between two vec3's public static float[] Lerp(float[] output, float[] a, float[] b, float t) Parameters output float[] a float[] b float[] t float Returns float[] Max(float[], float[], float[]) Returns the maximum of two vec3's public static float[] Max(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Min(float[], float[], float[]) Returns the minimum of two vec3's public static float[] Min(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Mul(float[], float[], float[]) Alias of Mul() public static float[] Mul(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Multiply(float[], float[], float[]) Multiplies two vec3's public static float[] Multiply(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] Negate(float[], float[]) Negates the components of a vec3 public static float[] Negate(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Normalize(float[], float[]) Normalize a vec3 public static float[] Normalize(float[] output, float[] a) Parameters output float[] a float[] Returns float[] Scale(float[], float[], float) Scales a vec3 by a scalar number public static float[] Scale(float[] output, float[] a, float b) Parameters output float[] a float[] b float Returns float[] ScaleAndAdd(float[], float[], float[], float) Adds two vec3's after scaling the second operand by a scalar value public static float[] ScaleAndAdd(float[] output, float[] a, float[] b, float scale) Parameters output float[] a float[] b float[] scale float Returns float[] Set(float[], float, float, float) Set the components of a vec3 to the given values public static float[] Set(float[] output, float x, float y, float z) Parameters output float[] x float y float z float Returns float[] SquaredDistance(float[], float[]) Calculates the squared euclidian distance between two vec3's. Returns {Number} squared distance between a and b public static float SquaredDistance(float[] a, float[] b) Parameters a float[] b float[] Returns float SquaredLength(float[]) Calculates the squared length of a vec3. Returns {Number} squared length of a public static float SquaredLength(float[] a) Parameters a float[] Returns float Substract(float[], float[], float[]) Subtracts vector b from vector a public static float[] Substract(float[] output, float[] a, float[] b) Parameters output float[] a float[] b float[] Returns float[] TransformMat3(float[], float[], float[]) Transforms the vec3 with a mat3. Returns {vec3} out public static float[] TransformMat3(float[] output, float[] a, float[] m) Parameters output float[] a float[] m float[] Returns float[] TransformMat4(float[], float[], float[]) Transforms the vec3 with a mat4. 4th vector component is implicitly '1'. Returns {vec3} out public static float[] TransformMat4(float[] output, float[] a, float[] m) Parameters output float[] a float[] m float[] Returns float[] TransformQuat(float[], float[], float[]) Transforms the vec3 with a quat public static float[] TransformQuat(float[] output, float[] a, float[] q) Parameters output float[] a float[] q float[] Returns float[]"
  },
  "api/Vintagestory.API.MathTools.Vec3d.html": {
    "href": "api/Vintagestory.API.MathTools.Vec3d.html",
    "title": "Class Vec3d | VintageStory API",
    "keywords": "Class Vec3d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub [ProtoContract] public class Vec3d : IVec3, IEquatable<Vec3d> Inheritance object Vec3d Implements IVec3 IEquatable<Vec3d> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec3d() public Vec3d() Vec3d(double, double, double) public Vec3d(double x, double y, double z) Parameters x double y double z double Vec3d(EntityPos) public Vec3d(EntityPos vec) Parameters vec EntityPos Vec3d(Vec4d) Create a new vector with given coordinates public Vec3d(Vec4d vec) Parameters vec Vec4d Fields X [ProtoMember(1)] public double X Field Value double Y [ProtoMember(2)] public double Y Field Value double Z [ProtoMember(3)] public double Z Field Value double Properties AsBlockPos [JsonIgnore] public BlockPos AsBlockPos { get; } Property Value BlockPos AsVec3i public Vec3i AsVec3i { get; } Property Value Vec3i this[int] Returns the n-th coordinate public double this[int index] { get; set; } Parameters index int Property Value double XInt [JsonIgnore] public int XInt { get; } Property Value int YInt [JsonIgnore] public int YInt { get; } Property Value int ZInt [JsonIgnore] public int ZInt { get; } Property Value int Zero Create a new instance with x/y/z set to 0 public static Vec3d Zero { get; } Property Value Vec3d Methods Add(double) public Vec3d Add(double value) Parameters value double Returns Vec3d Add(double, double, double) public Vec3d Add(double x, double y, double z) Parameters x double y double z double Returns Vec3d Add(BlockPos) public Vec3d Add(BlockPos a) Parameters a BlockPos Returns Vec3d Add(Vec3d) public Vec3d Add(Vec3d a) Parameters a Vec3d Returns Vec3d Add(Vec3d, Vec3d) public static Vec3d Add(Vec3d a, Vec3d b) Parameters a Vec3d b Vec3d Returns Vec3d Add(Vec3f) public Vec3d Add(Vec3f a) Parameters a Vec3f Returns Vec3d AddCopy(double, double, double) public Vec3d AddCopy(double x, double y, double z) Parameters x double y double z double Returns Vec3d AddCopy(float, float, float) public Vec3d AddCopy(float x, float y, float z) Parameters x float y float z float Returns Vec3d AddCopy(BlockFacing) public Vec3d AddCopy(BlockFacing facing) Parameters facing BlockFacing Returns Vec3d AddCopy(BlockPos) public Vec3d AddCopy(BlockPos pos) Parameters pos BlockPos Returns Vec3d AddCopy(Vec3d) public Vec3d AddCopy(Vec3d a) Parameters a Vec3d Returns Vec3d AddCopy(Vec3f) public Vec3d AddCopy(Vec3f a) Parameters a Vec3f Returns Vec3d Ahead(double, double, double) public Vec3d Ahead(double offset, double Pitch, double Yaw) Parameters offset double Pitch double Yaw double Returns Vec3d Ahead(double, float, float) public Vec3d Ahead(double offset, float Pitch, float Yaw) Parameters offset double Pitch float Yaw float Returns Vec3d AheadCopy(double, double, double) public Vec3d AheadCopy(double offset, double Pitch, double Yaw) Parameters offset double Pitch double Yaw double Returns Vec3d AheadCopy(double, float, float) public Vec3d AheadCopy(double offset, float Pitch, float Yaw) Parameters offset double Pitch float Yaw float Returns Vec3d Clone() public Vec3d Clone() Returns Vec3d CreateFromBytes(BinaryReader) public static Vec3d CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns Vec3d Cross(Vec3d) public Vec3d Cross(Vec3d vec) Parameters vec Vec3d Returns Vec3d Cross(Vec3d, Vec3d) public void Cross(Vec3d a, Vec3d b) Parameters a Vec3d b Vec3d Cross(Vec3d, Vec4d) public void Cross(Vec3d a, Vec4d b) Parameters a Vec3d b Vec4d Cross(Vec4d, Vec4d) public void Cross(Vec4d a, Vec4d b) Parameters a Vec4d b Vec4d DistanceTo(double, double, double) public float DistanceTo(double x, double y, double z) Parameters x double y double z double Returns float DistanceTo(Vec3d) public float DistanceTo(Vec3d pos) Parameters pos Vec3d Returns float Dot(Vec3d) public double Dot(Vec3d a) Parameters a Vec3d Returns double Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Vec3d) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec3d other) Parameters other Vec3d An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(Vec3d, double) public bool Equals(Vec3d other, double epsilon) Parameters other Vec3d epsilon double Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. HorLength() public double HorLength() Returns double HorizontalSquareDistanceTo(double, double) public float HorizontalSquareDistanceTo(double x, double z) Parameters x double z double Returns float HorizontalSquareDistanceTo(Vec3d) public float HorizontalSquareDistanceTo(Vec3d pos) Parameters pos Vec3d Returns float Length() public double Length() Returns double LengthSq() public double LengthSq() Returns double Mul(double) public Vec3d Mul(double val) Parameters val double Returns Vec3d Mul(double, double, double) public Vec3d Mul(double x, double y, double z) Parameters x double y double z double Returns Vec3d Negate() public void Negate() Normalize() public Vec3d Normalize() Returns Vec3d Offset(double, double, double) Note: adjusts the calling Vec3d, does not make a copy public Vec3d Offset(double x, double y, double z) Parameters x double y double z double Returns Vec3d Offset(Vec3d) Note: adjusts the calling Vec3d, does not make a copy public Vec3d Offset(Vec3d b) Parameters b Vec3d Returns Vec3d OffsetCopy(double, double, double) public Vec3d OffsetCopy(double x, double y, double z) Parameters x double y double z double Returns Vec3d OffsetCopy(float, float, float) public Vec3d OffsetCopy(float x, float y, float z) Parameters x float y float z float Returns Vec3d RotatedCopy(float) public Vec3d RotatedCopy(float yaw) Parameters yaw float Returns Vec3d Scale(double) Note: adjusts the calling Vec3d, does not make a copy public Vec3d Scale(double f) Parameters f double Returns Vec3d Set(double, double, double) public Vec3d Set(double x, double y, double z) Parameters x double y double z double Returns Vec3d Set(EntityPos) public Vec3d Set(EntityPos pos) Parameters pos EntityPos Returns Vec3d Set(BlockPos) public Vec3d Set(BlockPos pos) Parameters pos BlockPos Returns Vec3d Set(Vec3d) public Vec3d Set(Vec3d pos) Parameters pos Vec3d Returns Vec3d Set(Vec3f) public Vec3d Set(Vec3f pos) Parameters pos Vec3f Returns Vec3d Set(Vec3i) public Vec3d Set(Vec3i pos) Parameters pos Vec3i Returns Vec3d SetWithDimension(EntityPos) Include dimension info. We don't always want this, but sometimes we do public Vec3d SetWithDimension(EntityPos pos) Parameters pos EntityPos Returns Vec3d SquareDistanceTo(double, double, double) public float SquareDistanceTo(double x, double y, double z) Parameters x double y double z double Returns float SquareDistanceTo(float, float, float) public float SquareDistanceTo(float x, float y, float z) Parameters x float y float z float Returns float SquareDistanceTo(EntityPos) public float SquareDistanceTo(EntityPos pos) Parameters pos EntityPos Returns float SquareDistanceTo(Vec3d) public float SquareDistanceTo(Vec3d pos) Parameters pos Vec3d Returns float Sub(double, double, double) public Vec3d Sub(double x, double y, double z) Parameters x double y double z double Returns Vec3d Sub(BlockPos) public Vec3d Sub(BlockPos pos) Parameters pos BlockPos Returns Vec3d Sub(Vec3d) public Vec3d Sub(Vec3d vec) Parameters vec Vec3d Returns Vec3d Sub(Vec3d, Vec3d) public static Vec3d Sub(Vec3d a, Vec3d b) Parameters a Vec3d b Vec3d Returns Vec3d SubCopy(double, double, double) public Vec3d SubCopy(double x, double y, double z) Parameters x double y double z double Returns Vec3d SubCopy(Vec3d) public Vec3d SubCopy(Vec3d sub) Parameters sub Vec3d Returns Vec3d ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToDoubleArray() public double[] ToDoubleArray() Returns double[] ToFloatArray() public float[] ToFloatArray() Returns float[] ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. ToVec3f() public Vec3f ToVec3f() Returns Vec3f Operators operator +(Vec3d, float) public static Vec3d operator +(Vec3d left, float right) Parameters left Vec3d right float Returns Vec3d operator +(Vec3d, Vec3d) public static Vec3d operator +(Vec3d left, Vec3d right) Parameters left Vec3d right Vec3d Returns Vec3d operator +(Vec3d, Vec3i) public static Vec3d operator +(Vec3d left, Vec3i right) Parameters left Vec3d right Vec3i Returns Vec3d operator /(Vec3d, double) public static Vec3d operator /(Vec3d left, double right) Parameters left Vec3d right double Returns Vec3d operator /(Vec3d, float) public static Vec3d operator /(Vec3d left, float right) Parameters left Vec3d right float Returns Vec3d operator ==(Vec3d, Vec3d) public static bool operator ==(Vec3d left, Vec3d right) Parameters left Vec3d right Vec3d Returns bool operator !=(Vec3d, Vec3d) public static bool operator !=(Vec3d left, Vec3d right) Parameters left Vec3d right Vec3d Returns bool operator *(double, Vec3d) public static Vec3d operator *(double left, Vec3d right) Parameters left double right Vec3d Returns Vec3d operator *(float, Vec3d) public static Vec3d operator *(float left, Vec3d right) Parameters left float right Vec3d Returns Vec3d operator *(Vec3d, double) public static Vec3d operator *(Vec3d left, double right) Parameters left Vec3d right double Returns Vec3d operator *(Vec3d, float) public static Vec3d operator *(Vec3d left, float right) Parameters left Vec3d right float Returns Vec3d operator *(Vec3d, Vec3d) public static double operator *(Vec3d left, Vec3d right) Parameters left Vec3d right Vec3d Returns double operator -(float, Vec3d) public static Vec3d operator -(float left, Vec3d right) Parameters left float right Vec3d Returns Vec3d operator -(Vec3d, float) public static Vec3d operator -(Vec3d left, float right) Parameters left Vec3d right float Returns Vec3d operator -(Vec3d, Vec3d) public static Vec3d operator -(Vec3d left, Vec3d right) Parameters left Vec3d right Vec3d Returns Vec3d"
  },
  "api/Vintagestory.API.MathTools.Vec3f.html": {
    "href": "api/Vintagestory.API.MathTools.Vec3f.html",
    "title": "Class Vec3f | VintageStory API",
    "keywords": "Class Vec3f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub [JsonObject(MemberSerialization.OptIn)] [ProtoContract] public class Vec3f : IVec3, IEquatable<Vec3f> Inheritance object Vec3f Implements IVec3 IEquatable<Vec3f> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.SetOrCreate(Vec3f, Vec3f) Constructors Vec3f() Creates a new vector with x/y/z = 0 public Vec3f() Vec3f(float) public Vec3f(float xyz) Parameters xyz float Vec3f(float, float, float) Create a new vector with given coordinates public Vec3f(float x, float y, float z) Parameters x float y float z float Vec3f(float[]) Create a new vector with given coordinates public Vec3f(float[] values) Parameters values float[] Vec3f(Vec3i) public Vec3f(Vec3i vec3i) Parameters vec3i Vec3i Vec3f(Vec4f) Create a new vector with given coordinates public Vec3f(Vec4f vec) Parameters vec Vec4f Fields X The X-Component of the vector [JsonProperty] [ProtoMember(1)] public float X Field Value float Y The Y-Component of the vector [JsonProperty] [ProtoMember(2)] public float Y Field Value float Z The Z-Component of the vector [JsonProperty] [ProtoMember(3)] public float Z Field Value float Properties AsVec3i public Vec3i AsVec3i { get; } Property Value Vec3i B Synonum for Z public float B { get; set; } Property Value float G Synonum for Y public float G { get; set; } Property Value float Half public static Vec3f Half { get; } Property Value Vec3f IsZero public bool IsZero { get; } Property Value bool this[int] Returns the n-th coordinate public float this[int index] { get; set; } Parameters index int Property Value float One public static Vec3f One { get; } Property Value Vec3f R Synonum for X public float R { get; set; } Property Value float Zero Create a new instance with x/y/z set to 0 public static Vec3f Zero { get; } Property Value Vec3f Methods Add(float, float, float) Adds given x/y/z coordinates to the vector public Vec3f Add(float x, float y, float z) Parameters x float y float z float Returns Vec3f Add(Vec3d) Adds given x/y/z coordinates to the vector public Vec3f Add(Vec3d vec) Parameters vec Vec3d Returns Vec3f Add(Vec3f) Adds given x/y/z coordinates to the vector public Vec3f Add(Vec3f vec) Parameters vec Vec3f Returns Vec3f AddCopy(float, float, float) Adds given coordinates to a new vectors and returns it. The original calling vector remains unchanged public Vec3f AddCopy(float x, float y, float z) Parameters x float y float z float Returns Vec3f AddCopy(Vec3f) Adds both vectors into a new vector. Both source vectors remain unchanged. public Vec3f AddCopy(Vec3f vec) Parameters vec Vec3f Returns Vec3f Clone() Creates a copy of the vetor public Vec3f Clone() Returns Vec3f CreateFromBytes(BinaryReader) public static Vec3f CreateFromBytes(BinaryReader reader) Parameters reader BinaryReader Returns Vec3f Cross(Vec3f) public Vec3f Cross(Vec3f vec) Parameters vec Vec3f Returns Vec3f Cross(Vec3f, Vec3f) Creates the cross product from a and b and sets own values accordingly public void Cross(Vec3f a, Vec3f b) Parameters a Vec3f b Vec3f Cross(Vec3f, Vec4f) Creates the cross product from a and b and sets own values accordingly public void Cross(Vec3f a, Vec4f b) Parameters a Vec3f b Vec4f DistanceSq(double, double, double) Calculates the square distance the two endpoints public double DistanceSq(double x, double y, double z) Parameters x double y double z double Returns double DistanceTo(Vec3d) Calculates the distance the two endpoints public float DistanceTo(Vec3d vec) Parameters vec Vec3d Returns float DistanceTo(Vec3f) public float DistanceTo(Vec3f vec) Parameters vec Vec3f Returns float Dot(double[]) Returns the dot product with given vector public double Dot(double[] pos) Parameters pos double[] Returns double Dot(float[]) Returns the dot product with given vector public double Dot(float[] pos) Parameters pos float[] Returns double Dot(FastVec3f) public float Dot(FastVec3f a) Parameters a FastVec3f Returns float Dot(Vec3d) Returns the dot product with given vector public float Dot(Vec3d a) Parameters a Vec3d Returns float Dot(Vec3f) Returns the dot product with given vector public float Dot(Vec3f a) Parameters a Vec3f Returns float Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Vec3f) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec3f other) Parameters other Vec3f An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(Vec3f, double) public bool Equals(Vec3f other, double epsilon) Parameters other Vec3f epsilon double Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Length() Returns the length of this vector public float Length() Returns float Mul(float) Multiplies each coordinate with given multiplier public Vec3f Mul(float multiplier) Parameters multiplier float Returns Vec3f Negate() public void Negate() Normalize() Turns the vector into a unit vector with length 1, but only if length is non-zero public Vec3f Normalize() Returns Vec3f NormalizedCopy() Creates a new vectors that is the normalized version of this vector. public Vec3f NormalizedCopy() Returns Vec3f ReduceBy(float) Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number public void ReduceBy(float val) Parameters val float RotatedCopy(float) public Vec3f RotatedCopy(float yaw) Parameters yaw float Returns Vec3f Set(float, float, float) Sets the vector to this coordinates public Vec3f Set(float x, float y, float z) Parameters x float y float z float Returns Vec3f Set(float[]) public Vec3f Set(float[] vec) Parameters vec float[] Returns Vec3f Set(Vec3d) Sets the vector to the coordinates of given vector public Vec3f Set(Vec3d vec) Parameters vec Vec3d Returns Vec3f Set(Vec3f) Sets the vector to the coordinates of given vector public Vec3f Set(Vec3f vec) Parameters vec Vec3f Returns Vec3f Sub(Vec3d) Substracts given x/y/z coordinates to the vector public Vec3f Sub(Vec3d vec) Parameters vec Vec3d Returns Vec3f Sub(Vec3f) Substracts given x/y/z coordinates to the vector public Vec3f Sub(Vec3f vec) Parameters vec Vec3f Returns Vec3f Sub(Vec3i) public Vec3f Sub(Vec3i vec) Parameters vec Vec3i Returns Vec3f ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter ToDoubleArray() public double[] ToDoubleArray() Returns double[] ToString() Simple string represenation of the x/y/z components public override string ToString() Returns string ToVec3d() Creates a new double precision vector with the same coordinates public Vec3d ToVec3d() Returns Vec3d ToVec4f(float) public Vec4f ToVec4f(float w) Parameters w float Returns Vec4f Operators operator +(Vec3f, float) public static Vec3f operator +(Vec3f left, float right) Parameters left Vec3f right float Returns Vec3f operator +(Vec3f, Vec3f) public static Vec3f operator +(Vec3f left, Vec3f right) Parameters left Vec3f right Vec3f Returns Vec3f operator /(Vec3f, float) public static Vec3f operator /(Vec3f left, float right) Parameters left Vec3f right float Returns Vec3f operator ==(Vec3f, Vec3f) public static bool operator ==(Vec3f left, Vec3f right) Parameters left Vec3f right Vec3f Returns bool implicit operator FastVec3f(Vec3f) public static implicit operator FastVec3f(Vec3f a) Parameters a Vec3f Returns FastVec3f operator !=(Vec3f, Vec3f) public static bool operator !=(Vec3f left, Vec3f right) Parameters left Vec3f right Vec3f Returns bool operator *(float, Vec3f) public static Vec3f operator *(float left, Vec3f right) Parameters left float right Vec3f Returns Vec3f operator *(Vec3f, float) public static Vec3f operator *(Vec3f left, float right) Parameters left Vec3f right float Returns Vec3f operator *(Vec3f, Vec3f) public static float operator *(Vec3f left, Vec3f right) Parameters left Vec3f right Vec3f Returns float operator -(float, Vec3f) public static Vec3f operator -(float left, Vec3f right) Parameters left float right Vec3f Returns Vec3f operator -(Vec3f, float) public static Vec3f operator -(Vec3f left, float right) Parameters left Vec3f right float Returns Vec3f operator -(Vec3f, Vec3f) public static Vec3f operator -(Vec3f left, Vec3f right) Parameters left Vec3f right Vec3f Returns Vec3f"
  },
  "api/Vintagestory.API.MathTools.Vec3i.html": {
    "href": "api/Vintagestory.API.MathTools.Vec3i.html",
    "title": "Class Vec3i | VintageStory API",
    "keywords": "Class Vec3i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 3 ints. Go bug Tyron if you need more utility methods in this class. Open in GitHub [ProtoContract] [JsonObject(MemberSerialization.OptIn)] public class Vec3i : IEquatable<Vec3i>, IVec3 Inheritance object Vec3i Implements IEquatable<Vec3i> IVec3 Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec3i() public Vec3i() Vec3i(int, int, int) public Vec3i(int x, int y, int z) Parameters x int y int z int Vec3i(BlockPos) public Vec3i(BlockPos pos) Parameters pos BlockPos Vec3i(FastVec3i) public Vec3i(FastVec3i vec) Parameters vec FastVec3i Fields DirectAndIndirectNeighbours List of offset of all direct and indirect neighbours of coordinate 0/0/0 public static readonly Vec3i[] DirectAndIndirectNeighbours Field Value Vec3i[] X [ProtoMember(1)] [JsonProperty] public int X Field Value int Y [ProtoMember(2)] [JsonProperty] public int Y Field Value int Z [ProtoMember(3)] [JsonProperty] public int Z Field Value int Properties AsBlockPos public BlockPos AsBlockPos { get; } Property Value BlockPos AsVec3i public Vec3i AsVec3i { get; } Property Value Vec3i IsZero public bool IsZero { get; } Property Value bool this[int] Returns the n-th coordinate public int this[int index] { get; set; } Parameters index int Property Value int XZ public Vec2i XZ { get; } Property Value Vec2i Zero public static Vec3i Zero { get; } Property Value Vec3i Methods Add(int, int, int) public Vec3i Add(int x, int y, int z) Parameters x int y int z int Returns Vec3i Add(int, int, int, Vec3i) public Vec3i Add(int x, int y, int z, Vec3i intoVec) Parameters x int y int z int intoVec Vec3i Returns Vec3i Add(BlockFacing, int) public Vec3i Add(BlockFacing towardsFace, int length = 1) Parameters towardsFace BlockFacing length int Returns Vec3i AddCopy(int, int, int) public Vec3i AddCopy(int x, int y, int z) Parameters x int y int z int Returns Vec3i AddCopy(BlockFacing) public Vec3i AddCopy(BlockFacing facing) Parameters facing BlockFacing Returns Vec3i Clone() public Vec3i Clone() Returns Vec3i DistanceTo(Vec3i) public double DistanceTo(Vec3i vec) Parameters vec Vec3i Returns double Equals(int, int, int) public bool Equals(int x, int y, int z) Parameters x int y int z int Returns bool Equals(object) Determines whether the specified object is equal to the current object. public override bool Equals(object obj) Parameters obj object The object to compare with the current object. Returns bool true if the specified object is equal to the current object; otherwise, false. Equals(Vec3i) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec3i other) Parameters other Vec3i An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. ManhattenDistanceTo(Vec3i) public int ManhattenDistanceTo(Vec3i vec) Parameters vec Vec3i Returns int Reduce(int) Substracts val from each coordinate if the coordinate if positive, otherwise it is added. If 0, the value is unchanged. The value must be a positive number public void Reduce(int val = 1) Parameters val int ReduceX(int) public void ReduceX(int val = 1) Parameters val int ReduceY(int) public void ReduceY(int val = 1) Parameters val int ReduceZ(int) public void ReduceZ(int val = 1) Parameters val int Set(int, int, int) public Vec3i Set(int positionX, int positionY, int positionZ) Parameters positionX int positionY int positionZ int Returns Vec3i Set(Vec3i) public Vec3i Set(Vec3i fromPos) Parameters fromPos Vec3i Returns Vec3i SquareDistanceTo(int, int, int) public long SquareDistanceTo(int x, int y, int z) Parameters x int y int z int Returns long SquareDistanceTo(Vec3i) public long SquareDistanceTo(Vec3i vec) Parameters vec Vec3i Returns long ToBlockPos() public BlockPos ToBlockPos() Returns BlockPos ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator +(Vec3i, Vec3i) public static Vec3i operator +(Vec3i left, Vec3i right) Parameters left Vec3i right Vec3i Returns Vec3i operator /(Vec3i, int) public static Vec3i operator /(Vec3i left, int right) Parameters left Vec3i right int Returns Vec3i operator ==(Vec3i, Vec3i) public static bool operator ==(Vec3i left, Vec3i right) Parameters left Vec3i right Vec3i Returns bool operator !=(Vec3i, Vec3i) public static bool operator !=(Vec3i left, Vec3i right) Parameters left Vec3i right Vec3i Returns bool operator *(int, Vec3i) public static Vec3i operator *(int left, Vec3i right) Parameters left int right Vec3i Returns Vec3i operator *(Vec3i, int) public static Vec3i operator *(Vec3i left, int right) Parameters left Vec3i right int Returns Vec3i operator -(Vec3i, Vec3i) public static Vec3i operator -(Vec3i left, Vec3i right) Parameters left Vec3i right Vec3i Returns Vec3i operator -(Vec3i) public static Vec3i operator -(Vec3i vec) Parameters vec Vec3i Returns Vec3i"
  },
  "api/Vintagestory.API.MathTools.Vec3iAndFacingFlags.html": {
    "href": "api/Vintagestory.API.MathTools.Vec3iAndFacingFlags.html",
    "title": "Class Vec3iAndFacingFlags | VintageStory API",
    "keywords": "Class Vec3iAndFacingFlags Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Vec3iAndFacingFlags Inheritance object Vec3iAndFacingFlags Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec3iAndFacingFlags(int, int, int, int, int) public Vec3iAndFacingFlags(int x, int y, int z, int flags, int oppositeFlags) Parameters x int y int z int flags int oppositeFlags int Vec3iAndFacingFlags(int, int, int, int, int, int, int) public Vec3iAndFacingFlags(int x, int y, int z, int flags, int oppositeFlags, int flagsUL, int flagsLR) Parameters x int y int z int flags int oppositeFlags int flagsUL int flagsLR int Fields FacingFlags public int FacingFlags Field Value int OppositeFlags public int OppositeFlags Field Value int OppositeFlagsLowerOrRight public int OppositeFlagsLowerOrRight Field Value int OppositeFlagsUpperOrLeft public int OppositeFlagsUpperOrLeft Field Value int X public int X Field Value int Y public int Y Field Value int Z public int Z Field Value int extIndexOffset public int extIndexOffset Field Value int Methods Initialize(int) public static void Initialize(int value) Parameters value int"
  },
  "api/Vintagestory.API.MathTools.Vec4d.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4d.html",
    "title": "Class Vec4d | VintageStory API",
    "keywords": "Class Vec4d Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Vec4d Inheritance object Vec4d Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4d() public Vec4d() Vec4d(double, double, double, double) public Vec4d(double x, double y, double z, double w) Parameters x double y double z double w double Fields W public double W Field Value double X public double X Field Value double Y public double Y Field Value double Z public double Z Field Value double Properties this[int] Returns the n-th coordinate public double this[int index] { get; set; } Parameters index int Property Value double XYZ public Vec3d XYZ { get; } Property Value Vec3d Methods HorizontalSquareDistanceTo(double, double) public float HorizontalSquareDistanceTo(double x, double z) Parameters x double z double Returns float HorizontalSquareDistanceTo(Vec3d) public float HorizontalSquareDistanceTo(Vec3d pos) Parameters pos Vec3d Returns float Set(double, double, double, double) public void Set(double x, double y, double z, double w) Parameters x double y double z double w double SquareDistanceTo(double, double, double) public float SquareDistanceTo(double x, double y, double z) Parameters x double y double z double Returns float SquareDistanceTo(float, float, float) public float SquareDistanceTo(float x, float y, float z) Parameters x float y float z float Returns float SquareDistanceTo(Vec3d) public float SquareDistanceTo(Vec3d pos) Parameters pos Vec3d Returns float"
  },
  "api/Vintagestory.API.MathTools.Vec4f.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4f.html",
    "title": "Class Vec4f | VintageStory API",
    "keywords": "Class Vec4f Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class Vec4f Inheritance object Vec4f Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4f() public Vec4f() Vec4f(float, float, float, float) public Vec4f(float x, float y, float z, float w) Parameters x float y float z float w float Fields W public float W Field Value float X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Properties A Synonum for W public float A { get; set; } Property Value float B Synonum for Z public float B { get; set; } Property Value float G Synonum for Y public float G { get; set; } Property Value float this[int] Returns the n-th coordinate public float this[int index] { get; set; } Parameters index int Property Value float R Synonum for X public float R { get; set; } Property Value float XYZ public Vec3f XYZ { get; } Property Value Vec3f Methods Clone() public Vec4f Clone() Returns Vec4f LengthXYZ() Returns the length of this vector public float LengthXYZ() Returns float Mul(Vec4f) public Vec4f Mul(Vec4f vec) Parameters vec Vec4f Returns Vec4f NormalizeXYZ() Turns the vector into a unit vector with length 1, but only if length is non-zero public Vec4f NormalizeXYZ() Returns Vec4f Set(float, float, float, float) public Vec4f Set(float x, float y, float z, float w) Parameters x float y float z float w float Returns Vec4f Set(float[]) public Vec4f Set(float[] vec) Parameters vec float[] Returns Vec4f Set(Vec4f) public Vec4f Set(Vec4f vec) Parameters vec Vec4f Returns Vec4f Operators operator +(Vec4f, float) public static Vec4f operator +(Vec4f left, float right) Parameters left Vec4f right float Returns Vec4f operator +(Vec4f, Vec4f) public static Vec4f operator +(Vec4f left, Vec4f right) Parameters left Vec4f right Vec4f Returns Vec4f operator +(Vec4f, Vec4i) public static Vec4f operator +(Vec4f left, Vec4i right) Parameters left Vec4f right Vec4i Returns Vec4f operator /(Vec4f, float) public static Vec4f operator /(Vec4f left, float right) Parameters left Vec4f right float Returns Vec4f operator *(float, Vec4f) public static Vec4f operator *(float left, Vec4f right) Parameters left float right Vec4f Returns Vec4f operator *(Vec4f, float) public static Vec4f operator *(Vec4f left, float right) Parameters left Vec4f right float Returns Vec4f operator *(Vec4f, Vec4f) public static double operator *(Vec4f left, Vec4f right) Parameters left Vec4f right Vec4f Returns double operator -(float, Vec4f) public static Vec4f operator -(float left, Vec4f right) Parameters left float right Vec4f Returns Vec4f operator -(Vec4f, float) public static Vec4f operator -(Vec4f left, float right) Parameters left Vec4f right float Returns Vec4f operator -(Vec4f, Vec4f) public static Vec4f operator -(Vec4f left, Vec4f right) Parameters left Vec4f right Vec4f Returns Vec4f"
  },
  "api/Vintagestory.API.MathTools.Vec4i-1.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4i-1.html",
    "title": "Class Vec4i<T> | VintageStory API",
    "keywords": "Class Vec4i<T> Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public class Vec4i<T> Type Parameters T Inheritance object Vec4i<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4i() public Vec4i() Vec4i(int, int, int, T) public Vec4i(int x, int y, int z, T Value) Parameters x int y int z int Value T Fields Value public T Value Field Value T X public int X Field Value int Y public int Y Field Value int Z public int Z Field Value int"
  },
  "api/Vintagestory.API.MathTools.Vec4i.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4i.html",
    "title": "Class Vec4i | VintageStory API",
    "keywords": "Class Vec4i Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 4 ints. Go bug Tyron if you need more utility methods in this class. Open in GitHub [ProtoContract] public class Vec4i : IEquatable<Vec4i> Inheritance object Vec4i Implements IEquatable<Vec4i> Derived BlockOffsetAndNumber Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4i() public Vec4i() Vec4i(int, int, int, int) public Vec4i(int x, int y, int z, int w) Parameters x int y int z int w int Vec4i(BlockPos, int) public Vec4i(BlockPos pos, int w) Parameters pos BlockPos w int Fields W [ProtoMember(4)] public int W Field Value int X [ProtoMember(1)] public int X Field Value int Y [ProtoMember(2)] public int Y Field Value int Z [ProtoMember(3)] public int Z Field Value int Methods Equals(Vec4i) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec4i other) Parameters other Vec4i An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. HorDistanceSqTo(double, double) Returns the squared Euclidean horizontal distance to between this and given position public float HorDistanceSqTo(double x, double z) Parameters x double z double Returns float"
  },
  "api/Vintagestory.API.MathTools.Vec4s-1.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4s-1.html",
    "title": "Class Vec4s<T> | VintageStory API",
    "keywords": "Class Vec4s<T> Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public class Vec4s<T> Type Parameters T Inheritance object Vec4s<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4s() public Vec4s() Vec4s(short, short, short, T) public Vec4s(short x, short y, short z, T Value) Parameters x short y short z short Value T Fields Value public T Value Field Value T X public short X Field Value short Y public short Y Field Value short Z public short Z Field Value short"
  },
  "api/Vintagestory.API.MathTools.Vec4s.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4s.html",
    "title": "Class Vec4s | VintageStory API",
    "keywords": "Class Vec4s Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 4 shorts. Go bug Tyron if you need more utility methods in this class. Open in GitHub public class Vec4s : IEquatable<Vec4s> Inheritance object Vec4s Implements IEquatable<Vec4s> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4s() public Vec4s() Vec4s(short, short, short, short) public Vec4s(short x, short y, short z, short w) Parameters x short y short z short w short Fields W public short W Field Value short X public short X Field Value short Y public short Y Field Value short Z public short Z Field Value short Methods Equals(Vec4s) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec4s other) Parameters other Vec4s An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Vintagestory.API.MathTools.Vec4us-1.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4us-1.html",
    "title": "Class Vec4us<T> | VintageStory API",
    "keywords": "Class Vec4us<T> Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public class Vec4us<T> Type Parameters T Inheritance object Vec4us<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4us() public Vec4us() Vec4us(ushort, ushort, ushort, T) public Vec4us(ushort x, ushort y, ushort z, T Value) Parameters x ushort y ushort z ushort Value T Fields Value public T Value Field Value T X public ushort X Field Value ushort Y public ushort Y Field Value ushort Z public ushort Z Field Value ushort"
  },
  "api/Vintagestory.API.MathTools.Vec4us.html": {
    "href": "api/Vintagestory.API.MathTools.Vec4us.html",
    "title": "Class Vec4us | VintageStory API",
    "keywords": "Class Vec4us Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Represents a vector of 4 unsigned shorts. Go bug Tyron if you need more utility methods in this class. Open in GitHub public class Vec4us : IEquatable<Vec4us> Inheritance object Vec4us Implements IEquatable<Vec4us> Inherited Members object.Equals(object) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors Vec4us() public Vec4us() Vec4us(ushort, ushort, ushort, ushort) public Vec4us(ushort x, ushort y, ushort z, ushort w) Parameters x ushort y ushort z ushort w ushort Fields W public ushort W Field Value ushort X public ushort X Field Value ushort Y public ushort Y Field Value ushort Z public ushort Z Field Value ushort Methods Equals(Vec4us) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vec4us other) Parameters other Vec4us An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object."
  },
  "api/Vintagestory.API.MathTools.WeightedFloat.html": {
    "href": "api/Vintagestory.API.MathTools.WeightedFloat.html",
    "title": "Class WeightedFloat | VintageStory API",
    "keywords": "Class WeightedFloat Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class WeightedFloat : WeightedValue<float> Inheritance object WeightedValue<float> WeightedFloat Inherited Members WeightedValue<float>.Value WeightedValue<float>.Weight WeightedValue<float>.Set(float, float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WeightedFloat() public WeightedFloat() WeightedFloat(float, float) public WeightedFloat(float value, float weight) Parameters value float weight float Methods Clone() public WeightedFloat Clone() Returns WeightedFloat FromBytes(BinaryReader) public void FromBytes(BinaryReader reader) Parameters reader BinaryReader New(float, float) public static WeightedFloat New(float value, float weight) Parameters value float weight float Returns WeightedFloat SetLerped(WeightedFloat, WeightedFloat, float) public void SetLerped(WeightedFloat left, WeightedFloat right, float w) Parameters left WeightedFloat right WeightedFloat w float ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.MathTools.WeightedFloatArray.html": {
    "href": "api/Vintagestory.API.MathTools.WeightedFloatArray.html",
    "title": "Class WeightedFloatArray | VintageStory API",
    "keywords": "Class WeightedFloatArray Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class WeightedFloatArray : WeightedValue<float[]> Inheritance object WeightedValue<float[]> WeightedFloatArray Inherited Members WeightedValue<float[]>.Value WeightedValue<float[]>.Weight WeightedValue<float[]>.New(float[], float) WeightedValue<float[]>.Set(float[], float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WeightedFloatArray() public WeightedFloatArray() WeightedFloatArray(float[], float) public WeightedFloatArray(float[] value, float weight) Parameters value float[] weight float Methods Clone() public WeightedFloatArray Clone() Returns WeightedFloatArray FromBytes(BinaryReader) public void FromBytes(BinaryReader reader) Parameters reader BinaryReader New(float[], float) public static WeightedFloatArray New(float[] value, float weight) Parameters value float[] weight float Returns WeightedFloatArray SetLerped(WeightedFloatArray, WeightedFloatArray, float) public void SetLerped(WeightedFloatArray left, WeightedFloatArray right, float w) Parameters left WeightedFloatArray right WeightedFloatArray w float ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.MathTools.WeightedInt.html": {
    "href": "api/Vintagestory.API.MathTools.WeightedInt.html",
    "title": "Class WeightedInt | VintageStory API",
    "keywords": "Class WeightedInt Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll Open in GitHub public class WeightedInt : WeightedValue<int> Inheritance object WeightedValue<int> WeightedInt Inherited Members WeightedValue<int>.Value WeightedValue<int>.Weight WeightedValue<int>.Set(int, float) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WeightedInt() public WeightedInt() WeightedInt(int, float) public WeightedInt(int value, float weight) Parameters value int weight float Methods FromBytes(BinaryReader) public void FromBytes(BinaryReader reader) Parameters reader BinaryReader New(int, float) public static WeightedInt New(int value, float weight) Parameters value int weight float Returns WeightedInt ToBytes(BinaryWriter) public void ToBytes(BinaryWriter writer) Parameters writer BinaryWriter"
  },
  "api/Vintagestory.API.MathTools.WeightedValue-1.html": {
    "href": "api/Vintagestory.API.MathTools.WeightedValue-1.html",
    "title": "Class WeightedValue<T> | VintageStory API",
    "keywords": "Class WeightedValue<T> Namespace Vintagestory.API.MathTools Assembly VintagestoryAPI.dll public class WeightedValue<T> Type Parameters T Inheritance object WeightedValue<T> Derived WeightedFloat WeightedFloatArray WeightedInt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WeightedValue() public WeightedValue() WeightedValue(T, float) public WeightedValue(T value, float weight) Parameters value T weight float Fields Value public T Value Field Value T Weight public float Weight Field Value float Methods New(T, float) public static WeightedValue<T> New(T value, float weight) Parameters value T weight float Returns WeightedValue<T> Set(T, float) public void Set(T value, float weight = 1) Parameters value T weight float"
  },
  "api/Vintagestory.API.MathTools.html": {
    "href": "api/Vintagestory.API.MathTools.html",
    "title": "Namespace Vintagestory.API.MathTools | VintageStory API",
    "keywords": "Namespace Vintagestory.API.MathTools Classes AABBIntersectionTest Open in GitHub AngleConstraint Open in GitHub Ascii85 Converts between binary data and an Ascii85-encoded string. Open in GitHub BlockFacing Represents one of the 6 faces of a cube and all it's properties. Uses a right Handed Coordinate System. See also http://www.matrix44.net/cms/notes/opengl-3d-graphics/coordinate-systems-in-opengl In short: North: Negative Z East: Positive X South: Positive Z West: Negative X Up: Positive Y Down: Negative Y Open in GitHub BlockPos A useful data structure when operating with block postions. Valuable Hint: Make use of Copy() or the XXXCopy() variants where needed. A common pitfall is writing code like: BlockPos abovePos = pos.Up(); - with this code abovePos and pos will reference to the same object! Open in GitHub CachingCollisionTester Originally intended to be a special version of CollisionTester for BehaviorControlledPhysics, which does not re-do the WalkBlocks() call and re-generate the CollisionBoxList more than once in the same entity tick Currently in 1.20 the caching is not very useful when we loop through all entities sequentially - but empirical testing shows it is actually faster not to cache Open in GitHub Cardinal Open in GitHub ClampedSimplexNoise Perlin noise of supplied amplitude and frequency. The resulting value is clamped to 0...1 Open in GitHub CollisionTester Open in GitHub ColorBlend Open in GitHub ColorUtil Many utility methods and fields for working with colors Open in GitHub ColorUtil.LightUtil Converts HSV (extracted from light and lightSat) to RGBA Crc32Algorithm Implementation of CRC-32. This class supports several convenient static methods returning the CRC as UInt32. From https://github.com/force-net/Crc32.NET Open in GitHub Cuboidd Represents a three dimensional axis-aligned cuboid using two 3d coordinates. Used for collision and selection withes. Open in GitHub Cuboidf Represents a three dimensional axis-aligned cuboid using two 3D coordinates. Used for collision and selection boxes. Open in GitHub Cuboidi A 3D cuboid, created out of integers. Open in GitHub Easings Open in GitHub EvolvingNatFloat A number generator whose return value changes over time, parametrized by a transform function and some constants Open in GitHub FastVec3iComparer Open in GitHub FluidBlockPos Open in GitHub GameMath A large set of useful game mathematics functions Open in GitHub HorRectanglei Open in GitHub LCGRandom An lcg random generator, particularly suitable for worldgen See also https://en.wikipedia.org/wiki/Linear_congruential_generator Open in GitHub Line3D Open in GitHub MapUtil Open in GitHub Mat22 2x2 Matrix Open in GitHub Mat23 2x3 Matrix A mat2d contains six elements defined as: [a, b, c, d, tx,ty] This is a short form for the 3x3 matrix: [a, b, 0 c, d, 0 tx,ty,1] The last column is ignored so the array is shorter and operations are faster. Open in GitHub Mat3d Open in GitHub Mat3f Open in GitHub Mat4d 4x4 Matrix Math Open in GitHub Mat4f 4x4 Matrix Math Open in GitHub MultiCollisionTester Open in GitHub NatFloat A more natural random number generator (nature usually doesn't grow by the exact same numbers nor does it completely randomly) Open in GitHub NewNormalizedSimplexFractalNoise Open in GitHub NewSimplexNoiseLayer Open in GitHub NormalRandom Open in GitHub NormalizedSimplexNoise It's generally pretty hard to get a neatly normalized coherent noise function due to the way perlin/open simplex works (gauss curve) and how random numbers are generated. So instead of trying to find the perfect normalization factor and instead try to perform some approximate normalization this class allows a small overflow and brings it down very close to the [0, 1] range using tanh(). Returns values in a range of [0..1] Open in GitHub Quaterniond Open in GitHub Quaternionf Open in GitHub Ray Open in GitHub ShapeUtil Open in GitHub SimplexNoise OpenSimplex noise of supplied amplitude and frequency. Open in GitHub SimplexNoiseOctave OpenSimplex Noise in C# Ported from https://gist.github.com/KdotJPG/b1270127455a94ac5d19 by KdotJPG and heavily refactored to improve performance. Open in GitHub Size2d Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub Size2f Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub Size2i Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub Size3d Represents a vector of 3 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub Size3f Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub Size3i Represents a vector of 3 integers. Go bug Tyron of you need more utility methods in this class. Open in GitHub SkColorFix Open in GitHub Vec2d Represents a vector of 2 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub Vec2f Represents a vector of 2 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub Vec2i Represents a vector of 2 ints. Go bug Tyron if you need more utility methods in this class. Open in GitHub Vec3Utilsd Don't use this class unless you need it to interoperate with Mat4d Open in GitHub Vec3Utilsf Don't use this class unless you need it to interoperate with Mat4d Open in GitHub Vec3d Represents a vector of 3 doubles. Go bug Tyron of you need more utility methods in this class. Open in GitHub Vec3f Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. Open in GitHub Vec3i Represents a vector of 3 ints. Go bug Tyron if you need more utility methods in this class. Open in GitHub Vec3iAndFacingFlags Open in GitHub Vec4d Open in GitHub Vec4f Open in GitHub Vec4i Represents a vector of 4 ints. Go bug Tyron if you need more utility methods in this class. Open in GitHub Vec4i<T> Vec4s Represents a vector of 4 shorts. Go bug Tyron if you need more utility methods in this class. Open in GitHub Vec4s<T> Vec4us Represents a vector of 4 unsigned shorts. Go bug Tyron if you need more utility methods in this class. Open in GitHub Vec4us<T> WeightedFloat Open in GitHub WeightedFloatArray Open in GitHub WeightedInt Open in GitHub WeightedValue<T> Structs FastVec2i Represents a vector of 2 ints. Go bug Tyron if you need more utility methods in this class. FastVec3d Represents a vector of 3 doubles FastVec3f Represents a vector of 3 floats. Go bug Tyron of you need more utility methods in this class. FastVec3i Represents a vector of 3 ints, similar to a Vec3i or a BlockPos but this is a struct NewNormalizedSimplexFractalNoise.ColumnNoise NormalizedSimplexNoise.ColumnNoise Rectanglei Sphere Not really a sphere, actually now an AABB centred on x,y,z, but we keep the name for API consistency ThreeBytes For performance, intended to compile equivalently to a byte[3], but more RAM efficient and more GC efficient VSColor Interfaces IRandom IVec3 IWorldIntersectionSupplier Enums EnumAxis Represents an axis in the cartesian coordinate system Open in GitHub EnumColorBlendMode Specifies types of per-pixel color blending. Open in GitHub EnumCombination Used to define how variant types interact with each other to create unique objects. Open in GitHub EnumDistribution The distribution of the random numbers Open in GitHub EnumIntersect Open in GitHub EnumPushDirection Open in GitHub EnumTransformFunction Used for EvolvingNatFloat value transforms Open in GitHub Delegates BlockFilter ColorBlend.ColorBlendDelegate EntityFilter PlotDelegate2D PlotDelegate3D PlotDelegate3DBlockPos TransformFunction"
  },
  "api/Vintagestory.API.Net.GameBuild.html": {
    "href": "api/Vintagestory.API.Net.GameBuild.html",
    "title": "Class GameBuild | VintageStory API",
    "keywords": "Class GameBuild Namespace Vintagestory.API.Net Assembly VintagestoryAPI.dll Open in GitHub public class GameBuild Inheritance object GameBuild Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields filename public string filename Field Value string filesize public string filesize Field Value string latest public bool latest Field Value bool md5 public string md5 Field Value string urls public Dictionary<string, string> urls Field Value Dictionary<string, string>"
  },
  "api/Vintagestory.API.Net.GameReleaseVersion.html": {
    "href": "api/Vintagestory.API.Net.GameReleaseVersion.html",
    "title": "Class GameReleaseVersion | VintageStory API",
    "keywords": "Class GameReleaseVersion Namespace Vintagestory.API.Net Assembly VintagestoryAPI.dll Open in GitHub public class GameReleaseVersion Inheritance object GameReleaseVersion Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Linux public GameBuild Linux Field Value GameBuild Linuxserver public GameBuild Linuxserver Field Value GameBuild Mac public GameBuild Mac Field Value GameBuild Windows public GameBuild Windows Field Value GameBuild Windowsserver public GameBuild Windowsserver Field Value GameBuild"
  },
  "api/Vintagestory.API.Net.html": {
    "href": "api/Vintagestory.API.Net.html",
    "title": "Namespace Vintagestory.API.Net | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Net Classes GameBuild Open in GitHub GameReleaseVersion Open in GitHub"
  },
  "api/Vintagestory.API.Server.ChunkLoadOptions.html": {
    "href": "api/Vintagestory.API.Server.ChunkLoadOptions.html",
    "title": "Class ChunkLoadOptions | VintageStory API",
    "keywords": "Class ChunkLoadOptions Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public class ChunkLoadOptions Inheritance object ChunkLoadOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ChunkGenParams Additional config to pass onto the world generators public ITreeAttribute ChunkGenParams Field Value ITreeAttribute KeepLoaded If true, the chunk will never get unloaded unless UnloadChunkColumn() is called public bool KeepLoaded Field Value bool OnLoaded Callback for when the chunks are ready and loaded public Action OnLoaded Field Value Action"
  },
  "api/Vintagestory.API.Server.ChunkPeekOptions.html": {
    "href": "api/Vintagestory.API.Server.ChunkPeekOptions.html",
    "title": "Class ChunkPeekOptions | VintageStory API",
    "keywords": "Class ChunkPeekOptions Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public class ChunkPeekOptions Inheritance object ChunkPeekOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields ChunkGenParams Additional config to pass onto the world generators public ITreeAttribute ChunkGenParams Field Value ITreeAttribute OnGenerated Callback for when the chunks are ready and loaded public OnChunkPeekedDelegate OnGenerated Field Value OnChunkPeekedDelegate UntilPass Until which world gen pass to generate the chunk (default: Done) public EnumWorldGenPass UntilPass Field Value EnumWorldGenPass"
  },
  "api/Vintagestory.API.Server.EnumClientState.html": {
    "href": "api/Vintagestory.API.Server.EnumClientState.html",
    "title": "Enum EnumClientState | VintageStory API",
    "keywords": "Enum EnumClientState Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll The current connection state of a player thats currently connecting to the server Open in GitHub public enum EnumClientState Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Connected = 2 Connecting = 1 Offline = 0 Playing = 3 Queued = 4"
  },
  "api/Vintagestory.API.Server.EnumProtectionLevel.html": {
    "href": "api/Vintagestory.API.Server.EnumProtectionLevel.html",
    "title": "Enum EnumProtectionLevel | VintageStory API",
    "keywords": "Enum EnumProtectionLevel Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll How strongly the Server should protect against hacking Open in GitHub public enum EnumProtectionLevel Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Basic = 1 Server will: Simulate each players movements and correct the position if the client reports the player at a different positions, verify the players picking range when placing or removing blocks Off = 0 No verification or protection of any kind Pedantic = 2 Not used yet"
  },
  "api/Vintagestory.API.Server.EnumServerResponse.html": {
    "href": "api/Vintagestory.API.Server.EnumServerResponse.html",
    "title": "Enum EnumServerResponse | VintageStory API",
    "keywords": "Enum EnumServerResponse Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public enum EnumServerResponse Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Bad = 1 Good = 0 Offline = 2"
  },
  "api/Vintagestory.API.Server.EnumServerRunPhase.html": {
    "href": "api/Vintagestory.API.Server.EnumServerRunPhase.html",
    "title": "Enum EnumServerRunPhase | VintageStory API",
    "keywords": "Enum EnumServerRunPhase Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll These are the stages the server goes through during launch Open in GitHub public enum EnumServerRunPhase Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields AssetsFinalize = 4 Final touches for loaded assets. Mods receive AssetsFinalize() call AssetsReady = 3 Configuration = 2 Everything initialized, now loading config Exit = 10 Shutdown complete GameReady = 6 All configs loaded, game world loaded by server. All blocks are loaded. Initialization = 1 Server only stuff initialized, Serversystems instantatied, now initializing ServerSystems then Mods. Serversystem receive events at this point. [Obsolete(\"Use AssetsReady\")] LoadAssets = 3 Mods will be compiled and started, AssetManager will init all origins and cache assets. Mods are initialized at this point (PreStart/Start method) [Obsolete(\"Use GameReady\")] LoadGame = 6 All configs loaded, spawn chunks loaded, game world loaded by server. All blocks are loaded. [Obsolete(\"Use ModsAndConfigReady\")] LoadGamePre = 5 All configs loaded, game world loaded by server. Mods receive StartClient/ServerSide and events at this point. ModsAndConfigReady = 5 RunGame = 8 About to run first game world tick. Shutdown = 9 Shutdown has begun Standby = -1 Server is listening to sockets but nothing has been launched yet Start = 0 Before anything has been initialized (you cannot receive any events at this point) WorldReady = 7 Notifies mods that the world is ready, after all other loading steps. Following this, worldgen will start and spawn chunks loaded (no separate RunPhase in 1.19)"
  },
  "api/Vintagestory.API.Server.EnumWhitelistMode.html": {
    "href": "api/Vintagestory.API.Server.EnumWhitelistMode.html",
    "title": "Enum EnumWhitelistMode | VintageStory API",
    "keywords": "Enum EnumWhitelistMode Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public enum EnumWhitelistMode Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Default = 0 Singleplayer OpenToLan: All players can join, Dedicated server: Only whitelisted players can join Off = 1 All players can join On = 2 Only whitelisted players can join"
  },
  "api/Vintagestory.API.Server.EnumWorldGenPass.html": {
    "href": "api/Vintagestory.API.Server.EnumWorldGenPass.html",
    "title": "Enum EnumWorldGenPass | VintageStory API",
    "keywords": "Enum EnumWorldGenPass Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll The stages a chunk goes through when being created Open in GitHub public enum EnumWorldGenPass Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Done = 6 Chunk generation complete. This pass is not triggered as an event. NeighbourSunLightFlood = 4 Requires neighbour chunks. Does the lighting of the chunk. 0 = Snow layer 0.95 = Sunlight flooding into neighbouring chunks None = 0 Nothing generated yet PreDone = 5 Requires neighbour chunks. Nothing left to generate, but neighbour chunks might still generate stuff into this chunk 0.1 = Generate creatures Terrain = 1 Does not require neighbour chunks to exist. Should generates 3d rock terrain mostly. Default generators by execute order: 0 = Basic 3D Terrain (granite+rock) 0.1 = Rock Strata 0.3 = Cave generator 0.4 = Block layers (soil, gravel, sand, ice, tall grass, etc.) TerrainFeatures = 2 Requires neighbour chunks. Ravines, Lakes, Boulders. Default generators by execute order: 0.1 = Hot springs 0.2 = Deposits (Ores, Peat, Clay, etc.) 0.3 = Worldgen Structures 0.4 = Above sealevel Lakes 0.5 = Worldgen Structures Post Pass Vegetation = 3 Requires neighbour chunks. Default generators by execute order: 0.2 = Story structures. Creates exclusion zones for the other vegetation passes 0.5 = Block Patches, Shrubs and Trees 0.9 = Rivulets (single block water sources) 0.95 = Sunlight flooding only inside current chunk"
  },
  "api/Vintagestory.API.Server.EnumWorldgenPreset.html": {
    "href": "api/Vintagestory.API.Server.EnumWorldgenPreset.html",
    "title": "Enum EnumWorldgenPreset | VintageStory API",
    "keywords": "Enum EnumWorldgenPreset Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public enum EnumWorldgenPreset Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Empty = 2 Standard = 0 Superflat = 1"
  },
  "api/Vintagestory.API.Server.GrowTreeDelegate.html": {
    "href": "api/Vintagestory.API.Server.GrowTreeDelegate.html",
    "title": "Delegate GrowTreeDelegate | VintageStory API",
    "keywords": "Delegate GrowTreeDelegate Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public delegate void GrowTreeDelegate(IBlockAccessor blockAccessor, BlockPos pos, TreeGenParams treeGenParams) Parameters blockAccessor IBlockAccessor pos BlockPos treeGenParams TreeGenParams Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Server.IAsyncServerSystem.html": {
    "href": "api/Vintagestory.API.Server.IAsyncServerSystem.html",
    "title": "Interface IAsyncServerSystem | VintageStory API",
    "keywords": "Interface IAsyncServerSystem Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Mods can create server threads to carry out an asynchronous process, by implementing this interface and calling IServerApi.AddServerThread() public interface IAsyncServerSystem Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods OffThreadInterval() int OffThreadInterval() Returns int OnSeparateThreadTick() void OnSeparateThreadTick() ThreadDispose() void ThreadDispose()"
  },
  "api/Vintagestory.API.Server.IChunkColumnGenerateRequest.html": {
    "href": "api/Vintagestory.API.Server.IChunkColumnGenerateRequest.html",
    "title": "Interface IChunkColumnGenerateRequest | VintageStory API",
    "keywords": "Interface IChunkColumnGenerateRequest Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IChunkColumnGenerateRequest Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ChunkGenParams ITreeAttribute ChunkGenParams { get; } Property Value ITreeAttribute ChunkX int ChunkX { get; } Property Value int ChunkZ int ChunkZ { get; } Property Value int Chunks IServerChunk[] Chunks { get; } Property Value IServerChunk[] NeighbourTerrainHeight ushort[][] NeighbourTerrainHeight { get; } Property Value ushort[][] RequiresChunkBorderSmoothing bool RequiresChunkBorderSmoothing { get; } Property Value bool"
  },
  "api/Vintagestory.API.Server.IChunkProvider.html": {
    "href": "api/Vintagestory.API.Server.IChunkProvider.html",
    "title": "Interface IChunkProvider | VintageStory API",
    "keywords": "Interface IChunkProvider Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IChunkProvider Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Logger ILogger Logger { get; } Property Value ILogger Methods ChunkIndex3D(int, int, int) Index for a chunk coordinate - NOT DIMENSION AWARE [Obsolete(\"Use dimension aware overloads instead\")] long ChunkIndex3D(int chunkX, int chunkY, int chunkZ) Parameters chunkX int chunkY int chunkZ int Returns long ChunkIndex3D(EntityPos) long ChunkIndex3D(EntityPos pos) Parameters pos EntityPos Returns long GetChunk(int, int, int) IWorldChunk GetChunk(int chunkX, int chunkY, int chunkZ) Parameters chunkX int chunkY int chunkZ int Returns IWorldChunk GetUnpackedChunkFast(int, int, int, bool) Like GetChunk() but includes a cache of the last chunk fetched - use this in a loop where getting the chunk for neighbouring blockPos, so most will be in the same chunk This always unpacks the chunk, unless it is null. Implementing code must ensure the chunk is unpacked before returning it, unless returning the cached chunk and notRecentlyAccessed is false (i.e. if the cache chunk was recently accessed then it's safe to assume it was already unpacked) IWorldChunk GetUnpackedChunkFast(int chunkX, int chunkY, int chunkZ, bool notRecentlyAccessed = false) Parameters chunkX int chunkY int chunkZ int notRecentlyAccessed bool Returns IWorldChunk"
  },
  "api/Vintagestory.API.Server.IChunkProviderThread.html": {
    "href": "api/Vintagestory.API.Server.IChunkProviderThread.html",
    "title": "Interface IChunkProviderThread | VintageStory API",
    "keywords": "Interface IChunkProviderThread Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IChunkProviderThread Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GetBlockAccessor(bool) Retrieve a customized interface to access blocks for generating chunks IWorldGenBlockAccessor GetBlockAccessor(bool updateHeightmap) Parameters updateHeightmap bool Whether or not SetBlock should update the heightmap Returns IWorldGenBlockAccessor"
  },
  "api/Vintagestory.API.Server.ICoreServerAPI.html": {
    "href": "api/Vintagestory.API.Server.ICoreServerAPI.html",
    "title": "Interface ICoreServerAPI | VintageStory API",
    "keywords": "Interface ICoreServerAPI Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll The core api implemented by the server. The main interface for accessing the server. Contains all sub components and some miscellaneous methods. public interface ICoreServerAPI : ICoreAPI, ICoreAPICommon Inherited Members ICoreAPI.Logger ICoreAPI.CmdlArguments ICoreAPI.ChatCommands ICoreAPI.Side ICoreAPI.ClassRegistry ICoreAPI.Assets ICoreAPI.ModLoader ICoreAPI.TagRegistry ICoreAPI.RegisterEntityClass(string, EntityProperties) ICoreAPICommon.RegisterRecipeRegistry<T>(string) ICoreAPICommon.RegisterColorMap(ColorMap) ICoreAPICommon.RegisterEntity(string, Type) ICoreAPICommon.RegisterEntityBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockClass(string, Type) ICoreAPICommon.RegisterCropBehavior(string, Type) ICoreAPICommon.RegisterBlockEntityClass(string, Type) ICoreAPICommon.RegisterItemClass(string, Type) ICoreAPICommon.RegisterCollectibleBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockBehaviorClass(string, Type) ICoreAPICommon.RegisterBlockEntityBehaviorClass(string, Type) ICoreAPICommon.RegisterMountable(string, GetMountableDelegate) ICoreAPICommon.ObjectCache ICoreAPICommon.DataBasePath ICoreAPICommon.GetOrCreateDataPath(string) ICoreAPICommon.StoreModConfig<T>(T, string) ICoreAPICommon.StoreModConfig(JsonObject, string) ICoreAPICommon.LoadModConfig<T>(string) ICoreAPICommon.LoadModConfig(string) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) VtmlUtilApiAdditions.RegisterVtmlTagConverter(ICoreAPI, string, Tag2RichTextDelegate) Properties Event API Component for registering to various Events IServerEventAPI Event { get; } Property Value IServerEventAPI Groups Everything related to player groups IGroupManager Groups { get; } Property Value IGroupManager Network API for sending/receiving network packets IServerNetworkAPI Network { get; } Property Value IServerNetworkAPI Permissions Everything related to roles and privileges IPermissionManager Permissions { get; } Property Value IPermissionManager PlayerData World-agnostic player data. You can query this information even when the player is offline IPlayerDataManager PlayerData { get; } Property Value IPlayerDataManager Server API Component for accessing server related functionality IServerAPI Server { get; } Property Value IServerAPI World API for accessing anything in the game world IServerWorldAccessor World { get; } Property Value IServerWorldAccessor WorldManager API Component for access/modify everything game world related IWorldManagerAPI WorldManager { get; } Property Value IWorldManagerAPI Methods BroadcastMessageToAllGroups(string, EnumChatType, string) Sends a chat message to all online players in all of their channels void BroadcastMessageToAllGroups(string message, EnumChatType chatType, string data = null) Parameters message string chatType EnumChatType data string Custom data to a message to be received by the client HandleCommand(IServerPlayer, string) Calls a command as if given player called it [Obsolete(\"Use ChatCommand subapi instead\")] void HandleCommand(IServerPlayer player, string message) Parameters player IServerPlayer message string InjectConsole(string) Injects a message or command into the server console input processing system. This lets you run commands or chat as Admin. void InjectConsole(string message) Parameters message string RegisterBlock(Block) Register a new Block. Must happen before server runphase LoadGame. These are sent to the client during connect, so only need to register them on the server side. void RegisterBlock(Block block) Parameters block Block BlockType to register. The Server assigns a block id and sets block.blockId RegisterCommand(string, string, string, ServerChatCommandDelegate, string) Registers a chat command. When registered on the client you access the command by prefixing a dot (.), on the server it's a slash (/) [Obsolete(\"Use ChatCommand subapi instead\")] bool RegisterCommand(string command, string descriptionMsg, string syntaxMsg, ServerChatCommandDelegate handler, string requiredPrivilege = null) Parameters command string descriptionMsg string syntaxMsg string handler ServerChatCommandDelegate requiredPrivilege string Returns bool RegisterCommand(ServerChatCommand) Registers a chat command. When registered on the client you access the command by prefixing a dot (.), on the server it's a slash (/) [Obsolete(\"Use ChatCommand subapi instead\")] bool RegisterCommand(ServerChatCommand chatcommand) Parameters chatcommand ServerChatCommand Returns bool RegisterCraftingRecipe(GridRecipe) Registers a new crafting recipe. These are sent to the client during connect, so only need to register them on the server side. void RegisterCraftingRecipe(GridRecipe recipe) Parameters recipe GridRecipe RegisterItem(Item) Register a new item type void RegisterItem(Item item) Parameters item Item RegisterTreeGenerator(AssetLocation, GrowTreeDelegate) Registers a new tree generator void RegisterTreeGenerator(AssetLocation generatorCode, GrowTreeDelegate genhandler) Parameters generatorCode AssetLocation genhandler GrowTreeDelegate RegisterTreeGenerator(AssetLocation, ITreeGenerator) Registers a new tree generator void RegisterTreeGenerator(AssetLocation generatorCode, ITreeGenerator gen) Parameters generatorCode AssetLocation gen ITreeGenerator SendIngameDiscovery(IServerPlayer, string, string, params object[]) Shows a discovery text on the players screen. If text is null the client will try to find a language entry using supplied code prefixed with 'ingamediscovery-' (which is recommended so that the errors are translated to the users local language) void SendIngameDiscovery(IServerPlayer player, string discoveryCode, string text = null, params object[] langparams) Parameters player IServerPlayer discoveryCode string text string langparams object[] If text is null, these are the arguments passed into the Language translation tool SendIngameError(IServerPlayer, string, string, params object[]) Shows a vibrating red text in the players screen. If text is null the client will try to find a language entry using supplied code prefixed with 'ingameerror-' (which is recommended so that the errors are translated to the users local language) void SendIngameError(IServerPlayer player, string errorCode, string text = null, params object[] langparams) Parameters player IServerPlayer errorCode string text string langparams object[] If text is null, these are the arguments passed into the Language translation tool SendMessage(IPlayer, int, string, EnumChatType, string) Sends a chat message only to given player in given groupId void SendMessage(IPlayer player, int groupId, string message, EnumChatType chatType, string data = null) Parameters player IPlayer groupId int message string chatType EnumChatType data string Custom data to a message to be received by the client SendMessageToGroup(int, string, EnumChatType, string) Sends a chat message to all online players in given player group void SendMessageToGroup(int groupid, string message, EnumChatType chatType, string data = null) Parameters groupid int message string chatType EnumChatType data string Custom data to a message to be received by the client TriggerOnAssetsFirstLoaded() For internal use: used to remap block and item Ids, as soon as assets are loaded from disk, before recipes etc. are loaded or anything else which may occur in modsystem AssetsLoaded() methods void TriggerOnAssetsFirstLoaded()"
  },
  "api/Vintagestory.API.Server.IGroupManager.html": {
    "href": "api/Vintagestory.API.Server.IGroupManager.html",
    "title": "Interface IGroupManager | VintageStory API",
    "keywords": "Interface IGroupManager Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IGroupManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties PlayerGroupsById Dictionary<int, PlayerGroup> PlayerGroupsById { get; } Property Value Dictionary<int, PlayerGroup> Methods AddPlayerGroup(PlayerGroup) void AddPlayerGroup(PlayerGroup group) Parameters group PlayerGroup GetPlayerGroupByName(string) PlayerGroup GetPlayerGroupByName(string name) Parameters name string Returns PlayerGroup RemovePlayerGroup(PlayerGroup) void RemovePlayerGroup(PlayerGroup group) Parameters group PlayerGroup"
  },
  "api/Vintagestory.API.Server.INetworkMessage.html": {
    "href": "api/Vintagestory.API.Server.INetworkMessage.html",
    "title": "Interface INetworkMessage | VintageStory API",
    "keywords": "Interface INetworkMessage Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll A message to be sent across the network. Is serialized/deserialized using protobuf public interface INetworkMessage Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Server.IPermissionManager.html": {
    "href": "api/Vintagestory.API.Server.IPermissionManager.html",
    "title": "Interface IPermissionManager | VintageStory API",
    "keywords": "Interface IPermissionManager Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IPermissionManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods AddPrivilegeToGroup(string, string) Add given privilege to given group, granting everyone in this group access to this privilege. This setting is only active for the current server session and lost during a server restart/shutdown. bool AddPrivilegeToGroup(string groupCode, string privilegeCode) Parameters groupCode string privilegeCode string Returns bool DenyPrivilege(string, string) Actively denies a privilege from a player, overrides privileges granted by a role. Does not however override non permanent privileges bool DenyPrivilege(string playerUID, string code) Parameters playerUID string code string Returns bool False if player was not found DropTemporaryPrivilege(string) Revokes a privilege that has been previously granted to all players. Does not revoke privileges granted from a group. Does nothing if this privilege hasn't been previously granted. void DropTemporaryPrivilege(string code) Parameters code string GetPlayerPermissionLevel(int) Returns the players permission level int GetPlayerPermissionLevel(int player) Parameters player int Returns int GetRole(string) Retrieve a role by its role code IPlayerRole GetRole(string code) Parameters code string Returns IPlayerRole GrantPrivilege(string, string, bool) Grant a privilege to an individual connected player. bool GrantPrivilege(string playerUID, string code, bool permanent = false) Parameters playerUID string code string permanent bool Wether to store this privilege permanently. Otherwise only valid for the active server session. Returns bool False if player was not found GrantTemporaryPrivilege(string) Grants privilege to all players connected or yet to connect. This setting is only active for the current server session and lost during a server restart/shutdown. void GrantTemporaryPrivilege(string code) Parameters code string RegisterPrivilege(string, string, bool) Registers a user privilege with the server. Is only active for the current server session and lost during a server restart/shutdown, so register it during server startup. New privileges are auto-granted to admins and the server console. void RegisterPrivilege(string code, string shortdescription, bool adminAutoGrant = true) Parameters code string Privilege to register shortdescription string Short description adminAutoGrant bool By default, super users are automatically granted all privileges. Set this value to false to change that RemovePrivilegeDenial(string, string) Removes a previously set privilege denial, if any was set. bool RemovePrivilegeDenial(string playerUID, string code) Parameters playerUID string code string Returns bool RemovePrivilegeFromGroup(string, string) Revokes given privilege to given group, revoking everyones access to this privilege inside this group bool RemovePrivilegeFromGroup(string groupCode, string privilegeCode) Parameters groupCode string privilegeCode string Returns bool RevokePrivilege(string, string, bool) Revokes a privilege that has been previously granted to this player. Does not revoke privileges granted from a group. Does nothing if the player does not have given privilege. bool RevokePrivilege(string playerUID, string code, bool permanent = false) Parameters playerUID string code string permanent bool If true it removes a previously granted permanent privilege. If false it removes a previously granted temporary privilege. Returns bool False if player was not found SetRole(IServerPlayer, string) Set given role for given player. Role must exist in the serverconfig.json. For a list of roles, read sapi.Config.Roles void SetRole(IServerPlayer player, string roleCode) Parameters player IServerPlayer roleCode string SetRole(IServerPlayer, IPlayerRole) Set given role for given player. Role must exist in the serverconfig.json. For a list of roles, read sapi.Config.Roles void SetRole(IServerPlayer player, IPlayerRole role) Parameters player IServerPlayer role IPlayerRole"
  },
  "api/Vintagestory.API.Server.IPlayerDataManager.html": {
    "href": "api/Vintagestory.API.Server.IPlayerDataManager.html",
    "title": "Interface IPlayerDataManager | VintageStory API",
    "keywords": "Interface IPlayerDataManager Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IPlayerDataManager Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties PlayerDataByUid Returns a copy of the player data dictionary loaded by the server. Thats the contents of Playerdata/playerdata.json Dictionary<string, IServerPlayerData> PlayerDataByUid { get; } Property Value Dictionary<string, IServerPlayerData> Methods GetPlayerDataByLastKnownName(string) Retrieve a players offline, world-agnostic data by his last known name IServerPlayerData GetPlayerDataByLastKnownName(string name) Parameters name string Returns IServerPlayerData GetPlayerDataByUid(string) Retrieve a players offline, world-agnostic data by player uid IServerPlayerData GetPlayerDataByUid(string playerUid) Parameters playerUid string Returns IServerPlayerData ResolvePlayerName(string, Action<EnumServerResponse, string>) Resolves a player name to a player uid, independent on whether this player is online, offline or never even joined the server. This is done by contacting the auth server, so please use this method sparingly. void ResolvePlayerName(string playername, Action<EnumServerResponse, string> onPlayerReceived) Parameters playername string onPlayerReceived Action<EnumServerResponse, string> ResolvePlayerUid(string, Action<EnumServerResponse, string>) Resolves a player uid to a player name, independent on whether this player is online, offline or never even joined the server. This is done by contacting the auth server, so please use this method sparingly. void ResolvePlayerUid(string playeruid, Action<EnumServerResponse, string> onPlayerReceived) Parameters playeruid string onPlayerReceived Action<EnumServerResponse, string>"
  },
  "api/Vintagestory.API.Server.ISaveGame.html": {
    "href": "api/Vintagestory.API.Server.ISaveGame.html",
    "title": "Interface ISaveGame | VintageStory API",
    "keywords": "Interface ISaveGame Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface ISaveGame Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties CreatedGameVersion The game version under which this savegame was created string CreatedGameVersion { get; } Property Value string DefaultSpawn PlayerSpawnPos DefaultSpawn { get; set; } Property Value PlayerSpawnPos EntitySpawning bool EntitySpawning { get; set; } Property Value bool IsNew True if this is a newly created world bool IsNew { get; } Property Value bool LandClaims [Obsolete(\"Use sapi.WorldManager.LandClaims instead. ISaveGame.LandClaims will be removed in 1.22\")] List<LandClaim> LandClaims { get; } Property Value List<LandClaim> LastSavedGameVersion The game version under which this savegame was last saved string LastSavedGameVersion { get; } Property Value string PlayStyle string PlayStyle { get; set; } Property Value string SavegameIdentifier A globally unique identifier for this savegame string SavegameIdentifier { get; } Property Value string Seed int Seed { get; set; } Property Value int TotalGameSeconds long TotalGameSeconds { get; set; } Property Value long WorldConfiguration ITreeAttribute WorldConfiguration { get; } Property Value ITreeAttribute WorldName string WorldName { get; set; } Property Value string WorldType string WorldType { get; set; } Property Value string Methods GetData(string) Gets a previously saved object from the savegame. Returns null if no such data under this key was previously set. byte[] GetData(string key) Parameters key string The key to look for Returns byte[] GetData<T>(string, T) Gets a previously saved object from the savegame. Returns null if no such data under this key was previously set. T GetData<T>(string key, T defaultValue = default) Parameters key string defaultValue T Returns T Type Parameters T StoreData(string, byte[]) Store the given data persistently to the savegame. Size limit is around 1 gigabyte for all data stored along with the savegame datastructure. If you need more space, you have to store it somewhere else. void StoreData(string key, byte[] data) Parameters key string Key value data byte[] Data to save StoreData<T>(string, T) Store the given data persistently to the savegame. Size limit is around 1 gigabyte for all data stored along with the savegame datastructure. If you need more space, you have to store it somewhere else. void StoreData<T>(string key, T data) Parameters key string data T Type Parameters T"
  },
  "api/Vintagestory.API.Server.IServerAPI.html": {
    "href": "api/Vintagestory.API.Server.IServerAPI.html",
    "title": "Interface IServerAPI | VintageStory API",
    "keywords": "Interface IServerAPI Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll API for general Server features public interface IServerAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties Config The servers current configuration as configured in the serverconfig.json. You can set the values but you need to call MarkDirty() to have them saved IServerConfig Config { get; } Property Value IServerConfig CurrentRunPhase Returns the servers current run phase EnumServerRunPhase CurrentRunPhase { get; } Property Value EnumServerRunPhase IsDedicated Returns whether the current server a dedicated server bool IsDedicated { get; } Property Value bool IsShuttingDown Determines if the server process has been asked to terminate. Use this when you need to save data in a method registered using RegisterOnSave() before server quits. bool IsShuttingDown { get; } Property Value bool true if server is about to shutdown Logger Returns a logging interface to log any log level message ILogger Logger { get; } Property Value ILogger Players All players known to the server (which joined at least once while the server was running) IServerPlayer[] Players { get; } Property Value IServerPlayer[] ReducedServerThreads If true, code should generally aim to reduce the number of CPU threads used on the server, even at the cost of slight performance delays bool ReducedServerThreads { get; } Property Value bool ServerIp The ip adress the server is listening at string ServerIp { get; } Property Value string ServerUptimeMilliseconds Server uptime in milliseconds long ServerUptimeMilliseconds { get; } Property Value long ServerUptimeSeconds Returns the number of seconds the server has been running since last restart int ServerUptimeSeconds { get; } Property Value int Server uptime in seconds TotalReceivedBytes long TotalReceivedBytes { get; } Property Value long TotalSentBytes long TotalSentBytes { get; } Property Value long TotalWorldPlayTime Returns the number of seconds the current world has been running. This is the playtime displayed on the singleplayer world list. int TotalWorldPlayTime { get; } Property Value int Methods AddPhysicsTickable(IPhysicsTickable) Remove an entity from the physics ticking system on the server. void AddPhysicsTickable(IPhysicsTickable entityBehavior) Parameters entityBehavior IPhysicsTickable AddServerThread(string, IAsyncServerSystem) Allows mods to add a ServerThread. Useful for off-thread tasks which must be run continuously (at specified intervals) while the server is running. Calling code simply needs to implement IAsyncServerSystem void AddServerThread(string threadname, IAsyncServerSystem system) Parameters threadname string system IAsyncServerSystem GetMiniDimension(int) Get the mini-dimension at the specified subdimension index; returns null if none exists A mini dimension is a small set of blocks up to 4096x4096x4096 used for schematic previews, vehicles etc IMiniDimension GetMiniDimension(int subId) Parameters subId int Returns IMiniDimension LoadMiniDimension(IMiniDimension) Add the specified dimension to the LoadedMiniDimensions, and return its allocated subdimension index. A mini dimension is a small set of blocks up to 4096x4096x4096 used for schematic previews, vehicles etc int LoadMiniDimension(IMiniDimension blocks) Parameters blocks IMiniDimension Returns int LogBuild(string, params object[]) Log given message with type = EnumLogType.Build void LogBuild(string message, params object[] args) Parameters message string args object[] LogChat(string, params object[]) Log given message with type = EnumLogType.Chat void LogChat(string message, params object[] args) Parameters message string args object[] LogDebug(string, params object[]) Log given message with type = EnumLogType.Debug void LogDebug(string message, params object[] args) Parameters message string args object[] LogError(string, params object[]) Log given message with type = EnumLogType.Error void LogError(string message, params object[] args) Parameters message string args object[] LogEvent(string, params object[]) void LogEvent(string message, params object[] args) Parameters message string args object[] LogFatal(string, params object[]) Log given message with type = EnumLogType.Fatal void LogFatal(string message, params object[] args) Parameters message string args object[] LogNotification(string, params object[]) Log given message with type = EnumLogType.Notification void LogNotification(string message, params object[] args) Parameters message string args object[] LogVerboseDebug(string, params object[]) Log given message with type = EnumLogType.VerboseDebug void LogVerboseDebug(string message, params object[] args) Parameters message string args object[] LogWarning(string, params object[]) Log given message with type = EnumLogType.Warning void LogWarning(string message, params object[] args) Parameters message string args object[] MarkConfigDirty() Marks the config dirty for saving void MarkConfigDirty() PauseThread(string, int) Does a blocking wait until given thread is paused. Returns true if the thread was paused within given time bool PauseThread(string threadname, int waitTimeoutMs = 5000) Parameters threadname string waitTimeoutMs int Returns bool RemovePhysicsTickable(IPhysicsTickable) Add an entity to the physics ticking system on the server. void RemovePhysicsTickable(IPhysicsTickable entityBehavior) Parameters entityBehavior IPhysicsTickable ResumeThread(string) Resumes a previously paused thread void ResumeThread(string threadname) Parameters threadname string SetMiniDimension(IMiniDimension, int) Set the specified mini-dimension at the specified subdimension index, and return its index A mini dimension is a small set of blocks up to 4096x4096x4096 used for schematic previews, vehicles etc int SetMiniDimension(IMiniDimension miniDimension, int subId) Parameters miniDimension IMiniDimension subId int Returns int ShutDown() Gracefully shuts down the server void ShutDown()"
  },
  "api/Vintagestory.API.Server.IServerChunk.html": {
    "href": "api/Vintagestory.API.Server.IServerChunk.html",
    "title": "Interface IServerChunk | VintageStory API",
    "keywords": "Interface IServerChunk Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Some extra methods available for server side chunks public interface IServerChunk : IWorldChunk Inherited Members IWorldChunk.Empty IWorldChunk.MapChunk IWorldChunk.Data IWorldChunk.Blocks IWorldChunk.Lighting IWorldChunk.MaybeBlocks IWorldChunk.Entities IWorldChunk.EntitiesCount IWorldChunk.BlockEntities IWorldChunk.Unpack() IWorldChunk.Unpack_ReadOnly() IWorldChunk.UnpackAndReadBlock(int, int) IWorldChunk.Unpack_AndReadLight(int) IWorldChunk.Unpack_AndReadLight(int, out int) IWorldChunk.MarkModified() IWorldChunk.MarkFresh() IWorldChunk.LightPositions IWorldChunk.Disposed IWorldChunk.AddEntity(Entity) IWorldChunk.RemoveEntity(long) IWorldChunk.SetModdata(string, byte[]) IWorldChunk.RemoveModdata(string) IWorldChunk.GetModdata(string) IWorldChunk.SetModdata<T>(string, T) IWorldChunk.GetModdata<T>(string, T) IWorldChunk.LiveModData IWorldChunk.GetLocalBlockAtBlockPos(IWorldAccessor, BlockPos) IWorldChunk.GetLocalBlockAtBlockPos(IWorldAccessor, int, int, int, int) IWorldChunk.GetLocalBlockAtBlockPos_LockFree(IWorldAccessor, BlockPos, int) IWorldChunk.GetLocalBlockEntityAtBlockPos(BlockPos) IWorldChunk.SetDecor(Block, int, BlockFacing) IWorldChunk.SetDecor(Block, int, int) IWorldChunk.BreakDecor(IWorldAccessor, BlockPos, BlockFacing, int?) IWorldChunk.BreakAllDecorFast(IWorldAccessor, BlockPos, int, bool) IWorldChunk.GetDecors(IBlockAccessor, BlockPos) IWorldChunk.GetSubDecors(IBlockAccessor, BlockPos) IWorldChunk.GetDecor(IBlockAccessor, BlockPos, int) IWorldChunk.SetDecors(Dictionary<int, Block>) IWorldChunk.AdjustSelectionBoxForDecor(IBlockAccessor, BlockPos, Cuboidf[]) IWorldChunk.FinishLightDoubleBuffering() IWorldChunk.GetLightAbsorptionAt(int, BlockPos, IList<Block>) IWorldChunk.AcquireBlockReadLock() IWorldChunk.ReleaseBlockReadLock() IWorldChunk.Dispose() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties BlocksPlaced Amount of (survival) player placed blocks int BlocksPlaced { get; } Property Value int BlocksRemoved Amount of (survival) player removed blocks int BlocksRemoved { get; } Property Value int GameVersionCreated The game version where this chunk was created. Please note that this is not the version at which this chunk was complete. Chunks can linger around in a half complete state for a long time. string GameVersionCreated { get; } Property Value string NotAtEdge If true, this chunk is not at the edge of the loaded or generating map: all eight neighbouring chunks are fully loaded bool NotAtEdge { get; } Property Value bool Methods GetServerModdata(string) Retrieve server side only mod data byte[] GetServerModdata(string key) Parameters key string Returns byte[] RemoveBlockEntity(BlockPos) Remove a block entity bool RemoveBlockEntity(BlockPos pos) Parameters pos BlockPos Returns bool SetServerModdata(string, byte[]) Allows setting of server side only moddata of this chunk void SetServerModdata(string key, byte[] data) Parameters key string data byte[]"
  },
  "api/Vintagestory.API.Server.IServerConfig.html": {
    "href": "api/Vintagestory.API.Server.IServerConfig.html",
    "title": "Interface IServerConfig | VintageStory API",
    "keywords": "Interface IServerConfig Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll The servers configuration public interface IServerConfig Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AllowFallingBlocks Whether or not falling blocks should fall (e.g. sand and gravel) and floating single rock blocks should break bool AllowFallingBlocks { get; set; } Property Value bool AllowFireSpread Whether or not fire should spread bool AllowFireSpread { get; set; } Property Value bool AllowPvP Whether or not to allow Player versus Player bool AllowPvP { get; set; } Property Value bool AntiAbuse AntiAbuse protection level. Use not recommended, it is very buggy at the moment EnumProtectionLevel AntiAbuse { get; set; } Property Value EnumProtectionLevel BlockTickChunkRange Horizontal distance in chunks from each player to tick blocks randomly int BlockTickChunkRange { get; set; } Property Value int BlockTickInterval The interval of time in ms between each execution of the random tick system int BlockTickInterval { get; set; } Property Value int DefaultRoleCode Default player role string DefaultRoleCode { get; set; } Property Value string DefaultSpawn Default spawn position for players [Obsolete(\"No longer used. Retrieve value from the savegame instead\")] PlayerSpawnPos DefaultSpawn { get; set; } Property Value PlayerSpawnPos HostedMode Used to disable certain features in HostedMode (wgen commands, ...) bool HostedMode { get; set; } Property Value bool HostedModeAllowMods Used to enable/disable the /moddb commands in HostedMode only bool HostedModeAllowMods { get; set; } Property Value bool LogBlockBreakPlace Whether or not to log breaking and placing of blocks to the server-build.log bool LogBlockBreakPlace { get; set; } Property Value bool LogFileSplitAfterLine After how many line we should split the log file into a new one (server-build.log -> server-build-2.log) uint LogFileSplitAfterLine { get; set; } Property Value uint MaxChunkRadius How many chunks in each direction should be loaded at most for each player (1 chunk = 32 blocks) int MaxChunkRadius { get; set; } Property Value int MaxClients Max amount of concurrent players, any beyond will be denied to join If the cli argument --maxclients is set then the value provided by the cli arg will be returned instead of the one from the config int MaxClients { get; set; } Property Value int MaxMainThreadBlockTicks The maximum number of blocks to tick per server tick int MaxMainThreadBlockTicks { get; set; } Property Value int Password Password the player has to supply to join string Password { get; set; } Property Value string Port The current network port int Port { get; } Property Value int RandomBlockTicksPerChunk The number of blocks to sample for ticks each pass within a single chunk int RandomBlockTicksPerChunk { get; set; } Property Value int Roles List of player roles List<IPlayerRole> Roles { get; } Property Value List<IPlayerRole> ServerName Name of the server, currently not used string ServerName { get; set; } Property Value string SpawnCapPlayerScaling float SpawnCapPlayerScaling { get; set; } Property Value float TickTime Of often the server should tick in milliesconds float TickTime { get; set; } Property Value float WelcomeMessage Displays when the user logs in. string WelcomeMessage { get; set; } Property Value string WhitelistMode If true, only whitelisted players can join EnumWhitelistMode WhitelistMode { get; set; } Property Value EnumWhitelistMode"
  },
  "api/Vintagestory.API.Server.IServerEventAPI.html": {
    "href": "api/Vintagestory.API.Server.IServerEventAPI.html",
    "title": "Interface IServerEventAPI | VintageStory API",
    "keywords": "Interface IServerEventAPI Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Contains methods to hook into various server processes public interface IServerEventAPI : IEventAPI Inherited Members IEventAPI.EntityMounted IEventAPI.EntityUnmounted IEventAPI.PlayerDimensionChanged IEventAPI.OnTestBlockAccess IEventAPI.OnTestBlockAccessClaim IEventAPI.OnEntitySpawn IEventAPI.OnEntityLoaded IEventAPI.OnEntityDeath IEventAPI.OnEntityDespawn IEventAPI.ChunkDirty IEventAPI.MapRegionLoaded IEventAPI.MapRegionUnloaded IEventAPI.OnGetClimate IEventAPI.OnGetWindSpeed IEventAPI.MatchesGridRecipe IEventAPI.PushEvent(string, IAttribute) IEventAPI.RegisterEventBusListener(EventBusListenerDelegate, double, string) IEventAPI.RegisterGameTickListener(Action<float>, int, int) IEventAPI.RegisterGameTickListener(Action<float>, Action<Exception>, int, int) IEventAPI.RegisterGameTickListener(Action<IWorldAccessor, BlockPos, float>, BlockPos, int, int) IEventAPI.RegisterCallback(Action<float>, int) IEventAPI.RegisterCallback(Action<float>, int, bool) IEventAPI.RegisterCallback(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) IEventAPI.UnregisterCallback(long) IEventAPI.UnregisterGameTickListener(long) IEventAPI.EnqueueMainThreadTask(Action, string) IEventAPI.TriggerPlayerDimensionChanged(IPlayer) IEventAPI.TriggerEntityDeath(Entity, DamageSource) IEventAPI.TriggerMatchesRecipe(IPlayer, GridRecipe, ItemSlot[], int) IEventAPI.TriggerEntityMounted(EntityAgent, IMountableSeat) IEventAPI.TriggerEntityUnmounted(EntityAgent, IMountableSeat) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods ChunkColumnGeneration(ChunkColumnGenerationDelegate, EnumWorldGenPass, string) Vintagestory uses this method to generate the basic terrain (base terrain + rock strata + caves) in full columns. Only called once in pass EnumWorldGenPass.TerrainNoise. Register to this event if you need acces to a whole chunk column during inital generation. void ChunkColumnGeneration(ChunkColumnGenerationDelegate handler, EnumWorldGenPass pass, string forWorldType) Parameters handler ChunkColumnGenerationDelegate pass EnumWorldGenPass forWorldType string For which world types to use this generator GetRegisteredWorldGenHandlers(string) Returns the list of currently registered map chunk generator handlers for given world type. Returns an array of handler lists. Each element in the array represents all the handlers for one worldgenpass (see EnumWorldGenPass) When world type is null, all handlers are returned IWorldGenHandler GetRegisteredWorldGenHandlers(string worldType) Parameters worldType string \"standard\" for the vanilla world generator Returns IWorldGenHandler GetWorldgenBlockAccessor(WorldGenThreadDelegate) If you require neighbour chunk data during world generation, you have to register to this event to receive access to the chunk generator thread. This method is only called once during server startup. void GetWorldgenBlockAccessor(WorldGenThreadDelegate handler) Parameters handler WorldGenThreadDelegate InitWorldGenerator(Action, string) Triggered before the first chunk, map chunk or map region is generated, given that the passed on world type has been selected. Called right after the save game has been loaded. void InitWorldGenerator(Action handler, string forWorldType) Parameters handler Action forWorldType string MapChunkGeneration(MapChunkGeneratorDelegate, string) Event that is triggered whenever a new column of chunks is being generated. It is always called before the ChunkGenerator event void MapChunkGeneration(MapChunkGeneratorDelegate handler, string forWorldType) Parameters handler MapChunkGeneratorDelegate forWorldType string For which world types to use this generator MapRegionGeneration(MapRegionGeneratorDelegate, string) Event that is triggered whenever a new 16x16 section of column of chunks is being generated. It is always called before the ChunkGenerator and before the MapChunkGeneration event void MapRegionGeneration(MapRegionGeneratorDelegate handler, string forWorldType) Parameters handler MapRegionGeneratorDelegate forWorldType string For which world types to use this generator PlayerChunkTransition(IServerPlayer) Triggers an immediate ClientAwarenessEvent for the specified player void PlayerChunkTransition(IServerPlayer player) Parameters player IServerPlayer ServerRunPhase(EnumServerRunPhase, Action) Triggered whenever the server enters a new run phase. Since mods are only loaded during run phase \"LoadGamePre\" registering to any earlier event will get triggered. void ServerRunPhase(EnumServerRunPhase runPhase, Action handler) Parameters runPhase EnumServerRunPhase handler Action Timer(Action, double) Registers a method to be called every given interval void Timer(Action handler, double interval) Parameters handler Action interval double TriggerInitWorldGen() object TriggerInitWorldGen() Returns object TriggerTrySpawnEntity(IBlockAccessor, ref EntityProperties, Vec3d, long) bool TriggerTrySpawnEntity(IBlockAccessor blockAccessor, ref EntityProperties properties, Vec3d position, long herdId) Parameters blockAccessor IBlockAccessor properties EntityProperties position Vec3d herdId long Returns bool TriggerWorldgenHook(string, IBlockAccessor, BlockPos, string) Trigger the special worldgen hook, with the name \"hook\", if it exists void TriggerWorldgenHook(string hook, IBlockAccessor blockAccessor, BlockPos pos, string param) Parameters hook string blockAccessor IBlockAccessor pos BlockPos param string WorldgenHook(WorldGenHookDelegate, string, string) Registers a method to be called by certain special worldgen triggers, for example Resonance Archives entrance staircase void WorldgenHook(WorldGenHookDelegate handler, string forWorldType, string hook) Parameters handler WorldGenHookDelegate forWorldType string hook string Events AfterActiveSlotChanged Fired after a player changes their active slot (such as selected hotbar slot). event Action<IServerPlayer, ActiveSlotChangeEventArgs> AfterActiveSlotChanged Event Type Action<IServerPlayer, ActiveSlotChangeEventArgs> AssetsFinalizers Triggered after assets have been loaded and parsed and registered, but before they are declared to be ready - e.g. you can add more behaviors here, or make other code-based changes to properties read from JSONs Note: modsystems should register for this in a Start() method not StartServerSide(): the AssetsFinalizer event is fired before StartServerSide() is reached [Obsolete(\"Override Method Modsystem.AssetsFinalize instead\")] event Action AssetsFinalizers Event Type Action BeforeActiveSlotChanged Fired before a player changes their active slot (such as selected hotbar slot). Allows for the event to be cancelled depending on the return value. event Func<IServerPlayer, ActiveSlotChangeEventArgs, EnumHandling> BeforeActiveSlotChanged Event Type Func<IServerPlayer, ActiveSlotChangeEventArgs, EnumHandling> BeginChunkColumnLoadChunkThread Called when just loaded (or generated) a full chunkcolumn event ChunkColumnBeginLoadChunkThread BeginChunkColumnLoadChunkThread Event Type ChunkColumnBeginLoadChunkThread BreakBlock Called when a block should got broken now (that has been broken by a player). Set handling to PreventDefault to handle the block breaking yourself. Otherwise the engine will break the block (= either call heldItemstack.Collectible.OnBlockBrokenWith when player holds something in his hands or block.OnBlockBroken). event BlockBreakDelegate BreakBlock Event Type BlockBreakDelegate CanPlaceOrBreakBlock Registers a handler to be called every time a player places a block. The methods return value determines if the player may place/break this block. When returning false the client will be notified and the action reverted event CanPlaceOrBreakDelegate CanPlaceOrBreakBlock Event Type CanPlaceOrBreakDelegate CanUseBlock Registers a handler to be called every time a player uses a block. The methods return value determines if the player may place/break this block. event CanUseDelegate CanUseBlock Event Type CanUseDelegate ChunkColumnLoaded Called whenever the server loaded from disk or fully generated a chunkcolumn event ChunkColumnLoadedDelegate ChunkColumnLoaded Event Type ChunkColumnLoadedDelegate ChunkColumnUnloaded Called just before a chunk column is about to get unloaded. On shutdown this method is called for all loaded chunks, so this method can get called tens of thousands of times there, beware event ChunkColumnUnloadDelegate ChunkColumnUnloaded Event Type ChunkColumnUnloadDelegate DidBreakBlock Registers a method to be called every time a player deletes a block. Called after the block was already broken event BlockBrokenDelegate DidBreakBlock Event Type BlockBrokenDelegate DidPlaceBlock Registers a method to be called every time a player places a block event BlockPlacedDelegate DidPlaceBlock Event Type BlockPlacedDelegate DidUseBlock Registers a method to be called every time a player uses a block event BlockUsedDelegate DidUseBlock Event Type BlockUsedDelegate GameWorldSave Triggered before the game world data is being saved to disk event Action GameWorldSave Event Type Action OnPlayerInteractEntity Called when a player interacts with an entity event OnInteractDelegate OnPlayerInteractEntity Event Type OnInteractDelegate OnTrySpawnEntity Called when the server attempts to spawn given entity. Return false to deny spawning. event TrySpawnEntityDelegate OnTrySpawnEntity Event Type TrySpawnEntityDelegate PhysicsThreadStart Triggered when a new multithreaded physics thread starts (for example, use this to initialise any ThreadStatic element which must be initialised per-thread) event Action PhysicsThreadStart Event Type Action PlayerChat Called when a player wrote a chat message event PlayerChatDelegate PlayerChat Event Type PlayerChatDelegate PlayerCreate Called when a new player joins event PlayerDelegate PlayerCreate Event Type PlayerDelegate PlayerDeath Called when a player died event PlayerDeathDelegate PlayerDeath Event Type PlayerDeathDelegate PlayerDisconnect Called whenever a player disconnects (timeout, leave, disconnect, kick, etc.). event PlayerDelegate PlayerDisconnect Event Type PlayerDelegate PlayerJoin Called when a player joins event PlayerDelegate PlayerJoin Event Type PlayerDelegate PlayerLeave Called when a player intentionally leaves event PlayerDelegate PlayerLeave Event Type PlayerDelegate PlayerNowPlaying Called when a player joins and his client is now fully loaded and ready to play event PlayerDelegate PlayerNowPlaying Event Type PlayerDelegate PlayerRespawn Called when a player got respawned event PlayerDelegate PlayerRespawn Event Type PlayerDelegate PlayerSwitchGameMode Whenever a player switched his game mode or has it switched for him event PlayerDelegate PlayerSwitchGameMode Event Type PlayerDelegate SaveGameCreated Triggered after a savegame has been created - i.e. when a new world was created event Action SaveGameCreated Event Type Action SaveGameLoaded Triggered after the game world data has been loaded. At this point all blocks are loaded and the Map size is known. In 1.17+ do NOT use this server event to add or update behaviors or attributes or other fixed properties of any block, item or entity, in code (additional to what is read from JSON). Instead, code which needs to do that should be registered for event sapi.Event.AssetsFinalizers. See VSSurvivalMod system BlockReinforcement.cs for an example. event Action SaveGameLoaded Event Type Action ServerResume Called when something wants to resume execution of the server, e.g. the autosave system event ResumeServerDelegate ServerResume Event Type ResumeServerDelegate ServerSuspend Called when something wants to pause the server, e.g. the autosave system. This method will be called every 50ms until all delegates return Ready state. Timeout is 60 seconds. event SuspendServerDelegate ServerSuspend Event Type SuspendServerDelegate WorldgenStartup Triggered when starting up worldgen during server startup (as the final stage of the WorldReady EnumServerRunPhase) event Action WorldgenStartup Event Type Action"
  },
  "api/Vintagestory.API.Server.IServerNetworkAPI.html": {
    "href": "api/Vintagestory.API.Server.IServerNetworkAPI.html",
    "title": "Interface IServerNetworkAPI | VintageStory API",
    "keywords": "Interface IServerNetworkAPI Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll API Features to set up a network channel for custom server<->client data exchange. Server side. public interface IServerNetworkAPI : INetworkAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods BroadcastArbitraryPacket(byte[], params IServerPlayer[]) Sends a packet data to everyone except given players. This lets you mess with the raw network communication if you know the protocol. Use with caution! For normal network communication you probably want to register your own network channel. void BroadcastArbitraryPacket(byte[] data, params IServerPlayer[] exceptPlayers) Parameters data byte[] exceptPlayers IServerPlayer[] BroadcastArbitraryPacket(object, params IServerPlayer[]) (for internal use: packet should be a Packet_Server) void BroadcastArbitraryPacket(object packet, params IServerPlayer[] exceptPlayers) Parameters packet object exceptPlayers IServerPlayer[] BroadcastBlockEntityPacket(BlockPos, int, byte[]) Broadcasts a blockentity packet to all connected players. For quick an easy network communication without setting up a channel first. void BroadcastBlockEntityPacket(BlockPos pos, int packetId, byte[] data = null) Parameters pos BlockPos packetId int data byte[] BroadcastBlockEntityPacket(BlockPos, int, byte[], params IServerPlayer[]) void BroadcastBlockEntityPacket(BlockPos pos, int packetId, byte[] data = null, params IServerPlayer[] skipPlayers) Parameters pos BlockPos packetId int data byte[] skipPlayers IServerPlayer[] BroadcastBlockEntityPacket<T>(BlockPos, int, T) Broadcasts a blockentity packet to all connected players. For quick an easy network communication without setting up a channel first. Uses ProtoBuf.net to serialize the data. void BroadcastBlockEntityPacket<T>(BlockPos pos, int packetId, T data = default) Parameters pos BlockPos packetId int data T Type Parameters T BroadcastEntityPacket(long, int, byte[]) Sends a entity packet to all players in range. For quick an easy entity network communication without setting up a channel first. void BroadcastEntityPacket(long entityid, int packetId, byte[] data = null) Parameters entityid long packetId int data byte[] GetChannel(string) Returns a previously registered channeled, null otherwise IServerNetworkChannel GetChannel(string channelName) Parameters channelName string Returns IServerNetworkChannel GetUdpChannel(string) Returns a previously registered channeled, null otherwise IServerNetworkChannel GetUdpChannel(string channelName) Parameters channelName string Returns IServerNetworkChannel RegisterChannel(string) Supplies you with your very own and personal network channel that you can use to send packets across the network. Use the same channelName on the client and server to have them link up. IServerNetworkChannel RegisterChannel(string channelName) Parameters channelName string Unique channel identifier Returns IServerNetworkChannel RegisterUdpChannel(string) Supplies you with your very own and personal network channel that you can use to send packets across the network. Use the same channelName on the client and server to have them link up. Do not send larger messages then 508 bytes since some clients may be behind NAT/firwalls that may drop your packets if they get fragmented IServerNetworkChannel RegisterUdpChannel(string channelName) Parameters channelName string Unique channel identifier Returns IServerNetworkChannel SendArbitraryPacket(byte[], params IServerPlayer[]) Sends a packet data to given players. This lets you mess with the raw network communication if you know the protocol. Use with caution! For normal network communication you probably want to register your own network channel. void SendArbitraryPacket(byte[] data, params IServerPlayer[] players) Parameters data byte[] players IServerPlayer[] SendArbitraryPacket(object, params IServerPlayer[]) (for internal use: packet should be a Packet_Server) void SendArbitraryPacket(object packet, params IServerPlayer[] players) Parameters packet object players IServerPlayer[] SendBlockEntityPacket(IServerPlayer, BlockPos, int, byte[]) Sends a blockentity packet to the given player. For quick an easy network communication without setting up a channel first. void SendBlockEntityPacket(IServerPlayer player, BlockPos pos, int packetId, byte[] data = null) Parameters player IServerPlayer pos BlockPos packetId int data byte[] SendBlockEntityPacket<T>(IServerPlayer, BlockPos, int, T) Sends a blockentity packet to the given player. For quick an easy network communication without setting up a channel first. Uses ProtoBuf.net to serialize the data. void SendBlockEntityPacket<T>(IServerPlayer player, BlockPos pos, int packetId, T data = default) Parameters player IServerPlayer pos BlockPos packetId int data T Type Parameters T SendEntityPacket(IServerPlayer, long, int, byte[]) Sends a entity packet to the given player and entity. For quick an easy entity network communication without setting up a channel first. void SendEntityPacket(IServerPlayer player, long entityid, int packetId, byte[] data = null) Parameters player IServerPlayer entityid long packetId int data byte[]"
  },
  "api/Vintagestory.API.Server.IServerNetworkChannel.html": {
    "href": "api/Vintagestory.API.Server.IServerNetworkChannel.html",
    "title": "Interface IServerNetworkChannel | VintageStory API",
    "keywords": "Interface IServerNetworkChannel Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Represent a custom network channel for sending messages between client and server public interface IServerNetworkChannel : INetworkChannel Inherited Members INetworkChannel.ChannelName Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods BroadcastPacket<T>(T, params IServerPlayer[]) When called on Sends a packet to all connected player, except given players void BroadcastPacket<T>(T message, params IServerPlayer[] exceptPlayers) Parameters message T exceptPlayers IServerPlayer[] Type Parameters T RegisterMessageType(Type) Registers a handler for when you send a packet with given messageId. Must be registered in the same order as on the server. IServerNetworkChannel RegisterMessageType(Type type) Parameters type Type Returns IServerNetworkChannel RegisterMessageType<T>() Registers a handler for when you send a packet with given messageId. Must be registered in the same order as on the server. IServerNetworkChannel RegisterMessageType<T>() Returns IServerNetworkChannel Type Parameters T SendPacket<T>(T, byte[], params IServerPlayer[]) Sends a packet to given player, where the byte[] data has already been serialized void SendPacket<T>(T message, byte[] data, params IServerPlayer[] players) Parameters message T data byte[] players IServerPlayer[] Type Parameters T SendPacket<T>(T, params IServerPlayer[]) Sends a packet to given player void SendPacket<T>(T message, params IServerPlayer[] players) Parameters message T players IServerPlayer[] Type Parameters T SetMessageHandler<T>(NetworkClientMessageHandler<T>) Registers a handler for when you send a packet with given messageId IServerNetworkChannel SetMessageHandler<T>(NetworkClientMessageHandler<T> messageHandler) Parameters messageHandler NetworkClientMessageHandler<T> Returns IServerNetworkChannel Type Parameters T"
  },
  "api/Vintagestory.API.Server.IServerPlayer.html": {
    "href": "api/Vintagestory.API.Server.IServerPlayer.html",
    "title": "Interface IServerPlayer | VintageStory API",
    "keywords": "Interface IServerPlayer Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Represents a player on the server side that joined the server at least once. May not be online at this point in time. public interface IServerPlayer : IPlayer Inherited Members IPlayer.Role IPlayer.Groups IPlayer.GetGroups() IPlayer.GetGroup(int) IPlayer.Entitlements IPlayer.CurrentBlockSelection IPlayer.CurrentEntitySelection IPlayer.PlayerName IPlayer.PlayerUID IPlayer.ClientId IPlayer.Entity IPlayer.WorldData IPlayer.InventoryManager IPlayer.Privileges IPlayer.ImmersiveFpMode IPlayer.HasPrivilege(string) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties ConnectionState Retrieves the current connection state of the client EnumClientState ConnectionState { get; } Property Value EnumClientState CurrentChunkSentRadius The \"radius\" of chunks that the player already received. If set to 0, the server will recheck all nearby chunks if they have been sent or not and send them when necessary int CurrentChunkSentRadius { get; set; } Property Value int IpAddress Get the IP for the given player ID. Returns null if not connected, or when called on client side. string IpAddress { get; } Property Value string ItemCollectMode int ItemCollectMode { get; set; } Property Value int LanguageCode The language this player is currently using string LanguageCode { get; } Property Value string Ping Returns the players ping time in seconds. Returns NaN if not connected or when on client side. float Ping { get; } Property Value float ServerData The players configuration that is world independent IServerPlayerData ServerData { get; } Property Value IServerPlayerData Methods BroadcastPlayerData(bool) Notifies all clients of given players playerdata. Useful when you modified any of the WorldData. Does nothing if this player is not connected. Also sends the player data to the player himself void BroadcastPlayerData(bool sendInventory = false) Parameters sendInventory bool ClearSpawnPosition() Removes the player specific spawn position, which means it will default to the role or global default spawn position void ClearSpawnPosition() Disconnect() Disconnects (kicks) this player from the server. Does nothing if this player is not connected. void Disconnect() Disconnect(string) Disconnects (kicks) a player from the server with given reason. Does nothing if this player is not connected. void Disconnect(string message) Parameters message string Message displayed to the player GetModData<T>(string, T) T GetModData<T>(string key, T defaultValue = default) Parameters key string defaultValue T Returns T Type Parameters T GetModdata(string) Retrieve arbitrary, permantly stored mod data byte[] GetModdata(string key) Parameters key string Returns byte[] GetSpawnPosition(bool) Returns the default spawn position. This method will return the custom spawnpoint if one has been permanently set. If no custom spawnpoint is present this method will return the global default spawnpoint. Returns null when called on client side. FuzzyEntityPos GetSpawnPosition(bool consumeSpawnUse) Parameters consumeSpawnUse bool If true, and this spawn point is use limited, will consume one use of it Returns FuzzyEntityPos RemoveModdata(string) Removes the permanently stored mod data void RemoveModdata(string key) Parameters key string SendIngameError(string, string, params object[]) Shows a vibrating red text in the players screen. If message is null the client will try to find a language entry using supplied code prefixed with 'ingameerror-' (which is recommended so that the errors are translated to the users local language) void SendIngameError(string code, string message = null, params object[] langparams) Parameters code string message string langparams object[] If message is null, these are the arguments passed into the Language translation tool SendLocalisedMessage(int, string, params object[]) Sends a chat message (notification type) to this player, localised to the player's own language independent from the server language The message will be string formatted - similar to Lang.Get() - with the specified optional args void SendLocalisedMessage(int groupId, string message, params object[] args) Parameters groupId int message string args object[] SendMessage(int, string, EnumChatType, string) Sends a chat message to this player to given groupId. You can use GlobalConstants.GeneralChatGroup as groupId to send it to the players general chat. void SendMessage(int groupId, string message, EnumChatType chatType, string data = null) Parameters groupId int message string chatType EnumChatType data string Optional parameter that can be used to pass on unformated data. Just like stdin/stdout/stderr, you could see this as a separate \"programming communication channel\" SetModData<T>(string, T) void SetModData<T>(string key, T data) Parameters key string data T Type Parameters T SetModdata(string, byte[]) Allows setting of arbitrary, permanantly stored moddata attached to this player. Not synced to client. void SetModdata(string key, byte[] data) Parameters key string data byte[] SetRole(string) Sets the players privilege role. For a list of roles, read sapi.Config.Roles void SetRole(string roleCode) Parameters roleCode string SetSpawnPosition(PlayerSpawnPos) Sets a player specific spawn position void SetSpawnPosition(PlayerSpawnPos pos) Parameters pos PlayerSpawnPos Events InWorldAction event OnEntityAction InWorldAction Event Type OnEntityAction"
  },
  "api/Vintagestory.API.Server.IServerPlayerData.html": {
    "href": "api/Vintagestory.API.Server.IServerPlayerData.html",
    "title": "Interface IServerPlayerData | VintageStory API",
    "keywords": "Interface IServerPlayerData Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll The player configuration that is world independent public interface IServerPlayerData Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AllowInvite Whether or not this player wants to receive group invites bool AllowInvite { get; } Property Value bool CustomPlayerData Store your own custom data in here if you need. Might want to serialize your data to json code first. Dictionary<string, string> CustomPlayerData { get; } Property Value Dictionary<string, string> DeniedPrivileges Privilige explicitly revoked from this player HashSet<string> DeniedPrivileges { get; } Property Value HashSet<string> ExtraLandClaimAllowance Extra land claim allowance (beyond whats granted by the role) int ExtraLandClaimAllowance { get; set; } Property Value int ExtraLandClaimAreas Extra land claim areas (beyond whats granted by the role) int ExtraLandClaimAreas { get; set; } Property Value int FirstJoinDate string FirstJoinDate { get; set; } Property Value string LastCharacterSelectionDate string LastCharacterSelectionDate { get; set; } Property Value string LastJoinDate string LastJoinDate { get; set; } Property Value string LastKnownPlayername The players last known player name. This may have changed since the last log in. string LastKnownPlayername { get; } Property Value string PermaPrivileges Privilige explicitly granted to this player HashSet<string> PermaPrivileges { get; } Property Value HashSet<string> PlayerGroupMemberships List of groups the player is a member off Dictionary<int, PlayerGroupMembership> PlayerGroupMemberships { get; } Property Value Dictionary<int, PlayerGroupMembership> PlayerUID The players unique identifier string PlayerUID { get; } Property Value string RoleCode The players role code string RoleCode { get; } Property Value string"
  },
  "api/Vintagestory.API.Server.IServerWorldAccessor.html": {
    "href": "api/Vintagestory.API.Server.IServerWorldAccessor.html",
    "title": "Interface IServerWorldAccessor | VintageStory API",
    "keywords": "Interface IServerWorldAccessor Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll The world accessor implemented by the server public interface IServerWorldAccessor : IWorldAccessor Inherited Members IWorldAccessor.Config IWorldAccessor.DefaultSpawnPosition IWorldAccessor.FrameProfiler IWorldAccessor.Api IWorldAccessor.ChunkProvider IWorldAccessor.Claims IWorldAccessor.LoadedChunkIndices IWorldAccessor.LoadedMapChunkIndices IWorldAccessor.BlockLightLevels IWorldAccessor.SunLightLevels IWorldAccessor.SeaLevel IWorldAccessor.Seed IWorldAccessor.SavegameIdentifier IWorldAccessor.SunBrightness IWorldAccessor.EntityDebugMode IWorldAccessor.AssetManager IWorldAccessor.Logger IWorldAccessor.Side IWorldAccessor.BlockAccessor IWorldAccessor.BulkBlockAccessor IWorldAccessor.ClassRegistry IWorldAccessor.Calendar IWorldAccessor.CollisionTester IWorldAccessor.Rand IWorldAccessor.ElapsedMilliseconds IWorldAccessor.Collectibles IWorldAccessor.Blocks IWorldAccessor.Items IWorldAccessor.EntityTypes IWorldAccessor.EntityTypeCodes IWorldAccessor.GridRecipes IWorldAccessor.GetRecipeRegistry(string) IWorldAccessor.DefaultEntityTrackingRange IWorldAccessor.GetItem(int) IWorldAccessor.GetBlock(int) IWorldAccessor.SearchBlocks(AssetLocation) IWorldAccessor.SearchItems(AssetLocation) IWorldAccessor.GetItem(AssetLocation) IWorldAccessor.GetBlock(AssetLocation) IWorldAccessor.GetEntityType(AssetLocation) IWorldAccessor.SpawnItemEntity(ItemStack, Vec3d, Vec3d) IWorldAccessor.SpawnItemEntity(ItemStack, BlockPos, Vec3d) IWorldAccessor.SpawnEntity(Entity) IWorldAccessor.SpawnPriorityEntity(Entity) IWorldAccessor.LoadEntity(Entity, long) IWorldAccessor.UpdateEntityChunk(Entity, long) IWorldAccessor.GetEntitiesAround(Vec3d, float, float, ActionConsumable<Entity>) IWorldAccessor.GetEntitiesInsideCuboid(BlockPos, BlockPos, ActionConsumable<Entity>) IWorldAccessor.GetPlayersAround(Vec3d, float, float, ActionConsumable<IPlayer>) IWorldAccessor.GetNearestEntity(Vec3d, float, float, ActionConsumable<Entity>) IWorldAccessor.GetEntityById(long) IWorldAccessor.GetIntersectingEntities(BlockPos, Cuboidf[], ActionConsumable<Entity>) IWorldAccessor.NearestPlayer(double, double, double) IWorldAccessor.AllOnlinePlayers IWorldAccessor.AllPlayers IWorldAccessor.PlayerByUid(string) IWorldAccessor.PlaySoundAt(AssetLocation, double, double, double, IPlayer, bool, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, BlockPos, double, IPlayer, bool, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, Entity, IPlayer, bool, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, Entity, IPlayer, float, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, double, double, double, IPlayer, float, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, double, double, double, IPlayer, EnumSoundType, float, float, float) IWorldAccessor.PlaySoundAt(AssetLocation, IPlayer, IPlayer, bool, float, float) IWorldAccessor.PlaySoundFor(AssetLocation, IPlayer, bool, float, float) IWorldAccessor.PlaySoundFor(AssetLocation, IPlayer, float, float, float) IWorldAccessor.SpawnParticles(float, int, Vec3d, Vec3d, Vec3f, Vec3f, float, float, float, EnumParticleModel, IPlayer) IWorldAccessor.SpawnParticles(IParticlePropertiesProvider, IPlayer) IWorldAccessor.SpawnCubeParticles(BlockPos, Vec3d, float, int, float, IPlayer, Vec3f) IWorldAccessor.SpawnCubeParticles(Vec3d, ItemStack, float, int, float, IPlayer, Vec3f) IWorldAccessor.RayTraceForSelection(Vec3d, Vec3d, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RayTraceForSelection(IWorldIntersectionSupplier, Vec3d, Vec3d, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RayTraceForSelection(Vec3d, float, float, float, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RayTraceForSelection(Ray, ref BlockSelection, ref EntitySelection, BlockFilter, EntityFilter) IWorldAccessor.RegisterGameTickListener(Action<float>, int, int) IWorldAccessor.UnregisterGameTickListener(long) IWorldAccessor.RegisterCallback(Action<float>, int) IWorldAccessor.RegisterCallbackUnique(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) IWorldAccessor.RegisterCallback(Action<IWorldAccessor, BlockPos, float>, BlockPos, int) IWorldAccessor.PlayerHasPrivilege(int, string) IWorldAccessor.UnregisterCallback(long) IWorldAccessor.InteresectionTester IWorldAccessor.HighlightBlocks(IPlayer, int, List<BlockPos>, List<int>, EnumHighlightBlocksMode, EnumHighlightShape, float) IWorldAccessor.HighlightBlocks(IPlayer, int, List<BlockPos>, EnumHighlightBlocksMode, EnumHighlightShape) IWorldAccessor.GetBlockAccessor(bool, bool, bool, bool) IWorldAccessor.GetBlockAccessorBulkUpdate(bool, bool, bool) IWorldAccessor.GetBlockAccessorBulkMinimalUpdate(bool, bool) IWorldAccessor.GetBlockAccessorMapChunkLoading(bool, bool) IWorldAccessor.GetBlockAccessorRevertable(bool, bool, bool) IWorldAccessor.GetBlockAccessorPrefetch(bool, bool) IWorldAccessor.GetCachingBlockAccessor(bool, bool) IWorldAccessor.GetLockFreeBlockAccessor() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties LoadedEntities The internal cache of all currently loaded entities. Warning: You should not set or remove anything from this dic unless you really know what you're doing. Use SpawnEntity/DespawnEntity instead. Intended to be used, for example, to search for an entity's presence, or to iterate through all loaded entities. Please leave it to the game engine to add and remove entities from this dictionary. From 1.18.2 onwards, if you really need to add or remove anything directly to/from this dictionary in your own code - which is strongly not recommended - then you should cast this to (CachingConcurrentDictionary) first. ConcurrentDictionary<long, Entity> LoadedEntities { get; } Property Value ConcurrentDictionary<long, Entity> RemappedEntities Dictionary of entity codes to remap, old codes (which may be present in save files or schematics) as keys Dictionary<string, string> RemappedEntities { get; } Property Value Dictionary<string, string> TreeGenerators List of all loaded tree generators OrderedDictionary<AssetLocation, ITreeGenerator> TreeGenerators { get; } Property Value OrderedDictionary<AssetLocation, ITreeGenerator> Methods CreateExplosion(BlockPos, EnumBlastType, double, double, float, string) Creates an explosion at given position. void CreateExplosion(BlockPos pos, EnumBlastType blastType, double destructionRadius, double injureRadius, float blockDropChanceMultiplier = 1, string ignitedByPlayerUid = null) Parameters pos BlockPos blastType EnumBlastType destructionRadius double injureRadius double blockDropChanceMultiplier float ignitedByPlayerUid string DespawnEntity(Entity, EntityDespawnData) Removes an entity from the game and the chunk it resides in void DespawnEntity(Entity entity, EntityDespawnData reason) Parameters entity Entity reason EntityDespawnData IsFullyLoadedChunk(BlockPos) bool IsFullyLoadedChunk(BlockPos pos) Parameters pos BlockPos Returns bool"
  },
  "api/Vintagestory.API.Server.ITreeGenerator.html": {
    "href": "api/Vintagestory.API.Server.ITreeGenerator.html",
    "title": "Interface ITreeGenerator | VintageStory API",
    "keywords": "Interface ITreeGenerator Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface ITreeGenerator Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods GrowTree(IBlockAccessor, BlockPos, TreeGenParams, IRandom) void GrowTree(IBlockAccessor blockAccessor, BlockPos pos, TreeGenParams treeGenParams, IRandom random) Parameters blockAccessor IBlockAccessor pos BlockPos treeGenParams TreeGenParams random IRandom"
  },
  "api/Vintagestory.API.Server.IWorldGenBlockAccessor.html": {
    "href": "api/Vintagestory.API.Server.IWorldGenBlockAccessor.html",
    "title": "Interface IWorldGenBlockAccessor | VintageStory API",
    "keywords": "Interface IWorldGenBlockAccessor Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IWorldGenBlockAccessor : IBlockAccessor Inherited Members IBlockAccessor.ChunkSize IBlockAccessor.RegionSize IBlockAccessor.MapSizeX IBlockAccessor.MapSizeY IBlockAccessor.MapSizeZ IBlockAccessor.RegionMapSizeX IBlockAccessor.RegionMapSizeY IBlockAccessor.RegionMapSizeZ IBlockAccessor.UpdateSnowAccumMap IBlockAccessor.MapSize IBlockAccessor.GetChunk(int, int, int) IBlockAccessor.GetChunk(long) IBlockAccessor.GetMapRegion(int, int) IBlockAccessor.GetChunkAtBlockPos(BlockPos) IBlockAccessor.GetBlockId(BlockPos) IBlockAccessor.GetBlock(BlockPos) IBlockAccessor.GetBlockRaw(int, int, int, int) IBlockAccessor.GetBlock(BlockPos, int) IBlockAccessor.GetMostSolidBlock(BlockPos) IBlockAccessor.GetChunkAtBlockPos(int, int, int) IBlockAccessor.GetBlockId(int, int, int) IBlockAccessor.GetBlockOrNull(int, int, int, int) IBlockAccessor.GetBlock(int, int, int, int) IBlockAccessor.GetBlock(int, int, int) IBlockAccessor.GetMostSolidBlock(int, int, int) IBlockAccessor.WalkBlocks(BlockPos, BlockPos, Action<Block, int, int, int>, bool) IBlockAccessor.SearchBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.SearchFluidBlocks(BlockPos, BlockPos, ActionConsumable<Block, BlockPos>, Action<int, int, int>) IBlockAccessor.WalkStructures(BlockPos, Action<GeneratedStructure>) IBlockAccessor.WalkStructures(BlockPos, BlockPos, Action<GeneratedStructure>) IBlockAccessor.SetBlock(int, BlockPos) IBlockAccessor.SetBlock(int, BlockPos, int) IBlockAccessor.SetBlock(int, BlockPos, ItemStack) IBlockAccessor.ExchangeBlock(int, BlockPos) IBlockAccessor.BreakBlock(BlockPos, IPlayer, float) IBlockAccessor.DamageBlock(BlockPos, BlockFacing, float) IBlockAccessor.GetBlock(int) IBlockAccessor.GetBlock(AssetLocation) IBlockAccessor.SpawnBlockEntity(string, BlockPos, ItemStack) IBlockAccessor.SpawnBlockEntity(BlockEntity) IBlockAccessor.RemoveBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity(BlockPos) IBlockAccessor.GetBlockEntity<T>(BlockPos) IBlockAccessor.IsValidPos(int, int, int) IBlockAccessor.IsValidPos(BlockPos) IBlockAccessor.IsNotTraversable(double, double, double) IBlockAccessor.IsNotTraversable(double, double, double, int) IBlockAccessor.IsNotTraversable(BlockPos) IBlockAccessor.Commit() IBlockAccessor.Rollback() IBlockAccessor.MarkBlockEntityDirty(BlockPos) IBlockAccessor.TriggerNeighbourBlockUpdate(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, IPlayer) IBlockAccessor.MarkBlockModified(BlockPos) IBlockAccessor.MarkBlockDirty(BlockPos, Action) IBlockAccessor.GetLightLevel(BlockPos, EnumLightLevelType) IBlockAccessor.GetLightLevel(int, int, int, EnumLightLevelType) IBlockAccessor.GetLightRGBs(int, int, int) IBlockAccessor.GetLightRGBs(BlockPos) IBlockAccessor.GetLightRGBsAsInt(int, int, int) IBlockAccessor.GetTerrainMapheightAt(BlockPos) IBlockAccessor.GetRainMapHeightAt(BlockPos) IBlockAccessor.GetDistanceToRainFall(BlockPos, int, int) IBlockAccessor.GetRainMapHeightAt(int, int) IBlockAccessor.GetMapChunk(Vec2i) IBlockAccessor.GetMapChunk(int, int) IBlockAccessor.GetMapChunkAtBlockPos(BlockPos) IBlockAccessor.GetClimateAt(BlockPos, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, ClimateCondition, EnumGetClimateMode, double) IBlockAccessor.GetClimateAt(BlockPos, int) IBlockAccessor.GetWindSpeedAt(Vec3d) IBlockAccessor.GetWindSpeedAt(BlockPos) IBlockAccessor.MarkAbsorptionChanged(int, int, BlockPos) IBlockAccessor.RemoveBlockLight(byte[], BlockPos) IBlockAccessor.SetDecor(Block, BlockPos, BlockFacing) IBlockAccessor.SetDecor(Block, BlockPos, int) IBlockAccessor.GetDecors(BlockPos) IBlockAccessor.GetSubDecors(BlockPos) IBlockAccessor.GetDecor(BlockPos, int) IBlockAccessor.BreakDecor(BlockPos, BlockFacing, int?) IBlockAccessor.MarkChunkDecorsModified(BlockPos) IBlockAccessor.IsSideSolid(int, int, int, BlockFacing) IBlockAccessor.CreateMiniDimension(Vec3d) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) PosUtil.GetBlockAbove(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockBelow(IBlockAccessor, BlockPos, int, int) PosUtil.GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) Properties WorldgenWorldAccessor Returns a special IWorldAccessor which wraps the standard one with one difference: it returns this IWorldGenBlockAccessor as its BlockAccessor, in place of the general BlockAccessor for this world IServerWorldAccessor WorldgenWorldAccessor { get; } Property Value IServerWorldAccessor Methods AddEntity(Entity) Adds given initialized entity to the world. Requires you to set the Pos and ServerPos fields. void AddEntity(Entity entity) Parameters entity Entity BeginColumn() void BeginColumn() RunScheduledBlockLightUpdates(int, int) This will run all scheduled block light updates at once. Should be called after all lighting has been completed. void RunScheduledBlockLightUpdates(int chunkx, int chunkz) Parameters chunkx int chunkz int ScheduleBlockLightUpdate(BlockPos, int, int) Tells the server to relight this position once RunScheduledBlockLightUpdates() is called void ScheduleBlockLightUpdate(BlockPos pos, int oldBlockid, int newBlockId) Parameters pos BlockPos oldBlockid int currently unused but might be used in the future to make sure old light is removed properly newBlockId int ScheduleBlockUpdate(BlockPos) Tells the server to produce a block update at this given position once the chunk is fully generated and world ticking has begun void ScheduleBlockUpdate(BlockPos pos) Parameters pos BlockPos"
  },
  "api/Vintagestory.API.Server.IWorldGenHandler.html": {
    "href": "api/Vintagestory.API.Server.IWorldGenHandler.html",
    "title": "Interface IWorldGenHandler | VintageStory API",
    "keywords": "Interface IWorldGenHandler Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public interface IWorldGenHandler Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties OnChunkColumnGen List of registered map chunk generation handlers per pass (see EnumWorldGenPass) List<ChunkColumnGenerationDelegate>[] OnChunkColumnGen { get; } Property Value List<ChunkColumnGenerationDelegate>[] OnMapChunkGen List of registered map chunk generation handlers List<MapChunkGeneratorDelegate> OnMapChunkGen { get; } Property Value List<MapChunkGeneratorDelegate> OnMapRegionGen List of registered map region generation handlers List<MapRegionGeneratorDelegate> OnMapRegionGen { get; } Property Value List<MapRegionGeneratorDelegate> Methods WipeAllHandlers() Empties all three lists void WipeAllHandlers()"
  },
  "api/Vintagestory.API.Server.IWorldManagerAPI.html": {
    "href": "api/Vintagestory.API.Server.IWorldManagerAPI.html",
    "title": "Interface IWorldManagerAPI | VintageStory API",
    "keywords": "Interface IWorldManagerAPI Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Methods to modify the game world public interface IWorldManagerAPI Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Properties AllLoadedChunks Returns a (cloned) list of all currently loaded chunks. The key is the 3d index of the chunk, can be turned into an x/y/z coord. Warning: This locks the loaded chunk dictionary during the clone, preventing other threads from updating it. In other words: Using this method often will have a significant performance impact. Dictionary<long, IServerChunk> AllLoadedChunks { get; } Property Value Dictionary<long, IServerChunk> AllLoadedMapRegions Returns a (cloned) list of all currently loaded map regions. The key is the 2d index of the map region, can be turned into an x/z coord Dictionary<long, IMapRegion> AllLoadedMapRegions { get; } Property Value Dictionary<long, IMapRegion> AllLoadedMapchunks Returns a (cloned) list of all currently loaded map chunks. The key is the 2d index of the map chunk, can be turned into an x/z coord Dictionary<long, IMapChunk> AllLoadedMapchunks { get; } Property Value Dictionary<long, IMapChunk> AutoGenerateChunks Completely disables automatic generation of chunks that normally builds up a radius of chunks around the player. bool AutoGenerateChunks { get; set; } Property Value bool ChunkDeletionsInQueue int ChunkDeletionsInQueue { get; } Property Value int ChunkSize Width/Length/Height in blocks of a chunk on the server int ChunkSize { get; } Property Value int CurrentGeneratingChunkCount Amount of chunk columns currently in the generating queue int CurrentGeneratingChunkCount { get; } Property Value int CurrentPlayStyle The currently selected playstyle PlayStyle CurrentPlayStyle { get; } Property Value PlayStyle CurrentWorldName The current world filename string CurrentWorldName { get; } Property Value string DefaultSpawnPosition Retrieves the default spawnpoint (x/y/z coordinate) int[] DefaultSpawnPosition { get; } Property Value int[] Default spawnpoint LandClaims All landclaims List<LandClaim> LandClaims { get; } Property Value List<LandClaim> MapSizeX Width of the current world int MapSizeX { get; } Property Value int MapSizeY Height of the current world int MapSizeY { get; } Property Value int MapSizeZ Length of the current world int MapSizeZ { get; } Property Value int RegionSize Width/Length/Height in blocks of a region on the server int RegionSize { get; } Property Value int SaveGame The worlds savegame object. If you change these values they will be permanently stored ISaveGame SaveGame { get; } Property Value ISaveGame Seed Get the seed used to generate the current world int Seed { get; } Property Value int The map seed SendChunks Disables sending of normal chunks to all players except for force loaded ones using ForceLoadChunkColumn bool SendChunks { get; set; } Property Value bool Methods BlockingLoadChunkColumn(int, int) Load the given map chunk , can only be called before EnumServerRunPhase.RunGame. This only loads and deserializes the chunk data, you need to call .Dispose() after you do not need them anymore Used in InitWorldgen to check chunks before the games is running IServerChunk[] BlockingLoadChunkColumn(int chunkX, int chunkZ) Parameters chunkX int chunkZ int Returns IServerChunk[] BlockingTestMapChunkExists(int, int) Test if the given map chunk exists, can only be called before EnumServerRunPhase.RunGame. Used in InitWorldgen to check chunks before the games is running bool BlockingTestMapChunkExists(int chunkX, int chunkZ) Parameters chunkX int chunkZ int Returns bool BlockingTestMapRegionExists(int, int) Test if the given map region exists, can only be called before EnumServerRunPhase.RunGame. Used in InitWorldgen to check chunks before the games is running bool BlockingTestMapRegionExists(int regionX, int regionZ) Parameters regionX int regionZ int Returns bool BroadcastChunk(int, int, int, bool) Send or Resend a loaded chunk to all connected players. Has no effect when the chunk is not loaded void BroadcastChunk(int chunkX, int chunkY, int chunkZ, bool onlyIfInRange = true) Parameters chunkX int chunkY int chunkZ int onlyIfInRange bool If true, the chunk will not be sent to connected players that are out of range from that chunk ChunkIndex3D(int, int, int) long ChunkIndex3D(int chunkX, int chunkY, int chunkZ) Parameters chunkX int chunkY int chunkZ int Returns long CreateChunkColumnForDimension(int, int, int) Creates columns of empty chunks in the specified dimension void CreateChunkColumnForDimension(int cx, int cz, int dim) Parameters cx int cz int dim int DeleteChunkColumn(int, int) Deletes a column of chunks at given coordinate from the save file. Also deletes the map chunk at the same coordinate (but keeps the map region). Also unloads the chunk in the same process. Also deletes all entities in this chunk void DeleteChunkColumn(int chunkX, int chunkZ) Parameters chunkX int chunkZ int DeleteMapRegion(int, int) Deletes a map region at given coordinate from the save file void DeleteMapRegion(int regionX, int regionZ) Parameters regionX int regionZ int ForceSendChunkColumn(IServerPlayer, int, int, int) API access to force send a chunk column in any dimension void ForceSendChunkColumn(IServerPlayer player, int cx, int cz, int dimension) Parameters player IServerPlayer cx int cz int dimension int FullRelight(BlockPos, BlockPos) Does a complete relighting of the cuboid deliminated by given min/max pos. Completely resends all affected chunk columns to all connected nearby clients. void FullRelight(BlockPos minPos, BlockPos maxPos) Parameters minPos BlockPos maxPos BlockPos FullRelight(BlockPos, BlockPos, bool) Does a complete relighting of the cuboid deliminated by given min/max pos. Can completely resend all affected chunk columns to all connected nearby clients. void FullRelight(BlockPos minPos, BlockPos maxPos, bool sendToClients) Parameters minPos BlockPos maxPos BlockPos sendToClients bool GetBlockAccessor(bool, bool, bool, bool) Retrieve a customized interface to access blocks in the loaded game world. [Obsolete(\"Use api.World.GetBlockAccessor instead\")] IBlockAccessor GetBlockAccessor(bool synchronize, bool relight, bool strict, bool debug = false) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after a call to SetBlock and the light values changed by that strict bool Log an error message if GetBlock/SetBlock was called to an unloaded chunk debug bool If strict, crashes the server if a unloaded chunk was crashed, prints an exception and exports a png image of the current loaded chunks Returns IBlockAccessor GetBlockAccessorBulkUpdate(bool, bool, bool) Retrieve a customized interface to access blocks in the loaded game world. Does not to relight/sync on a SetBlock until Commit() is called. On commit all touched blocks are relit/synced at once. This method should be used when setting many blocks (e.g. tree generation, explosion, etc.). [Obsolete(\"Use api.World.GetBlockAccessorBulkUpdate instead\")] IBulkBlockAccessor GetBlockAccessorBulkUpdate(bool synchronize, bool relight, bool debug = false) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after the a call to SetBlock and the light values changed by that debug bool Returns IBulkBlockAccessor GetBlockAccessorPrefetch(bool, bool) Same as GetBlockAccessor but you have to call PrefetchBlocks() before using GetBlock(). It pre-loads all blocks in given area resulting in faster GetBlock() access [Obsolete(\"Use api.World.GetBlockAccessorPrefetch instead\")] IBlockAccessorPrefetch GetBlockAccessorPrefetch(bool synchronize, bool relight) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after a call to SetBlock and the light values changed by that Returns IBlockAccessorPrefetch GetBlockAccessorRevertable(bool, bool, bool) Same as GetBlockAccessorBulkUpdate, additionally, each Commit() stores the previous state and you can perform undo/redo operations on these. [Obsolete(\"Use api.World.GetBlockAccessorRevertable instead\")] IBlockAccessorRevertable GetBlockAccessorRevertable(bool synchronize, bool relight, bool debug = false) Parameters synchronize bool Whether or not a call to Setblock should send the update also to all connected clients relight bool Whether or not to relight the chunk after a call to SetBlock and the light values changed by that debug bool Returns IBlockAccessorRevertable GetBlockId(AssetLocation) Get the ID of a certain BlockType int GetBlockId(AssetLocation name) Parameters name AssetLocation Name of the BlockType Returns int ID of the BlockType GetCachingBlockAccessor(bool, bool) Same as the normal block accessor but remembers the previous chunk that was accessed. This can give you a 10-50% performance boosts when you scan many blocks in tight loops DONT FORGET: Call .Begin() before getting/setting in a tight loop. Not calling it can cause the game to crash [Obsolete(\"Use api.World.GetCachingBlockAccessor instead\")] ICachingBlockAccessor GetCachingBlockAccessor(bool synchronize, bool relight) Parameters synchronize bool relight bool Returns ICachingBlockAccessor GetChunk(int, int, int) Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet IServerChunk GetChunk(int chunkX, int chunkY, int chunkZ) Parameters chunkX int chunkY int chunkZ int Returns IServerChunk GetChunk(long) Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet IServerChunk GetChunk(long index3d) Parameters index3d long Returns IServerChunk GetChunk(BlockPos) Gets the Server chunk at given coordinate. Returns null if it's not loaded or does not exist yet IServerChunk GetChunk(BlockPos pos) Parameters pos BlockPos Returns IServerChunk GetMapChunk(int, int) Gets the Server map chunk at given coordinate. Returns null if it's not loaded or does not exist yet IServerMapChunk GetMapChunk(int chunkX, int chunkZ) Parameters chunkX int chunkZ int Returns IServerMapChunk GetMapChunk(long) Gets the Server map chunk at given coordinate index. Returns null if it's not loaded or does not exist yet IMapChunk GetMapChunk(long index2d) Parameters index2d long Returns IMapChunk GetMapRegion(int, int) Gets the Server map region at given coordinate. Returns null if it's not loaded or does not exist yet IMapRegion GetMapRegion(int regionX, int regionZ) Parameters regionX int regionZ int Returns IMapRegion GetMapRegion(long) Gets the Server map region at given coordinate. Returns null if it's not loaded or does not exist yet IMapRegion GetMapRegion(long index2d) Parameters index2d long Returns IMapRegion GetNextUniqueId() Returns a number that is guaranteed to be unique for the current world every time it is called. Curently use for entity herding behavior. long GetNextUniqueId() Returns long GetSurfacePosY(int, int) Finds the first y position that is solid ground to stand on. Returns null if the chunk is not loaded. int? GetSurfacePosY(int posX, int posZ) Parameters posX int posZ int Returns int? HasChunk(int, int, int, IServerPlayer) Returns true if the server sent chunk at given coords to player and has it not unloaded yet bool HasChunk(int chunkX, int chunkY, int chunkZ, IServerPlayer player) Parameters chunkX int chunkY int chunkZ int player IServerPlayer Returns bool LoadChunkColumn(int, int, bool) Asynchronly normal priority load a chunk column at given coordinate. No effect when already loaded. void LoadChunkColumn(int chunkX, int chunkZ, bool keepLoaded = false) Parameters chunkX int chunkZ int keepLoaded bool If true, the chunk will never get unloaded unless UnloadChunkColumn() is called LoadChunkColumnFast(int, int, int, int, ChunkLoadOptions) Asynchronly high priority load an area of chunk columns at given coordinates. Make sure that X1<=X2 and Z1<=Z2 [Obsolete(\"Use LoadChunkColumnPriority()\")] void LoadChunkColumnFast(int chunkX1, int chunkZ1, int chunkX2, int chunkZ2, ChunkLoadOptions options = null) Parameters chunkX1 int chunkZ1 int chunkX2 int chunkZ2 int options ChunkLoadOptions Additional loading options LoadChunkColumnFast(int, int, ChunkLoadOptions) Asynchronly high priority load a chunk column at given coordinate. [Obsolete(\"Use LoadChunkColumnPriority()\")] void LoadChunkColumnFast(int chunkX, int chunkZ, ChunkLoadOptions options = null) Parameters chunkX int chunkZ int options ChunkLoadOptions Additional loading options LoadChunkColumnForDimension(int, int, int) Loads chunk columns for the specified dimension void LoadChunkColumnForDimension(int cx, int cz, int dim) Parameters cx int cz int dim int LoadChunkColumnPriority(int, int, int, int, ChunkLoadOptions) Asynchronly high priority load an area of chunk columns at given coordinates. Make sure that X1<=X2 and Z1<=Z2 void LoadChunkColumnPriority(int chunkX1, int chunkZ1, int chunkX2, int chunkZ2, ChunkLoadOptions options = null) Parameters chunkX1 int chunkZ1 int chunkX2 int chunkZ2 int options ChunkLoadOptions Additional loading options LoadChunkColumnPriority(int, int, ChunkLoadOptions) Asynchronly high priority load a chunk column at given coordinate. void LoadChunkColumnPriority(int chunkX, int chunkZ, ChunkLoadOptions options = null) Parameters chunkX int chunkZ int options ChunkLoadOptions Additional loading options MapChunkIndex2D(int, int) long MapChunkIndex2D(int chunkX, int chunkZ) Parameters chunkX int chunkZ int Returns long MapChunkPosFromChunkIndex2D(long) Vec2i MapChunkPosFromChunkIndex2D(long index2d) Parameters index2d long Returns Vec2i MapRegionIndex2D(int, int) long MapRegionIndex2D(int regionX, int regionZ) Parameters regionX int regionZ int Returns long MapRegionIndex2DByBlockPos(int, int) long MapRegionIndex2DByBlockPos(int posX, int posZ) Parameters posX int posZ int Returns long MapRegionPosFromIndex2D(long) Vec3i MapRegionPosFromIndex2D(long index2d) Parameters index2d long Returns Vec3i PeekChunkColumn(int, int, ChunkPeekOptions) Generates chunk at given coordinate, completely bypassing any existing world data and caching methods, in other words generates, a chunk from scratch without keeping it in the list of loaded chunks void PeekChunkColumn(int chunkX, int chunkZ, ChunkPeekOptions options) Parameters chunkX int chunkZ int options ChunkPeekOptions ResendMapChunk(int, int, bool) Send or resent a loaded map chunk to all connected players. Has no effect when the map chunk is not loaded void ResendMapChunk(int chunkX, int chunkZ, bool onlyIfInRange) Parameters chunkX int chunkZ int onlyIfInRange bool SendChunk(int, int, int, IServerPlayer, bool) Send or Resend a loaded chunk to a connected player. Has no effect when the chunk is not loaded void SendChunk(int chunkX, int chunkY, int chunkZ, IServerPlayer player, bool onlyIfInRange = true) Parameters chunkX int chunkY int chunkZ int player IServerPlayer onlyIfInRange bool If true, the chunk will not be sent to connected players that are out of range from that chunk SetBlockLightLevels(float[]) Allows setting a 32 float array that defines the brightness of each block light level. Has to be set before any players join or any chunks are generated. void SetBlockLightLevels(float[] lightLevels) Parameters lightLevels float[] SetDefaultSpawnPosition(int, int, int) Permanently sets the default spawnpoint void SetDefaultSpawnPosition(int x, int y, int z) Parameters x int X coordinate of new spawnpoint y int Y coordinate of new spawnpoint z int Z coordinate of new spawnpoint SetSeaLevel(int) Sets the default sea level for the world to be generated. Currently used by the client to calculate the correct temperature/rainfall values for climate tinting. void SetSeaLevel(int sealevel) Parameters sealevel int SetSunBrightness(int) Sets the default light range of sunlight. Default is 24. Has to be set before any players join or any chunks are generated. void SetSunBrightness(int lightlevel) Parameters lightlevel int SetSunLightLevels(float[]) Allows setting a 32 float array that defines the brightness of each sun light level. Has to be set before any players join or any chunks are generated. void SetSunLightLevels(float[] lightLevels) Parameters lightLevels float[] SunFloodChunkColumnForWorldGen(IWorldChunk[], int, int) Floods the chunk column with sunlight. Only works on full chunk columns. void SunFloodChunkColumnForWorldGen(IWorldChunk[] chunks, int chunkX, int chunkZ) Parameters chunks IWorldChunk[] chunkX int chunkZ int SunFloodChunkColumnNeighboursForWorldGen(IWorldChunk[], int, int) Spreads the chunk columns light into neighbour chunks and vice versa. Only works on full chunk columns. void SunFloodChunkColumnNeighboursForWorldGen(IWorldChunk[] chunks, int chunkX, int chunkZ) Parameters chunks IWorldChunk[] chunkX int chunkZ int TestChunkExists(int, int, int, Action<bool>) Asynchrounly checks if this chunk is currently loaded or in the savegame database. Calls the callback method with true or false once done looking up. Does not load the actual chunk data. void TestChunkExists(int chunkX, int chunkY, int chunkZ, Action<bool> onTested) Parameters chunkX int chunkY int chunkZ int onTested Action<bool> TestMapChunkExists(int, int, Action<bool>) Asynchrounly checks if this map chunk is currently loaded or in the savegame database. Calls the callback method with true or false once done looking up. Does not load the actual map chunk data. void TestMapChunkExists(int chunkX, int chunkZ, Action<bool> onTested) Parameters chunkX int chunkZ int onTested Action<bool> TestMapRegionExists(int, int, Action<bool>) Asynchrounly checks if this mapregion is currently loaded or in the savegame database. Calls the callback method with true or false once done looking up. Does not load the actual map region data. void TestMapRegionExists(int regionX, int regionZ, Action<bool> onTested) Parameters regionX int regionZ int onTested Action<bool> UnloadChunkColumn(int, int) Unloads a column of chunks at given coordinate independent of any nearby players and sends an appropriate unload packet to the player void UnloadChunkColumn(int chunkX, int chunkZ) Parameters chunkX int chunkZ int"
  },
  "api/Vintagestory.API.Server.MultiplayerServerEntry.html": {
    "href": "api/Vintagestory.API.Server.MultiplayerServerEntry.html",
    "title": "Class MultiplayerServerEntry | VintageStory API",
    "keywords": "Class MultiplayerServerEntry Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public class MultiplayerServerEntry Inheritance object MultiplayerServerEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields host public string host Field Value string index public int index Field Value int name public string name Field Value string password public string password Field Value string"
  },
  "api/Vintagestory.API.Server.NetworkClientMessageHandler-1.html": {
    "href": "api/Vintagestory.API.Server.NetworkClientMessageHandler-1.html",
    "title": "Delegate NetworkClientMessageHandler<T> | VintageStory API",
    "keywords": "Delegate NetworkClientMessageHandler<T> Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Handler for processing a message public delegate void NetworkClientMessageHandler<T>(IServerPlayer fromPlayer, T packet) Parameters fromPlayer IServerPlayer packet T Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Server.OnChunkPeekedDelegate.html": {
    "href": "api/Vintagestory.API.Server.OnChunkPeekedDelegate.html",
    "title": "Delegate OnChunkPeekedDelegate | VintageStory API",
    "keywords": "Delegate OnChunkPeekedDelegate Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll public delegate void OnChunkPeekedDelegate(Dictionary<Vec2i, IServerChunk[]> columnsByChunkCoordinate) Parameters columnsByChunkCoordinate Dictionary<Vec2i, IServerChunk[]> Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Server.PathfinderTask.html": {
    "href": "api/Vintagestory.API.Server.PathfinderTask.html",
    "title": "Class PathfinderTask | VintageStory API",
    "keywords": "Class PathfinderTask Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public class PathfinderTask Inheritance object PathfinderTask Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PathfinderTask(BlockPos, BlockPos, int, float, Cuboidf, int, int, EnumAICreatureType) public PathfinderTask(BlockPos startBlockPos, BlockPos targetBlockPos, int maxFallHeight, float stepHeight, Cuboidf collisionBox, int searchDepth, int mhdistanceTolerance = 0, EnumAICreatureType creatureType = EnumAICreatureType.Default) Parameters startBlockPos BlockPos targetBlockPos BlockPos maxFallHeight int stepHeight float collisionBox Cuboidf searchDepth int mhdistanceTolerance int creatureType EnumAICreatureType Fields CreatureType public EnumAICreatureType CreatureType Field Value EnumAICreatureType Finished public bool Finished Field Value bool collisionBox public Cuboidf collisionBox Field Value Cuboidf maxFallHeight public int maxFallHeight Field Value int mhdistanceTolerance public int mhdistanceTolerance Field Value int searchDepth public int searchDepth Field Value int startBlockPos public BlockPos startBlockPos Field Value BlockPos stepHeight public float stepHeight Field Value float targetBlockPos public BlockPos targetBlockPos Field Value BlockPos waypoints public List<Vec3d> waypoints Field Value List<Vec3d>"
  },
  "api/Vintagestory.API.Server.PlayerGroup.html": {
    "href": "api/Vintagestory.API.Server.PlayerGroup.html",
    "title": "Class PlayerGroup | VintageStory API",
    "keywords": "Class PlayerGroup Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub [JsonObject(MemberSerialization.OptIn)] public class PlayerGroup Inheritance object PlayerGroup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors PlayerGroup() public PlayerGroup() Fields ChatHistory [JsonProperty] public List<ChatLine> ChatHistory Field Value List<ChatLine> CreatedByPrivateMessage [JsonProperty] public bool CreatedByPrivateMessage Field Value bool CreatedDate [JsonProperty] public string CreatedDate Field Value string JoinPolicy [JsonProperty] public string JoinPolicy Field Value string Md5Identifier [JsonProperty] public string Md5Identifier Field Value string Name [JsonProperty] public string Name Field Value string OnlinePlayers public List<IPlayer> OnlinePlayers Field Value List<IPlayer> OwnerUID [JsonProperty] public string OwnerUID Field Value string Uid [JsonProperty] public int Uid Field Value int"
  },
  "api/Vintagestory.API.Server.Privilege.html": {
    "href": "api/Vintagestory.API.Server.Privilege.html",
    "title": "Class Privilege | VintageStory API",
    "keywords": "Class Privilege Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public class Privilege Inheritance object Privilege Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields announce Ability to make a server wide announcement public static string announce Field Value string attackcreatures Cause damage to any non-player creature public static string attackcreatures Field Value string attackplayers Cause damage to a player public static string attackplayers Field Value string ban Ability to ban/unban a player public static string ban Field Value string buildblocks Place or break blocks public static string buildblocks Field Value string buildblockseverywhere Place or break blocks everywhere, completely ignoring area permissons. You still need to be in creative mode however. public static string buildblockseverywhere Field Value string chat Ability to chat public static string chat Field Value string claimland Ability to claim lands public static string claimland Field Value string commandplayer Ability to issue a command for another player (e.g. teleport another player or set another players game mode) public static string commandplayer Field Value string controlplayergroups Ability to join/leave/invite/op own player groups and their chat channels public static string controlplayergroups Field Value string controlserver Ability to restart/shutdown server, reload mods, etc. public static string controlserver Field Value string freemove Ability to fly or change movepseed public static string freemove Field Value string gamemode Ability to set own game mode public static string gamemode Field Value string give Ability to create block from given block id public static string give Field Value string grantrevoke Ability to set player role and ability to grant/revoke individual privileges. A player can only grant the same or a lower level group and the same or less privileges. public static string grantrevoke Field Value string kick Ability to kick players public static string kick Field Value string manageplayergroups Ability to create/disband own player groups and their chat channels public static string manageplayergroups Field Value string pickingrange Ability to set own picking range public static string pickingrange Field Value string readlists Ability to see client, group, banned user and area lists public static string readlists Field Value string root Ability to do everything and have all permissions public static string root Field Value string selfkill Ability to use the /kill command public static string selfkill Field Value string setspawn Ability to set default spawn public static string setspawn Field Value string setwelcome Ability to set welcome message public static string setwelcome Field Value string time Ability to read, modify game world time public static string time Field Value string tp Ability to teleport public static string tp Field Value string useblock Interact with block (e.g. door, chest) public static string useblock Field Value string useblockseverywhere Use blocks everywhere, completely ignoring area permissons. You still need to be in creative mode however. public static string useblockseverywhere Field Value string whitelist Ability to whitelist/unwhitelist a player public static string whitelist Field Value string Methods AllCodes() public static string[] AllCodes() Returns string[]"
  },
  "api/Vintagestory.API.Server.TreeGenParams.html": {
    "href": "api/Vintagestory.API.Server.TreeGenParams.html",
    "title": "Class TreeGenParams | VintageStory API",
    "keywords": "Class TreeGenParams Namespace Vintagestory.API.Server Assembly VintagestoryAPI.dll Open in GitHub public class TreeGenParams Inheritance object TreeGenParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields hemisphere public EnumHemisphere hemisphere Field Value EnumHemisphere mossGrowthChance public float mossGrowthChance Field Value float otherBlockChance public float otherBlockChance Field Value float size public float size Field Value float skipForestFloor public bool skipForestFloor Field Value bool treesInChunkGenerated public int treesInChunkGenerated Field Value int vinesGrowthChance public float vinesGrowthChance Field Value float"
  },
  "api/Vintagestory.API.Server.html": {
    "href": "api/Vintagestory.API.Server.html",
    "title": "Namespace Vintagestory.API.Server | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Server Classes ChunkLoadOptions Open in GitHub ChunkPeekOptions Open in GitHub MultiplayerServerEntry Open in GitHub PathfinderTask Open in GitHub PlayerGroup Open in GitHub Privilege Open in GitHub TreeGenParams Open in GitHub Interfaces IAsyncServerSystem Mods can create server threads to carry out an asynchronous process, by implementing this interface and calling IServerApi.AddServerThread() IChunkColumnGenerateRequest IChunkProvider IChunkProviderThread ICoreServerAPI The core api implemented by the server. The main interface for accessing the server. Contains all sub components and some miscellaneous methods. IGroupManager INetworkMessage A message to be sent across the network. Is serialized/deserialized using protobuf IPermissionManager IPlayerDataManager ISaveGame IServerAPI API for general Server features IServerChunk Some extra methods available for server side chunks IServerConfig The servers configuration IServerEventAPI Contains methods to hook into various server processes IServerNetworkAPI API Features to set up a network channel for custom server<->client data exchange. Server side. IServerNetworkChannel Represent a custom network channel for sending messages between client and server IServerPlayer Represents a player on the server side that joined the server at least once. May not be online at this point in time. IServerPlayerData The player configuration that is world independent IServerWorldAccessor The world accessor implemented by the server ITreeGenerator IWorldGenBlockAccessor IWorldGenHandler IWorldManagerAPI Methods to modify the game world Enums EnumClientState The current connection state of a player thats currently connecting to the server Open in GitHub EnumProtectionLevel How strongly the Server should protect against hacking Open in GitHub EnumServerResponse Open in GitHub EnumServerRunPhase These are the stages the server goes through during launch Open in GitHub EnumWhitelistMode Open in GitHub EnumWorldGenPass The stages a chunk goes through when being created Open in GitHub EnumWorldgenPreset Open in GitHub Delegates GrowTreeDelegate NetworkClientMessageHandler<T> Handler for processing a message OnChunkPeekedDelegate"
  },
  "api/Vintagestory.API.Util.ArrayExtensions.html": {
    "href": "api/Vintagestory.API.Util.ArrayExtensions.html",
    "title": "Class ArrayExtensions | VintageStory API",
    "keywords": "Class ArrayExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class ArrayExtensions Inheritance object ArrayExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Append<T>(T[], IEnumerable<T>) Creates a new copy of the array with values appended to the end of the array public static T[] Append<T>(this T[] array, IEnumerable<T> values) Parameters array T[] values IEnumerable<T> Returns T[] Type Parameters T Append<T>(T[], T) Creates a new copy of the array with value appened to the end of the array public static T[] Append<T>(this T[] array, T value) Parameters array T[] value T Returns T[] Type Parameters T Append<T>(T[], params T[]) Creates a new copy of the array with value appended to the end of the array public static T[] Append<T>(this T[] array, params T[] value) Parameters array T[] value T[] Returns T[] Type Parameters T Contains<T>(T[], Func<T, bool>) public static bool Contains<T>(this T[] array, Func<T, bool> predicate) Parameters array T[] predicate Func<T, bool> Returns bool Type Parameters T Contains<T>(T[], T) public static bool Contains<T>(this T[] array, T value) Parameters array T[] value T Returns bool Type Parameters T Fill<T>(T[], fillCallback<T>) public static T[] Fill<T>(this T[] originalArray, fillCallback<T> fillCallback) Parameters originalArray T[] fillCallback fillCallback<T> Returns T[] Type Parameters T Fill<T>(T[], T) public static T[] Fill<T>(this T[] originalArray, T with) Parameters originalArray T[] with T Returns T[] Type Parameters T InRange<T>(T[], Func<T, double>, double) public static List<T> InRange<T>(this T[] array, Func<T, double> getDistance, double range) Parameters array T[] getDistance Func<T, double> range double Returns List<T> Type Parameters T IndexOf<T>(T[], Func<T, bool>) public static int IndexOf<T>(this T[] array, Func<T, bool> predicate) Parameters array T[] predicate Func<T, bool> Returns int Type Parameters T IndexOf<T>(T[], T) public static int IndexOf<T>(this T[] array, T value) Parameters array T[] value T Returns int Type Parameters T InsertAt<T>(T[], T, int) Creates a new copy of the array with value inserted at the given index public static T[] InsertAt<T>(this T[] array, T value, int index) Parameters array T[] value T index int Returns T[] Type Parameters T Nearest<T>(T[], Func<T, double>) public static T Nearest<T>(this T[] array, Func<T, double> getDistance) Parameters array T[] getDistance Func<T, double> Returns T Type Parameters T RemoveAt<T>(T[], int) Creates a new copy of array with element at index removed public static T[] RemoveAt<T>(this T[] array, int index) Parameters array T[] index int Returns T[] Type Parameters T RemoveEntry<T>(T[], int) [Obsolete(\"Use RemoveAt instead\")] public static T[] RemoveEntry<T>(this T[] array, int index) Parameters array T[] index int Returns T[] Type Parameters T Remove<T>(T[], T) Creates a new copy of the array with value removed public static T[] Remove<T>(this T[] array, T value) Parameters array T[] value T Returns T[] Type Parameters T Shuffle<T>(T[], Random) Performs a Fisher-Yates shuffle in linear time or O(n) public static T[] Shuffle<T>(this T[] array, Random rand) Parameters array T[] rand Random Returns T[] Type Parameters T Shuffle<T>(T[], LCGRandom) Performs a Fisher-Yates shuffle in linear time or O(n) public static T[] Shuffle<T>(this T[] array, LCGRandom rand) Parameters array T[] rand LCGRandom Returns T[] Type Parameters T"
  },
  "api/Vintagestory.API.Util.ArrayUtil.html": {
    "href": "api/Vintagestory.API.Util.ArrayUtil.html",
    "title": "Class ArrayUtil | VintageStory API",
    "keywords": "Class ArrayUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class ArrayUtil Inheritance object ArrayUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateFilled<T>(int, fillCallback<T>) public static T[] CreateFilled<T>(int quantity, fillCallback<T> fillCallback) Parameters quantity int fillCallback fillCallback<T> Returns T[] Type Parameters T CreateFilled<T>(int, T) public static T[] CreateFilled<T>(int quantity, T with) Parameters quantity int with T Returns T[] Type Parameters T FastCopy<T>(T[], int) public static T[] FastCopy<T>(this T[] src, int count) Parameters src T[] count int Returns T[] Type Parameters T Slice<T>(T[], int, int) public static T[] Slice<T>(this T[] src, int index, int count) Parameters src T[] index int count int Returns T[] Type Parameters T"
  },
  "api/Vintagestory.API.Util.AsyncHelper.Multithreaded.html": {
    "href": "api/Vintagestory.API.Util.AsyncHelper.Multithreaded.html",
    "title": "Class AsyncHelper.Multithreaded | VintageStory API",
    "keywords": "Class AsyncHelper.Multithreaded Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public class AsyncHelper.Multithreaded Inheritance object AsyncHelper.Multithreaded Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields activeThreads protected volatile int activeThreads Field Value int Methods OnWorkerThread(Action) protected void OnWorkerThread(Action task) Parameters task Action ResetThreading() protected void ResetThreading() StartWorkerThread(Action) protected void StartWorkerThread(Action task) Parameters task Action WorkerThreadsInProgress() protected bool WorkerThreadsInProgress() Returns bool"
  },
  "api/Vintagestory.API.Util.AsyncHelper.html": {
    "href": "api/Vintagestory.API.Util.AsyncHelper.html",
    "title": "Class AsyncHelper | VintageStory API",
    "keywords": "Class AsyncHelper Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll A class to provide general helper functions for multi-threaded (asynchronous) operations Open in GitHub public class AsyncHelper Inheritance object AsyncHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods CanProceedOnThisThread(ref int) For situations where a task should proceed only if another thread is not already working on the same task on the same object. For example, a main thread and a worker thread both iterating through a list of objects to process, this will ensure each object is processed exactly once. Both threads should call this method before proceeding to do the task, both using an int field in each object to mark when the work has started. Optionally, the referenced field can be a volatile int. It is not necessary for it to be volatile for correct Interlocked operation, but it can be a good idea if the value will be set or read elsewhere in the calling code. public static bool CanProceedOnThisThread(ref int started) Parameters started int Pass by reference. If this is volatile, it is safe to ignore the compiler warning \"a reference to a volatile field will not be treated as volatile\" Returns bool"
  },
  "api/Vintagestory.API.Util.BitmapExtensions.html": {
    "href": "api/Vintagestory.API.Util.BitmapExtensions.html",
    "title": "Class BitmapExtensions | VintageStory API",
    "keywords": "Class BitmapExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class BitmapExtensions Inheritance object BitmapExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Save(SKBitmap, string) public static void Save(this SKBitmap bmp, string filename) Parameters bmp SKBitmap filename string SetPixels(SKBitmap, int[]) public static void SetPixels(this SKBitmap bmp, int[] pixels) Parameters bmp SKBitmap pixels int[]"
  },
  "api/Vintagestory.API.Util.CreateCachableObjectDelegate-1.html": {
    "href": "api/Vintagestory.API.Util.CreateCachableObjectDelegate-1.html",
    "title": "Delegate CreateCachableObjectDelegate<T> | VintageStory API",
    "keywords": "Delegate CreateCachableObjectDelegate<T> Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public delegate T CreateCachableObjectDelegate<T>() Returns T Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Util.CustomFastSerializerAttribute.html": {
    "href": "api/Vintagestory.API.Util.CustomFastSerializerAttribute.html",
    "title": "Class CustomFastSerializerAttribute | VintageStory API",
    "keywords": "Class CustomFastSerializerAttribute Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Indicates that the FastSerialize() method should call a custom method to serialize this field: the custom method being of the pattern FastSerializerDelegate Open in GitHub [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = false, Inherited = true)] public class CustomFastSerializerAttribute : Attribute Inheritance object Attribute CustomFastSerializerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors CustomFastSerializerAttribute() public CustomFastSerializerAttribute()"
  },
  "api/Vintagestory.API.Util.DictExtensions.html": {
    "href": "api/Vintagestory.API.Util.DictExtensions.html",
    "title": "Class DictExtensions | VintageStory API",
    "keywords": "Class DictExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class DictExtensions Inheritance object DictExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) Add several elements to dict public static void AddRange<K, V>(this IDictionary<K, V> dict, IDictionary<K, V> elems) Parameters dict IDictionary<K, V> elems IDictionary<K, V> Type Parameters K V Get<K, V>(IDictionary<K, V>, K, V) Get value or defaultValue if key does not exists public static V Get<K, V>(this IDictionary<K, V> dict, K key, V defaultValue = default) Parameters dict IDictionary<K, V> key K defaultValue V Returns V Type Parameters K V RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) public static void RemoveAllByKey<K, V>(this IDictionary<K, V> dict, Func<K, bool> predicate) Parameters dict IDictionary<K, V> predicate Func<K, bool> Type Parameters K V RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) public static void RemoveAll<K, V>(this IDictionary<K, V> dict, Func<K, V, bool> predicate) Parameters dict IDictionary<K, V> predicate Func<K, V, bool> Type Parameters K V Remove<K, V>(ConcurrentDictionary<K, V>, K) public static void Remove<K, V>(this ConcurrentDictionary<K, V> dict, K key) Parameters dict ConcurrentDictionary<K, V> key K Type Parameters K V Remove<K, V>(CachingConcurrentDictionary<K, V>, K) public static void Remove<K, V>(this CachingConcurrentDictionary<K, V> dict, K key) Parameters dict CachingConcurrentDictionary<K, V> key K Type Parameters K V"
  },
  "api/Vintagestory.API.Util.EntityTalkUtil.html": {
    "href": "api/Vintagestory.API.Util.EntityTalkUtil.html",
    "title": "Class EntityTalkUtil | VintageStory API",
    "keywords": "Class EntityTalkUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public class EntityTalkUtil Inheritance object EntityTalkUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors EntityTalkUtil(ICoreAPI, Entity, bool) public EntityTalkUtil(ICoreAPI api, Entity atEntity, bool isMultiSoundVoice) Parameters api ICoreAPI atEntity Entity isMultiSoundVoice bool Fields AddSoundLengthChordDelay public bool AddSoundLengthChordDelay Field Value bool IsMultiSoundVoice public bool IsMultiSoundVoice Field Value bool LongNote protected bool LongNote Field Value bool ShouldDoIdleTalk public bool ShouldDoIdleTalk Field Value bool TalkPacketId public const int TalkPacketId = 1231 Field Value int TalkSpeed protected Dictionary<EnumTalkType, float> TalkSpeed Field Value Dictionary<EnumTalkType, float> capi protected ICoreClientAPI capi Field Value ICoreClientAPI chordDelay protected float chordDelay Field Value float chordDelayMul public float chordDelayMul Field Value float currentLetterInWord protected int currentLetterInWord Field Value int entity protected Entity entity Field Value Entity idleTalkChance public float idleTalkChance Field Value float lettersLeftToTalk protected int lettersLeftToTalk Field Value int pitchModifier public float pitchModifier Field Value float sapi protected ICoreServerAPI sapi Field Value ICoreServerAPI slidingPitchSounds protected List<SlidingPitchSound> slidingPitchSounds Field Value List<SlidingPitchSound> soundLength public float soundLength Field Value float soundName public AssetLocation soundName Field Value AssetLocation stoppedSlidingSounds protected List<SlidingPitchSound> stoppedSlidingSounds Field Value List<SlidingPitchSound> talkType protected EnumTalkType talkType Field Value EnumTalkType totalLettersTalked protected int totalLettersTalked Field Value int totalLettersToTalk protected int totalLettersToTalk Field Value int volumneModifier public float volumneModifier Field Value float Properties Rand protected virtual Random Rand { get; } Property Value Random Methods GetSoundLocation(float, out float) protected AssetLocation GetSoundLocation(float pitch, out float pitchOffset) Parameters pitch float pitchOffset float Returns AssetLocation OnGameTick(float) public virtual void OnGameTick(float dt) Parameters dt float PlaySound(float, float, float) protected virtual void PlaySound(float startpitch, float volume, float length) Parameters startpitch float volume float length float PlaySound(float, float, float, float, float) protected virtual void PlaySound(float startPitch, float endPitch, float startvolume, float endvolumne, float length) Parameters startPitch float endPitch float startvolume float endvolumne float length float SetModifiers(float, float, float) public virtual void SetModifiers(float chordDelayMul = 1, float pitchModifier = 1, float volumneModifier = 1) Parameters chordDelayMul float pitchModifier float volumneModifier float Talk(EnumTalkType) public virtual void Talk(EnumTalkType talkType) Parameters talkType EnumTalkType"
  },
  "api/Vintagestory.API.Util.EnumTalkType.html": {
    "href": "api/Vintagestory.API.Util.EnumTalkType.html",
    "title": "Enum EnumTalkType | VintageStory API",
    "keywords": "Enum EnumTalkType Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public enum EnumTalkType Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Complain = 6 Death = 4 Goodbye = 7 Hurt = 2 Hurt2 = 3 Idle = 1 IdleShort = 8 Laugh = 9 Meet = 0 Purchase = 5 Shrug = 11 Thrust = 10"
  },
  "api/Vintagestory.API.Util.EnumerableExtensions.html": {
    "href": "api/Vintagestory.API.Util.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | VintageStory API",
    "keywords": "Class EnumerableExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Foreach<T>(IEnumerable<T>, Action<T>) public static void Foreach<T>(this IEnumerable<T> array, Action<T> onelement) Parameters array IEnumerable<T> onelement Action<T> Type Parameters T IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) public static int IndexOf<T>(this IEnumerable<T> source, ActionBoolReturn<T> onelem) Parameters source IEnumerable<T> onelem ActionBoolReturn<T> Returns int Type Parameters T NearestDistance<T>(IEnumerable<T>, Func<T, double>) public static double NearestDistance<T>(this IEnumerable<T> array, Func<T, double> getDistance) Parameters array IEnumerable<T> getDistance Func<T, double> Returns double Type Parameters T Nearest<T>(IEnumerable<T>, Func<T, double>) public static T Nearest<T>(this IEnumerable<T> array, Func<T, double> getDistance) Parameters array IEnumerable<T> getDistance Func<T, double> Returns T Type Parameters T"
  },
  "api/Vintagestory.API.Util.EqualityUtil.html": {
    "href": "api/Vintagestory.API.Util.EqualityUtil.html",
    "title": "Class EqualityUtil | VintageStory API",
    "keywords": "Class EqualityUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public class EqualityUtil Inheritance object EqualityUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods NumberEquals(object, object) public static bool NumberEquals(object a, object b) Parameters a object b object Returns bool"
  },
  "api/Vintagestory.API.Util.FastSerializer.html": {
    "href": "api/Vintagestory.API.Util.FastSerializer.html",
    "title": "Class FastSerializer | VintageStory API",
    "keywords": "Class FastSerializer Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll A faster implementation of a ProtoBuf serializer. Note 1: for int and ushort and other primitives/structs, the default value of 0 will not be written (because the read value will be 0 anyhow, so not writing the 0 value makes no difference to what the reader eventually reads): except in arrays and other simple collections such as List, where 0 values will be written, so that the reader reads out all subsequent values in the array with the correct indexing Note 2: for reference types including string, if the value is null then nothing will be written. A read collection may therefore be shorter than the written collection, if the written collection included null values: be careful serializing arrays of reference types, if necessary replace null values with something else prior to serialization. For convenience, one special exception here is arrays or lists of string: if a null string is in the array, FastSerializer will instead automatically write an empty string \"\". (We don't do that for other reference types because it is not necessarily clear what the default non-null value should be....) Open in GitHub public static class FastSerializer Inheritance object FastSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSize(byte[]) public static int GetSize(byte[] val) Parameters val byte[] Returns int GetSize(int) public static int GetSize(int v) Parameters v int Returns int GetSize(float) public static int GetSize(float v) Parameters v float Returns int GetSize(string) public static int GetSize(string s) Parameters s string Returns int GetSize(ushort) public static int GetSize(ushort v) Parameters v ushort Returns int GetSize(Vec2i) public static int GetSize(Vec2i val) Parameters val Vec2i Returns int Write(FastMemoryStream, int, bool) public static void Write(FastMemoryStream stream, int field, bool val) Parameters stream FastMemoryStream field int val bool Write(FastMemoryStream, int, byte[]) public static void Write(FastMemoryStream stream, int field, byte[] val) Parameters stream FastMemoryStream field int val byte[] Write(FastMemoryStream, int, IDictionary<string, byte[]>) public static void Write(FastMemoryStream stream, int field, IDictionary<string, byte[]> dict) Parameters stream FastMemoryStream field int dict IDictionary<string, byte[]> Write(FastMemoryStream, int, IDictionary<Vec2i, float>) public static void Write(FastMemoryStream stream, int field, IDictionary<Vec2i, float> dict) Parameters stream FastMemoryStream field int dict IDictionary<Vec2i, float> Write(FastMemoryStream, int, IEnumerable<byte[]>) public static void Write(FastMemoryStream stream, int field, IEnumerable<byte[]> collection) Parameters stream FastMemoryStream field int collection IEnumerable<byte[]> Write(FastMemoryStream, int, IEnumerable<int>) public static void Write(FastMemoryStream stream, int field, IEnumerable<int> collection) Parameters stream FastMemoryStream field int collection IEnumerable<int> Write(FastMemoryStream, int, IEnumerable<string>) public static void Write(FastMemoryStream stream, int field, IEnumerable<string> collection) Parameters stream FastMemoryStream field int collection IEnumerable<string> Write(FastMemoryStream, int, IEnumerable<ushort>) public static void Write(FastMemoryStream stream, int field, IEnumerable<ushort> collection) Parameters stream FastMemoryStream field int collection IEnumerable<ushort> Write(FastMemoryStream, int, IEnumerable<BlockPos>) public static void Write(FastMemoryStream stream, int field, IEnumerable<BlockPos> collection) Parameters stream FastMemoryStream field int collection IEnumerable<BlockPos> Write(FastMemoryStream, int, IEnumerable<Vec4i>) public static void Write(FastMemoryStream stream, int field, IEnumerable<Vec4i> collection) Parameters stream FastMemoryStream field int collection IEnumerable<Vec4i> Write(FastMemoryStream, int, int) public static void Write(FastMemoryStream stream, int field, int val) Parameters stream FastMemoryStream field int val int Write(FastMemoryStream, int, float) public static void Write(FastMemoryStream stream, int field, float val) Parameters stream FastMemoryStream field int val float Write(FastMemoryStream, int, string) public static void Write(FastMemoryStream stream, int field, string s) Parameters stream FastMemoryStream field int s string Write(FastMemoryStream, int, FastMemoryStream) public static void Write(FastMemoryStream stream, int field, FastMemoryStream val) Parameters stream FastMemoryStream field int val FastMemoryStream Write(FastMemoryStream, int, BlockPos) public static void Write(FastMemoryStream stream, int field, BlockPos val) Parameters stream FastMemoryStream field int val BlockPos Write(FastMemoryStream, int, Vec2i) public static void Write(FastMemoryStream stream, int field, Vec2i val) Parameters stream FastMemoryStream field int val Vec2i Write(FastMemoryStream, int, Vec4i) public static void Write(FastMemoryStream stream, int field, Vec4i val) Parameters stream FastMemoryStream field int val Vec4i WritePacked(FastMemoryStream, int, IEnumerable<int>) public static void WritePacked(FastMemoryStream stream, int field, IEnumerable<int> collection) Parameters stream FastMemoryStream field int collection IEnumerable<int> WritePacked(FastMemoryStream, int, IEnumerable<ushort>) public static void WritePacked(FastMemoryStream stream, int field, IEnumerable<ushort> collection) Parameters stream FastMemoryStream field int collection IEnumerable<ushort> WriteTagLengthDelim(FastMemoryStream, int, int) public static void WriteTagLengthDelim(FastMemoryStream stream, int field, int length) Parameters stream FastMemoryStream field int length int"
  },
  "api/Vintagestory.API.Util.FastSerializerDelegate.html": {
    "href": "api/Vintagestory.API.Util.FastSerializerDelegate.html",
    "title": "Delegate FastSerializerDelegate | VintageStory API",
    "keywords": "Delegate FastSerializerDelegate Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public delegate void FastSerializerDelegate(FastMemoryStream ms, int id, ref int count, ref int position) Parameters ms FastMemoryStream id int count int position int Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Util.GCHandleProvider.html": {
    "href": "api/Vintagestory.API.Util.GCHandleProvider.html",
    "title": "Class GCHandleProvider | VintageStory API",
    "keywords": "Class GCHandleProvider Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public class GCHandleProvider : IDisposable Inheritance object GCHandleProvider Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors GCHandleProvider(object) public GCHandleProvider(object target) Parameters target object Properties Handle public GCHandle Handle { get; } Property Value GCHandle Pointer public nint Pointer { get; } Property Value nint Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~GCHandleProvider() protected ~GCHandleProvider()"
  },
  "api/Vintagestory.API.Util.HashsetExtensions.html": {
    "href": "api/Vintagestory.API.Util.HashsetExtensions.html",
    "title": "Class HashsetExtensions | VintageStory API",
    "keywords": "Class HashsetExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class HashsetExtensions Inheritance object HashsetExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRange<T>(HashSet<T>, HashSet<T>) public static void AddRange<T>(this HashSet<T> hashset, HashSet<T> elements) Parameters hashset HashSet<T> elements HashSet<T> Type Parameters T AddRange<T>(HashSet<T>, IEnumerable<T>) public static void AddRange<T>(this HashSet<T> hashset, IEnumerable<T> elements) Parameters hashset HashSet<T> elements IEnumerable<T> Type Parameters T AddRange<T>(HashSet<T>, T[]) public static void AddRange<T>(this HashSet<T> hashset, T[] elements) Parameters hashset HashSet<T> elements T[] Type Parameters T Implode<T>(HashSet<T>, string) public static string Implode<T>(this HashSet<T> hashset, string seperator = \", \") Parameters hashset HashSet<T> seperator string Returns string Type Parameters T PopOne<T>(ICollection<T>) public static T PopOne<T>(this ICollection<T> items) Parameters items ICollection<T> Returns T Type Parameters T"
  },
  "api/Vintagestory.API.Util.IWithFastSerialize.html": {
    "href": "api/Vintagestory.API.Util.IWithFastSerialize.html",
    "title": "Interface IWithFastSerialize | VintageStory API",
    "keywords": "Interface IWithFastSerialize Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Detected by the VintagestorySourcegen source generator, which replaces this default FastSerialize method with a source-generated version public interface IWithFastSerialize Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods FastSerialize(FastMemoryStream) byte[] FastSerialize(FastMemoryStream ms) Parameters ms FastMemoryStream Returns byte[]"
  },
  "api/Vintagestory.API.Util.IgnoreFile.html": {
    "href": "api/Vintagestory.API.Util.IgnoreFile.html",
    "title": "Class IgnoreFile | VintageStory API",
    "keywords": "Class IgnoreFile Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public class IgnoreFile Inheritance object IgnoreFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors IgnoreFile(string, string) public IgnoreFile(string filename, string fullpath) Parameters filename string fullpath string Fields filename public readonly string filename Field Value string fullpath public readonly string fullpath Field Value string Methods Available(string) public bool Available(string path) Parameters path string Returns bool"
  },
  "api/Vintagestory.API.Util.ListExtensions.html": {
    "href": "api/Vintagestory.API.Util.ListExtensions.html",
    "title": "Class ListExtensions | VintageStory API",
    "keywords": "Class ListExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class ListExtensions Inheritance object ListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Shuffle<T>(List<T>, Random) Performs a Fisher-Yates shuffle in linear time or O(n) public static void Shuffle<T>(this List<T> array, Random rand) Parameters array List<T> rand Random Type Parameters T Shuffle<T>(List<T>, IRandom) Performs a Fisher-Yates shuffle in linear time or O(n) public static void Shuffle<T>(this List<T> array, IRandom rand) Parameters array List<T> rand IRandom Type Parameters T"
  },
  "api/Vintagestory.API.Util.NetUtil.html": {
    "href": "api/Vintagestory.API.Util.NetUtil.html",
    "title": "Class NetUtil | VintageStory API",
    "keywords": "Class NetUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class NetUtil Inheritance object NetUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsPrivateIp(string) public static bool IsPrivateIp(string ip) Parameters ip string Returns bool OpenUrlInBrowser(string) public static void OpenUrlInBrowser(string url) Parameters url string getUriInfo(string, out string) Extracts hostname, port and password from given uri. Error will be non null if the uri is incorrect in some ways public static UriInfo getUriInfo(string uri, out string error) Parameters uri string error string Returns UriInfo"
  },
  "api/Vintagestory.API.Util.ObjectCacheUtil.html": {
    "href": "api/Vintagestory.API.Util.ObjectCacheUtil.html",
    "title": "Class ObjectCacheUtil | VintageStory API",
    "keywords": "Class ObjectCacheUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class ObjectCacheUtil Inheritance object ObjectCacheUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Delete(ICoreAPI, string) public static bool Delete(ICoreAPI api, string key) Parameters api ICoreAPI key string Returns bool GetOrCreate<T>(ICoreAPI, string, CreateCachableObjectDelegate<T>) public static T GetOrCreate<T>(ICoreAPI api, string key, CreateCachableObjectDelegate<T> onRequireCreate) Parameters api ICoreAPI key string onRequireCreate CreateCachableObjectDelegate<T> Returns T Type Parameters T TryGet<T>(ICoreAPI, string) public static T TryGet<T>(ICoreAPI api, string key) Parameters api ICoreAPI key string Returns T Type Parameters T"
  },
  "api/Vintagestory.API.Util.ObjectHandleExtensions.html": {
    "href": "api/Vintagestory.API.Util.ObjectHandleExtensions.html",
    "title": "Class ObjectHandleExtensions | VintageStory API",
    "keywords": "Class ObjectHandleExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class ObjectHandleExtensions Inheritance object ObjectHandleExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToGcHandle(object) public static GCHandle ToGcHandle(this object target) Parameters target object Returns GCHandle ToIntPtr(object) public static nint ToIntPtr(this object target) Parameters target object Returns nint ToIntPtr(GCHandle) public static nint ToIntPtr(this GCHandle target) Parameters target GCHandle Returns nint"
  },
  "api/Vintagestory.API.Util.PosUtil.html": {
    "href": "api/Vintagestory.API.Util.PosUtil.html",
    "title": "Class PosUtil | VintageStory API",
    "keywords": "Class PosUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class PosUtil Inheritance object PosUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBlockAbove(IBlockAccessor, BlockPos, int, int) public static Block GetBlockAbove(this IBlockAccessor accessor, BlockPos pos, int dy = 1, int layer = 0) Parameters accessor IBlockAccessor pos BlockPos dy int layer int Returns Block GetBlockBelow(IBlockAccessor, BlockPos, int, int) public static Block GetBlockBelow(this IBlockAccessor accessor, BlockPos pos, int dy = 1, int layer = 0) Parameters accessor IBlockAccessor pos BlockPos dy int layer int Returns Block GetBlockOnSide(IBlockAccessor, BlockPos, BlockFacing, int) public static Block GetBlockOnSide(this IBlockAccessor accessor, BlockPos pos, BlockFacing face, int layer = 0) Parameters accessor IBlockAccessor pos BlockPos face BlockFacing layer int Returns Block SetOrCreate(BlockPos, BlockPos) public static BlockPos SetOrCreate(this BlockPos pos, BlockPos sourcePos) Parameters pos BlockPos sourcePos BlockPos Returns BlockPos SetOrCreate(Vec3f, Vec3f) public static Vec3f SetOrCreate(this Vec3f pos, Vec3f sourcePos) Parameters pos Vec3f sourcePos Vec3f Returns Vec3f"
  },
  "api/Vintagestory.API.Util.ReaderWriterExtensions.html": {
    "href": "api/Vintagestory.API.Util.ReaderWriterExtensions.html",
    "title": "Class ReaderWriterExtensions | VintageStory API",
    "keywords": "Class ReaderWriterExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class ReaderWriterExtensions Inheritance object ReaderWriterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clear(MemoryStream) public static void Clear(this MemoryStream ms) Parameters ms MemoryStream ReadIntArray(BinaryReader) public static int[] ReadIntArray(this BinaryReader reader) Parameters reader BinaryReader Returns int[] ReadStringArray(BinaryReader) public static string[] ReadStringArray(this BinaryReader reader) Parameters reader BinaryReader Returns string[] WriteArray(BinaryWriter, int[]) public static void WriteArray(this BinaryWriter writer, int[] values) Parameters writer BinaryWriter values int[] WriteArray(BinaryWriter, string[]) public static void WriteArray(this BinaryWriter writer, string[] values) Parameters writer BinaryWriter values string[]"
  },
  "api/Vintagestory.API.Util.RelaxedReadOnlyDictionary-2.html": {
    "href": "api/Vintagestory.API.Util.RelaxedReadOnlyDictionary-2.html",
    "title": "Class RelaxedReadOnlyDictionary<T, K> | VintageStory API",
    "keywords": "Class RelaxedReadOnlyDictionary<T, K> Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public class RelaxedReadOnlyDictionary<T, K> : IDictionary<T, K>, ICollection<KeyValuePair<T, K>>, IEnumerable<KeyValuePair<T, K>>, IEnumerable Type Parameters T K Inheritance object RelaxedReadOnlyDictionary<T, K> Implements IDictionary<T, K> ICollection<KeyValuePair<T, K>> IEnumerable<KeyValuePair<T, K>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors RelaxedReadOnlyDictionary(IDictionary<T, K>) public RelaxedReadOnlyDictionary(IDictionary<T, K> values) Parameters values IDictionary<T, K> Properties Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int The number of elements contained in the ICollection<T>. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[T] Gets or sets the element with the specified key. public K this[T key] { get; set; } Parameters key T The key of the element to get or set. Property Value K The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<T> Keys { get; } Property Value ICollection<T> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<K> Values { get; } Property Value ICollection<K> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<T, K>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<T, K> item) Parameters item KeyValuePair<T, K> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(T, K) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(T key, K value) Parameters key T The object to use as the key of the element to add. value K The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Removes all items from the ICollection<T>. public void Clear() Exceptions NotSupportedException The ICollection<T> is read-only. Contains(KeyValuePair<T, K>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<T, K> item) Parameters item KeyValuePair<T, K> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(T) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(T key) Parameters key T The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<T, K>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<T, K>[] array, int arrayIndex) Parameters array KeyValuePair<T, K>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<T, K>> GetEnumerator() Returns IEnumerator<KeyValuePair<T, K>> An enumerator that can be used to iterate through the collection. Remove(KeyValuePair<T, K>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<T, K> item) Parameters item KeyValuePair<T, K> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(T) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(T key) Parameters key T The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(T, out K) Gets the value associated with the specified key. public bool TryGetValue(T key, out K value) Parameters key T The key whose value to get. value K When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null."
  },
  "api/Vintagestory.API.Util.SerializerUtil.ByteReadDelegatae.html": {
    "href": "api/Vintagestory.API.Util.SerializerUtil.ByteReadDelegatae.html",
    "title": "Delegate SerializerUtil.ByteReadDelegatae | VintageStory API",
    "keywords": "Delegate SerializerUtil.ByteReadDelegatae Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public delegate void SerializerUtil.ByteReadDelegatae(BinaryReader reader) Parameters reader BinaryReader Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Util.SerializerUtil.ByteWriteDelegatae.html": {
    "href": "api/Vintagestory.API.Util.SerializerUtil.ByteWriteDelegatae.html",
    "title": "Delegate SerializerUtil.ByteWriteDelegatae | VintageStory API",
    "keywords": "Delegate SerializerUtil.ByteWriteDelegatae Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public delegate void SerializerUtil.ByteWriteDelegatae(BinaryWriter writer) Parameters writer BinaryWriter Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Util.SerializerUtil.html": {
    "href": "api/Vintagestory.API.Util.SerializerUtil.html",
    "title": "Class SerializerUtil | VintageStory API",
    "keywords": "Class SerializerUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class SerializerUtil Inheritance object SerializerUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SerializedOne public static readonly byte[] SerializedOne Field Value byte[] SerializedZero public static readonly byte[] SerializedZero Field Value byte[] Methods DeserializeInto<T>(T, byte[]) Uses ProtoBuf.Net to deserialize bytes into existing object T public static T DeserializeInto<T>(T instance, byte[] data) Parameters instance T data byte[] Returns T Type Parameters T Deserialize<T>(byte[]) Uses ProtoBuf.Net to deserialize bytes into T public static T Deserialize<T>(byte[] data) Parameters data byte[] Returns T Type Parameters T Deserialize<T>(byte[], T) Uses ProtoBuf.Net to deserialize bytes into T. Returns the default value if data is null public static T Deserialize<T>(byte[] data, T defaultValue) Parameters data byte[] defaultValue T Returns T Type Parameters T FromBytes(byte[], ByteReadDelegatae) public static void FromBytes(byte[] data, SerializerUtil.ByteReadDelegatae toRead) Parameters data byte[] toRead SerializerUtil.ByteReadDelegatae Serialize<T>(T) Uses ProtoBuf.NET to serialize T into bytes public static byte[] Serialize<T>(T data) Parameters data T Returns byte[] Type Parameters T Serialize<T>(T, FastMemoryStream) For performance, version using a reusable FastMemoryStream provided as a parameter. (Caution: do not re-use the same stream in a nested way e.g. serializing individual elements within a larger object, as every call to this resets the stream) public static byte[] Serialize<T>(T data, FastMemoryStream ms) Parameters data T ms FastMemoryStream Returns byte[] Type Parameters T ToBytes(ByteWriteDelegatae) public static byte[] ToBytes(SerializerUtil.ByteWriteDelegatae toWrite) Parameters toWrite SerializerUtil.ByteWriteDelegatae Returns byte[]"
  },
  "api/Vintagestory.API.Util.SlidingPitchSound.html": {
    "href": "api/Vintagestory.API.Util.SlidingPitchSound.html",
    "title": "Class SlidingPitchSound | VintageStory API",
    "keywords": "Class SlidingPitchSound Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public class SlidingPitchSound Inheritance object SlidingPitchSound Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields EndVolumne public float EndVolumne Field Value float StartVolumne public float StartVolumne Field Value float TalkType public EnumTalkType TalkType Field Value EnumTalkType Vibrato public bool Vibrato Field Value bool endPitch public float endPitch Field Value float length public float length Field Value float sound public ILoadedSound sound Field Value ILoadedSound startMs public long startMs Field Value long startPitch public float startPitch Field Value float"
  },
  "api/Vintagestory.API.Util.StringBuilderExtensions.html": {
    "href": "api/Vintagestory.API.Util.StringBuilderExtensions.html",
    "title": "Class StringBuilderExtensions | VintageStory API",
    "keywords": "Class StringBuilderExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class StringBuilderExtensions Inheritance object StringBuilderExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AppendHex(StringBuilder, byte) Prints a single byte in hexadecimal. Potentially useful for logging issues relating to serialization, packets contents, etc public static void AppendHex(this StringBuilder sb, byte b) Parameters sb StringBuilder b byte AppendHex(StringBuilder, byte[]) Prints a byte array in hexadecimal. Potentially useful for logging issues relating to serialization, packets contents, etc public static void AppendHex(this StringBuilder sb, byte[] bb) Parameters sb StringBuilder bb byte[] AppendLineOnce(StringBuilder) public static void AppendLineOnce(this StringBuilder sb) Parameters sb StringBuilder"
  },
  "api/Vintagestory.API.Util.StringExtensions.html": {
    "href": "api/Vintagestory.API.Util.StringExtensions.html",
    "title": "Class StringExtensions | VintageStory API",
    "keywords": "Class StringExtensions Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CaseInsensitiveContains(string, string, StringComparison) public static bool CaseInsensitiveContains(this string text, string value, StringComparison stringComparison = StringComparison.CurrentCultureIgnoreCase) Parameters text string value string stringComparison StringComparison Returns bool DeDuplicate(string) public static string DeDuplicate(this string str) Parameters str string Returns string"
  },
  "api/Vintagestory.API.Util.StringUtil.html": {
    "href": "api/Vintagestory.API.Util.StringUtil.html",
    "title": "Class StringUtil | VintageStory API",
    "keywords": "Class StringUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class StringUtil Inheritance object StringUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CompareOrdinal(string, string) This should be used for every string comparison when ordering strings (except possibly in localised output to the user) in order to avoid any culture specific string comparison issues in certain languages (worst in the Thai language which has no spaces and treats punctuation marks as invisible) See also: https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings public static int CompareOrdinal(this string a, string b) Parameters a string b string Returns int ContainsFast(string, char) public static bool ContainsFast(this string value, char reference) Parameters value string reference char Returns bool ContainsFast(string, string) public static bool ContainsFast(this string value, string reference) Parameters value string reference string Returns bool CountChars(string, char) public static int CountChars(this string text, char c) Parameters text string c char Returns int EndsWithOrdinal(string, string) IMPORTANT! This method should be used for every EndsWith operation in our code (except possibly in localised output to the user). This is important in order to avoid any culture-specific different results even when examining strings in English, when the user machine's current culture is a different language (Known issue in the Thai language which has no spaces and treats punctuation marks as invisible, see https://github.com/dotnet/runtime/issues/59120) See also: https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings public static bool EndsWithOrdinal(this string a, string b) Parameters a string b string Returns bool EqualsFast(string, string) public static bool EqualsFast(this string value, string reference) Parameters value string reference string Returns bool EqualsFastIgnoreCase(string, string) A fast case-insensitive string comparison for \"ordinal\" culture i.e. plain ASCII comparison used for internal strings such as asset paths public static bool EqualsFastIgnoreCase(this string value, string reference) Parameters value string reference string Returns bool FastStartsWith(string, string, int) public static bool FastStartsWith(string value, string reference, int len) Parameters value string reference string len int Returns bool GetNonRandomizedHashCode(string) public static int GetNonRandomizedHashCode(this string str) Parameters str string Returns int IndexOfOrdinal(string, string) IMPORTANT! This method should be used for every IndexOf operation in our code (except possibly in localised output to the user). This is important in order to avoid any culture-specific different results even when indexing GLSL shader code or other code strings, etc., or other strings in English, when the current culture is a different language (Known issue in the Thai language which has no spaces and treats punctuation marks as invisible, see https://github.com/dotnet/runtime/issues/59120) See also: https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings public static int IndexOfOrdinal(this string a, string b) Parameters a string b string Returns int RemoveFileEnding(string) public static string RemoveFileEnding(this string text) Parameters text string Returns string StartsWithFast(string, string) public static bool StartsWithFast(this string value, string reference) Parameters value string reference string Returns bool StartsWithFast(string, string, int) public static bool StartsWithFast(this string value, string reference, int offset) Parameters value string reference string offset int Returns bool StartsWithOrdinal(string, string) IMPORTANT! This method should be used for every StartsWith operation in our code (except possibly in localised output to the user). This is important in order to avoid any culture-specific different results even when examining strings in English, when the user machine's current culture is a different language (Known issue in the Thai language which has no spaces and treats punctuation marks as invisible, see https://github.com/dotnet/runtime/issues/59120) See also: https://learn.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings public static bool StartsWithOrdinal(this string a, string b) Parameters a string b string Returns bool ToBool(string, bool) public static bool ToBool(this string text, bool defaultValue = false) Parameters text string defaultValue bool Returns bool ToDouble(string, double) public static double ToDouble(this string text, double defaultValue = 0) Parameters text string defaultValue double Returns double ToDoubleOrNull(string, double?) public static double? ToDoubleOrNull(this string text, double? defaultValue = 0) Parameters text string defaultValue double? Returns double? ToFloat(string, float) public static float ToFloat(this string text, float defaultValue = 0) Parameters text string defaultValue float Returns float ToFloatOrNull(string, float?) public static float? ToFloatOrNull(this string text, float? defaultValue = 0) Parameters text string defaultValue float? Returns float? ToInt(string, int) public static int ToInt(this string text, int defaultValue = 0) Parameters text string defaultValue int Returns int ToLong(string, long) public static long ToLong(this string text, long defaultValue = 0) Parameters text string defaultValue long Returns long ToSearchFriendly(string) Removes diacritics and replaces quotation marks, guillemets and brackets with a blank space. Used to create a search friendly term public static string ToSearchFriendly(this string stIn) Parameters stIn string Returns string UcFirst(string) Convert the first character to an uppercase one public static string UcFirst(this string text) Parameters text string Returns string"
  },
  "api/Vintagestory.API.Util.TagUtil.html": {
    "href": "api/Vintagestory.API.Util.TagUtil.html",
    "title": "Class TagUtil | VintageStory API",
    "keywords": "Class TagUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class TagUtil Inheritance object TagUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ContainsAll(ushort[], ushort[]) Checks if all requirement tags are in the sample. public static bool ContainsAll(ushort[] requirement, ushort[] sample) Parameters requirement ushort[] Must be sorted in ascending order sample ushort[] Must be sorted in ascending order Returns bool ContainsAllFromAtLeastOne(IEnumerable<ushort[]>, ushort[]) Checks if sample contains all tags from at least one requirement group. public static bool ContainsAllFromAtLeastOne(IEnumerable<ushort[]> requirementGroups, ushort[] sample) Parameters requirementGroups IEnumerable<ushort[]> Each group must be sorted in ascending order sample ushort[] Must be sorted in ascending order Returns bool Intersects(ushort[], ushort[]) Checks if two sorted arrays of tags have a common element. public static bool Intersects(ushort[] first, ushort[] second) Parameters first ushort[] Must be sorted in ascending order second ushort[] Must be sorted in ascending order Returns bool IntersectsAll(IEnumerable<ushort[]>, ushort[]) Checks if sample has at least one tag from each requirement group. public static bool IntersectsAll(IEnumerable<ushort[]> requirementGroups, ushort[] sample) Parameters requirementGroups IEnumerable<ushort[]> Each group must be sorted in ascending order sample ushort[] Must be sorted in ascending order Returns bool"
  },
  "api/Vintagestory.API.Util.ThreadSafeRandom.html": {
    "href": "api/Vintagestory.API.Util.ThreadSafeRandom.html",
    "title": "Class ThreadSafeRandom | VintageStory API",
    "keywords": "Class ThreadSafeRandom Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public class ThreadSafeRandom : Random Inheritance object Random ThreadSafeRandom Inherited Members Random.GetItems<T>(ReadOnlySpan<T>, int) Random.GetItems<T>(ReadOnlySpan<T>, Span<T>) Random.GetItems<T>(T[], int) Random.NextBytes(Span<byte>) Random.NextInt64() Random.NextInt64(long) Random.NextInt64(long, long) Random.NextSingle() Random.Sample() Random.Shuffle<T>(Span<T>) Random.Shuffle<T>(T[]) Random.Shared object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ThreadSafeRandom() public ThreadSafeRandom() ThreadSafeRandom(int) public ThreadSafeRandom(int seed) Parameters seed int Methods Next() Returns a non-negative random integer. public override int Next() Returns int A 32-bit signed integer that is greater than or equal to 0 and less than Int32.MaxValue. Next(int) Returns a non-negative random integer that is less than the specified maximum. public override int Next(int maxValue) Parameters maxValue int The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to 0. Returns int A 32-bit signed integer that is greater than or equal to 0, and less than maxValue; that is, the range of return values ordinarily includes 0 but not maxValue. However, if maxValue equals 0, 0 is returned. Exceptions ArgumentOutOfRangeException maxValue is less than 0. Next(int, int) Returns a random integer that is within a specified range. public override int Next(int minValue, int maxValue) Parameters minValue int The inclusive lower bound of the random number returned. maxValue int The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. Returns int A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned. Exceptions ArgumentOutOfRangeException minValue is greater than maxValue. NextBytes(byte[]) Fills the elements of a specified array of bytes with random numbers. public override void NextBytes(byte[] buffer) Parameters buffer byte[] The array to be filled with random numbers. Exceptions ArgumentNullException buffer is null. NextDouble() Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0. public override double NextDouble() Returns double A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0."
  },
  "api/Vintagestory.API.Util.UriInfo.html": {
    "href": "api/Vintagestory.API.Util.UriInfo.html",
    "title": "Struct UriInfo | VintageStory API",
    "keywords": "Struct UriInfo Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public struct UriInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Fields Hostname public string Hostname Field Value string Password public string Password Field Value string Port public int? Port Field Value int?"
  },
  "api/Vintagestory.API.Util.WildcardUtil.html": {
    "href": "api/Vintagestory.API.Util.WildcardUtil.html",
    "title": "Class WildcardUtil | VintageStory API",
    "keywords": "Class WildcardUtil Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll Open in GitHub public static class WildcardUtil Inheritance object WildcardUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetWildcardValue(AssetLocation, AssetLocation) Extract the value matched by the wildcard. For exammple for rock-* and inCode rock-granite, this method will return 'granite' Returns null if the wildcard does not match public static string GetWildcardValue(AssetLocation wildCard, AssetLocation inCode) Parameters wildCard AssetLocation inCode AssetLocation Returns string Match(string, string) public static bool Match(string needle, string haystack) Parameters needle string haystack string Returns bool Match(string[], string) public static bool Match(string[] needles, string haystack) Parameters needles string[] haystack string Returns bool Match(AssetLocation, AssetLocation) public static bool Match(AssetLocation needle, AssetLocation haystack) Parameters needle AssetLocation haystack AssetLocation Returns bool Match(AssetLocation, AssetLocation, string[]) Checks whether or not the wildcard matches for inCode, for example, returns true for wildcard rock-* and inCode rock-granite public static bool Match(AssetLocation wildCard, AssetLocation inCode, string[] allowedVariants) Parameters wildCard AssetLocation inCode AssetLocation allowedVariants string[] Returns bool MatchesVariants(AssetLocation, AssetLocation, string[]) public static bool MatchesVariants(AssetLocation wildCard, AssetLocation inCode, string[] allowedVariants) Parameters wildCard AssetLocation inCode AssetLocation allowedVariants string[] Returns bool WildCardReplace(AssetLocation, AssetLocation, AssetLocation) Returns a new AssetLocation with the wildcards (*) being filled with the blocks other Code parts, if the wildcard matches. Example this block is trapdoor-up-north. search is -up-, replace is -down-, in this case this method will return trapdoor-down-north. public static AssetLocation WildCardReplace(this AssetLocation code, AssetLocation search, AssetLocation replace) Parameters code AssetLocation search AssetLocation replace AssetLocation Returns AssetLocation"
  },
  "api/Vintagestory.API.Util.fillCallback-1.html": {
    "href": "api/Vintagestory.API.Util.fillCallback-1.html",
    "title": "Delegate fillCallback<T> | VintageStory API",
    "keywords": "Delegate fillCallback<T> Namespace Vintagestory.API.Util Assembly VintagestoryAPI.dll public delegate T fillCallback<T>(int index) Parameters index int Returns T Type Parameters T Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object)"
  },
  "api/Vintagestory.API.Util.html": {
    "href": "api/Vintagestory.API.Util.html",
    "title": "Namespace Vintagestory.API.Util | VintageStory API",
    "keywords": "Namespace Vintagestory.API.Util Classes ArrayExtensions Open in GitHub ArrayUtil Open in GitHub AsyncHelper A class to provide general helper functions for multi-threaded (asynchronous) operations Open in GitHub AsyncHelper.Multithreaded BitmapExtensions Open in GitHub CustomFastSerializerAttribute Indicates that the FastSerialize() method should call a custom method to serialize this field: the custom method being of the pattern FastSerializerDelegate Open in GitHub DictExtensions Open in GitHub EntityTalkUtil Open in GitHub EnumerableExtensions Open in GitHub EqualityUtil Open in GitHub FastSerializer A faster implementation of a ProtoBuf serializer. Note 1: for int and ushort and other primitives/structs, the default value of 0 will not be written (because the read value will be 0 anyhow, so not writing the 0 value makes no difference to what the reader eventually reads): except in arrays and other simple collections such as List, where 0 values will be written, so that the reader reads out all subsequent values in the array with the correct indexing Note 2: for reference types including string, if the value is null then nothing will be written. A read collection may therefore be shorter than the written collection, if the written collection included null values: be careful serializing arrays of reference types, if necessary replace null values with something else prior to serialization. For convenience, one special exception here is arrays or lists of string: if a null string is in the array, FastSerializer will instead automatically write an empty string \"\". (We don't do that for other reference types because it is not necessarily clear what the default non-null value should be....) Open in GitHub GCHandleProvider Open in GitHub HashsetExtensions Open in GitHub IgnoreFile Open in GitHub ListExtensions Open in GitHub NetUtil Open in GitHub ObjectCacheUtil Open in GitHub ObjectHandleExtensions Open in GitHub PosUtil Open in GitHub ReaderWriterExtensions Open in GitHub RelaxedReadOnlyDictionary<T, K> SerializerUtil Open in GitHub SlidingPitchSound Open in GitHub StringBuilderExtensions Open in GitHub StringExtensions Open in GitHub StringUtil Open in GitHub TagUtil Open in GitHub ThreadSafeRandom Open in GitHub WildcardUtil Open in GitHub Structs UriInfo Interfaces IWithFastSerialize Detected by the VintagestorySourcegen source generator, which replaces this default FastSerialize method with a source-generated version Enums EnumTalkType Open in GitHub Delegates CreateCachableObjectDelegate<T> FastSerializerDelegate SerializerUtil.ByteReadDelegatae SerializerUtil.ByteWriteDelegatae fillCallback<T>"
  },
  "api/Vintagestory.API.html": {
    "href": "api/Vintagestory.API.html",
    "title": "Namespace Vintagestory.API | VintageStory API",
    "keywords": "Namespace Vintagestory.API Classes AddDocumentationPropertyAttribute Adds a new property in the DocFX JSON documentation. Useful for attribute types which do not store JSON properties as variables. Properties need to be serializable by DocFX, hence why they're all strings. Sorry about that. Open in GitHub DocumentAsJsonAttribute Specifies that this class or property should be inlcuded in the JSON-only documentation. Has no functional use and can be ommited if the property is marked with [JsonProperty]. When using with enum types, only specify this attribute on the type itself, not each value. Note that most fields will also contain the following inside their summary tag: <jsonoptional>Optional</jsonoptional><jsondefault>None</jsondefault> The attribute now has the ability to add in required, default, and attribute parameters. These will be analysed by the docFx plugin. Open in GitHub"
  },
  "api/Vintagestory.Client.NoObf.WireframeCube.html": {
    "href": "api/Vintagestory.Client.NoObf.WireframeCube.html",
    "title": "Class WireframeCube | VintageStory API",
    "keywords": "Class WireframeCube Namespace Vintagestory.Client.NoObf Assembly VintagestoryAPI.dll Open in GitHub public class WireframeCube Inheritance object WireframeCube Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors WireframeCube() public WireframeCube() Methods CreateCenterOriginCube(ICoreClientAPI, int) Creates a cube mesh with edge points -1/-1/-1 and 1/1/1 public static WireframeCube CreateCenterOriginCube(ICoreClientAPI capi, int color = -2147483648) Parameters capi ICoreClientAPI color int Returns WireframeCube CreateUnitCube(ICoreClientAPI, int) Creates a cube mesh with edge points 0/0/0 and 1/1/1 public static WireframeCube CreateUnitCube(ICoreClientAPI capi, int color = -2147483648) Parameters capi ICoreClientAPI color int Returns WireframeCube Dispose() public void Dispose() Render(ICoreClientAPI, double, double, double, float, float, float, float, Vec4f) public void Render(ICoreClientAPI capi, double posx, double posy, double posz, float scalex, float scaley, float scalez, float lineWidth = 1.6, Vec4f color = null) Parameters capi ICoreClientAPI posx double posy double posz double scalex float scaley float scalez float lineWidth float color Vec4f Render(ICoreClientAPI, Matrixf, float, Vec4f) public void Render(ICoreClientAPI capi, Matrixf mat, float lineWidth = 1.6, Vec4f color = null) Parameters capi ICoreClientAPI mat Matrixf lineWidth float color Vec4f"
  },
  "api/Vintagestory.Client.NoObf.html": {
    "href": "api/Vintagestory.Client.NoObf.html",
    "title": "Namespace Vintagestory.Client.NoObf | VintageStory API",
    "keywords": "Namespace Vintagestory.Client.NoObf Classes WireframeCube Open in GitHub"
  },
  "api/Vintagestory.Common.Collectible.Block.BlockPosFacing.html": {
    "href": "api/Vintagestory.Common.Collectible.Block.BlockPosFacing.html",
    "title": "Struct BlockPosFacing | VintageStory API",
    "keywords": "Struct BlockPosFacing Namespace Vintagestory.Common.Collectible.Block Assembly VintagestoryAPI.dll public struct BlockPosFacing Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors BlockPosFacing() public BlockPosFacing() BlockPosFacing(BlockPos, BlockFacing, string) public BlockPosFacing(BlockPos position, BlockFacing facing, string constraints) Parameters position BlockPos facing BlockFacing constraints string Fields Constraints public string Constraints Field Value string Facing public BlockFacing Facing Field Value BlockFacing Position public BlockPos Position Field Value BlockPos"
  },
  "api/Vintagestory.Common.Collectible.Block.html": {
    "href": "api/Vintagestory.Common.Collectible.Block.html",
    "title": "Namespace Vintagestory.Common.Collectible.Block | VintageStory API",
    "keywords": "Namespace Vintagestory.Common.Collectible.Block Structs BlockPosFacing"
  },
  "api/Vintagestory.Common.ConcurrentSmallDictionary-2.html": {
    "href": "api/Vintagestory.Common.ConcurrentSmallDictionary-2.html",
    "title": "Class ConcurrentSmallDictionary<TKey, TValue> | VintageStory API",
    "keywords": "Class ConcurrentSmallDictionary<TKey, TValue> Namespace Vintagestory.Common Assembly VintagestoryAPI.dll Use like any IDictionary. Similar to a FastSmallDictionary, but this one is thread-safe for simultaneous reads and writes - will not throw a ConcurrentModificationException This also inherently behaves as an OrderedDictionary (though without the OrderedDictionary extension methods such as ValuesOrdered, those can be added in future if required) Low-lock: there is no lock or interlocked operation except when adding new keys or when removing entries Low-memory: and contains only a single null field, if it is empty Two simultaneous writes, with the same key, at the same time, on different threads: small chance of throwing an intentional ConcurrentModificationException if both have the same keys, otherwise it's virtually impossible for us to preserve the rule that the Dictionary holds exactly one entry per key public class ConcurrentSmallDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters TKey TValue Inheritance object ConcurrentSmallDictionary<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods HashsetExtensions.PopOne<T>(ICollection<T>) DictionaryExtensions.TryGetValue<TKey, TValue>(IDictionary<TKey, TValue>, TKey) DictExtensions.AddRange<K, V>(IDictionary<K, V>, IDictionary<K, V>) DictExtensions.Get<K, V>(IDictionary<K, V>, K, V) DictExtensions.RemoveAllByKey<K, V>(IDictionary<K, V>, Func<K, bool>) DictExtensions.RemoveAll<K, V>(IDictionary<K, V>, Func<K, V, bool>) EnumerableExtensions.Foreach<T>(IEnumerable<T>, Action<T>) EnumerableExtensions.IndexOf<T>(IEnumerable<T>, ActionBoolReturn<T>) EnumerableExtensions.NearestDistance<T>(IEnumerable<T>, Func<T, double>) EnumerableExtensions.Nearest<T>(IEnumerable<T>, Func<T, double>) ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ConcurrentSmallDictionary() public ConcurrentSmallDictionary() ConcurrentSmallDictionary(int) public ConcurrentSmallDictionary(int capacity) Parameters capacity int Properties Count Amount of entries currently in the Dictionary public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool true if the ICollection<T> is read-only; otherwise, false. this[TKey] Gets or sets the element with the specified key. public TValue this[TKey key] { get; set; } Parameters key TKey The key of the element to get or set. Property Value TValue The element with the specified key. Exceptions ArgumentNullException key is null. KeyNotFoundException The property is retrieved and key is not found. NotSupportedException The property is set and the IDictionary<TKey, TValue> is read-only. Keys Gets an ICollection<T> containing the keys of the IDictionary<TKey, TValue>. public ICollection<TKey> Keys { get; } Property Value ICollection<TKey> An ICollection<T> containing the keys of the object that implements IDictionary<TKey, TValue>. Values Gets an ICollection<T> containing the values in the IDictionary<TKey, TValue>. public ICollection<TValue> Values { get; } Property Value ICollection<TValue> An ICollection<T> containing the values in the object that implements IDictionary<TKey, TValue>. Methods Add(KeyValuePair<TKey, TValue>) Adds an item to the ICollection<T>. public void Add(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to add to the ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Add(TKey, TValue) Adds an element with the provided key and value to the IDictionary<TKey, TValue>. public void Add(TKey key, TValue value) Parameters key TKey The object to use as the key of the element to add. value TValue The object to use as the value of the element to add. Exceptions ArgumentNullException key is null. ArgumentException An element with the same key already exists in the IDictionary<TKey, TValue>. NotSupportedException The IDictionary<TKey, TValue> is read-only. Clear() Wipes the contents and resets the count. public void Clear() Contains(KeyValuePair<TKey, TValue>) Determines whether the ICollection<T> contains a specific value. public bool Contains(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. ContainsKey(TKey) Determines whether the IDictionary<TKey, TValue> contains an element with the specified key. public bool ContainsKey(TKey key) Parameters key TKey The key to locate in the IDictionary<TKey, TValue>. Returns bool true if the IDictionary<TKey, TValue> contains an element with the key; otherwise, false. Exceptions ArgumentNullException key is null. CopyTo(KeyValuePair<TKey, TValue>[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex) Parameters array KeyValuePair<TKey, TValue>[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. Exceptions ArgumentNullException array is null. ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the source ICollection<T> is greater than the available space from arrayIndex to the end of the destination array. GetEnumerator() Threadsafe: but this might occasionally enumerate over a value which has, meanwhile, been removed from the Dictionary by a different thread Iterate over .Keys or .Values instead if an instantaneous snapshot is required (which will also therefore be a historical snapshot, if another thread meanwhile makes changes) public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> IsEmpty() public bool IsEmpty() Returns bool Remove(KeyValuePair<TKey, TValue>) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(KeyValuePair<TKey, TValue> item) Parameters item KeyValuePair<TKey, TValue> The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. Exceptions NotSupportedException The ICollection<T> is read-only. Remove(TKey) Removes the element with the specified key from the IDictionary<TKey, TValue>. public bool Remove(TKey key) Parameters key TKey The key of the element to remove. Returns bool true if the element is successfully removed; otherwise, false. This method also returns false if key was not found in the original IDictionary<TKey, TValue>. Exceptions ArgumentNullException key is null. NotSupportedException The IDictionary<TKey, TValue> is read-only. TryGetValue(TKey) public TValue TryGetValue(TKey key) Parameters key TKey Returns TValue TryGetValue(TKey, out TValue) Gets the value associated with the specified key. public bool TryGetValue(TKey key, out TValue value) Parameters key TKey The key whose value to get. value TValue When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns bool true if the object that implements IDictionary<TKey, TValue> contains an element with the specified key; otherwise, false. Exceptions ArgumentNullException key is null."
  },
  "api/Vintagestory.Common.DTable-2.html": {
    "href": "api/Vintagestory.Common.DTable-2.html",
    "title": "Class DTable<TKey, TValue> | VintageStory API",
    "keywords": "Class DTable<TKey, TValue> Namespace Vintagestory.Common Assembly VintagestoryAPI.dll A single object to allow the arrays in ConcurrentSmallDictionary to be replaced atomically. Keys, once entered in the keys array within a DTable, are invariable: if we ever need to remove a key we will create a new DTable public class DTable<TKey, TValue> Type Parameters TKey TValue Inheritance object DTable<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors DTable(int) public DTable(int capacity) Parameters capacity int DTable(DTable<TKey, TValue>, int) Special constructor which copies the old arrays and removes one entry public DTable(DTable<TKey, TValue> old, int toRemove) Parameters old DTable<TKey, TValue> toRemove int the index of the entry to remove DTable(DTable<TKey, TValue>, TKey, TValue) Special constructor which copies the old arrays and adds one new entry at the end - all will be atomic when the Dictionary replaces contents with the results of this public DTable(DTable<TKey, TValue> old, TKey key, TValue value) Parameters old DTable<TKey, TValue> key TKey value TValue DTable(TKey, TValue) Special constructor for a new array with a single, first, entry public DTable(TKey key, TValue value) Parameters key TKey value TValue Fields count public volatile int count Field Value int keys public readonly TKey[] keys Field Value TKey[] values public readonly TValue[] values Field Value TValue[]"
  },
  "api/Vintagestory.Common.html": {
    "href": "api/Vintagestory.Common.html",
    "title": "Namespace Vintagestory.Common | VintageStory API",
    "keywords": "Namespace Vintagestory.Common Classes ConcurrentSmallDictionary<TKey, TValue> Use like any IDictionary. Similar to a FastSmallDictionary, but this one is thread-safe for simultaneous reads and writes - will not throw a ConcurrentModificationException This also inherently behaves as an OrderedDictionary (though without the OrderedDictionary extension methods such as ValuesOrdered, those can be added in future if required) Low-lock: there is no lock or interlocked operation except when adding new keys or when removing entries Low-memory: and contains only a single null field, if it is empty Two simultaneous writes, with the same key, at the same time, on different threads: small chance of throwing an intentional ConcurrentModificationException if both have the same keys, otherwise it's virtually impossible for us to preserve the rule that the Dictionary holds exactly one entry per key DTable<TKey, TValue> A single object to allow the arrays in ConcurrentSmallDictionary to be replaced atomically. Keys, once entered in the keys array within a DTable, are invariable: if we ever need to remove a key we will create a new DTable"
  },
  "api/Vintagestory.Datastructures.NaturalShape.html": {
    "href": "api/Vintagestory.Datastructures.NaturalShape.html",
    "title": "Class NaturalShape | VintageStory API",
    "keywords": "Class NaturalShape Namespace Vintagestory.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class NaturalShape Inheritance object NaturalShape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors NaturalShape(IRandom) public NaturalShape(IRandom rand) Parameters rand IRandom Methods GetBySide(ShapeCell, int) public ShapeCell GetBySide(ShapeCell cell, int index) Parameters cell ShapeCell index int Returns ShapeCell GetOpenSides(Vec2i) public bool[] GetOpenSides(Vec2i c) Parameters c Vec2i Returns bool[] GetPositions() public List<Vec2i> GetPositions() Returns List<Vec2i> GetPositions(BlockPos) public List<BlockPos> GetPositions(BlockPos start) Parameters start BlockPos Returns List<BlockPos> Grow(int) public void Grow(int steps) Parameters steps int InitSquare(int, int) public void InitSquare(int sizeX, int sizeZ) Parameters sizeX int sizeZ int"
  },
  "api/Vintagestory.Datastructures.ShapeCell.html": {
    "href": "api/Vintagestory.Datastructures.ShapeCell.html",
    "title": "Class ShapeCell | VintageStory API",
    "keywords": "Class ShapeCell Namespace Vintagestory.Datastructures Assembly VintagestoryAPI.dll Open in GitHub public class ShapeCell Inheritance object ShapeCell Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Constructors ShapeCell(Vec2i, bool[]) public ShapeCell(Vec2i position, bool[] openSides) Parameters position Vec2i openSides bool[] Fields OpenSides public bool[] OpenSides Field Value bool[] Position public readonly Vec2i Position Field Value Vec2i"
  },
  "api/Vintagestory.Datastructures.html": {
    "href": "api/Vintagestory.Datastructures.html",
    "title": "Namespace Vintagestory.Datastructures | VintageStory API",
    "keywords": "Namespace Vintagestory.Datastructures Classes NaturalShape Open in GitHub ShapeCell Open in GitHub"
  },
  "api/Vintagestory.GameContent.IAcceptsDecor.html": {
    "href": "api/Vintagestory.GameContent.IAcceptsDecor.html",
    "title": "Interface IAcceptsDecor | VintageStory API",
    "keywords": "Interface IAcceptsDecor Namespace Vintagestory.GameContent Assembly VintagestoryAPI.dll public interface IAcceptsDecor Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods CanAccept(Block) bool CanAccept(Block decorBlock) Parameters decorBlock Block Returns bool GetDecor(BlockFacing) int GetDecor(BlockFacing face) Parameters face BlockFacing Returns int SetDecor(Block, BlockFacing) void SetDecor(Block decorBlock, BlockFacing face) Parameters decorBlock Block face BlockFacing"
  },
  "api/Vintagestory.GameContent.IWrenchOrientable.html": {
    "href": "api/Vintagestory.GameContent.IWrenchOrientable.html",
    "title": "Interface IWrenchOrientable | VintageStory API",
    "keywords": "Interface IWrenchOrientable Namespace Vintagestory.GameContent Assembly VintagestoryAPI.dll public interface IWrenchOrientable Extension Methods ObjectHandleExtensions.ToGcHandle(object) ObjectHandleExtensions.ToIntPtr(object) Methods Rotate(EntityAgent, BlockSelection, int) void Rotate(EntityAgent byEntity, BlockSelection blockSel, int dir) Parameters byEntity EntityAgent blockSel BlockSelection dir int"
  },
  "api/Vintagestory.GameContent.html": {
    "href": "api/Vintagestory.GameContent.html",
    "title": "Namespace Vintagestory.GameContent | VintageStory API",
    "keywords": "Namespace Vintagestory.GameContent Interfaces IAcceptsDecor IWrenchOrientable"
  },
  "api/Vintagestory.Util.SKColorExtensions.html": {
    "href": "api/Vintagestory.Util.SKColorExtensions.html",
    "title": "Class SKColorExtensions | VintageStory API",
    "keywords": "Class SKColorExtensions Namespace Vintagestory.Util Assembly VintagestoryAPI.dll Open in GitHub public static class SKColorExtensions Inheritance object SKColorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToArgb(SKColor) public static int ToArgb(this SKColor color) Parameters color SKColor Returns int"
  },
  "api/Vintagestory.Util.html": {
    "href": "api/Vintagestory.Util.html",
    "title": "Namespace Vintagestory.Util | VintageStory API",
    "keywords": "Namespace Vintagestory.Util Classes SKColorExtensions Open in GitHub"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the Vintage Story API Docs. | VintageStory API",
    "keywords": "Welcome to the Vintage Story API Docs. This is just a reference doc If you want to learn how to mod the game, check out the tutorials on the Official Vintage Story Wiki, this site merely acts as a reference documentation to look stuff up on. Reference doc for game version {version} Get started at: VintageStory.API.Client VintageStory.API.Common VintageStory.API.Server"
  }
}